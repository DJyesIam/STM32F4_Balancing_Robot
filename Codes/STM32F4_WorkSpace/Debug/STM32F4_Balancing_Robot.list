
STM32F4_Balancing_Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007510  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e8  080076b0  080076b0  000176b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a98  08007a98  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  08007a98  08007a98  00017a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007aa0  08007aa0  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007aa0  08007aa0  00017aa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007aa4  08007aa4  00017aa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08007aa8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  200001f0  08007c98  000201f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200003fc  08007c98  000203fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 13 .debug_info   000099b7  00000000  00000000  00020263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000256a  00000000  00000000  00029c1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000af0  00000000  00000000  0002c188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007f3  00000000  00000000  0002cc78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a12e  00000000  00000000  0002d46b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c828  00000000  00000000  00047599  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000948ad  00000000  00000000  00053dc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003be8  00000000  00000000  000e8670  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000ec258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007698 	.word	0x08007698

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	08007698 	.word	0x08007698

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_ldivmod>:
 8000bf8:	b97b      	cbnz	r3, 8000c1a <__aeabi_ldivmod+0x22>
 8000bfa:	b972      	cbnz	r2, 8000c1a <__aeabi_ldivmod+0x22>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bfbe      	ittt	lt
 8000c00:	2000      	movlt	r0, #0
 8000c02:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c06:	e006      	blt.n	8000c16 <__aeabi_ldivmod+0x1e>
 8000c08:	bf08      	it	eq
 8000c0a:	2800      	cmpeq	r0, #0
 8000c0c:	bf1c      	itt	ne
 8000c0e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c12:	f04f 30ff 	movne.w	r0, #4294967295
 8000c16:	f000 b9bb 	b.w	8000f90 <__aeabi_idiv0>
 8000c1a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c1e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c22:	2900      	cmp	r1, #0
 8000c24:	db09      	blt.n	8000c3a <__aeabi_ldivmod+0x42>
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	db1a      	blt.n	8000c60 <__aeabi_ldivmod+0x68>
 8000c2a:	f000 f84d 	bl	8000cc8 <__udivmoddi4>
 8000c2e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c36:	b004      	add	sp, #16
 8000c38:	4770      	bx	lr
 8000c3a:	4240      	negs	r0, r0
 8000c3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	db1b      	blt.n	8000c7c <__aeabi_ldivmod+0x84>
 8000c44:	f000 f840 	bl	8000cc8 <__udivmoddi4>
 8000c48:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c50:	b004      	add	sp, #16
 8000c52:	4240      	negs	r0, r0
 8000c54:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c58:	4252      	negs	r2, r2
 8000c5a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c5e:	4770      	bx	lr
 8000c60:	4252      	negs	r2, r2
 8000c62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c66:	f000 f82f 	bl	8000cc8 <__udivmoddi4>
 8000c6a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c72:	b004      	add	sp, #16
 8000c74:	4240      	negs	r0, r0
 8000c76:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7a:	4770      	bx	lr
 8000c7c:	4252      	negs	r2, r2
 8000c7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c82:	f000 f821 	bl	8000cc8 <__udivmoddi4>
 8000c86:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c8e:	b004      	add	sp, #16
 8000c90:	4252      	negs	r2, r2
 8000c92:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c96:	4770      	bx	lr

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b970 	b.w	8000f90 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	460d      	mov	r5, r1
 8000cd0:	4604      	mov	r4, r0
 8000cd2:	460f      	mov	r7, r1
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d14a      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd8:	428a      	cmp	r2, r1
 8000cda:	4694      	mov	ip, r2
 8000cdc:	d965      	bls.n	8000daa <__udivmoddi4+0xe2>
 8000cde:	fab2 f382 	clz	r3, r2
 8000ce2:	b143      	cbz	r3, 8000cf6 <__udivmoddi4+0x2e>
 8000ce4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ce8:	f1c3 0220 	rsb	r2, r3, #32
 8000cec:	409f      	lsls	r7, r3
 8000cee:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf2:	4317      	orrs	r7, r2
 8000cf4:	409c      	lsls	r4, r3
 8000cf6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cfa:	fa1f f58c 	uxth.w	r5, ip
 8000cfe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d02:	0c22      	lsrs	r2, r4, #16
 8000d04:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d08:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d0c:	fb01 f005 	mul.w	r0, r1, r5
 8000d10:	4290      	cmp	r0, r2
 8000d12:	d90a      	bls.n	8000d2a <__udivmoddi4+0x62>
 8000d14:	eb1c 0202 	adds.w	r2, ip, r2
 8000d18:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d1c:	f080 811c 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d20:	4290      	cmp	r0, r2
 8000d22:	f240 8119 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d26:	3902      	subs	r1, #2
 8000d28:	4462      	add	r2, ip
 8000d2a:	1a12      	subs	r2, r2, r0
 8000d2c:	b2a4      	uxth	r4, r4
 8000d2e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d32:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d36:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d3a:	fb00 f505 	mul.w	r5, r0, r5
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	d90a      	bls.n	8000d58 <__udivmoddi4+0x90>
 8000d42:	eb1c 0404 	adds.w	r4, ip, r4
 8000d46:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d4a:	f080 8107 	bcs.w	8000f5c <__udivmoddi4+0x294>
 8000d4e:	42a5      	cmp	r5, r4
 8000d50:	f240 8104 	bls.w	8000f5c <__udivmoddi4+0x294>
 8000d54:	4464      	add	r4, ip
 8000d56:	3802      	subs	r0, #2
 8000d58:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d5c:	1b64      	subs	r4, r4, r5
 8000d5e:	2100      	movs	r1, #0
 8000d60:	b11e      	cbz	r6, 8000d6a <__udivmoddi4+0xa2>
 8000d62:	40dc      	lsrs	r4, r3
 8000d64:	2300      	movs	r3, #0
 8000d66:	e9c6 4300 	strd	r4, r3, [r6]
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0xbc>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80ed 	beq.w	8000f52 <__udivmoddi4+0x28a>
 8000d78:	2100      	movs	r1, #0
 8000d7a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d84:	fab3 f183 	clz	r1, r3
 8000d88:	2900      	cmp	r1, #0
 8000d8a:	d149      	bne.n	8000e20 <__udivmoddi4+0x158>
 8000d8c:	42ab      	cmp	r3, r5
 8000d8e:	d302      	bcc.n	8000d96 <__udivmoddi4+0xce>
 8000d90:	4282      	cmp	r2, r0
 8000d92:	f200 80f8 	bhi.w	8000f86 <__udivmoddi4+0x2be>
 8000d96:	1a84      	subs	r4, r0, r2
 8000d98:	eb65 0203 	sbc.w	r2, r5, r3
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	4617      	mov	r7, r2
 8000da0:	2e00      	cmp	r6, #0
 8000da2:	d0e2      	beq.n	8000d6a <__udivmoddi4+0xa2>
 8000da4:	e9c6 4700 	strd	r4, r7, [r6]
 8000da8:	e7df      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000daa:	b902      	cbnz	r2, 8000dae <__udivmoddi4+0xe6>
 8000dac:	deff      	udf	#255	; 0xff
 8000dae:	fab2 f382 	clz	r3, r2
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	f040 8090 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000db8:	1a8a      	subs	r2, r1, r2
 8000dba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dbe:	fa1f fe8c 	uxth.w	lr, ip
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000dc8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dcc:	0c22      	lsrs	r2, r4, #16
 8000dce:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dd2:	fb0e f005 	mul.w	r0, lr, r5
 8000dd6:	4290      	cmp	r0, r2
 8000dd8:	d908      	bls.n	8000dec <__udivmoddi4+0x124>
 8000dda:	eb1c 0202 	adds.w	r2, ip, r2
 8000dde:	f105 38ff 	add.w	r8, r5, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4290      	cmp	r0, r2
 8000de6:	f200 80cb 	bhi.w	8000f80 <__udivmoddi4+0x2b8>
 8000dea:	4645      	mov	r5, r8
 8000dec:	1a12      	subs	r2, r2, r0
 8000dee:	b2a4      	uxth	r4, r4
 8000df0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000df4:	fb07 2210 	mls	r2, r7, r0, r2
 8000df8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dfc:	fb0e fe00 	mul.w	lr, lr, r0
 8000e00:	45a6      	cmp	lr, r4
 8000e02:	d908      	bls.n	8000e16 <__udivmoddi4+0x14e>
 8000e04:	eb1c 0404 	adds.w	r4, ip, r4
 8000e08:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e0c:	d202      	bcs.n	8000e14 <__udivmoddi4+0x14c>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f200 80bb 	bhi.w	8000f8a <__udivmoddi4+0x2c2>
 8000e14:	4610      	mov	r0, r2
 8000e16:	eba4 040e 	sub.w	r4, r4, lr
 8000e1a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e1e:	e79f      	b.n	8000d60 <__udivmoddi4+0x98>
 8000e20:	f1c1 0720 	rsb	r7, r1, #32
 8000e24:	408b      	lsls	r3, r1
 8000e26:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e2a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e2e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e32:	fa20 f307 	lsr.w	r3, r0, r7
 8000e36:	40fd      	lsrs	r5, r7
 8000e38:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e3c:	4323      	orrs	r3, r4
 8000e3e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	fb09 5518 	mls	r5, r9, r8, r5
 8000e4a:	0c1c      	lsrs	r4, r3, #16
 8000e4c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e50:	fb08 f50e 	mul.w	r5, r8, lr
 8000e54:	42a5      	cmp	r5, r4
 8000e56:	fa02 f201 	lsl.w	r2, r2, r1
 8000e5a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e68:	f080 8088 	bcs.w	8000f7c <__udivmoddi4+0x2b4>
 8000e6c:	42a5      	cmp	r5, r4
 8000e6e:	f240 8085 	bls.w	8000f7c <__udivmoddi4+0x2b4>
 8000e72:	f1a8 0802 	sub.w	r8, r8, #2
 8000e76:	4464      	add	r4, ip
 8000e78:	1b64      	subs	r4, r4, r5
 8000e7a:	b29d      	uxth	r5, r3
 8000e7c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e80:	fb09 4413 	mls	r4, r9, r3, r4
 8000e84:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e88:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e8c:	45a6      	cmp	lr, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1c 0404 	adds.w	r4, ip, r4
 8000e94:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e98:	d26c      	bcs.n	8000f74 <__udivmoddi4+0x2ac>
 8000e9a:	45a6      	cmp	lr, r4
 8000e9c:	d96a      	bls.n	8000f74 <__udivmoddi4+0x2ac>
 8000e9e:	3b02      	subs	r3, #2
 8000ea0:	4464      	add	r4, ip
 8000ea2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ea6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eaa:	eba4 040e 	sub.w	r4, r4, lr
 8000eae:	42ac      	cmp	r4, r5
 8000eb0:	46c8      	mov	r8, r9
 8000eb2:	46ae      	mov	lr, r5
 8000eb4:	d356      	bcc.n	8000f64 <__udivmoddi4+0x29c>
 8000eb6:	d053      	beq.n	8000f60 <__udivmoddi4+0x298>
 8000eb8:	b156      	cbz	r6, 8000ed0 <__udivmoddi4+0x208>
 8000eba:	ebb0 0208 	subs.w	r2, r0, r8
 8000ebe:	eb64 040e 	sbc.w	r4, r4, lr
 8000ec2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ec6:	40ca      	lsrs	r2, r1
 8000ec8:	40cc      	lsrs	r4, r1
 8000eca:	4317      	orrs	r7, r2
 8000ecc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed8:	f1c3 0120 	rsb	r1, r3, #32
 8000edc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ee0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ee4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ee8:	409d      	lsls	r5, r3
 8000eea:	432a      	orrs	r2, r5
 8000eec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef0:	fa1f fe8c 	uxth.w	lr, ip
 8000ef4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ef8:	fb07 1510 	mls	r5, r7, r0, r1
 8000efc:	0c11      	lsrs	r1, r2, #16
 8000efe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f02:	fb00 f50e 	mul.w	r5, r0, lr
 8000f06:	428d      	cmp	r5, r1
 8000f08:	fa04 f403 	lsl.w	r4, r4, r3
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x258>
 8000f0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f12:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f16:	d22f      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f18:	428d      	cmp	r5, r1
 8000f1a:	d92d      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	4461      	add	r1, ip
 8000f20:	1b49      	subs	r1, r1, r5
 8000f22:	b292      	uxth	r2, r2
 8000f24:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f28:	fb07 1115 	mls	r1, r7, r5, r1
 8000f2c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f30:	fb05 f10e 	mul.w	r1, r5, lr
 8000f34:	4291      	cmp	r1, r2
 8000f36:	d908      	bls.n	8000f4a <__udivmoddi4+0x282>
 8000f38:	eb1c 0202 	adds.w	r2, ip, r2
 8000f3c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f40:	d216      	bcs.n	8000f70 <__udivmoddi4+0x2a8>
 8000f42:	4291      	cmp	r1, r2
 8000f44:	d914      	bls.n	8000f70 <__udivmoddi4+0x2a8>
 8000f46:	3d02      	subs	r5, #2
 8000f48:	4462      	add	r2, ip
 8000f4a:	1a52      	subs	r2, r2, r1
 8000f4c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f50:	e738      	b.n	8000dc4 <__udivmoddi4+0xfc>
 8000f52:	4631      	mov	r1, r6
 8000f54:	4630      	mov	r0, r6
 8000f56:	e708      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000f58:	4639      	mov	r1, r7
 8000f5a:	e6e6      	b.n	8000d2a <__udivmoddi4+0x62>
 8000f5c:	4610      	mov	r0, r2
 8000f5e:	e6fb      	b.n	8000d58 <__udivmoddi4+0x90>
 8000f60:	4548      	cmp	r0, r9
 8000f62:	d2a9      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f64:	ebb9 0802 	subs.w	r8, r9, r2
 8000f68:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f6c:	3b01      	subs	r3, #1
 8000f6e:	e7a3      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f70:	4645      	mov	r5, r8
 8000f72:	e7ea      	b.n	8000f4a <__udivmoddi4+0x282>
 8000f74:	462b      	mov	r3, r5
 8000f76:	e794      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f78:	4640      	mov	r0, r8
 8000f7a:	e7d1      	b.n	8000f20 <__udivmoddi4+0x258>
 8000f7c:	46d0      	mov	r8, sl
 8000f7e:	e77b      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f80:	3d02      	subs	r5, #2
 8000f82:	4462      	add	r2, ip
 8000f84:	e732      	b.n	8000dec <__udivmoddi4+0x124>
 8000f86:	4608      	mov	r0, r1
 8000f88:	e70a      	b.n	8000da0 <__udivmoddi4+0xd8>
 8000f8a:	4464      	add	r4, ip
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	e742      	b.n	8000e16 <__udivmoddi4+0x14e>

08000f90 <__aeabi_idiv0>:
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f043 0201 	orr.w	r2, r3, #1
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	601a      	str	r2, [r3, #0]
}
 8000fa8:	bf00      	nop
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6a1a      	ldr	r2, [r3, #32]
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	431a      	orrs	r2, r3
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	621a      	str	r2, [r3, #32]
}
 8000fca:	bf00      	nop
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr

08000fd6 <DCmotor_Init>:

#include "DCmotor.h"
#include "stm32f4xx_ll_tim.h"


void DCmotor_Init(void){
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	af00      	add	r7, sp, #0
	LL_TIM_EnableCounter(TIM2);
 8000fda:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000fde:	f7ff ffd9 	bl	8000f94 <LL_TIM_EnableCounter>
	LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH1);
 8000fe2:	2101      	movs	r1, #1
 8000fe4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000fe8:	f7ff ffe4 	bl	8000fb4 <LL_TIM_CC_EnableChannel>
	LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH2);
 8000fec:	2110      	movs	r1, #16
 8000fee:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000ff2:	f7ff ffdf 	bl	8000fb4 <LL_TIM_CC_EnableChannel>
}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <DCmotor_Forward>:

void DCmotor_Forward(unsigned short PWM){
 8000ffa:	b480      	push	{r7}
 8000ffc:	b083      	sub	sp, #12
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	4603      	mov	r3, r0
 8001002:	80fb      	strh	r3, [r7, #6]
	TIM2->CCR1 = PWM;
 8001004:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001008:	88fb      	ldrh	r3, [r7, #6]
 800100a:	6353      	str	r3, [r2, #52]	; 0x34
	TIM2->CCR2 = 0;
 800100c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001010:	2200      	movs	r2, #0
 8001012:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <DCmotor_Backward>:

void DCmotor_Backward(unsigned short PWM){
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	80fb      	strh	r3, [r7, #6]
	TIM2->CCR1 = 0;
 800102a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800102e:	2200      	movs	r2, #0
 8001030:	635a      	str	r2, [r3, #52]	; 0x34
	TIM2->CCR2 = PWM;
 8001032:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001036:	88fb      	ldrh	r3, [r7, #6]
 8001038:	6393      	str	r3, [r2, #56]	; 0x38
}
 800103a:	bf00      	nop
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr

08001046 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 8001046:	b480      	push	{r7}
 8001048:	b083      	sub	sp, #12
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f043 0201 	orr.w	r2, r3, #1
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	601a      	str	r2, [r3, #0]
}
 800105a:	bf00      	nop
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr

08001066 <LL_I2C_IsActiveFlag_TXE>:
  * @rmtoll SR1          TXE           LL_I2C_IsActiveFlag_TXE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXE(I2C_TypeDef *I2Cx)
{
 8001066:	b480      	push	{r7}
 8001068:	b083      	sub	sp, #12
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_TXE) == (I2C_SR1_TXE));
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	695b      	ldr	r3, [r3, #20]
 8001072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001076:	2b80      	cmp	r3, #128	; 0x80
 8001078:	bf0c      	ite	eq
 800107a:	2301      	moveq	r3, #1
 800107c:	2300      	movne	r3, #0
 800107e:	b2db      	uxtb	r3, r3
}
 8001080:	4618      	mov	r0, r3
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <LL_I2C_IsActiveFlag_BTF>:
  * @rmtoll SR1          BTF           LL_I2C_IsActiveFlag_BTF
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_BTF(I2C_TypeDef *I2Cx)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_BTF) == (I2C_SR1_BTF));
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	695b      	ldr	r3, [r3, #20]
 8001098:	f003 0304 	and.w	r3, r3, #4
 800109c:	2b04      	cmp	r3, #4
 800109e:	bf0c      	ite	eq
 80010a0:	2301      	moveq	r3, #1
 80010a2:	2300      	movne	r3, #0
 80010a4:	b2db      	uxtb	r3, r3
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr

080010b2 <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll SR1          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(I2C_TypeDef *I2Cx)
{
 80010b2:	b480      	push	{r7}
 80010b4:	b083      	sub	sp, #12
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_RXNE) == (I2C_SR1_RXNE));
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	695b      	ldr	r3, [r3, #20]
 80010be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010c2:	2b40      	cmp	r3, #64	; 0x40
 80010c4:	bf0c      	ite	eq
 80010c6:	2301      	moveq	r3, #1
 80010c8:	2300      	movne	r3, #0
 80010ca:	b2db      	uxtb	r3, r3
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <LL_I2C_IsActiveFlag_SB>:
  * @rmtoll SR1          SB            LL_I2C_IsActiveFlag_SB
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_SB(I2C_TypeDef *I2Cx)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_SB) == (I2C_SR1_SB));
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	695b      	ldr	r3, [r3, #20]
 80010e4:	f003 0301 	and.w	r3, r3, #1
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	bf0c      	ite	eq
 80010ec:	2301      	moveq	r3, #1
 80010ee:	2300      	movne	r3, #0
 80010f0:	b2db      	uxtb	r3, r3
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr

080010fe <LL_I2C_IsActiveFlag_ADDR>:
  * @rmtoll SR1          ADDR          LL_I2C_IsActiveFlag_ADDR
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_ADDR(I2C_TypeDef *I2Cx)
{
 80010fe:	b480      	push	{r7}
 8001100:	b083      	sub	sp, #12
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_ADDR) == (I2C_SR1_ADDR));
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	695b      	ldr	r3, [r3, #20]
 800110a:	f003 0302 	and.w	r3, r3, #2
 800110e:	2b02      	cmp	r3, #2
 8001110:	bf0c      	ite	eq
 8001112:	2301      	moveq	r3, #1
 8001114:	2300      	movne	r3, #0
 8001116:	b2db      	uxtb	r3, r3
}
 8001118:	4618      	mov	r0, r3
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <LL_I2C_ClearFlag_ADDR>:
  * @rmtoll SR1          ADDR          LL_I2C_ClearFlag_ADDR
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_ADDR(I2C_TypeDef *I2Cx)
{
 8001124:	b480      	push	{r7}
 8001126:	b085      	sub	sp, #20
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = I2Cx->SR1;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	695b      	ldr	r3, [r3, #20]
 8001130:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8001132:	68fb      	ldr	r3, [r7, #12]
  tmpreg = I2Cx->SR2;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	699b      	ldr	r3, [r3, #24]
 8001138:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 800113a:	68fb      	ldr	r3, [r7, #12]
}
 800113c:	bf00      	nop
 800113e:	3714      	adds	r7, #20
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	431a      	orrs	r2, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	601a      	str	r2, [r3, #0]
}
 8001162:	bf00      	nop
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr

0800116e <LL_I2C_GenerateStartCondition>:
  * @rmtoll CR1          START         LL_I2C_GenerateStartCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStartCondition(I2C_TypeDef *I2Cx)
{
 800116e:	b480      	push	{r7}
 8001170:	b083      	sub	sp, #12
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_START);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	601a      	str	r2, [r3, #0]
}
 8001182:	bf00      	nop
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr

0800118e <LL_I2C_GenerateStopCondition>:
  * @rmtoll CR1          STOP          LL_I2C_GenerateStopCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStopCondition(I2C_TypeDef *I2Cx)
{
 800118e:	b480      	push	{r7}
 8001190:	b083      	sub	sp, #12
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_STOP);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	601a      	str	r2, [r3, #0]
}
 80011a2:	bf00      	nop
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr

080011ae <LL_I2C_ReceiveData8>:
  * @rmtoll DR           DR            LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x0 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 80011ae:	b480      	push	{r7}
 80011b0:	b083      	sub	sp, #12
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->DR, I2C_DR_DR));
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	691b      	ldr	r3, [r3, #16]
 80011ba:	b2db      	uxtb	r3, r3
}
 80011bc:	4618      	mov	r0, r3
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x0 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	460b      	mov	r3, r1
 80011d2:	70fb      	strb	r3, [r7, #3]
  MODIFY_REG(I2Cx->DR, I2C_DR_DR, Data);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	691b      	ldr	r3, [r3, #16]
 80011d8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80011dc:	78fb      	ldrb	r3, [r7, #3]
 80011de:	431a      	orrs	r2, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	611a      	str	r2, [r3, #16]
}
 80011e4:	bf00      	nop
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <MPU6050_Init>:

MPU6050 IMU;

int curTime, prevTime, dt;

void MPU6050_Init(void){
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
	LL_I2C_Enable(I2C1);
 80011f4:	4821      	ldr	r0, [pc, #132]	; (800127c <MPU6050_Init+0x8c>)
 80011f6:	f7ff ff26 	bl	8001046 <LL_I2C_Enable>

	LL_I2C_GenerateStartCondition(I2C1);
 80011fa:	4820      	ldr	r0, [pc, #128]	; (800127c <MPU6050_Init+0x8c>)
 80011fc:	f7ff ffb7 	bl	800116e <LL_I2C_GenerateStartCondition>
	while(!LL_I2C_IsActiveFlag_SB(I2C1));
 8001200:	bf00      	nop
 8001202:	481e      	ldr	r0, [pc, #120]	; (800127c <MPU6050_Init+0x8c>)
 8001204:	f7ff ff68 	bl	80010d8 <LL_I2C_IsActiveFlag_SB>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d0f9      	beq.n	8001202 <MPU6050_Init+0x12>

	LL_I2C_TransmitData8(I2C1, 0x68 << 1);	// MPU6050 Address(Write Mode)
 800120e:	21d0      	movs	r1, #208	; 0xd0
 8001210:	481a      	ldr	r0, [pc, #104]	; (800127c <MPU6050_Init+0x8c>)
 8001212:	f7ff ffd9 	bl	80011c8 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_ADDR(I2C1));
 8001216:	bf00      	nop
 8001218:	4818      	ldr	r0, [pc, #96]	; (800127c <MPU6050_Init+0x8c>)
 800121a:	f7ff ff70 	bl	80010fe <LL_I2C_IsActiveFlag_ADDR>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d0f9      	beq.n	8001218 <MPU6050_Init+0x28>
	while(!LL_I2C_IsActiveFlag_TXE(I2C1));
 8001224:	bf00      	nop
 8001226:	4815      	ldr	r0, [pc, #84]	; (800127c <MPU6050_Init+0x8c>)
 8001228:	f7ff ff1d 	bl	8001066 <LL_I2C_IsActiveFlag_TXE>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d0f9      	beq.n	8001226 <MPU6050_Init+0x36>
	LL_I2C_ClearFlag_ADDR(I2C1);
 8001232:	4812      	ldr	r0, [pc, #72]	; (800127c <MPU6050_Init+0x8c>)
 8001234:	f7ff ff76 	bl	8001124 <LL_I2C_ClearFlag_ADDR>

	LL_I2C_TransmitData8(I2C1, 0x6B);		// PWR_MGMT_1 Register
 8001238:	216b      	movs	r1, #107	; 0x6b
 800123a:	4810      	ldr	r0, [pc, #64]	; (800127c <MPU6050_Init+0x8c>)
 800123c:	f7ff ffc4 	bl	80011c8 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_TXE(I2C1));
 8001240:	bf00      	nop
 8001242:	480e      	ldr	r0, [pc, #56]	; (800127c <MPU6050_Init+0x8c>)
 8001244:	f7ff ff0f 	bl	8001066 <LL_I2C_IsActiveFlag_TXE>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d0f9      	beq.n	8001242 <MPU6050_Init+0x52>

	LL_I2C_TransmitData8(I2C1, 0x00);		// Write 0x00(SLEEP 0)
 800124e:	2100      	movs	r1, #0
 8001250:	480a      	ldr	r0, [pc, #40]	; (800127c <MPU6050_Init+0x8c>)
 8001252:	f7ff ffb9 	bl	80011c8 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_TXE(I2C1));
 8001256:	bf00      	nop
 8001258:	4808      	ldr	r0, [pc, #32]	; (800127c <MPU6050_Init+0x8c>)
 800125a:	f7ff ff04 	bl	8001066 <LL_I2C_IsActiveFlag_TXE>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d0f9      	beq.n	8001258 <MPU6050_Init+0x68>
	while(!LL_I2C_IsActiveFlag_BTF(I2C1));
 8001264:	bf00      	nop
 8001266:	4805      	ldr	r0, [pc, #20]	; (800127c <MPU6050_Init+0x8c>)
 8001268:	f7ff ff10 	bl	800108c <LL_I2C_IsActiveFlag_BTF>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d0f9      	beq.n	8001266 <MPU6050_Init+0x76>

	LL_I2C_GenerateStopCondition(I2C1);
 8001272:	4802      	ldr	r0, [pc, #8]	; (800127c <MPU6050_Init+0x8c>)
 8001274:	f7ff ff8b 	bl	800118e <LL_I2C_GenerateStopCondition>
}
 8001278:	bf00      	nop
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40005400 	.word	0x40005400

08001280 <MPU6050_Calibration>:

void MPU6050_Calibration(void){
 8001280:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001284:	b0a0      	sub	sp, #128	; 0x80
 8001286:	af00      	add	r7, sp, #0
	IMU.ax_offset = 0;
 8001288:	4a82      	ldr	r2, [pc, #520]	; (8001494 <MPU6050_Calibration+0x214>)
 800128a:	2300      	movs	r3, #0
 800128c:	8193      	strh	r3, [r2, #12]
	IMU.ay_offset = 0;
 800128e:	4a81      	ldr	r2, [pc, #516]	; (8001494 <MPU6050_Calibration+0x214>)
 8001290:	2300      	movs	r3, #0
 8001292:	81d3      	strh	r3, [r2, #14]
	IMU.az_offset = 0;
 8001294:	4a7f      	ldr	r2, [pc, #508]	; (8001494 <MPU6050_Calibration+0x214>)
 8001296:	2300      	movs	r3, #0
 8001298:	8213      	strh	r3, [r2, #16]
	IMU.gx_offset = 0;
 800129a:	4a7e      	ldr	r2, [pc, #504]	; (8001494 <MPU6050_Calibration+0x214>)
 800129c:	2300      	movs	r3, #0
 800129e:	8253      	strh	r3, [r2, #18]
	IMU.gy_offset = 0;
 80012a0:	4a7c      	ldr	r2, [pc, #496]	; (8001494 <MPU6050_Calibration+0x214>)
 80012a2:	2300      	movs	r3, #0
 80012a4:	8293      	strh	r3, [r2, #20]
	IMU.gz_offset = 0;
 80012a6:	4a7b      	ldr	r2, [pc, #492]	; (8001494 <MPU6050_Calibration+0x214>)
 80012a8:	2300      	movs	r3, #0
 80012aa:	82d3      	strh	r3, [r2, #22]

	long long ax_offset_sum = 0;
 80012ac:	f04f 0200 	mov.w	r2, #0
 80012b0:	f04f 0300 	mov.w	r3, #0
 80012b4:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	long long ay_offset_sum = 0;
 80012b8:	f04f 0200 	mov.w	r2, #0
 80012bc:	f04f 0300 	mov.w	r3, #0
 80012c0:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	long long az_offset_sum = 0;
 80012c4:	f04f 0200 	mov.w	r2, #0
 80012c8:	f04f 0300 	mov.w	r3, #0
 80012cc:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	long long gx_offset_sum = 0;
 80012d0:	f04f 0200 	mov.w	r2, #0
 80012d4:	f04f 0300 	mov.w	r3, #0
 80012d8:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	long long gy_offset_sum = 0;
 80012dc:	f04f 0200 	mov.w	r2, #0
 80012e0:	f04f 0300 	mov.w	r3, #0
 80012e4:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	long long gz_offset_sum = 0;
 80012e8:	f04f 0200 	mov.w	r2, #0
 80012ec:	f04f 0300 	mov.w	r3, #0
 80012f0:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	for (int i = 0; i < 1000; i++){
 80012f4:	2300      	movs	r3, #0
 80012f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80012f8:	e075      	b.n	80013e6 <MPU6050_Calibration+0x166>
		MPU6050_GetAccel();
 80012fa:	f000 f937 	bl	800156c <MPU6050_GetAccel>
		MPU6050_GetGyro();
 80012fe:	f000 f98f 	bl	8001620 <MPU6050_GetGyro>

		ax_offset_sum += IMU.ax;
 8001302:	4b64      	ldr	r3, [pc, #400]	; (8001494 <MPU6050_Calibration+0x214>)
 8001304:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001308:	b21b      	sxth	r3, r3
 800130a:	17da      	asrs	r2, r3, #31
 800130c:	643b      	str	r3, [r7, #64]	; 0x40
 800130e:	647a      	str	r2, [r7, #68]	; 0x44
 8001310:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8001314:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001316:	1851      	adds	r1, r2, r1
 8001318:	6239      	str	r1, [r7, #32]
 800131a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800131c:	414b      	adcs	r3, r1
 800131e:	627b      	str	r3, [r7, #36]	; 0x24
 8001320:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001324:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		ay_offset_sum += IMU.ay;
 8001328:	4b5a      	ldr	r3, [pc, #360]	; (8001494 <MPU6050_Calibration+0x214>)
 800132a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800132e:	b21b      	sxth	r3, r3
 8001330:	17da      	asrs	r2, r3, #31
 8001332:	63bb      	str	r3, [r7, #56]	; 0x38
 8001334:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001336:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800133a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800133c:	1851      	adds	r1, r2, r1
 800133e:	61b9      	str	r1, [r7, #24]
 8001340:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001342:	414b      	adcs	r3, r1
 8001344:	61fb      	str	r3, [r7, #28]
 8001346:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800134a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
		az_offset_sum += IMU.az + 16384;
 800134e:	4b51      	ldr	r3, [pc, #324]	; (8001494 <MPU6050_Calibration+0x214>)
 8001350:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001354:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001358:	17da      	asrs	r2, r3, #31
 800135a:	633b      	str	r3, [r7, #48]	; 0x30
 800135c:	637a      	str	r2, [r7, #52]	; 0x34
 800135e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001362:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001364:	1851      	adds	r1, r2, r1
 8001366:	6139      	str	r1, [r7, #16]
 8001368:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800136a:	414b      	adcs	r3, r1
 800136c:	617b      	str	r3, [r7, #20]
 800136e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001372:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
		gx_offset_sum += IMU.gx;
 8001376:	4b47      	ldr	r3, [pc, #284]	; (8001494 <MPU6050_Calibration+0x214>)
 8001378:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800137c:	b21b      	sxth	r3, r3
 800137e:	17da      	asrs	r2, r3, #31
 8001380:	62bb      	str	r3, [r7, #40]	; 0x28
 8001382:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001384:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001388:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800138a:	1851      	adds	r1, r2, r1
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001390:	414b      	adcs	r3, r1
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001398:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
		gy_offset_sum += IMU.gy;
 800139c:	4b3d      	ldr	r3, [pc, #244]	; (8001494 <MPU6050_Calibration+0x214>)
 800139e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80013a2:	b21b      	sxth	r3, r3
 80013a4:	17da      	asrs	r2, r3, #31
 80013a6:	469a      	mov	sl, r3
 80013a8:	4693      	mov	fp, r2
 80013aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80013ae:	eb12 010a 	adds.w	r1, r2, sl
 80013b2:	6039      	str	r1, [r7, #0]
 80013b4:	eb43 030b 	adc.w	r3, r3, fp
 80013b8:	607b      	str	r3, [r7, #4]
 80013ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80013be:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
		gz_offset_sum += IMU.gz;
 80013c2:	4b34      	ldr	r3, [pc, #208]	; (8001494 <MPU6050_Calibration+0x214>)
 80013c4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80013c8:	b21b      	sxth	r3, r3
 80013ca:	17da      	asrs	r2, r3, #31
 80013cc:	461c      	mov	r4, r3
 80013ce:	4615      	mov	r5, r2
 80013d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80013d4:	eb12 0804 	adds.w	r8, r2, r4
 80013d8:	eb43 0905 	adc.w	r9, r3, r5
 80013dc:	e9c7 8914 	strd	r8, r9, [r7, #80]	; 0x50
	for (int i = 0; i < 1000; i++){
 80013e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013e2:	3301      	adds	r3, #1
 80013e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80013e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013ec:	db85      	blt.n	80012fa <MPU6050_Calibration+0x7a>
	}

	IMU.ax_offset = ax_offset_sum / 1000;
 80013ee:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80013f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013f6:	f04f 0300 	mov.w	r3, #0
 80013fa:	f7ff fbfd 	bl	8000bf8 <__aeabi_ldivmod>
 80013fe:	4602      	mov	r2, r0
 8001400:	460b      	mov	r3, r1
 8001402:	b212      	sxth	r2, r2
 8001404:	4b23      	ldr	r3, [pc, #140]	; (8001494 <MPU6050_Calibration+0x214>)
 8001406:	819a      	strh	r2, [r3, #12]
	IMU.ay_offset = ay_offset_sum / 1000;
 8001408:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800140c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001410:	f04f 0300 	mov.w	r3, #0
 8001414:	f7ff fbf0 	bl	8000bf8 <__aeabi_ldivmod>
 8001418:	4602      	mov	r2, r0
 800141a:	460b      	mov	r3, r1
 800141c:	b212      	sxth	r2, r2
 800141e:	4b1d      	ldr	r3, [pc, #116]	; (8001494 <MPU6050_Calibration+0x214>)
 8001420:	81da      	strh	r2, [r3, #14]
	IMU.az_offset = az_offset_sum / 1000;
 8001422:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001426:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800142a:	f04f 0300 	mov.w	r3, #0
 800142e:	f7ff fbe3 	bl	8000bf8 <__aeabi_ldivmod>
 8001432:	4602      	mov	r2, r0
 8001434:	460b      	mov	r3, r1
 8001436:	b212      	sxth	r2, r2
 8001438:	4b16      	ldr	r3, [pc, #88]	; (8001494 <MPU6050_Calibration+0x214>)
 800143a:	821a      	strh	r2, [r3, #16]
	IMU.gx_offset = gx_offset_sum / 1000;
 800143c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001440:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001444:	f04f 0300 	mov.w	r3, #0
 8001448:	f7ff fbd6 	bl	8000bf8 <__aeabi_ldivmod>
 800144c:	4602      	mov	r2, r0
 800144e:	460b      	mov	r3, r1
 8001450:	b212      	sxth	r2, r2
 8001452:	4b10      	ldr	r3, [pc, #64]	; (8001494 <MPU6050_Calibration+0x214>)
 8001454:	825a      	strh	r2, [r3, #18]
	IMU.gy_offset = gy_offset_sum / 1000;
 8001456:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800145a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800145e:	f04f 0300 	mov.w	r3, #0
 8001462:	f7ff fbc9 	bl	8000bf8 <__aeabi_ldivmod>
 8001466:	4602      	mov	r2, r0
 8001468:	460b      	mov	r3, r1
 800146a:	b212      	sxth	r2, r2
 800146c:	4b09      	ldr	r3, [pc, #36]	; (8001494 <MPU6050_Calibration+0x214>)
 800146e:	829a      	strh	r2, [r3, #20]
	IMU.gz_offset = gz_offset_sum / 1000;
 8001470:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001474:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001478:	f04f 0300 	mov.w	r3, #0
 800147c:	f7ff fbbc 	bl	8000bf8 <__aeabi_ldivmod>
 8001480:	4602      	mov	r2, r0
 8001482:	460b      	mov	r3, r1
 8001484:	b212      	sxth	r2, r2
 8001486:	4b03      	ldr	r3, [pc, #12]	; (8001494 <MPU6050_Calibration+0x214>)
 8001488:	82da      	strh	r2, [r3, #22]
}
 800148a:	bf00      	nop
 800148c:	3780      	adds	r7, #128	; 0x80
 800148e:	46bd      	mov	sp, r7
 8001490:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001494:	20000210 	.word	0x20000210

08001498 <MPU6050_ReceiveData>:
	while(!LL_I2C_IsActiveFlag_BTF(I2C1));

	LL_I2C_GenerateStopCondition(I2C1);
}

unsigned char MPU6050_ReceiveData(unsigned char Address){
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	71fb      	strb	r3, [r7, #7]

	LL_I2C_GenerateStartCondition(I2C1);
 80014a2:	4831      	ldr	r0, [pc, #196]	; (8001568 <MPU6050_ReceiveData+0xd0>)
 80014a4:	f7ff fe63 	bl	800116e <LL_I2C_GenerateStartCondition>
	while(!LL_I2C_IsActiveFlag_SB(I2C1));
 80014a8:	bf00      	nop
 80014aa:	482f      	ldr	r0, [pc, #188]	; (8001568 <MPU6050_ReceiveData+0xd0>)
 80014ac:	f7ff fe14 	bl	80010d8 <LL_I2C_IsActiveFlag_SB>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d0f9      	beq.n	80014aa <MPU6050_ReceiveData+0x12>

	LL_I2C_TransmitData8(I2C1, 0x68 << 1);
 80014b6:	21d0      	movs	r1, #208	; 0xd0
 80014b8:	482b      	ldr	r0, [pc, #172]	; (8001568 <MPU6050_ReceiveData+0xd0>)
 80014ba:	f7ff fe85 	bl	80011c8 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_ADDR(I2C1));
 80014be:	bf00      	nop
 80014c0:	4829      	ldr	r0, [pc, #164]	; (8001568 <MPU6050_ReceiveData+0xd0>)
 80014c2:	f7ff fe1c 	bl	80010fe <LL_I2C_IsActiveFlag_ADDR>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d0f9      	beq.n	80014c0 <MPU6050_ReceiveData+0x28>
	while(!LL_I2C_IsActiveFlag_TXE(I2C1));
 80014cc:	bf00      	nop
 80014ce:	4826      	ldr	r0, [pc, #152]	; (8001568 <MPU6050_ReceiveData+0xd0>)
 80014d0:	f7ff fdc9 	bl	8001066 <LL_I2C_IsActiveFlag_TXE>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d0f9      	beq.n	80014ce <MPU6050_ReceiveData+0x36>
	LL_I2C_ClearFlag_ADDR(I2C1);
 80014da:	4823      	ldr	r0, [pc, #140]	; (8001568 <MPU6050_ReceiveData+0xd0>)
 80014dc:	f7ff fe22 	bl	8001124 <LL_I2C_ClearFlag_ADDR>

	LL_I2C_TransmitData8(I2C1, Address);
 80014e0:	79fb      	ldrb	r3, [r7, #7]
 80014e2:	4619      	mov	r1, r3
 80014e4:	4820      	ldr	r0, [pc, #128]	; (8001568 <MPU6050_ReceiveData+0xd0>)
 80014e6:	f7ff fe6f 	bl	80011c8 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_TXE(I2C1));
 80014ea:	bf00      	nop
 80014ec:	481e      	ldr	r0, [pc, #120]	; (8001568 <MPU6050_ReceiveData+0xd0>)
 80014ee:	f7ff fdba 	bl	8001066 <LL_I2C_IsActiveFlag_TXE>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d0f9      	beq.n	80014ec <MPU6050_ReceiveData+0x54>
	while(!LL_I2C_IsActiveFlag_BTF(I2C1));
 80014f8:	bf00      	nop
 80014fa:	481b      	ldr	r0, [pc, #108]	; (8001568 <MPU6050_ReceiveData+0xd0>)
 80014fc:	f7ff fdc6 	bl	800108c <LL_I2C_IsActiveFlag_BTF>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d0f9      	beq.n	80014fa <MPU6050_ReceiveData+0x62>

	LL_I2C_GenerateStartCondition(I2C1);
 8001506:	4818      	ldr	r0, [pc, #96]	; (8001568 <MPU6050_ReceiveData+0xd0>)
 8001508:	f7ff fe31 	bl	800116e <LL_I2C_GenerateStartCondition>
	while(!LL_I2C_IsActiveFlag_SB(I2C1));
 800150c:	bf00      	nop
 800150e:	4816      	ldr	r0, [pc, #88]	; (8001568 <MPU6050_ReceiveData+0xd0>)
 8001510:	f7ff fde2 	bl	80010d8 <LL_I2C_IsActiveFlag_SB>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d0f9      	beq.n	800150e <MPU6050_ReceiveData+0x76>

	LL_I2C_TransmitData8(I2C1, (0x68 << 1 | 0x01));
 800151a:	21d1      	movs	r1, #209	; 0xd1
 800151c:	4812      	ldr	r0, [pc, #72]	; (8001568 <MPU6050_ReceiveData+0xd0>)
 800151e:	f7ff fe53 	bl	80011c8 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_ADDR(I2C1));
 8001522:	bf00      	nop
 8001524:	4810      	ldr	r0, [pc, #64]	; (8001568 <MPU6050_ReceiveData+0xd0>)
 8001526:	f7ff fdea 	bl	80010fe <LL_I2C_IsActiveFlag_ADDR>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d0f9      	beq.n	8001524 <MPU6050_ReceiveData+0x8c>
	LL_I2C_ClearFlag_ADDR(I2C1);
 8001530:	480d      	ldr	r0, [pc, #52]	; (8001568 <MPU6050_ReceiveData+0xd0>)
 8001532:	f7ff fdf7 	bl	8001124 <LL_I2C_ClearFlag_ADDR>

	while(!LL_I2C_IsActiveFlag_RXNE(I2C1));
 8001536:	bf00      	nop
 8001538:	480b      	ldr	r0, [pc, #44]	; (8001568 <MPU6050_ReceiveData+0xd0>)
 800153a:	f7ff fdba 	bl	80010b2 <LL_I2C_IsActiveFlag_RXNE>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d0f9      	beq.n	8001538 <MPU6050_ReceiveData+0xa0>
	unsigned char Data = LL_I2C_ReceiveData8(I2C1);
 8001544:	4808      	ldr	r0, [pc, #32]	; (8001568 <MPU6050_ReceiveData+0xd0>)
 8001546:	f7ff fe32 	bl	80011ae <LL_I2C_ReceiveData8>
 800154a:	4603      	mov	r3, r0
 800154c:	73fb      	strb	r3, [r7, #15]
	LL_I2C_AcknowledgeNextData(I2C1, LL_I2C_NACK);
 800154e:	2100      	movs	r1, #0
 8001550:	4805      	ldr	r0, [pc, #20]	; (8001568 <MPU6050_ReceiveData+0xd0>)
 8001552:	f7ff fdf9 	bl	8001148 <LL_I2C_AcknowledgeNextData>

	LL_I2C_GenerateStopCondition(I2C1);
 8001556:	4804      	ldr	r0, [pc, #16]	; (8001568 <MPU6050_ReceiveData+0xd0>)
 8001558:	f7ff fe19 	bl	800118e <LL_I2C_GenerateStopCondition>

	return Data;
 800155c:	7bfb      	ldrb	r3, [r7, #15]
}
 800155e:	4618      	mov	r0, r3
 8001560:	3710      	adds	r7, #16
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40005400 	.word	0x40005400

0800156c <MPU6050_GetAccel>:

void MPU6050_GetAccel(void){
 800156c:	b598      	push	{r3, r4, r7, lr}
 800156e:	af00      	add	r7, sp, #0
	IMU.ax = MPU6050_ReceiveData(0x3B) << 8 | MPU6050_ReceiveData(0x3C);
 8001570:	203b      	movs	r0, #59	; 0x3b
 8001572:	f7ff ff91 	bl	8001498 <MPU6050_ReceiveData>
 8001576:	4603      	mov	r3, r0
 8001578:	021b      	lsls	r3, r3, #8
 800157a:	b21c      	sxth	r4, r3
 800157c:	203c      	movs	r0, #60	; 0x3c
 800157e:	f7ff ff8b 	bl	8001498 <MPU6050_ReceiveData>
 8001582:	4603      	mov	r3, r0
 8001584:	b21b      	sxth	r3, r3
 8001586:	4323      	orrs	r3, r4
 8001588:	b21a      	sxth	r2, r3
 800158a:	4b24      	ldr	r3, [pc, #144]	; (800161c <MPU6050_GetAccel+0xb0>)
 800158c:	801a      	strh	r2, [r3, #0]
	IMU.ay = MPU6050_ReceiveData(0x3D) << 8 | MPU6050_ReceiveData(0x3E);
 800158e:	203d      	movs	r0, #61	; 0x3d
 8001590:	f7ff ff82 	bl	8001498 <MPU6050_ReceiveData>
 8001594:	4603      	mov	r3, r0
 8001596:	021b      	lsls	r3, r3, #8
 8001598:	b21c      	sxth	r4, r3
 800159a:	203e      	movs	r0, #62	; 0x3e
 800159c:	f7ff ff7c 	bl	8001498 <MPU6050_ReceiveData>
 80015a0:	4603      	mov	r3, r0
 80015a2:	b21b      	sxth	r3, r3
 80015a4:	4323      	orrs	r3, r4
 80015a6:	b21a      	sxth	r2, r3
 80015a8:	4b1c      	ldr	r3, [pc, #112]	; (800161c <MPU6050_GetAccel+0xb0>)
 80015aa:	805a      	strh	r2, [r3, #2]
	IMU.az = MPU6050_ReceiveData(0x3F) << 8 | MPU6050_ReceiveData(0x40);
 80015ac:	203f      	movs	r0, #63	; 0x3f
 80015ae:	f7ff ff73 	bl	8001498 <MPU6050_ReceiveData>
 80015b2:	4603      	mov	r3, r0
 80015b4:	021b      	lsls	r3, r3, #8
 80015b6:	b21c      	sxth	r4, r3
 80015b8:	2040      	movs	r0, #64	; 0x40
 80015ba:	f7ff ff6d 	bl	8001498 <MPU6050_ReceiveData>
 80015be:	4603      	mov	r3, r0
 80015c0:	b21b      	sxth	r3, r3
 80015c2:	4323      	orrs	r3, r4
 80015c4:	b21a      	sxth	r2, r3
 80015c6:	4b15      	ldr	r3, [pc, #84]	; (800161c <MPU6050_GetAccel+0xb0>)
 80015c8:	809a      	strh	r2, [r3, #4]

	IMU.ax -= IMU.ax_offset;
 80015ca:	4b14      	ldr	r3, [pc, #80]	; (800161c <MPU6050_GetAccel+0xb0>)
 80015cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015d0:	b29a      	uxth	r2, r3
 80015d2:	4b12      	ldr	r3, [pc, #72]	; (800161c <MPU6050_GetAccel+0xb0>)
 80015d4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80015d8:	b29b      	uxth	r3, r3
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	b29b      	uxth	r3, r3
 80015de:	b21a      	sxth	r2, r3
 80015e0:	4b0e      	ldr	r3, [pc, #56]	; (800161c <MPU6050_GetAccel+0xb0>)
 80015e2:	801a      	strh	r2, [r3, #0]
	IMU.ay -= IMU.ay_offset;
 80015e4:	4b0d      	ldr	r3, [pc, #52]	; (800161c <MPU6050_GetAccel+0xb0>)
 80015e6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80015ea:	b29a      	uxth	r2, r3
 80015ec:	4b0b      	ldr	r3, [pc, #44]	; (800161c <MPU6050_GetAccel+0xb0>)
 80015ee:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80015f2:	b29b      	uxth	r3, r3
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	b21a      	sxth	r2, r3
 80015fa:	4b08      	ldr	r3, [pc, #32]	; (800161c <MPU6050_GetAccel+0xb0>)
 80015fc:	805a      	strh	r2, [r3, #2]
	IMU.az -= IMU.az_offset;
 80015fe:	4b07      	ldr	r3, [pc, #28]	; (800161c <MPU6050_GetAccel+0xb0>)
 8001600:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001604:	b29a      	uxth	r2, r3
 8001606:	4b05      	ldr	r3, [pc, #20]	; (800161c <MPU6050_GetAccel+0xb0>)
 8001608:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800160c:	b29b      	uxth	r3, r3
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	b29b      	uxth	r3, r3
 8001612:	b21a      	sxth	r2, r3
 8001614:	4b01      	ldr	r3, [pc, #4]	; (800161c <MPU6050_GetAccel+0xb0>)
 8001616:	809a      	strh	r2, [r3, #4]
}
 8001618:	bf00      	nop
 800161a:	bd98      	pop	{r3, r4, r7, pc}
 800161c:	20000210 	.word	0x20000210

08001620 <MPU6050_GetGyro>:

void MPU6050_GetGyro(void){
 8001620:	b598      	push	{r3, r4, r7, lr}
 8001622:	af00      	add	r7, sp, #0
	IMU.gx = MPU6050_ReceiveData(0x43) << 8 | MPU6050_ReceiveData(0x44);
 8001624:	2043      	movs	r0, #67	; 0x43
 8001626:	f7ff ff37 	bl	8001498 <MPU6050_ReceiveData>
 800162a:	4603      	mov	r3, r0
 800162c:	021b      	lsls	r3, r3, #8
 800162e:	b21c      	sxth	r4, r3
 8001630:	2044      	movs	r0, #68	; 0x44
 8001632:	f7ff ff31 	bl	8001498 <MPU6050_ReceiveData>
 8001636:	4603      	mov	r3, r0
 8001638:	b21b      	sxth	r3, r3
 800163a:	4323      	orrs	r3, r4
 800163c:	b21a      	sxth	r2, r3
 800163e:	4b24      	ldr	r3, [pc, #144]	; (80016d0 <MPU6050_GetGyro+0xb0>)
 8001640:	80da      	strh	r2, [r3, #6]
	IMU.gy = MPU6050_ReceiveData(0x45) << 8 | MPU6050_ReceiveData(0x46);
 8001642:	2045      	movs	r0, #69	; 0x45
 8001644:	f7ff ff28 	bl	8001498 <MPU6050_ReceiveData>
 8001648:	4603      	mov	r3, r0
 800164a:	021b      	lsls	r3, r3, #8
 800164c:	b21c      	sxth	r4, r3
 800164e:	2046      	movs	r0, #70	; 0x46
 8001650:	f7ff ff22 	bl	8001498 <MPU6050_ReceiveData>
 8001654:	4603      	mov	r3, r0
 8001656:	b21b      	sxth	r3, r3
 8001658:	4323      	orrs	r3, r4
 800165a:	b21a      	sxth	r2, r3
 800165c:	4b1c      	ldr	r3, [pc, #112]	; (80016d0 <MPU6050_GetGyro+0xb0>)
 800165e:	811a      	strh	r2, [r3, #8]
	IMU.gz = MPU6050_ReceiveData(0x47) << 8 | MPU6050_ReceiveData(0x48);
 8001660:	2047      	movs	r0, #71	; 0x47
 8001662:	f7ff ff19 	bl	8001498 <MPU6050_ReceiveData>
 8001666:	4603      	mov	r3, r0
 8001668:	021b      	lsls	r3, r3, #8
 800166a:	b21c      	sxth	r4, r3
 800166c:	2048      	movs	r0, #72	; 0x48
 800166e:	f7ff ff13 	bl	8001498 <MPU6050_ReceiveData>
 8001672:	4603      	mov	r3, r0
 8001674:	b21b      	sxth	r3, r3
 8001676:	4323      	orrs	r3, r4
 8001678:	b21a      	sxth	r2, r3
 800167a:	4b15      	ldr	r3, [pc, #84]	; (80016d0 <MPU6050_GetGyro+0xb0>)
 800167c:	815a      	strh	r2, [r3, #10]

	IMU.gx -= IMU.gx_offset;
 800167e:	4b14      	ldr	r3, [pc, #80]	; (80016d0 <MPU6050_GetGyro+0xb0>)
 8001680:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001684:	b29a      	uxth	r2, r3
 8001686:	4b12      	ldr	r3, [pc, #72]	; (80016d0 <MPU6050_GetGyro+0xb0>)
 8001688:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800168c:	b29b      	uxth	r3, r3
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	b29b      	uxth	r3, r3
 8001692:	b21a      	sxth	r2, r3
 8001694:	4b0e      	ldr	r3, [pc, #56]	; (80016d0 <MPU6050_GetGyro+0xb0>)
 8001696:	80da      	strh	r2, [r3, #6]
	IMU.gy -= IMU.gy_offset;
 8001698:	4b0d      	ldr	r3, [pc, #52]	; (80016d0 <MPU6050_GetGyro+0xb0>)
 800169a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800169e:	b29a      	uxth	r2, r3
 80016a0:	4b0b      	ldr	r3, [pc, #44]	; (80016d0 <MPU6050_GetGyro+0xb0>)
 80016a2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	b21a      	sxth	r2, r3
 80016ae:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <MPU6050_GetGyro+0xb0>)
 80016b0:	811a      	strh	r2, [r3, #8]
	IMU.gz -= IMU.gz_offset;
 80016b2:	4b07      	ldr	r3, [pc, #28]	; (80016d0 <MPU6050_GetGyro+0xb0>)
 80016b4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80016b8:	b29a      	uxth	r2, r3
 80016ba:	4b05      	ldr	r3, [pc, #20]	; (80016d0 <MPU6050_GetGyro+0xb0>)
 80016bc:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	b29b      	uxth	r3, r3
 80016c6:	b21a      	sxth	r2, r3
 80016c8:	4b01      	ldr	r3, [pc, #4]	; (80016d0 <MPU6050_GetGyro+0xb0>)
 80016ca:	815a      	strh	r2, [r3, #10]
}
 80016cc:	bf00      	nop
 80016ce:	bd98      	pop	{r3, r4, r7, pc}
 80016d0:	20000210 	.word	0x20000210
 80016d4:	00000000 	.word	0x00000000

080016d8 <MPU6050_GetRoll_Acc>:

void MPU6050_GetRoll_Acc(void){
 80016d8:	b5b0      	push	{r4, r5, r7, lr}
 80016da:	af00      	add	r7, sp, #0
	IMU.roll_acc = atan(IMU.ay / (sqrt(-IMU.ax * IMU.ax + IMU.az * IMU.az))) * 180 / M_PI;
 80016dc:	4b28      	ldr	r3, [pc, #160]	; (8001780 <MPU6050_GetRoll_Acc+0xa8>)
 80016de:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7fe ff26 	bl	8000534 <__aeabi_i2d>
 80016e8:	4604      	mov	r4, r0
 80016ea:	460d      	mov	r5, r1
 80016ec:	4b24      	ldr	r3, [pc, #144]	; (8001780 <MPU6050_GetRoll_Acc+0xa8>)
 80016ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016f2:	425b      	negs	r3, r3
 80016f4:	4a22      	ldr	r2, [pc, #136]	; (8001780 <MPU6050_GetRoll_Acc+0xa8>)
 80016f6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80016fa:	fb03 f202 	mul.w	r2, r3, r2
 80016fe:	4b20      	ldr	r3, [pc, #128]	; (8001780 <MPU6050_GetRoll_Acc+0xa8>)
 8001700:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001704:	4619      	mov	r1, r3
 8001706:	4b1e      	ldr	r3, [pc, #120]	; (8001780 <MPU6050_GetRoll_Acc+0xa8>)
 8001708:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800170c:	fb01 f303 	mul.w	r3, r1, r3
 8001710:	4413      	add	r3, r2
 8001712:	4618      	mov	r0, r3
 8001714:	f7fe ff0e 	bl	8000534 <__aeabi_i2d>
 8001718:	4602      	mov	r2, r0
 800171a:	460b      	mov	r3, r1
 800171c:	ec43 2b10 	vmov	d0, r2, r3
 8001720:	f005 fd08 	bl	8007134 <sqrt>
 8001724:	ec53 2b10 	vmov	r2, r3, d0
 8001728:	4620      	mov	r0, r4
 800172a:	4629      	mov	r1, r5
 800172c:	f7ff f896 	bl	800085c <__aeabi_ddiv>
 8001730:	4602      	mov	r2, r0
 8001732:	460b      	mov	r3, r1
 8001734:	ec43 2b17 	vmov	d7, r2, r3
 8001738:	eeb0 0a47 	vmov.f32	s0, s14
 800173c:	eef0 0a67 	vmov.f32	s1, s15
 8001740:	f005 fd26 	bl	8007190 <atan>
 8001744:	ec51 0b10 	vmov	r0, r1, d0
 8001748:	f04f 0200 	mov.w	r2, #0
 800174c:	4b0d      	ldr	r3, [pc, #52]	; (8001784 <MPU6050_GetRoll_Acc+0xac>)
 800174e:	f7fe ff5b 	bl	8000608 <__aeabi_dmul>
 8001752:	4602      	mov	r2, r0
 8001754:	460b      	mov	r3, r1
 8001756:	4610      	mov	r0, r2
 8001758:	4619      	mov	r1, r3
 800175a:	a307      	add	r3, pc, #28	; (adr r3, 8001778 <MPU6050_GetRoll_Acc+0xa0>)
 800175c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001760:	f7ff f87c 	bl	800085c <__aeabi_ddiv>
 8001764:	4602      	mov	r2, r0
 8001766:	460b      	mov	r3, r1
 8001768:	4905      	ldr	r1, [pc, #20]	; (8001780 <MPU6050_GetRoll_Acc+0xa8>)
 800176a:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 800176e:	bf00      	nop
 8001770:	bdb0      	pop	{r4, r5, r7, pc}
 8001772:	bf00      	nop
 8001774:	f3af 8000 	nop.w
 8001778:	54442d18 	.word	0x54442d18
 800177c:	400921fb 	.word	0x400921fb
 8001780:	20000210 	.word	0x20000210
 8001784:	40668000 	.word	0x40668000

08001788 <MPU6050_GetRoll_Gyr>:

void MPU6050_GetPitch_Acc(void){
	IMU.pitch_acc = atan(IMU.ax / (sqrt(-IMU.ay * IMU.ay + IMU.az * IMU.az))) * 180 / M_PI;
}

void MPU6050_GetRoll_Gyr(void){
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
	IMU.roll_gyr = IMU.gx * dt / 1000.f;
 800178c:	4b0d      	ldr	r3, [pc, #52]	; (80017c4 <MPU6050_GetRoll_Gyr+0x3c>)
 800178e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001792:	461a      	mov	r2, r3
 8001794:	4b0c      	ldr	r3, [pc, #48]	; (80017c8 <MPU6050_GetRoll_Gyr+0x40>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	fb02 f303 	mul.w	r3, r2, r3
 800179c:	ee07 3a90 	vmov	s15, r3
 80017a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017a4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80017cc <MPU6050_GetRoll_Gyr+0x44>
 80017a8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80017ac:	ee16 0a90 	vmov	r0, s13
 80017b0:	f7fe fed2 	bl	8000558 <__aeabi_f2d>
 80017b4:	4602      	mov	r2, r0
 80017b6:	460b      	mov	r3, r1
 80017b8:	4902      	ldr	r1, [pc, #8]	; (80017c4 <MPU6050_GetRoll_Gyr+0x3c>)
 80017ba:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000210 	.word	0x20000210
 80017c8:	20000260 	.word	0x20000260
 80017cc:	447a0000 	.word	0x447a0000

080017d0 <MPU6050_getRoll_Filtered>:

void MPU6050_GetPitch_Gyr(void){
	IMU.pitch_gyr = IMU.gy * dt / 1000.f;
}

void MPU6050_getRoll_Filtered(void){
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
	IMU.roll_filtered = complementaryFilter_double(IMU.roll_acc, IMU.roll_gyr);
 80017d4:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <MPU6050_getRoll_Filtered+0x38>)
 80017d6:	ed93 7b06 	vldr	d7, [r3, #24]
 80017da:	4b0b      	ldr	r3, [pc, #44]	; (8001808 <MPU6050_getRoll_Filtered+0x38>)
 80017dc:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 80017e0:	eeb0 1a46 	vmov.f32	s2, s12
 80017e4:	eef0 1a66 	vmov.f32	s3, s13
 80017e8:	eeb0 0a47 	vmov.f32	s0, s14
 80017ec:	eef0 0a67 	vmov.f32	s1, s15
 80017f0:	f000 f82e 	bl	8001850 <complementaryFilter_double>
 80017f4:	eeb0 7a40 	vmov.f32	s14, s0
 80017f8:	eef0 7a60 	vmov.f32	s15, s1
 80017fc:	4b02      	ldr	r3, [pc, #8]	; (8001808 <MPU6050_getRoll_Filtered+0x38>)
 80017fe:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	20000210 	.word	0x20000210

0800180c <getDeltaTime>:

void MPU6050_getPitch_Filtered(void){
	IMU.pitch_filtered = complementaryFilter_double(IMU.pitch_acc, IMU.pitch_gyr);
}

void getDeltaTime(void){
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
	prevTime = curTime;
 8001810:	4b0b      	ldr	r3, [pc, #44]	; (8001840 <getDeltaTime+0x34>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a0b      	ldr	r2, [pc, #44]	; (8001844 <getDeltaTime+0x38>)
 8001816:	6013      	str	r3, [r2, #0]
	curTime = count_ms;
 8001818:	4b0b      	ldr	r3, [pc, #44]	; (8001848 <getDeltaTime+0x3c>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a08      	ldr	r2, [pc, #32]	; (8001840 <getDeltaTime+0x34>)
 800181e:	6013      	str	r3, [r2, #0]
	dt = curTime - prevTime;
 8001820:	4b07      	ldr	r3, [pc, #28]	; (8001840 <getDeltaTime+0x34>)
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	4b07      	ldr	r3, [pc, #28]	; (8001844 <getDeltaTime+0x38>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	4a08      	ldr	r2, [pc, #32]	; (800184c <getDeltaTime+0x40>)
 800182c:	6013      	str	r3, [r2, #0]
	curTime = count_ms;
 800182e:	4b06      	ldr	r3, [pc, #24]	; (8001848 <getDeltaTime+0x3c>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a03      	ldr	r2, [pc, #12]	; (8001840 <getDeltaTime+0x34>)
 8001834:	6013      	str	r3, [r2, #0]
}
 8001836:	bf00      	nop
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	20000258 	.word	0x20000258
 8001844:	2000025c 	.word	0x2000025c
 8001848:	200002a4 	.word	0x200002a4
 800184c:	20000260 	.word	0x20000260

08001850 <complementaryFilter_double>:

double complementaryFilter_double(double val1, double val2){
 8001850:	b5b0      	push	{r4, r5, r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	ed87 0b02 	vstr	d0, [r7, #8]
 800185a:	ed87 1b00 	vstr	d1, [r7]
	return ALPHA * val1 + (1 - ALPHA) * val2;
 800185e:	a312      	add	r3, pc, #72	; (adr r3, 80018a8 <complementaryFilter_double+0x58>)
 8001860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001864:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001868:	f7fe fece 	bl	8000608 <__aeabi_dmul>
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	4614      	mov	r4, r2
 8001872:	461d      	mov	r5, r3
 8001874:	a30e      	add	r3, pc, #56	; (adr r3, 80018b0 <complementaryFilter_double+0x60>)
 8001876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800187a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800187e:	f7fe fec3 	bl	8000608 <__aeabi_dmul>
 8001882:	4602      	mov	r2, r0
 8001884:	460b      	mov	r3, r1
 8001886:	4620      	mov	r0, r4
 8001888:	4629      	mov	r1, r5
 800188a:	f7fe fd07 	bl	800029c <__adddf3>
 800188e:	4602      	mov	r2, r0
 8001890:	460b      	mov	r3, r1
 8001892:	ec43 2b17 	vmov	d7, r2, r3
}
 8001896:	eeb0 0a47 	vmov.f32	s0, s14
 800189a:	eef0 0a67 	vmov.f32	s1, s15
 800189e:	3710      	adds	r7, #16
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bdb0      	pop	{r4, r5, r7, pc}
 80018a4:	f3af 8000 	nop.w
 80018a8:	cccccccd 	.word	0xcccccccd
 80018ac:	3feccccc 	.word	0x3feccccc
 80018b0:	99999998 	.word	0x99999998
 80018b4:	3fb99999 	.word	0x3fb99999

080018b8 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	041a      	lsls	r2, r3, #16
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	619a      	str	r2, [r3, #24]
}
 80018ca:	bf00      	nop
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
	...

080018d8 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80018d8:	b480      	push	{r7}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80018e0:	4b08      	ldr	r3, [pc, #32]	; (8001904 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80018e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018e4:	4907      	ldr	r1, [pc, #28]	; (8001904 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80018ec:	4b05      	ldr	r3, [pc, #20]	; (8001904 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80018ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	4013      	ands	r3, r2
 80018f4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018f6:	68fb      	ldr	r3, [r7, #12]
}
 80018f8:	bf00      	nop
 80018fa:	3714      	adds	r7, #20
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr
 8001904:	40023800 	.word	0x40023800

08001908 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b086      	sub	sp, #24
 800190c:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800190e:	463b      	mov	r3, r7
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	605a      	str	r2, [r3, #4]
 8001916:	609a      	str	r2, [r3, #8]
 8001918:	60da      	str	r2, [r3, #12]
 800191a:	611a      	str	r2, [r3, #16]
 800191c:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800191e:	2004      	movs	r0, #4
 8001920:	f7ff ffda 	bl	80018d8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001924:	2001      	movs	r0, #1
 8001926:	f7ff ffd7 	bl	80018d8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800192a:	2002      	movs	r0, #2
 800192c:	f7ff ffd4 	bl	80018d8 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_13);
 8001930:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001934:	480b      	ldr	r0, [pc, #44]	; (8001964 <MX_GPIO_Init+0x5c>)
 8001936:	f7ff ffbf 	bl	80018b8 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 800193a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800193e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001940:	2301      	movs	r3, #1
 8001942:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001944:	2300      	movs	r3, #0
 8001946:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001948:	2300      	movs	r3, #0
 800194a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800194c:	2300      	movs	r3, #0
 800194e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001950:	463b      	mov	r3, r7
 8001952:	4619      	mov	r1, r3
 8001954:	4803      	ldr	r0, [pc, #12]	; (8001964 <MX_GPIO_Init+0x5c>)
 8001956:	f001 fe72 	bl	800363e <LL_GPIO_Init>

}
 800195a:	bf00      	nop
 800195c:	3718      	adds	r7, #24
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40020800 	.word	0x40020800

08001968 <LL_I2C_EnableClockStretching>:
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	601a      	str	r2, [r3, #0]
}
 800197c:	bf00      	nop
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <LL_I2C_DisableGeneralCall>:
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	601a      	str	r2, [r3, #0]
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <LL_I2C_SetOwnAddress2>:
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	68db      	ldr	r3, [r3, #12]
 80019b6:	f023 02fe 	bic.w	r2, r3, #254	; 0xfe
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	431a      	orrs	r2, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	60da      	str	r2, [r3, #12]
}
 80019c2:	bf00      	nop
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr

080019ce <LL_I2C_DisableOwnAddress2>:
{
 80019ce:	b480      	push	{r7}
 80019d0:	b083      	sub	sp, #12
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	68db      	ldr	r3, [r3, #12]
 80019da:	f023 0201 	bic.w	r2, r3, #1
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	60da      	str	r2, [r3, #12]
}
 80019e2:	bf00      	nop
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
	...

080019f0 <LL_AHB1_GRP1_EnableClock>:
{
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80019f8:	4b08      	ldr	r3, [pc, #32]	; (8001a1c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80019fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019fc:	4907      	ldr	r1, [pc, #28]	; (8001a1c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001a04:	4b05      	ldr	r3, [pc, #20]	; (8001a1c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001a06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
}
 8001a10:	bf00      	nop
 8001a12:	3714      	adds	r7, #20
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr
 8001a1c:	40023800 	.word	0x40023800

08001a20 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001a28:	4b08      	ldr	r3, [pc, #32]	; (8001a4c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001a2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a2c:	4907      	ldr	r1, [pc, #28]	; (8001a4c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001a34:	4b05      	ldr	r3, [pc, #20]	; (8001a4c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001a36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
}
 8001a40:	bf00      	nop
 8001a42:	3714      	adds	r7, #20
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr
 8001a4c:	40023800 	.word	0x40023800

08001a50 <MX_I2C1_Init>:

/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b08e      	sub	sp, #56	; 0x38
 8001a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8001a56:	f107 0318 	add.w	r3, r7, #24
 8001a5a:	2220      	movs	r2, #32
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f003 fcb0 	bl	80053c4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a64:	463b      	mov	r3, r7
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]
 8001a6a:	605a      	str	r2, [r3, #4]
 8001a6c:	609a      	str	r2, [r3, #8]
 8001a6e:	60da      	str	r2, [r3, #12]
 8001a70:	611a      	str	r2, [r3, #16]
 8001a72:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001a74:	2002      	movs	r0, #2
 8001a76:	f7ff ffbb 	bl	80019f0 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001a7a:	23c0      	movs	r3, #192	; 0xc0
 8001a7c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001a7e:	2302      	movs	r3, #2
 8001a80:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001a82:	2303      	movs	r3, #3
 8001a84:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001a86:	2301      	movs	r3, #1
 8001a88:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8001a8e:	2304      	movs	r3, #4
 8001a90:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a92:	463b      	mov	r3, r7
 8001a94:	4619      	mov	r1, r3
 8001a96:	4816      	ldr	r0, [pc, #88]	; (8001af0 <MX_I2C1_Init+0xa0>)
 8001a98:	f001 fdd1 	bl	800363e <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8001a9c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001aa0:	f7ff ffbe 	bl	8001a20 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C1_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C1);
 8001aa4:	4813      	ldr	r0, [pc, #76]	; (8001af4 <MX_I2C1_Init+0xa4>)
 8001aa6:	f7ff ff92 	bl	80019ce <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8001aaa:	4812      	ldr	r0, [pc, #72]	; (8001af4 <MX_I2C1_Init+0xa4>)
 8001aac:	f7ff ff6c 	bl	8001988 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8001ab0:	4810      	ldr	r0, [pc, #64]	; (8001af4 <MX_I2C1_Init+0xa4>)
 8001ab2:	f7ff ff59 	bl	8001968 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 400000;
 8001aba:	4b0f      	ldr	r3, [pc, #60]	; (8001af8 <MX_I2C1_Init+0xa8>)
 8001abc:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.OwnAddress1 = 0;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8001ac6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001aca:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8001acc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ad0:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8001ad2:	f107 0318 	add.w	r3, r7, #24
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4806      	ldr	r0, [pc, #24]	; (8001af4 <MX_I2C1_Init+0xa4>)
 8001ada:	f001 ff2f 	bl	800393c <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0);
 8001ade:	2100      	movs	r1, #0
 8001ae0:	4804      	ldr	r0, [pc, #16]	; (8001af4 <MX_I2C1_Init+0xa4>)
 8001ae2:	f7ff ff61 	bl	80019a8 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ae6:	bf00      	nop
 8001ae8:	3738      	adds	r7, #56	; 0x38
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	40020400 	.word	0x40020400
 8001af4:	40005400 	.word	0x40005400
 8001af8:	00061a80 	.word	0x00061a80

08001afc <LL_TIM_EnableCounter>:
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f043 0201 	orr.w	r2, r3, #1
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	601a      	str	r2, [r3, #0]
}
 8001b10:	bf00      	nop
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	f043 0201 	orr.w	r2, r3, #1
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	60da      	str	r2, [r3, #12]
}
 8001b30:	bf00      	nop
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b4c:	2b80      	cmp	r3, #128	; 0x80
 8001b4e:	bf0c      	ite	eq
 8001b50:	2301      	moveq	r3, #1
 8001b52:	2300      	movne	r3, #0
 8001b54:	b2db      	uxtb	r3, r3
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr

08001b62 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8001b62:	b480      	push	{r7}
 8001b64:	b083      	sub	sp, #12
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8001b6e:	78fa      	ldrb	r2, [r7, #3]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	605a      	str	r2, [r3, #4]
}
 8001b74:	bf00      	nop
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <_write>:
#include "DCmotor.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
int _write(int file, char *p, int len){		// printf�??????????? USART6?�� ?���??????????? ?��?�� ?��?��
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b086      	sub	sp, #24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	60b9      	str	r1, [r7, #8]
 8001b8a:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < len ; i++){
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	617b      	str	r3, [r7, #20]
 8001b90:	e011      	b.n	8001bb6 <_write+0x36>
		while(!LL_USART_IsActiveFlag_TXE(USART6));
 8001b92:	bf00      	nop
 8001b94:	480c      	ldr	r0, [pc, #48]	; (8001bc8 <_write+0x48>)
 8001b96:	f7ff ffd1 	bl	8001b3c <LL_USART_IsActiveFlag_TXE>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d0f9      	beq.n	8001b94 <_write+0x14>
		LL_USART_TransmitData8(USART6, *(p+i));
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	68ba      	ldr	r2, [r7, #8]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4807      	ldr	r0, [pc, #28]	; (8001bc8 <_write+0x48>)
 8001bac:	f7ff ffd9 	bl	8001b62 <LL_USART_TransmitData8>
	for (int i = 0; i < len ; i++){
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	617b      	str	r3, [r7, #20]
 8001bb6:	697a      	ldr	r2, [r7, #20]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	dbe9      	blt.n	8001b92 <_write+0x12>
	}
	return len;
 8001bbe:	687b      	ldr	r3, [r7, #4]
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3718      	adds	r7, #24
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	40011400 	.word	0x40011400

08001bcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bcc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001bd0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bd2:	f000 feb3 	bl	800293c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bd6:	f000 f917 	bl	8001e08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bda:	f7ff fe95 	bl	8001908 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 8001bde:	f000 fe23 	bl	8002828 <MX_USART6_UART_Init>
  MX_I2C1_Init();
 8001be2:	f7ff ff35 	bl	8001a50 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001be6:	f000 fc77 	bl	80024d8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001bea:	f000 fcfd 	bl	80025e8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  MPU6050_Init();
 8001bee:	f7ff faff 	bl	80011f0 <MPU6050_Init>
  MPU6050_Calibration();
 8001bf2:	f7ff fb45 	bl	8001280 <MPU6050_Calibration>
  DCmotor_Init();
 8001bf6:	f7ff f9ee 	bl	8000fd6 <DCmotor_Init>
  LL_TIM_EnableIT_UPDATE(TIM3);
 8001bfa:	4872      	ldr	r0, [pc, #456]	; (8001dc4 <main+0x1f8>)
 8001bfc:	f7ff ff8e 	bl	8001b1c <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM3);
 8001c00:	4870      	ldr	r0, [pc, #448]	; (8001dc4 <main+0x1f8>)
 8001c02:	f7ff ff7b 	bl	8001afc <LL_TIM_EnableCounter>

  printf("Start\n");
 8001c06:	4870      	ldr	r0, [pc, #448]	; (8001dc8 <main+0x1fc>)
 8001c08:	f003 fafc 	bl	8005204 <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  getDeltaTime();
 8001c0c:	f7ff fdfe 	bl	800180c <getDeltaTime>
	  dt_double = dt / 1000.f;
 8001c10:	4b6e      	ldr	r3, [pc, #440]	; (8001dcc <main+0x200>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	ee07 3a90 	vmov	s15, r3
 8001c18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c1c:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8001dd0 <main+0x204>
 8001c20:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001c24:	ee16 0a90 	vmov	r0, s13
 8001c28:	f7fe fc96 	bl	8000558 <__aeabi_f2d>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	460b      	mov	r3, r1
 8001c30:	4968      	ldr	r1, [pc, #416]	; (8001dd4 <main+0x208>)
 8001c32:	e9c1 2300 	strd	r2, r3, [r1]

	  MPU6050_GetAccel();
 8001c36:	f7ff fc99 	bl	800156c <MPU6050_GetAccel>
	  MPU6050_GetGyro();
 8001c3a:	f7ff fcf1 	bl	8001620 <MPU6050_GetGyro>
	  MPU6050_GetRoll_Acc();
 8001c3e:	f7ff fd4b 	bl	80016d8 <MPU6050_GetRoll_Acc>
	  MPU6050_GetRoll_Gyr();
 8001c42:	f7ff fda1 	bl	8001788 <MPU6050_GetRoll_Gyr>
	  MPU6050_getRoll_Filtered();
 8001c46:	f7ff fdc3 	bl	80017d0 <MPU6050_getRoll_Filtered>

	  roll_err = target_roll - IMU.roll_filtered;
 8001c4a:	4b63      	ldr	r3, [pc, #396]	; (8001dd8 <main+0x20c>)
 8001c4c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c50:	4b62      	ldr	r3, [pc, #392]	; (8001ddc <main+0x210>)
 8001c52:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001c56:	f7fe fb1f 	bl	8000298 <__aeabi_dsub>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	4960      	ldr	r1, [pc, #384]	; (8001de0 <main+0x214>)
 8001c60:	e9c1 2300 	strd	r2, r3, [r1]

	  roll_output = (P * roll_err) + (I * dt * roll_err) + (D / dt * roll_err);
 8001c64:	4b5f      	ldr	r3, [pc, #380]	; (8001de4 <main+0x218>)
 8001c66:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c6a:	4b5d      	ldr	r3, [pc, #372]	; (8001de0 <main+0x214>)
 8001c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c70:	f7fe fcca 	bl	8000608 <__aeabi_dmul>
 8001c74:	4602      	mov	r2, r0
 8001c76:	460b      	mov	r3, r1
 8001c78:	4614      	mov	r4, r2
 8001c7a:	461d      	mov	r5, r3
 8001c7c:	4b53      	ldr	r3, [pc, #332]	; (8001dcc <main+0x200>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7fe fc57 	bl	8000534 <__aeabi_i2d>
 8001c86:	4b58      	ldr	r3, [pc, #352]	; (8001de8 <main+0x21c>)
 8001c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c8c:	f7fe fcbc 	bl	8000608 <__aeabi_dmul>
 8001c90:	4602      	mov	r2, r0
 8001c92:	460b      	mov	r3, r1
 8001c94:	4610      	mov	r0, r2
 8001c96:	4619      	mov	r1, r3
 8001c98:	4b51      	ldr	r3, [pc, #324]	; (8001de0 <main+0x214>)
 8001c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c9e:	f7fe fcb3 	bl	8000608 <__aeabi_dmul>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	4620      	mov	r0, r4
 8001ca8:	4629      	mov	r1, r5
 8001caa:	f7fe faf7 	bl	800029c <__adddf3>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	4690      	mov	r8, r2
 8001cb4:	4699      	mov	r9, r3
 8001cb6:	4b4d      	ldr	r3, [pc, #308]	; (8001dec <main+0x220>)
 8001cb8:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001cbc:	4b43      	ldr	r3, [pc, #268]	; (8001dcc <main+0x200>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7fe fc37 	bl	8000534 <__aeabi_i2d>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	460b      	mov	r3, r1
 8001cca:	4620      	mov	r0, r4
 8001ccc:	4629      	mov	r1, r5
 8001cce:	f7fe fdc5 	bl	800085c <__aeabi_ddiv>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	4610      	mov	r0, r2
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4b41      	ldr	r3, [pc, #260]	; (8001de0 <main+0x214>)
 8001cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ce0:	f7fe fc92 	bl	8000608 <__aeabi_dmul>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	4640      	mov	r0, r8
 8001cea:	4649      	mov	r1, r9
 8001cec:	f7fe fad6 	bl	800029c <__adddf3>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	493e      	ldr	r1, [pc, #248]	; (8001df0 <main+0x224>)
 8001cf6:	e9c1 2300 	strd	r2, r3, [r1]

	  if (roll_output > 20.0) roll_output = 20.0;			// 각도 최댓값 제한
 8001cfa:	4b3d      	ldr	r3, [pc, #244]	; (8001df0 <main+0x224>)
 8001cfc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d00:	f04f 0200 	mov.w	r2, #0
 8001d04:	4b3b      	ldr	r3, [pc, #236]	; (8001df4 <main+0x228>)
 8001d06:	f7fe ff0f 	bl	8000b28 <__aeabi_dcmpgt>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d006      	beq.n	8001d1e <main+0x152>
 8001d10:	4937      	ldr	r1, [pc, #220]	; (8001df0 <main+0x224>)
 8001d12:	f04f 0200 	mov.w	r2, #0
 8001d16:	4b37      	ldr	r3, [pc, #220]	; (8001df4 <main+0x228>)
 8001d18:	e9c1 2300 	strd	r2, r3, [r1]
 8001d1c:	e010      	b.n	8001d40 <main+0x174>
	  else if (roll_output < -20.0) roll_output = -20.0;	// 각도 최댓값 제한
 8001d1e:	4b34      	ldr	r3, [pc, #208]	; (8001df0 <main+0x224>)
 8001d20:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d24:	f04f 0200 	mov.w	r2, #0
 8001d28:	4b33      	ldr	r3, [pc, #204]	; (8001df8 <main+0x22c>)
 8001d2a:	f7fe fedf 	bl	8000aec <__aeabi_dcmplt>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d005      	beq.n	8001d40 <main+0x174>
 8001d34:	492e      	ldr	r1, [pc, #184]	; (8001df0 <main+0x224>)
 8001d36:	f04f 0200 	mov.w	r2, #0
 8001d3a:	4b2f      	ldr	r3, [pc, #188]	; (8001df8 <main+0x22c>)
 8001d3c:	e9c1 2300 	strd	r2, r3, [r1]

	  if (roll_output > 0){
 8001d40:	4b2b      	ldr	r3, [pc, #172]	; (8001df0 <main+0x224>)
 8001d42:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d46:	f04f 0200 	mov.w	r2, #0
 8001d4a:	f04f 0300 	mov.w	r3, #0
 8001d4e:	f7fe feeb 	bl	8000b28 <__aeabi_dcmpgt>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d01a      	beq.n	8001d8e <main+0x1c2>
		  motor_input = (unsigned int)(roll_output * 200.0) + 1000;
 8001d58:	4b25      	ldr	r3, [pc, #148]	; (8001df0 <main+0x224>)
 8001d5a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d5e:	f04f 0200 	mov.w	r2, #0
 8001d62:	4b26      	ldr	r3, [pc, #152]	; (8001dfc <main+0x230>)
 8001d64:	f7fe fc50 	bl	8000608 <__aeabi_dmul>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	4610      	mov	r0, r2
 8001d6e:	4619      	mov	r1, r3
 8001d70:	f7fe ff22 	bl	8000bb8 <__aeabi_d2uiz>
 8001d74:	4603      	mov	r3, r0
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001d7c:	b29a      	uxth	r2, r3
 8001d7e:	4b20      	ldr	r3, [pc, #128]	; (8001e00 <main+0x234>)
 8001d80:	801a      	strh	r2, [r3, #0]
		  DCmotor_Forward(motor_input);
 8001d82:	4b1f      	ldr	r3, [pc, #124]	; (8001e00 <main+0x234>)
 8001d84:	881b      	ldrh	r3, [r3, #0]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff f937 	bl	8000ffa <DCmotor_Forward>
 8001d8c:	e73e      	b.n	8001c0c <main+0x40>
	  }
	  else{
		  motor_input = (unsigned int)(roll_output * -200.0) + 1000;
 8001d8e:	4b18      	ldr	r3, [pc, #96]	; (8001df0 <main+0x224>)
 8001d90:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d94:	f04f 0200 	mov.w	r2, #0
 8001d98:	4b1a      	ldr	r3, [pc, #104]	; (8001e04 <main+0x238>)
 8001d9a:	f7fe fc35 	bl	8000608 <__aeabi_dmul>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	460b      	mov	r3, r1
 8001da2:	4610      	mov	r0, r2
 8001da4:	4619      	mov	r1, r3
 8001da6:	f7fe ff07 	bl	8000bb8 <__aeabi_d2uiz>
 8001daa:	4603      	mov	r3, r0
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001db2:	b29a      	uxth	r2, r3
 8001db4:	4b12      	ldr	r3, [pc, #72]	; (8001e00 <main+0x234>)
 8001db6:	801a      	strh	r2, [r3, #0]
		  DCmotor_Backward(motor_input);
 8001db8:	4b11      	ldr	r3, [pc, #68]	; (8001e00 <main+0x234>)
 8001dba:	881b      	ldrh	r3, [r3, #0]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff f92f 	bl	8001020 <DCmotor_Backward>
	  getDeltaTime();
 8001dc2:	e723      	b.n	8001c0c <main+0x40>
 8001dc4:	40000400 	.word	0x40000400
 8001dc8:	080076b0 	.word	0x080076b0
 8001dcc:	20000260 	.word	0x20000260
 8001dd0:	447a0000 	.word	0x447a0000
 8001dd4:	20000288 	.word	0x20000288
 8001dd8:	20000268 	.word	0x20000268
 8001ddc:	20000210 	.word	0x20000210
 8001de0:	20000278 	.word	0x20000278
 8001de4:	20000000 	.word	0x20000000
 8001de8:	20000290 	.word	0x20000290
 8001dec:	20000298 	.word	0x20000298
 8001df0:	20000270 	.word	0x20000270
 8001df4:	40340000 	.word	0x40340000
 8001df8:	c0340000 	.word	0xc0340000
 8001dfc:	40690000 	.word	0x40690000
 8001e00:	20000280 	.word	0x20000280
 8001e04:	c0690000 	.word	0xc0690000

08001e08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b094      	sub	sp, #80	; 0x50
 8001e0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e0e:	f107 0320 	add.w	r3, r7, #32
 8001e12:	2230      	movs	r2, #48	; 0x30
 8001e14:	2100      	movs	r1, #0
 8001e16:	4618      	mov	r0, r3
 8001e18:	f003 fad4 	bl	80053c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e1c:	f107 030c 	add.w	r3, r7, #12
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	605a      	str	r2, [r3, #4]
 8001e26:	609a      	str	r2, [r3, #8]
 8001e28:	60da      	str	r2, [r3, #12]
 8001e2a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	60bb      	str	r3, [r7, #8]
 8001e30:	4b23      	ldr	r3, [pc, #140]	; (8001ec0 <SystemClock_Config+0xb8>)
 8001e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e34:	4a22      	ldr	r2, [pc, #136]	; (8001ec0 <SystemClock_Config+0xb8>)
 8001e36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e3a:	6413      	str	r3, [r2, #64]	; 0x40
 8001e3c:	4b20      	ldr	r3, [pc, #128]	; (8001ec0 <SystemClock_Config+0xb8>)
 8001e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e44:	60bb      	str	r3, [r7, #8]
 8001e46:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e48:	2300      	movs	r3, #0
 8001e4a:	607b      	str	r3, [r7, #4]
 8001e4c:	4b1d      	ldr	r3, [pc, #116]	; (8001ec4 <SystemClock_Config+0xbc>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001e54:	4a1b      	ldr	r2, [pc, #108]	; (8001ec4 <SystemClock_Config+0xbc>)
 8001e56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e5a:	6013      	str	r3, [r2, #0]
 8001e5c:	4b19      	ldr	r3, [pc, #100]	; (8001ec4 <SystemClock_Config+0xbc>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e64:	607b      	str	r3, [r7, #4]
 8001e66:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e68:	2302      	movs	r3, #2
 8001e6a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e70:	2310      	movs	r3, #16
 8001e72:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001e74:	2300      	movs	r3, #0
 8001e76:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e78:	f107 0320 	add.w	r3, r7, #32
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f000 feb5 	bl	8002bec <HAL_RCC_OscConfig>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001e88:	f000 f81e 	bl	8001ec8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e8c:	230f      	movs	r3, #15
 8001e8e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001e90:	2300      	movs	r3, #0
 8001e92:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e94:	2300      	movs	r3, #0
 8001e96:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001ea0:	f107 030c 	add.w	r3, r7, #12
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f001 f918 	bl	80030dc <HAL_RCC_ClockConfig>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001eb2:	f000 f809 	bl	8001ec8 <Error_Handler>
  }
}
 8001eb6:	bf00      	nop
 8001eb8:	3750      	adds	r7, #80	; 0x50
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	40023800 	.word	0x40023800
 8001ec4:	40007000 	.word	0x40007000

08001ec8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ecc:	b672      	cpsid	i
}
 8001ece:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ed0:	e7fe      	b.n	8001ed0 <Error_Handler+0x8>
	...

08001ed4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eda:	2300      	movs	r3, #0
 8001edc:	607b      	str	r3, [r7, #4]
 8001ede:	4b10      	ldr	r3, [pc, #64]	; (8001f20 <HAL_MspInit+0x4c>)
 8001ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee2:	4a0f      	ldr	r2, [pc, #60]	; (8001f20 <HAL_MspInit+0x4c>)
 8001ee4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ee8:	6453      	str	r3, [r2, #68]	; 0x44
 8001eea:	4b0d      	ldr	r3, [pc, #52]	; (8001f20 <HAL_MspInit+0x4c>)
 8001eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ef2:	607b      	str	r3, [r7, #4]
 8001ef4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	603b      	str	r3, [r7, #0]
 8001efa:	4b09      	ldr	r3, [pc, #36]	; (8001f20 <HAL_MspInit+0x4c>)
 8001efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efe:	4a08      	ldr	r2, [pc, #32]	; (8001f20 <HAL_MspInit+0x4c>)
 8001f00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f04:	6413      	str	r3, [r2, #64]	; 0x40
 8001f06:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <HAL_MspInit+0x4c>)
 8001f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f0e:	603b      	str	r3, [r7, #0]
 8001f10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f12:	bf00      	nop
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	40023800 	.word	0x40023800

08001f24 <LL_TIM_ClearFlag_UPDATE>:
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f06f 0201 	mvn.w	r2, #1
 8001f32:	611a      	str	r2, [r3, #16]
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <LL_USART_IsActiveFlag_RXNE>:
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0320 	and.w	r3, r3, #32
 8001f50:	2b20      	cmp	r3, #32
 8001f52:	bf0c      	ite	eq
 8001f54:	2301      	moveq	r3, #1
 8001f56:	2300      	movne	r3, #0
 8001f58:	b2db      	uxtb	r3, r3
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr

08001f66 <LL_USART_ClearFlag_RXNE>:
{
 8001f66:	b480      	push	{r7}
 8001f68:	b083      	sub	sp, #12
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f06f 0220 	mvn.w	r2, #32
 8001f74:	601a      	str	r2, [r3, #0]
}
 8001f76:	bf00      	nop
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr

08001f82 <LL_USART_ReceiveData8>:
{
 8001f82:	b480      	push	{r7}
 8001f84:	b083      	sub	sp, #12
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	b2db      	uxtb	r3, r3
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fa0:	e7fe      	b.n	8001fa0 <NMI_Handler+0x4>

08001fa2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fa6:	e7fe      	b.n	8001fa6 <HardFault_Handler+0x4>

08001fa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fac:	e7fe      	b.n	8001fac <MemManage_Handler+0x4>

08001fae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fb2:	e7fe      	b.n	8001fb2 <BusFault_Handler+0x4>

08001fb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fb8:	e7fe      	b.n	8001fb8 <UsageFault_Handler+0x4>

08001fba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fbe:	bf00      	nop
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fcc:	bf00      	nop
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr

08001fd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fda:	bf00      	nop
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fe8:	f000 fcfa 	bl	80029e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fec:	bf00      	nop
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  /* USER CODE BEGIN TIM3_IRQn 1 */
	count_ms++;
 8001ff4:	4b04      	ldr	r3, [pc, #16]	; (8002008 <TIM3_IRQHandler+0x18>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	4a03      	ldr	r2, [pc, #12]	; (8002008 <TIM3_IRQHandler+0x18>)
 8001ffc:	6013      	str	r3, [r2, #0]
	LL_TIM_ClearFlag_UPDATE(TIM3);
 8001ffe:	4803      	ldr	r0, [pc, #12]	; (800200c <TIM3_IRQHandler+0x1c>)
 8002000:	f7ff ff90 	bl	8001f24 <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM3_IRQn 1 */
}
 8002004:	bf00      	nop
 8002006:	bd80      	pop	{r7, pc}
 8002008:	200002a4 	.word	0x200002a4
 800200c:	40000400 	.word	0x40000400

08002010 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	if (LL_USART_IsActiveFlag_RXNE(USART6)){
 8002014:	480a      	ldr	r0, [pc, #40]	; (8002040 <USART6_IRQHandler+0x30>)
 8002016:	f7ff ff93 	bl	8001f40 <LL_USART_IsActiveFlag_RXNE>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d00c      	beq.n	800203a <USART6_IRQHandler+0x2a>
	  LL_USART_ClearFlag_RXNE(USART6);
 8002020:	4807      	ldr	r0, [pc, #28]	; (8002040 <USART6_IRQHandler+0x30>)
 8002022:	f7ff ffa0 	bl	8001f66 <LL_USART_ClearFlag_RXNE>
	  uart_rx_data = LL_USART_ReceiveData8(USART6);
 8002026:	4806      	ldr	r0, [pc, #24]	; (8002040 <USART6_IRQHandler+0x30>)
 8002028:	f7ff ffab 	bl	8001f82 <LL_USART_ReceiveData8>
 800202c:	4603      	mov	r3, r0
 800202e:	461a      	mov	r2, r3
 8002030:	4b04      	ldr	r3, [pc, #16]	; (8002044 <USART6_IRQHandler+0x34>)
 8002032:	701a      	strb	r2, [r3, #0]
	  uart_rx_flag = 1;
 8002034:	4b04      	ldr	r3, [pc, #16]	; (8002048 <USART6_IRQHandler+0x38>)
 8002036:	2201      	movs	r2, #1
 8002038:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800203a:	bf00      	nop
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	40011400 	.word	0x40011400
 8002044:	200002a1 	.word	0x200002a1
 8002048:	200002a0 	.word	0x200002a0

0800204c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  return 1;
 8002050:	2301      	movs	r3, #1
}
 8002052:	4618      	mov	r0, r3
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <_kill>:

int _kill(int pid, int sig)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002066:	f003 f9ff 	bl	8005468 <__errno>
 800206a:	4603      	mov	r3, r0
 800206c:	2216      	movs	r2, #22
 800206e:	601a      	str	r2, [r3, #0]
  return -1;
 8002070:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002074:	4618      	mov	r0, r3
 8002076:	3708      	adds	r7, #8
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}

0800207c <_exit>:

void _exit (int status)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002084:	f04f 31ff 	mov.w	r1, #4294967295
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f7ff ffe7 	bl	800205c <_kill>
  while (1) {}    /* Make sure we hang here */
 800208e:	e7fe      	b.n	800208e <_exit+0x12>

08002090 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800209c:	2300      	movs	r3, #0
 800209e:	617b      	str	r3, [r7, #20]
 80020a0:	e00a      	b.n	80020b8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020a2:	f3af 8000 	nop.w
 80020a6:	4601      	mov	r1, r0
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	1c5a      	adds	r2, r3, #1
 80020ac:	60ba      	str	r2, [r7, #8]
 80020ae:	b2ca      	uxtb	r2, r1
 80020b0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	3301      	adds	r3, #1
 80020b6:	617b      	str	r3, [r7, #20]
 80020b8:	697a      	ldr	r2, [r7, #20]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	429a      	cmp	r2, r3
 80020be:	dbf0      	blt.n	80020a2 <_read+0x12>
  }

  return len;
 80020c0:	687b      	ldr	r3, [r7, #4]
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3718      	adds	r7, #24
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <_close>:
  }
  return len;
}

int _close(int file)
{
 80020ca:	b480      	push	{r7}
 80020cc:	b083      	sub	sp, #12
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr

080020e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020e2:	b480      	push	{r7}
 80020e4:	b083      	sub	sp, #12
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
 80020ea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020f2:	605a      	str	r2, [r3, #4]
  return 0;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr

08002102 <_isatty>:

int _isatty(int file)
{
 8002102:	b480      	push	{r7}
 8002104:	b083      	sub	sp, #12
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800210a:	2301      	movs	r3, #1
}
 800210c:	4618      	mov	r0, r3
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002118:	b480      	push	{r7}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	60b9      	str	r1, [r7, #8]
 8002122:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3714      	adds	r7, #20
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
	...

08002134 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800213c:	4a14      	ldr	r2, [pc, #80]	; (8002190 <_sbrk+0x5c>)
 800213e:	4b15      	ldr	r3, [pc, #84]	; (8002194 <_sbrk+0x60>)
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002148:	4b13      	ldr	r3, [pc, #76]	; (8002198 <_sbrk+0x64>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d102      	bne.n	8002156 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002150:	4b11      	ldr	r3, [pc, #68]	; (8002198 <_sbrk+0x64>)
 8002152:	4a12      	ldr	r2, [pc, #72]	; (800219c <_sbrk+0x68>)
 8002154:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002156:	4b10      	ldr	r3, [pc, #64]	; (8002198 <_sbrk+0x64>)
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4413      	add	r3, r2
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	429a      	cmp	r2, r3
 8002162:	d207      	bcs.n	8002174 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002164:	f003 f980 	bl	8005468 <__errno>
 8002168:	4603      	mov	r3, r0
 800216a:	220c      	movs	r2, #12
 800216c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800216e:	f04f 33ff 	mov.w	r3, #4294967295
 8002172:	e009      	b.n	8002188 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002174:	4b08      	ldr	r3, [pc, #32]	; (8002198 <_sbrk+0x64>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800217a:	4b07      	ldr	r3, [pc, #28]	; (8002198 <_sbrk+0x64>)
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4413      	add	r3, r2
 8002182:	4a05      	ldr	r2, [pc, #20]	; (8002198 <_sbrk+0x64>)
 8002184:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002186:	68fb      	ldr	r3, [r7, #12]
}
 8002188:	4618      	mov	r0, r3
 800218a:	3718      	adds	r7, #24
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	20010000 	.word	0x20010000
 8002194:	00000400 	.word	0x00000400
 8002198:	200002a8 	.word	0x200002a8
 800219c:	20000400 	.word	0x20000400

080021a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021a4:	4b06      	ldr	r3, [pc, #24]	; (80021c0 <SystemInit+0x20>)
 80021a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021aa:	4a05      	ldr	r2, [pc, #20]	; (80021c0 <SystemInit+0x20>)
 80021ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021b4:	bf00      	nop
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	e000ed00 	.word	0xe000ed00

080021c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021c8:	4b04      	ldr	r3, [pc, #16]	; (80021dc <__NVIC_GetPriorityGrouping+0x18>)
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	0a1b      	lsrs	r3, r3, #8
 80021ce:	f003 0307 	and.w	r3, r3, #7
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr
 80021dc:	e000ed00 	.word	0xe000ed00

080021e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	4603      	mov	r3, r0
 80021e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	db0b      	blt.n	800220a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021f2:	79fb      	ldrb	r3, [r7, #7]
 80021f4:	f003 021f 	and.w	r2, r3, #31
 80021f8:	4907      	ldr	r1, [pc, #28]	; (8002218 <__NVIC_EnableIRQ+0x38>)
 80021fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fe:	095b      	lsrs	r3, r3, #5
 8002200:	2001      	movs	r0, #1
 8002202:	fa00 f202 	lsl.w	r2, r0, r2
 8002206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800220a:	bf00      	nop
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	e000e100 	.word	0xe000e100

0800221c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	4603      	mov	r3, r0
 8002224:	6039      	str	r1, [r7, #0]
 8002226:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222c:	2b00      	cmp	r3, #0
 800222e:	db0a      	blt.n	8002246 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	b2da      	uxtb	r2, r3
 8002234:	490c      	ldr	r1, [pc, #48]	; (8002268 <__NVIC_SetPriority+0x4c>)
 8002236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223a:	0112      	lsls	r2, r2, #4
 800223c:	b2d2      	uxtb	r2, r2
 800223e:	440b      	add	r3, r1
 8002240:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002244:	e00a      	b.n	800225c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	b2da      	uxtb	r2, r3
 800224a:	4908      	ldr	r1, [pc, #32]	; (800226c <__NVIC_SetPriority+0x50>)
 800224c:	79fb      	ldrb	r3, [r7, #7]
 800224e:	f003 030f 	and.w	r3, r3, #15
 8002252:	3b04      	subs	r3, #4
 8002254:	0112      	lsls	r2, r2, #4
 8002256:	b2d2      	uxtb	r2, r2
 8002258:	440b      	add	r3, r1
 800225a:	761a      	strb	r2, [r3, #24]
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr
 8002268:	e000e100 	.word	0xe000e100
 800226c:	e000ed00 	.word	0xe000ed00

08002270 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002270:	b480      	push	{r7}
 8002272:	b089      	sub	sp, #36	; 0x24
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f003 0307 	and.w	r3, r3, #7
 8002282:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	f1c3 0307 	rsb	r3, r3, #7
 800228a:	2b04      	cmp	r3, #4
 800228c:	bf28      	it	cs
 800228e:	2304      	movcs	r3, #4
 8002290:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	3304      	adds	r3, #4
 8002296:	2b06      	cmp	r3, #6
 8002298:	d902      	bls.n	80022a0 <NVIC_EncodePriority+0x30>
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	3b03      	subs	r3, #3
 800229e:	e000      	b.n	80022a2 <NVIC_EncodePriority+0x32>
 80022a0:	2300      	movs	r3, #0
 80022a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022a4:	f04f 32ff 	mov.w	r2, #4294967295
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	fa02 f303 	lsl.w	r3, r2, r3
 80022ae:	43da      	mvns	r2, r3
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	401a      	ands	r2, r3
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022b8:	f04f 31ff 	mov.w	r1, #4294967295
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	fa01 f303 	lsl.w	r3, r1, r3
 80022c2:	43d9      	mvns	r1, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022c8:	4313      	orrs	r3, r2
         );
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3724      	adds	r7, #36	; 0x24
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr

080022d6 <LL_TIM_EnableARRPreload>:
{
 80022d6:	b480      	push	{r7}
 80022d8:	b083      	sub	sp, #12
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	601a      	str	r2, [r3, #0]
}
 80022ea:	bf00      	nop
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
	...

080022f8 <LL_TIM_OC_EnableFast>:
{
 80022f8:	b480      	push	{r7}
 80022fa:	b085      	sub	sp, #20
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d01c      	beq.n	8002342 <LL_TIM_OC_EnableFast+0x4a>
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	2b04      	cmp	r3, #4
 800230c:	d017      	beq.n	800233e <LL_TIM_OC_EnableFast+0x46>
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	2b10      	cmp	r3, #16
 8002312:	d012      	beq.n	800233a <LL_TIM_OC_EnableFast+0x42>
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	2b40      	cmp	r3, #64	; 0x40
 8002318:	d00d      	beq.n	8002336 <LL_TIM_OC_EnableFast+0x3e>
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002320:	d007      	beq.n	8002332 <LL_TIM_OC_EnableFast+0x3a>
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002328:	d101      	bne.n	800232e <LL_TIM_OC_EnableFast+0x36>
 800232a:	2305      	movs	r3, #5
 800232c:	e00a      	b.n	8002344 <LL_TIM_OC_EnableFast+0x4c>
 800232e:	2306      	movs	r3, #6
 8002330:	e008      	b.n	8002344 <LL_TIM_OC_EnableFast+0x4c>
 8002332:	2304      	movs	r3, #4
 8002334:	e006      	b.n	8002344 <LL_TIM_OC_EnableFast+0x4c>
 8002336:	2303      	movs	r3, #3
 8002338:	e004      	b.n	8002344 <LL_TIM_OC_EnableFast+0x4c>
 800233a:	2302      	movs	r3, #2
 800233c:	e002      	b.n	8002344 <LL_TIM_OC_EnableFast+0x4c>
 800233e:	2301      	movs	r3, #1
 8002340:	e000      	b.n	8002344 <LL_TIM_OC_EnableFast+0x4c>
 8002342:	2300      	movs	r3, #0
 8002344:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	3318      	adds	r3, #24
 800234a:	4619      	mov	r1, r3
 800234c:	7bfb      	ldrb	r3, [r7, #15]
 800234e:	4a0a      	ldr	r2, [pc, #40]	; (8002378 <LL_TIM_OC_EnableFast+0x80>)
 8002350:	5cd3      	ldrb	r3, [r2, r3]
 8002352:	440b      	add	r3, r1
 8002354:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	7bfb      	ldrb	r3, [r7, #15]
 800235c:	4907      	ldr	r1, [pc, #28]	; (800237c <LL_TIM_OC_EnableFast+0x84>)
 800235e:	5ccb      	ldrb	r3, [r1, r3]
 8002360:	4619      	mov	r1, r3
 8002362:	2304      	movs	r3, #4
 8002364:	408b      	lsls	r3, r1
 8002366:	431a      	orrs	r2, r3
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	601a      	str	r2, [r3, #0]
}
 800236c:	bf00      	nop
 800236e:	3714      	adds	r7, #20
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr
 8002378:	080076d0 	.word	0x080076d0
 800237c:	080076d8 	.word	0x080076d8

08002380 <LL_TIM_OC_EnablePreload>:
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d01c      	beq.n	80023ca <LL_TIM_OC_EnablePreload+0x4a>
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	2b04      	cmp	r3, #4
 8002394:	d017      	beq.n	80023c6 <LL_TIM_OC_EnablePreload+0x46>
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	2b10      	cmp	r3, #16
 800239a:	d012      	beq.n	80023c2 <LL_TIM_OC_EnablePreload+0x42>
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	2b40      	cmp	r3, #64	; 0x40
 80023a0:	d00d      	beq.n	80023be <LL_TIM_OC_EnablePreload+0x3e>
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023a8:	d007      	beq.n	80023ba <LL_TIM_OC_EnablePreload+0x3a>
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023b0:	d101      	bne.n	80023b6 <LL_TIM_OC_EnablePreload+0x36>
 80023b2:	2305      	movs	r3, #5
 80023b4:	e00a      	b.n	80023cc <LL_TIM_OC_EnablePreload+0x4c>
 80023b6:	2306      	movs	r3, #6
 80023b8:	e008      	b.n	80023cc <LL_TIM_OC_EnablePreload+0x4c>
 80023ba:	2304      	movs	r3, #4
 80023bc:	e006      	b.n	80023cc <LL_TIM_OC_EnablePreload+0x4c>
 80023be:	2303      	movs	r3, #3
 80023c0:	e004      	b.n	80023cc <LL_TIM_OC_EnablePreload+0x4c>
 80023c2:	2302      	movs	r3, #2
 80023c4:	e002      	b.n	80023cc <LL_TIM_OC_EnablePreload+0x4c>
 80023c6:	2301      	movs	r3, #1
 80023c8:	e000      	b.n	80023cc <LL_TIM_OC_EnablePreload+0x4c>
 80023ca:	2300      	movs	r3, #0
 80023cc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	3318      	adds	r3, #24
 80023d2:	4619      	mov	r1, r3
 80023d4:	7bfb      	ldrb	r3, [r7, #15]
 80023d6:	4a0a      	ldr	r2, [pc, #40]	; (8002400 <LL_TIM_OC_EnablePreload+0x80>)
 80023d8:	5cd3      	ldrb	r3, [r2, r3]
 80023da:	440b      	add	r3, r1
 80023dc:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	7bfb      	ldrb	r3, [r7, #15]
 80023e4:	4907      	ldr	r1, [pc, #28]	; (8002404 <LL_TIM_OC_EnablePreload+0x84>)
 80023e6:	5ccb      	ldrb	r3, [r1, r3]
 80023e8:	4619      	mov	r1, r3
 80023ea:	2308      	movs	r3, #8
 80023ec:	408b      	lsls	r3, r1
 80023ee:	431a      	orrs	r2, r3
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	601a      	str	r2, [r3, #0]
}
 80023f4:	bf00      	nop
 80023f6:	3714      	adds	r7, #20
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr
 8002400:	080076d0 	.word	0x080076d0
 8002404:	080076d8 	.word	0x080076d8

08002408 <LL_TIM_SetClockSource>:
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800241a:	f023 0307 	bic.w	r3, r3, #7
 800241e:	683a      	ldr	r2, [r7, #0]
 8002420:	431a      	orrs	r2, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	609a      	str	r2, [r3, #8]
}
 8002426:	bf00      	nop
 8002428:	370c      	adds	r7, #12
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr

08002432 <LL_TIM_SetTriggerOutput>:
{
 8002432:	b480      	push	{r7}
 8002434:	b083      	sub	sp, #12
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
 800243a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	431a      	orrs	r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	605a      	str	r2, [r3, #4]
}
 800244c:	bf00      	nop
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <LL_TIM_DisableMasterSlaveMode>:
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	609a      	str	r2, [r3, #8]
}
 800246c:	bf00      	nop
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr

08002478 <LL_AHB1_GRP1_EnableClock>:
{
 8002478:	b480      	push	{r7}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002480:	4b08      	ldr	r3, [pc, #32]	; (80024a4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002482:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002484:	4907      	ldr	r1, [pc, #28]	; (80024a4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4313      	orrs	r3, r2
 800248a:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800248c:	4b05      	ldr	r3, [pc, #20]	; (80024a4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800248e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	4013      	ands	r3, r2
 8002494:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002496:	68fb      	ldr	r3, [r7, #12]
}
 8002498:	bf00      	nop
 800249a:	3714      	adds	r7, #20
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr
 80024a4:	40023800 	.word	0x40023800

080024a8 <LL_APB1_GRP1_EnableClock>:
{
 80024a8:	b480      	push	{r7}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80024b0:	4b08      	ldr	r3, [pc, #32]	; (80024d4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80024b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024b4:	4907      	ldr	r1, [pc, #28]	; (80024d4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80024bc:	4b05      	ldr	r3, [pc, #20]	; (80024d4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80024be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	4013      	ands	r3, r2
 80024c4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80024c6:	68fb      	ldr	r3, [r7, #12]
}
 80024c8:	bf00      	nop
 80024ca:	3714      	adds	r7, #20
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr
 80024d4:	40023800 	.word	0x40023800

080024d8 <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b094      	sub	sp, #80	; 0x50
 80024dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80024de:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80024e2:	2200      	movs	r2, #0
 80024e4:	601a      	str	r2, [r3, #0]
 80024e6:	605a      	str	r2, [r3, #4]
 80024e8:	609a      	str	r2, [r3, #8]
 80024ea:	60da      	str	r2, [r3, #12]
 80024ec:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80024ee:	f107 031c 	add.w	r3, r7, #28
 80024f2:	2220      	movs	r2, #32
 80024f4:	2100      	movs	r1, #0
 80024f6:	4618      	mov	r0, r3
 80024f8:	f002 ff64 	bl	80053c4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024fc:	1d3b      	adds	r3, r7, #4
 80024fe:	2200      	movs	r2, #0
 8002500:	601a      	str	r2, [r3, #0]
 8002502:	605a      	str	r2, [r3, #4]
 8002504:	609a      	str	r2, [r3, #8]
 8002506:	60da      	str	r2, [r3, #12]
 8002508:	611a      	str	r2, [r3, #16]
 800250a:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 800250c:	2001      	movs	r0, #1
 800250e:	f7ff ffcb 	bl	80024a8 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8002512:	2300      	movs	r3, #0
 8002514:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002516:	2300      	movs	r3, #0
 8002518:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 15999;
 800251a:	f643 637f 	movw	r3, #15999	; 0x3e7f
 800251e:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002520:	2300      	movs	r3, #0
 8002522:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8002524:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002528:	4619      	mov	r1, r3
 800252a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800252e:	f001 fbeb 	bl	8003d08 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM2);
 8002532:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002536:	f7ff fece 	bl	80022d6 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 800253a:	2100      	movs	r1, #0
 800253c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002540:	f7ff ff62 	bl	8002408 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH1);
 8002544:	2101      	movs	r1, #1
 8002546:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800254a:	f7ff ff19 	bl	8002380 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 800254e:	2360      	movs	r3, #96	; 0x60
 8002550:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002552:	2300      	movs	r3, #0
 8002554:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002556:	2300      	movs	r3, #0
 8002558:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 800255a:	2300      	movs	r3, #0
 800255c:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 800255e:	2300      	movs	r3, #0
 8002560:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8002562:	f107 031c 	add.w	r3, r7, #28
 8002566:	461a      	mov	r2, r3
 8002568:	2101      	movs	r1, #1
 800256a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800256e:	f001 fc45 	bl	8003dfc <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM2, LL_TIM_CHANNEL_CH1);
 8002572:	2101      	movs	r1, #1
 8002574:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002578:	f7ff febe 	bl	80022f8 <LL_TIM_OC_EnableFast>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH2);
 800257c:	2110      	movs	r1, #16
 800257e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002582:	f7ff fefd 	bl	8002380 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8002586:	f107 031c 	add.w	r3, r7, #28
 800258a:	461a      	mov	r2, r3
 800258c:	2110      	movs	r1, #16
 800258e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002592:	f001 fc33 	bl	8003dfc <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM2, LL_TIM_CHANNEL_CH2);
 8002596:	2110      	movs	r1, #16
 8002598:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800259c:	f7ff feac 	bl	80022f8 <LL_TIM_OC_EnableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 80025a0:	2100      	movs	r1, #0
 80025a2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80025a6:	f7ff ff44 	bl	8002432 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 80025aa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80025ae:	f7ff ff53 	bl	8002458 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80025b2:	2001      	movs	r0, #1
 80025b4:	f7ff ff60 	bl	8002478 <LL_AHB1_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 80025b8:	2303      	movs	r3, #3
 80025ba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80025bc:	2302      	movs	r3, #2
 80025be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80025c0:	2300      	movs	r3, #0
 80025c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80025c4:	2300      	movs	r3, #0
 80025c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80025c8:	2300      	movs	r3, #0
 80025ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 80025cc:	2301      	movs	r3, #1
 80025ce:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025d0:	1d3b      	adds	r3, r7, #4
 80025d2:	4619      	mov	r1, r3
 80025d4:	4803      	ldr	r0, [pc, #12]	; (80025e4 <MX_TIM2_Init+0x10c>)
 80025d6:	f001 f832 	bl	800363e <LL_GPIO_Init>

}
 80025da:	bf00      	nop
 80025dc:	3750      	adds	r7, #80	; 0x50
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	40020000 	.word	0x40020000

080025e8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b086      	sub	sp, #24
 80025ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80025ee:	1d3b      	adds	r3, r7, #4
 80025f0:	2200      	movs	r2, #0
 80025f2:	601a      	str	r2, [r3, #0]
 80025f4:	605a      	str	r2, [r3, #4]
 80025f6:	609a      	str	r2, [r3, #8]
 80025f8:	60da      	str	r2, [r3, #12]
 80025fa:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 80025fc:	2002      	movs	r0, #2
 80025fe:	f7ff ff53 	bl	80024a8 <LL_APB1_GRP1_EnableClock>

  /* TIM3 interrupt Init */
  NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002602:	f7ff fddf 	bl	80021c4 <__NVIC_GetPriorityGrouping>
 8002606:	4603      	mov	r3, r0
 8002608:	2200      	movs	r2, #0
 800260a:	2100      	movs	r1, #0
 800260c:	4618      	mov	r0, r3
 800260e:	f7ff fe2f 	bl	8002270 <NVIC_EncodePriority>
 8002612:	4603      	mov	r3, r0
 8002614:	4619      	mov	r1, r3
 8002616:	201d      	movs	r0, #29
 8002618:	f7ff fe00 	bl	800221c <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 800261c:	201d      	movs	r0, #29
 800261e:	f7ff fddf 	bl	80021e0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8002622:	2300      	movs	r3, #0
 8002624:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002626:	2300      	movs	r3, #0
 8002628:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 15999;
 800262a:	f643 637f 	movw	r3, #15999	; 0x3e7f
 800262e:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002630:	2300      	movs	r3, #0
 8002632:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8002634:	1d3b      	adds	r3, r7, #4
 8002636:	4619      	mov	r1, r3
 8002638:	480a      	ldr	r0, [pc, #40]	; (8002664 <MX_TIM3_Init+0x7c>)
 800263a:	f001 fb65 	bl	8003d08 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM3);
 800263e:	4809      	ldr	r0, [pc, #36]	; (8002664 <MX_TIM3_Init+0x7c>)
 8002640:	f7ff fe49 	bl	80022d6 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002644:	2100      	movs	r1, #0
 8002646:	4807      	ldr	r0, [pc, #28]	; (8002664 <MX_TIM3_Init+0x7c>)
 8002648:	f7ff fede 	bl	8002408 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 800264c:	2100      	movs	r1, #0
 800264e:	4805      	ldr	r0, [pc, #20]	; (8002664 <MX_TIM3_Init+0x7c>)
 8002650:	f7ff feef 	bl	8002432 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8002654:	4803      	ldr	r0, [pc, #12]	; (8002664 <MX_TIM3_Init+0x7c>)
 8002656:	f7ff feff 	bl	8002458 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800265a:	bf00      	nop
 800265c:	3718      	adds	r7, #24
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	40000400 	.word	0x40000400

08002668 <__NVIC_GetPriorityGrouping>:
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800266c:	4b04      	ldr	r3, [pc, #16]	; (8002680 <__NVIC_GetPriorityGrouping+0x18>)
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	0a1b      	lsrs	r3, r3, #8
 8002672:	f003 0307 	and.w	r3, r3, #7
}
 8002676:	4618      	mov	r0, r3
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr
 8002680:	e000ed00 	.word	0xe000ed00

08002684 <__NVIC_EnableIRQ>:
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	4603      	mov	r3, r0
 800268c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800268e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002692:	2b00      	cmp	r3, #0
 8002694:	db0b      	blt.n	80026ae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002696:	79fb      	ldrb	r3, [r7, #7]
 8002698:	f003 021f 	and.w	r2, r3, #31
 800269c:	4907      	ldr	r1, [pc, #28]	; (80026bc <__NVIC_EnableIRQ+0x38>)
 800269e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a2:	095b      	lsrs	r3, r3, #5
 80026a4:	2001      	movs	r0, #1
 80026a6:	fa00 f202 	lsl.w	r2, r0, r2
 80026aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80026ae:	bf00      	nop
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	e000e100 	.word	0xe000e100

080026c0 <__NVIC_SetPriority>:
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	4603      	mov	r3, r0
 80026c8:	6039      	str	r1, [r7, #0]
 80026ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	db0a      	blt.n	80026ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	b2da      	uxtb	r2, r3
 80026d8:	490c      	ldr	r1, [pc, #48]	; (800270c <__NVIC_SetPriority+0x4c>)
 80026da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026de:	0112      	lsls	r2, r2, #4
 80026e0:	b2d2      	uxtb	r2, r2
 80026e2:	440b      	add	r3, r1
 80026e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80026e8:	e00a      	b.n	8002700 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	b2da      	uxtb	r2, r3
 80026ee:	4908      	ldr	r1, [pc, #32]	; (8002710 <__NVIC_SetPriority+0x50>)
 80026f0:	79fb      	ldrb	r3, [r7, #7]
 80026f2:	f003 030f 	and.w	r3, r3, #15
 80026f6:	3b04      	subs	r3, #4
 80026f8:	0112      	lsls	r2, r2, #4
 80026fa:	b2d2      	uxtb	r2, r2
 80026fc:	440b      	add	r3, r1
 80026fe:	761a      	strb	r2, [r3, #24]
}
 8002700:	bf00      	nop
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr
 800270c:	e000e100 	.word	0xe000e100
 8002710:	e000ed00 	.word	0xe000ed00

08002714 <NVIC_EncodePriority>:
{
 8002714:	b480      	push	{r7}
 8002716:	b089      	sub	sp, #36	; 0x24
 8002718:	af00      	add	r7, sp, #0
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	60b9      	str	r1, [r7, #8]
 800271e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f003 0307 	and.w	r3, r3, #7
 8002726:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	f1c3 0307 	rsb	r3, r3, #7
 800272e:	2b04      	cmp	r3, #4
 8002730:	bf28      	it	cs
 8002732:	2304      	movcs	r3, #4
 8002734:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	3304      	adds	r3, #4
 800273a:	2b06      	cmp	r3, #6
 800273c:	d902      	bls.n	8002744 <NVIC_EncodePriority+0x30>
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	3b03      	subs	r3, #3
 8002742:	e000      	b.n	8002746 <NVIC_EncodePriority+0x32>
 8002744:	2300      	movs	r3, #0
 8002746:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002748:	f04f 32ff 	mov.w	r2, #4294967295
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	fa02 f303 	lsl.w	r3, r2, r3
 8002752:	43da      	mvns	r2, r3
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	401a      	ands	r2, r3
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800275c:	f04f 31ff 	mov.w	r1, #4294967295
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	fa01 f303 	lsl.w	r3, r1, r3
 8002766:	43d9      	mvns	r1, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800276c:	4313      	orrs	r3, r2
}
 800276e:	4618      	mov	r0, r3
 8002770:	3724      	adds	r7, #36	; 0x24
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr

0800277a <LL_USART_Enable>:
{
 800277a:	b480      	push	{r7}
 800277c:	b083      	sub	sp, #12
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	60da      	str	r2, [r3, #12]
}
 800278e:	bf00      	nop
 8002790:	370c      	adds	r7, #12
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr

0800279a <LL_USART_ConfigAsyncMode>:
{
 800279a:	b480      	push	{r7}
 800279c:	b083      	sub	sp, #12
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	695b      	ldr	r3, [r3, #20]
 80027b2:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	615a      	str	r2, [r3, #20]
}
 80027ba:	bf00      	nop
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
	...

080027c8 <LL_AHB1_GRP1_EnableClock>:
{
 80027c8:	b480      	push	{r7}
 80027ca:	b085      	sub	sp, #20
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80027d0:	4b08      	ldr	r3, [pc, #32]	; (80027f4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80027d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027d4:	4907      	ldr	r1, [pc, #28]	; (80027f4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4313      	orrs	r3, r2
 80027da:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80027dc:	4b05      	ldr	r3, [pc, #20]	; (80027f4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80027de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	4013      	ands	r3, r2
 80027e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80027e6:	68fb      	ldr	r3, [r7, #12]
}
 80027e8:	bf00      	nop
 80027ea:	3714      	adds	r7, #20
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr
 80027f4:	40023800 	.word	0x40023800

080027f8 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b085      	sub	sp, #20
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002800:	4b08      	ldr	r3, [pc, #32]	; (8002824 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002802:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002804:	4907      	ldr	r1, [pc, #28]	; (8002824 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4313      	orrs	r3, r2
 800280a:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800280c:	4b05      	ldr	r3, [pc, #20]	; (8002824 <LL_APB2_GRP1_EnableClock+0x2c>)
 800280e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4013      	ands	r3, r2
 8002814:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002816:	68fb      	ldr	r3, [r7, #12]
}
 8002818:	bf00      	nop
 800281a:	3714      	adds	r7, #20
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr
 8002824:	40023800 	.word	0x40023800

08002828 <MX_USART6_UART_Init>:
/* USER CODE END 0 */

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b08e      	sub	sp, #56	; 0x38
 800282c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800282e:	f107 031c 	add.w	r3, r7, #28
 8002832:	2200      	movs	r2, #0
 8002834:	601a      	str	r2, [r3, #0]
 8002836:	605a      	str	r2, [r3, #4]
 8002838:	609a      	str	r2, [r3, #8]
 800283a:	60da      	str	r2, [r3, #12]
 800283c:	611a      	str	r2, [r3, #16]
 800283e:	615a      	str	r2, [r3, #20]
 8002840:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002842:	1d3b      	adds	r3, r7, #4
 8002844:	2200      	movs	r2, #0
 8002846:	601a      	str	r2, [r3, #0]
 8002848:	605a      	str	r2, [r3, #4]
 800284a:	609a      	str	r2, [r3, #8]
 800284c:	60da      	str	r2, [r3, #12]
 800284e:	611a      	str	r2, [r3, #16]
 8002850:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 8002852:	2020      	movs	r0, #32
 8002854:	f7ff ffd0 	bl	80027f8 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002858:	2001      	movs	r0, #1
 800285a:	f7ff ffb5 	bl	80027c8 <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PA11   ------> USART6_TX
  PA12   ------> USART6_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 800285e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002862:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002864:	2302      	movs	r3, #2
 8002866:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002868:	2303      	movs	r3, #3
 800286a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800286c:	2300      	movs	r3, #0
 800286e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002870:	2300      	movs	r3, #0
 8002872:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8002874:	2308      	movs	r3, #8
 8002876:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002878:	1d3b      	adds	r3, r7, #4
 800287a:	4619      	mov	r1, r3
 800287c:	4818      	ldr	r0, [pc, #96]	; (80028e0 <MX_USART6_UART_Init+0xb8>)
 800287e:	f000 fede 	bl	800363e <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002882:	f7ff fef1 	bl	8002668 <__NVIC_GetPriorityGrouping>
 8002886:	4603      	mov	r3, r0
 8002888:	2200      	movs	r2, #0
 800288a:	2100      	movs	r1, #0
 800288c:	4618      	mov	r0, r3
 800288e:	f7ff ff41 	bl	8002714 <NVIC_EncodePriority>
 8002892:	4603      	mov	r3, r0
 8002894:	4619      	mov	r1, r3
 8002896:	2047      	movs	r0, #71	; 0x47
 8002898:	f7ff ff12 	bl	80026c0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 800289c:	2047      	movs	r0, #71	; 0x47
 800289e:	f7ff fef1 	bl	8002684 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80028a2:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80028a6:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80028a8:	2300      	movs	r3, #0
 80028aa:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80028ac:	2300      	movs	r3, #0
 80028ae:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80028b0:	2300      	movs	r3, #0
 80028b2:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80028b4:	230c      	movs	r3, #12
 80028b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80028b8:	2300      	movs	r3, #0
 80028ba:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80028bc:	2300      	movs	r3, #0
 80028be:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART6, &USART_InitStruct);
 80028c0:	f107 031c 	add.w	r3, r7, #28
 80028c4:	4619      	mov	r1, r3
 80028c6:	4807      	ldr	r0, [pc, #28]	; (80028e4 <MX_USART6_UART_Init+0xbc>)
 80028c8:	f001 fece 	bl	8004668 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 80028cc:	4805      	ldr	r0, [pc, #20]	; (80028e4 <MX_USART6_UART_Init+0xbc>)
 80028ce:	f7ff ff64 	bl	800279a <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 80028d2:	4804      	ldr	r0, [pc, #16]	; (80028e4 <MX_USART6_UART_Init+0xbc>)
 80028d4:	f7ff ff51 	bl	800277a <LL_USART_Enable>
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80028d8:	bf00      	nop
 80028da:	3738      	adds	r7, #56	; 0x38
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	40020000 	.word	0x40020000
 80028e4:	40011400 	.word	0x40011400

080028e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80028e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002920 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80028ec:	480d      	ldr	r0, [pc, #52]	; (8002924 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80028ee:	490e      	ldr	r1, [pc, #56]	; (8002928 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80028f0:	4a0e      	ldr	r2, [pc, #56]	; (800292c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80028f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028f4:	e002      	b.n	80028fc <LoopCopyDataInit>

080028f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028fa:	3304      	adds	r3, #4

080028fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002900:	d3f9      	bcc.n	80028f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002902:	4a0b      	ldr	r2, [pc, #44]	; (8002930 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002904:	4c0b      	ldr	r4, [pc, #44]	; (8002934 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002906:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002908:	e001      	b.n	800290e <LoopFillZerobss>

0800290a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800290a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800290c:	3204      	adds	r2, #4

0800290e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800290e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002910:	d3fb      	bcc.n	800290a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002912:	f7ff fc45 	bl	80021a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002916:	f002 fdad 	bl	8005474 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800291a:	f7ff f957 	bl	8001bcc <main>
  bx  lr    
 800291e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002920:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002924:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002928:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 800292c:	08007aa8 	.word	0x08007aa8
  ldr r2, =_sbss
 8002930:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8002934:	200003fc 	.word	0x200003fc

08002938 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002938:	e7fe      	b.n	8002938 <ADC_IRQHandler>
	...

0800293c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002940:	4b0e      	ldr	r3, [pc, #56]	; (800297c <HAL_Init+0x40>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a0d      	ldr	r2, [pc, #52]	; (800297c <HAL_Init+0x40>)
 8002946:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800294a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800294c:	4b0b      	ldr	r3, [pc, #44]	; (800297c <HAL_Init+0x40>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a0a      	ldr	r2, [pc, #40]	; (800297c <HAL_Init+0x40>)
 8002952:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002956:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002958:	4b08      	ldr	r3, [pc, #32]	; (800297c <HAL_Init+0x40>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a07      	ldr	r2, [pc, #28]	; (800297c <HAL_Init+0x40>)
 800295e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002962:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002964:	2003      	movs	r0, #3
 8002966:	f000 f90d 	bl	8002b84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800296a:	200f      	movs	r0, #15
 800296c:	f000 f808 	bl	8002980 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002970:	f7ff fab0 	bl	8001ed4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	40023c00 	.word	0x40023c00

08002980 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002988:	4b12      	ldr	r3, [pc, #72]	; (80029d4 <HAL_InitTick+0x54>)
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	4b12      	ldr	r3, [pc, #72]	; (80029d8 <HAL_InitTick+0x58>)
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	4619      	mov	r1, r3
 8002992:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002996:	fbb3 f3f1 	udiv	r3, r3, r1
 800299a:	fbb2 f3f3 	udiv	r3, r2, r3
 800299e:	4618      	mov	r0, r3
 80029a0:	f000 f917 	bl	8002bd2 <HAL_SYSTICK_Config>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e00e      	b.n	80029cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2b0f      	cmp	r3, #15
 80029b2:	d80a      	bhi.n	80029ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029b4:	2200      	movs	r2, #0
 80029b6:	6879      	ldr	r1, [r7, #4]
 80029b8:	f04f 30ff 	mov.w	r0, #4294967295
 80029bc:	f000 f8ed 	bl	8002b9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029c0:	4a06      	ldr	r2, [pc, #24]	; (80029dc <HAL_InitTick+0x5c>)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029c6:	2300      	movs	r3, #0
 80029c8:	e000      	b.n	80029cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3708      	adds	r7, #8
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	20000008 	.word	0x20000008
 80029d8:	20000010 	.word	0x20000010
 80029dc:	2000000c 	.word	0x2000000c

080029e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029e4:	4b06      	ldr	r3, [pc, #24]	; (8002a00 <HAL_IncTick+0x20>)
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	461a      	mov	r2, r3
 80029ea:	4b06      	ldr	r3, [pc, #24]	; (8002a04 <HAL_IncTick+0x24>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4413      	add	r3, r2
 80029f0:	4a04      	ldr	r2, [pc, #16]	; (8002a04 <HAL_IncTick+0x24>)
 80029f2:	6013      	str	r3, [r2, #0]
}
 80029f4:	bf00      	nop
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	20000010 	.word	0x20000010
 8002a04:	200002ac 	.word	0x200002ac

08002a08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
  return uwTick;
 8002a0c:	4b03      	ldr	r3, [pc, #12]	; (8002a1c <HAL_GetTick+0x14>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	200002ac 	.word	0x200002ac

08002a20 <__NVIC_SetPriorityGrouping>:
{
 8002a20:	b480      	push	{r7}
 8002a22:	b085      	sub	sp, #20
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f003 0307 	and.w	r3, r3, #7
 8002a2e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a30:	4b0c      	ldr	r3, [pc, #48]	; (8002a64 <__NVIC_SetPriorityGrouping+0x44>)
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a36:	68ba      	ldr	r2, [r7, #8]
 8002a38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a52:	4a04      	ldr	r2, [pc, #16]	; (8002a64 <__NVIC_SetPriorityGrouping+0x44>)
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	60d3      	str	r3, [r2, #12]
}
 8002a58:	bf00      	nop
 8002a5a:	3714      	adds	r7, #20
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr
 8002a64:	e000ed00 	.word	0xe000ed00

08002a68 <__NVIC_GetPriorityGrouping>:
{
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a6c:	4b04      	ldr	r3, [pc, #16]	; (8002a80 <__NVIC_GetPriorityGrouping+0x18>)
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	0a1b      	lsrs	r3, r3, #8
 8002a72:	f003 0307 	and.w	r3, r3, #7
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr
 8002a80:	e000ed00 	.word	0xe000ed00

08002a84 <__NVIC_SetPriority>:
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	6039      	str	r1, [r7, #0]
 8002a8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	db0a      	blt.n	8002aae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	b2da      	uxtb	r2, r3
 8002a9c:	490c      	ldr	r1, [pc, #48]	; (8002ad0 <__NVIC_SetPriority+0x4c>)
 8002a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa2:	0112      	lsls	r2, r2, #4
 8002aa4:	b2d2      	uxtb	r2, r2
 8002aa6:	440b      	add	r3, r1
 8002aa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002aac:	e00a      	b.n	8002ac4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	b2da      	uxtb	r2, r3
 8002ab2:	4908      	ldr	r1, [pc, #32]	; (8002ad4 <__NVIC_SetPriority+0x50>)
 8002ab4:	79fb      	ldrb	r3, [r7, #7]
 8002ab6:	f003 030f 	and.w	r3, r3, #15
 8002aba:	3b04      	subs	r3, #4
 8002abc:	0112      	lsls	r2, r2, #4
 8002abe:	b2d2      	uxtb	r2, r2
 8002ac0:	440b      	add	r3, r1
 8002ac2:	761a      	strb	r2, [r3, #24]
}
 8002ac4:	bf00      	nop
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr
 8002ad0:	e000e100 	.word	0xe000e100
 8002ad4:	e000ed00 	.word	0xe000ed00

08002ad8 <NVIC_EncodePriority>:
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b089      	sub	sp, #36	; 0x24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f003 0307 	and.w	r3, r3, #7
 8002aea:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	f1c3 0307 	rsb	r3, r3, #7
 8002af2:	2b04      	cmp	r3, #4
 8002af4:	bf28      	it	cs
 8002af6:	2304      	movcs	r3, #4
 8002af8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	3304      	adds	r3, #4
 8002afe:	2b06      	cmp	r3, #6
 8002b00:	d902      	bls.n	8002b08 <NVIC_EncodePriority+0x30>
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	3b03      	subs	r3, #3
 8002b06:	e000      	b.n	8002b0a <NVIC_EncodePriority+0x32>
 8002b08:	2300      	movs	r3, #0
 8002b0a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	fa02 f303 	lsl.w	r3, r2, r3
 8002b16:	43da      	mvns	r2, r3
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	401a      	ands	r2, r3
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b20:	f04f 31ff 	mov.w	r1, #4294967295
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	fa01 f303 	lsl.w	r3, r1, r3
 8002b2a:	43d9      	mvns	r1, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b30:	4313      	orrs	r3, r2
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3724      	adds	r7, #36	; 0x24
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
	...

08002b40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b50:	d301      	bcc.n	8002b56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b52:	2301      	movs	r3, #1
 8002b54:	e00f      	b.n	8002b76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b56:	4a0a      	ldr	r2, [pc, #40]	; (8002b80 <SysTick_Config+0x40>)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b5e:	210f      	movs	r1, #15
 8002b60:	f04f 30ff 	mov.w	r0, #4294967295
 8002b64:	f7ff ff8e 	bl	8002a84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b68:	4b05      	ldr	r3, [pc, #20]	; (8002b80 <SysTick_Config+0x40>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b6e:	4b04      	ldr	r3, [pc, #16]	; (8002b80 <SysTick_Config+0x40>)
 8002b70:	2207      	movs	r2, #7
 8002b72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3708      	adds	r7, #8
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	e000e010 	.word	0xe000e010

08002b84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f7ff ff47 	bl	8002a20 <__NVIC_SetPriorityGrouping>
}
 8002b92:	bf00      	nop
 8002b94:	3708      	adds	r7, #8
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b086      	sub	sp, #24
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	60b9      	str	r1, [r7, #8]
 8002ba4:	607a      	str	r2, [r7, #4]
 8002ba6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bac:	f7ff ff5c 	bl	8002a68 <__NVIC_GetPriorityGrouping>
 8002bb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	68b9      	ldr	r1, [r7, #8]
 8002bb6:	6978      	ldr	r0, [r7, #20]
 8002bb8:	f7ff ff8e 	bl	8002ad8 <NVIC_EncodePriority>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bc2:	4611      	mov	r1, r2
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7ff ff5d 	bl	8002a84 <__NVIC_SetPriority>
}
 8002bca:	bf00      	nop
 8002bcc:	3718      	adds	r7, #24
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	b082      	sub	sp, #8
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f7ff ffb0 	bl	8002b40 <SysTick_Config>
 8002be0:	4603      	mov	r3, r0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3708      	adds	r7, #8
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
	...

08002bec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b086      	sub	sp, #24
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d101      	bne.n	8002bfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e267      	b.n	80030ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d075      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c0a:	4b88      	ldr	r3, [pc, #544]	; (8002e2c <HAL_RCC_OscConfig+0x240>)
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f003 030c 	and.w	r3, r3, #12
 8002c12:	2b04      	cmp	r3, #4
 8002c14:	d00c      	beq.n	8002c30 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c16:	4b85      	ldr	r3, [pc, #532]	; (8002e2c <HAL_RCC_OscConfig+0x240>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c1e:	2b08      	cmp	r3, #8
 8002c20:	d112      	bne.n	8002c48 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c22:	4b82      	ldr	r3, [pc, #520]	; (8002e2c <HAL_RCC_OscConfig+0x240>)
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c2e:	d10b      	bne.n	8002c48 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c30:	4b7e      	ldr	r3, [pc, #504]	; (8002e2c <HAL_RCC_OscConfig+0x240>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d05b      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x108>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d157      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e242      	b.n	80030ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c50:	d106      	bne.n	8002c60 <HAL_RCC_OscConfig+0x74>
 8002c52:	4b76      	ldr	r3, [pc, #472]	; (8002e2c <HAL_RCC_OscConfig+0x240>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a75      	ldr	r2, [pc, #468]	; (8002e2c <HAL_RCC_OscConfig+0x240>)
 8002c58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c5c:	6013      	str	r3, [r2, #0]
 8002c5e:	e01d      	b.n	8002c9c <HAL_RCC_OscConfig+0xb0>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c68:	d10c      	bne.n	8002c84 <HAL_RCC_OscConfig+0x98>
 8002c6a:	4b70      	ldr	r3, [pc, #448]	; (8002e2c <HAL_RCC_OscConfig+0x240>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a6f      	ldr	r2, [pc, #444]	; (8002e2c <HAL_RCC_OscConfig+0x240>)
 8002c70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c74:	6013      	str	r3, [r2, #0]
 8002c76:	4b6d      	ldr	r3, [pc, #436]	; (8002e2c <HAL_RCC_OscConfig+0x240>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a6c      	ldr	r2, [pc, #432]	; (8002e2c <HAL_RCC_OscConfig+0x240>)
 8002c7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c80:	6013      	str	r3, [r2, #0]
 8002c82:	e00b      	b.n	8002c9c <HAL_RCC_OscConfig+0xb0>
 8002c84:	4b69      	ldr	r3, [pc, #420]	; (8002e2c <HAL_RCC_OscConfig+0x240>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a68      	ldr	r2, [pc, #416]	; (8002e2c <HAL_RCC_OscConfig+0x240>)
 8002c8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c8e:	6013      	str	r3, [r2, #0]
 8002c90:	4b66      	ldr	r3, [pc, #408]	; (8002e2c <HAL_RCC_OscConfig+0x240>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a65      	ldr	r2, [pc, #404]	; (8002e2c <HAL_RCC_OscConfig+0x240>)
 8002c96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d013      	beq.n	8002ccc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca4:	f7ff feb0 	bl	8002a08 <HAL_GetTick>
 8002ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002caa:	e008      	b.n	8002cbe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cac:	f7ff feac 	bl	8002a08 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b64      	cmp	r3, #100	; 0x64
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e207      	b.n	80030ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cbe:	4b5b      	ldr	r3, [pc, #364]	; (8002e2c <HAL_RCC_OscConfig+0x240>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d0f0      	beq.n	8002cac <HAL_RCC_OscConfig+0xc0>
 8002cca:	e014      	b.n	8002cf6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ccc:	f7ff fe9c 	bl	8002a08 <HAL_GetTick>
 8002cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cd2:	e008      	b.n	8002ce6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cd4:	f7ff fe98 	bl	8002a08 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b64      	cmp	r3, #100	; 0x64
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e1f3      	b.n	80030ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ce6:	4b51      	ldr	r3, [pc, #324]	; (8002e2c <HAL_RCC_OscConfig+0x240>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d1f0      	bne.n	8002cd4 <HAL_RCC_OscConfig+0xe8>
 8002cf2:	e000      	b.n	8002cf6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cf4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d063      	beq.n	8002dca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d02:	4b4a      	ldr	r3, [pc, #296]	; (8002e2c <HAL_RCC_OscConfig+0x240>)
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f003 030c 	and.w	r3, r3, #12
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d00b      	beq.n	8002d26 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d0e:	4b47      	ldr	r3, [pc, #284]	; (8002e2c <HAL_RCC_OscConfig+0x240>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d16:	2b08      	cmp	r3, #8
 8002d18:	d11c      	bne.n	8002d54 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d1a:	4b44      	ldr	r3, [pc, #272]	; (8002e2c <HAL_RCC_OscConfig+0x240>)
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d116      	bne.n	8002d54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d26:	4b41      	ldr	r3, [pc, #260]	; (8002e2c <HAL_RCC_OscConfig+0x240>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d005      	beq.n	8002d3e <HAL_RCC_OscConfig+0x152>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d001      	beq.n	8002d3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e1c7      	b.n	80030ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d3e:	4b3b      	ldr	r3, [pc, #236]	; (8002e2c <HAL_RCC_OscConfig+0x240>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	00db      	lsls	r3, r3, #3
 8002d4c:	4937      	ldr	r1, [pc, #220]	; (8002e2c <HAL_RCC_OscConfig+0x240>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d52:	e03a      	b.n	8002dca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d020      	beq.n	8002d9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d5c:	4b34      	ldr	r3, [pc, #208]	; (8002e30 <HAL_RCC_OscConfig+0x244>)
 8002d5e:	2201      	movs	r2, #1
 8002d60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d62:	f7ff fe51 	bl	8002a08 <HAL_GetTick>
 8002d66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d68:	e008      	b.n	8002d7c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d6a:	f7ff fe4d 	bl	8002a08 <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d901      	bls.n	8002d7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e1a8      	b.n	80030ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d7c:	4b2b      	ldr	r3, [pc, #172]	; (8002e2c <HAL_RCC_OscConfig+0x240>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0302 	and.w	r3, r3, #2
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d0f0      	beq.n	8002d6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d88:	4b28      	ldr	r3, [pc, #160]	; (8002e2c <HAL_RCC_OscConfig+0x240>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	691b      	ldr	r3, [r3, #16]
 8002d94:	00db      	lsls	r3, r3, #3
 8002d96:	4925      	ldr	r1, [pc, #148]	; (8002e2c <HAL_RCC_OscConfig+0x240>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	600b      	str	r3, [r1, #0]
 8002d9c:	e015      	b.n	8002dca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d9e:	4b24      	ldr	r3, [pc, #144]	; (8002e30 <HAL_RCC_OscConfig+0x244>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da4:	f7ff fe30 	bl	8002a08 <HAL_GetTick>
 8002da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002daa:	e008      	b.n	8002dbe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dac:	f7ff fe2c 	bl	8002a08 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e187      	b.n	80030ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dbe:	4b1b      	ldr	r3, [pc, #108]	; (8002e2c <HAL_RCC_OscConfig+0x240>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d1f0      	bne.n	8002dac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0308 	and.w	r3, r3, #8
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d036      	beq.n	8002e44 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	695b      	ldr	r3, [r3, #20]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d016      	beq.n	8002e0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dde:	4b15      	ldr	r3, [pc, #84]	; (8002e34 <HAL_RCC_OscConfig+0x248>)
 8002de0:	2201      	movs	r2, #1
 8002de2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002de4:	f7ff fe10 	bl	8002a08 <HAL_GetTick>
 8002de8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dea:	e008      	b.n	8002dfe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dec:	f7ff fe0c 	bl	8002a08 <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e167      	b.n	80030ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dfe:	4b0b      	ldr	r3, [pc, #44]	; (8002e2c <HAL_RCC_OscConfig+0x240>)
 8002e00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d0f0      	beq.n	8002dec <HAL_RCC_OscConfig+0x200>
 8002e0a:	e01b      	b.n	8002e44 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e0c:	4b09      	ldr	r3, [pc, #36]	; (8002e34 <HAL_RCC_OscConfig+0x248>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e12:	f7ff fdf9 	bl	8002a08 <HAL_GetTick>
 8002e16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e18:	e00e      	b.n	8002e38 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e1a:	f7ff fdf5 	bl	8002a08 <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d907      	bls.n	8002e38 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e150      	b.n	80030ce <HAL_RCC_OscConfig+0x4e2>
 8002e2c:	40023800 	.word	0x40023800
 8002e30:	42470000 	.word	0x42470000
 8002e34:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e38:	4b88      	ldr	r3, [pc, #544]	; (800305c <HAL_RCC_OscConfig+0x470>)
 8002e3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e3c:	f003 0302 	and.w	r3, r3, #2
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d1ea      	bne.n	8002e1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0304 	and.w	r3, r3, #4
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	f000 8097 	beq.w	8002f80 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e52:	2300      	movs	r3, #0
 8002e54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e56:	4b81      	ldr	r3, [pc, #516]	; (800305c <HAL_RCC_OscConfig+0x470>)
 8002e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d10f      	bne.n	8002e82 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e62:	2300      	movs	r3, #0
 8002e64:	60bb      	str	r3, [r7, #8]
 8002e66:	4b7d      	ldr	r3, [pc, #500]	; (800305c <HAL_RCC_OscConfig+0x470>)
 8002e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6a:	4a7c      	ldr	r2, [pc, #496]	; (800305c <HAL_RCC_OscConfig+0x470>)
 8002e6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e70:	6413      	str	r3, [r2, #64]	; 0x40
 8002e72:	4b7a      	ldr	r3, [pc, #488]	; (800305c <HAL_RCC_OscConfig+0x470>)
 8002e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e7a:	60bb      	str	r3, [r7, #8]
 8002e7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e82:	4b77      	ldr	r3, [pc, #476]	; (8003060 <HAL_RCC_OscConfig+0x474>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d118      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e8e:	4b74      	ldr	r3, [pc, #464]	; (8003060 <HAL_RCC_OscConfig+0x474>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a73      	ldr	r2, [pc, #460]	; (8003060 <HAL_RCC_OscConfig+0x474>)
 8002e94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e9a:	f7ff fdb5 	bl	8002a08 <HAL_GetTick>
 8002e9e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ea0:	e008      	b.n	8002eb4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ea2:	f7ff fdb1 	bl	8002a08 <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d901      	bls.n	8002eb4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e10c      	b.n	80030ce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eb4:	4b6a      	ldr	r3, [pc, #424]	; (8003060 <HAL_RCC_OscConfig+0x474>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d0f0      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d106      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x2ea>
 8002ec8:	4b64      	ldr	r3, [pc, #400]	; (800305c <HAL_RCC_OscConfig+0x470>)
 8002eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ecc:	4a63      	ldr	r2, [pc, #396]	; (800305c <HAL_RCC_OscConfig+0x470>)
 8002ece:	f043 0301 	orr.w	r3, r3, #1
 8002ed2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ed4:	e01c      	b.n	8002f10 <HAL_RCC_OscConfig+0x324>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	2b05      	cmp	r3, #5
 8002edc:	d10c      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x30c>
 8002ede:	4b5f      	ldr	r3, [pc, #380]	; (800305c <HAL_RCC_OscConfig+0x470>)
 8002ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee2:	4a5e      	ldr	r2, [pc, #376]	; (800305c <HAL_RCC_OscConfig+0x470>)
 8002ee4:	f043 0304 	orr.w	r3, r3, #4
 8002ee8:	6713      	str	r3, [r2, #112]	; 0x70
 8002eea:	4b5c      	ldr	r3, [pc, #368]	; (800305c <HAL_RCC_OscConfig+0x470>)
 8002eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eee:	4a5b      	ldr	r2, [pc, #364]	; (800305c <HAL_RCC_OscConfig+0x470>)
 8002ef0:	f043 0301 	orr.w	r3, r3, #1
 8002ef4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ef6:	e00b      	b.n	8002f10 <HAL_RCC_OscConfig+0x324>
 8002ef8:	4b58      	ldr	r3, [pc, #352]	; (800305c <HAL_RCC_OscConfig+0x470>)
 8002efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002efc:	4a57      	ldr	r2, [pc, #348]	; (800305c <HAL_RCC_OscConfig+0x470>)
 8002efe:	f023 0301 	bic.w	r3, r3, #1
 8002f02:	6713      	str	r3, [r2, #112]	; 0x70
 8002f04:	4b55      	ldr	r3, [pc, #340]	; (800305c <HAL_RCC_OscConfig+0x470>)
 8002f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f08:	4a54      	ldr	r2, [pc, #336]	; (800305c <HAL_RCC_OscConfig+0x470>)
 8002f0a:	f023 0304 	bic.w	r3, r3, #4
 8002f0e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d015      	beq.n	8002f44 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f18:	f7ff fd76 	bl	8002a08 <HAL_GetTick>
 8002f1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f1e:	e00a      	b.n	8002f36 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f20:	f7ff fd72 	bl	8002a08 <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e0cb      	b.n	80030ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f36:	4b49      	ldr	r3, [pc, #292]	; (800305c <HAL_RCC_OscConfig+0x470>)
 8002f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d0ee      	beq.n	8002f20 <HAL_RCC_OscConfig+0x334>
 8002f42:	e014      	b.n	8002f6e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f44:	f7ff fd60 	bl	8002a08 <HAL_GetTick>
 8002f48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f4a:	e00a      	b.n	8002f62 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f4c:	f7ff fd5c 	bl	8002a08 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e0b5      	b.n	80030ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f62:	4b3e      	ldr	r3, [pc, #248]	; (800305c <HAL_RCC_OscConfig+0x470>)
 8002f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d1ee      	bne.n	8002f4c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f6e:	7dfb      	ldrb	r3, [r7, #23]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d105      	bne.n	8002f80 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f74:	4b39      	ldr	r3, [pc, #228]	; (800305c <HAL_RCC_OscConfig+0x470>)
 8002f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f78:	4a38      	ldr	r2, [pc, #224]	; (800305c <HAL_RCC_OscConfig+0x470>)
 8002f7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f7e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	699b      	ldr	r3, [r3, #24]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	f000 80a1 	beq.w	80030cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f8a:	4b34      	ldr	r3, [pc, #208]	; (800305c <HAL_RCC_OscConfig+0x470>)
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f003 030c 	and.w	r3, r3, #12
 8002f92:	2b08      	cmp	r3, #8
 8002f94:	d05c      	beq.n	8003050 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d141      	bne.n	8003022 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f9e:	4b31      	ldr	r3, [pc, #196]	; (8003064 <HAL_RCC_OscConfig+0x478>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa4:	f7ff fd30 	bl	8002a08 <HAL_GetTick>
 8002fa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002faa:	e008      	b.n	8002fbe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fac:	f7ff fd2c 	bl	8002a08 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e087      	b.n	80030ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fbe:	4b27      	ldr	r3, [pc, #156]	; (800305c <HAL_RCC_OscConfig+0x470>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d1f0      	bne.n	8002fac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	69da      	ldr	r2, [r3, #28]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a1b      	ldr	r3, [r3, #32]
 8002fd2:	431a      	orrs	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd8:	019b      	lsls	r3, r3, #6
 8002fda:	431a      	orrs	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe0:	085b      	lsrs	r3, r3, #1
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	041b      	lsls	r3, r3, #16
 8002fe6:	431a      	orrs	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fec:	061b      	lsls	r3, r3, #24
 8002fee:	491b      	ldr	r1, [pc, #108]	; (800305c <HAL_RCC_OscConfig+0x470>)
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ff4:	4b1b      	ldr	r3, [pc, #108]	; (8003064 <HAL_RCC_OscConfig+0x478>)
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ffa:	f7ff fd05 	bl	8002a08 <HAL_GetTick>
 8002ffe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003000:	e008      	b.n	8003014 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003002:	f7ff fd01 	bl	8002a08 <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	2b02      	cmp	r3, #2
 800300e:	d901      	bls.n	8003014 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e05c      	b.n	80030ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003014:	4b11      	ldr	r3, [pc, #68]	; (800305c <HAL_RCC_OscConfig+0x470>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d0f0      	beq.n	8003002 <HAL_RCC_OscConfig+0x416>
 8003020:	e054      	b.n	80030cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003022:	4b10      	ldr	r3, [pc, #64]	; (8003064 <HAL_RCC_OscConfig+0x478>)
 8003024:	2200      	movs	r2, #0
 8003026:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003028:	f7ff fcee 	bl	8002a08 <HAL_GetTick>
 800302c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800302e:	e008      	b.n	8003042 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003030:	f7ff fcea 	bl	8002a08 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b02      	cmp	r3, #2
 800303c:	d901      	bls.n	8003042 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e045      	b.n	80030ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003042:	4b06      	ldr	r3, [pc, #24]	; (800305c <HAL_RCC_OscConfig+0x470>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1f0      	bne.n	8003030 <HAL_RCC_OscConfig+0x444>
 800304e:	e03d      	b.n	80030cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	2b01      	cmp	r3, #1
 8003056:	d107      	bne.n	8003068 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e038      	b.n	80030ce <HAL_RCC_OscConfig+0x4e2>
 800305c:	40023800 	.word	0x40023800
 8003060:	40007000 	.word	0x40007000
 8003064:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003068:	4b1b      	ldr	r3, [pc, #108]	; (80030d8 <HAL_RCC_OscConfig+0x4ec>)
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d028      	beq.n	80030c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003080:	429a      	cmp	r2, r3
 8003082:	d121      	bne.n	80030c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800308e:	429a      	cmp	r2, r3
 8003090:	d11a      	bne.n	80030c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003098:	4013      	ands	r3, r2
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800309e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d111      	bne.n	80030c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ae:	085b      	lsrs	r3, r3, #1
 80030b0:	3b01      	subs	r3, #1
 80030b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d107      	bne.n	80030c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d001      	beq.n	80030cc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e000      	b.n	80030ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3718      	adds	r7, #24
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	40023800 	.word	0x40023800

080030dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d101      	bne.n	80030f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e0cc      	b.n	800328a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030f0:	4b68      	ldr	r3, [pc, #416]	; (8003294 <HAL_RCC_ClockConfig+0x1b8>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0307 	and.w	r3, r3, #7
 80030f8:	683a      	ldr	r2, [r7, #0]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d90c      	bls.n	8003118 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030fe:	4b65      	ldr	r3, [pc, #404]	; (8003294 <HAL_RCC_ClockConfig+0x1b8>)
 8003100:	683a      	ldr	r2, [r7, #0]
 8003102:	b2d2      	uxtb	r2, r2
 8003104:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003106:	4b63      	ldr	r3, [pc, #396]	; (8003294 <HAL_RCC_ClockConfig+0x1b8>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0307 	and.w	r3, r3, #7
 800310e:	683a      	ldr	r2, [r7, #0]
 8003110:	429a      	cmp	r2, r3
 8003112:	d001      	beq.n	8003118 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e0b8      	b.n	800328a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0302 	and.w	r3, r3, #2
 8003120:	2b00      	cmp	r3, #0
 8003122:	d020      	beq.n	8003166 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0304 	and.w	r3, r3, #4
 800312c:	2b00      	cmp	r3, #0
 800312e:	d005      	beq.n	800313c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003130:	4b59      	ldr	r3, [pc, #356]	; (8003298 <HAL_RCC_ClockConfig+0x1bc>)
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	4a58      	ldr	r2, [pc, #352]	; (8003298 <HAL_RCC_ClockConfig+0x1bc>)
 8003136:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800313a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0308 	and.w	r3, r3, #8
 8003144:	2b00      	cmp	r3, #0
 8003146:	d005      	beq.n	8003154 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003148:	4b53      	ldr	r3, [pc, #332]	; (8003298 <HAL_RCC_ClockConfig+0x1bc>)
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	4a52      	ldr	r2, [pc, #328]	; (8003298 <HAL_RCC_ClockConfig+0x1bc>)
 800314e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003152:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003154:	4b50      	ldr	r3, [pc, #320]	; (8003298 <HAL_RCC_ClockConfig+0x1bc>)
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	494d      	ldr	r1, [pc, #308]	; (8003298 <HAL_RCC_ClockConfig+0x1bc>)
 8003162:	4313      	orrs	r3, r2
 8003164:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	2b00      	cmp	r3, #0
 8003170:	d044      	beq.n	80031fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	2b01      	cmp	r3, #1
 8003178:	d107      	bne.n	800318a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800317a:	4b47      	ldr	r3, [pc, #284]	; (8003298 <HAL_RCC_ClockConfig+0x1bc>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d119      	bne.n	80031ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e07f      	b.n	800328a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	2b02      	cmp	r3, #2
 8003190:	d003      	beq.n	800319a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003196:	2b03      	cmp	r3, #3
 8003198:	d107      	bne.n	80031aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800319a:	4b3f      	ldr	r3, [pc, #252]	; (8003298 <HAL_RCC_ClockConfig+0x1bc>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d109      	bne.n	80031ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e06f      	b.n	800328a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031aa:	4b3b      	ldr	r3, [pc, #236]	; (8003298 <HAL_RCC_ClockConfig+0x1bc>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d101      	bne.n	80031ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e067      	b.n	800328a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031ba:	4b37      	ldr	r3, [pc, #220]	; (8003298 <HAL_RCC_ClockConfig+0x1bc>)
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f023 0203 	bic.w	r2, r3, #3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	4934      	ldr	r1, [pc, #208]	; (8003298 <HAL_RCC_ClockConfig+0x1bc>)
 80031c8:	4313      	orrs	r3, r2
 80031ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031cc:	f7ff fc1c 	bl	8002a08 <HAL_GetTick>
 80031d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031d2:	e00a      	b.n	80031ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031d4:	f7ff fc18 	bl	8002a08 <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	f241 3288 	movw	r2, #5000	; 0x1388
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d901      	bls.n	80031ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e04f      	b.n	800328a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ea:	4b2b      	ldr	r3, [pc, #172]	; (8003298 <HAL_RCC_ClockConfig+0x1bc>)
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f003 020c 	and.w	r2, r3, #12
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d1eb      	bne.n	80031d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031fc:	4b25      	ldr	r3, [pc, #148]	; (8003294 <HAL_RCC_ClockConfig+0x1b8>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0307 	and.w	r3, r3, #7
 8003204:	683a      	ldr	r2, [r7, #0]
 8003206:	429a      	cmp	r2, r3
 8003208:	d20c      	bcs.n	8003224 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800320a:	4b22      	ldr	r3, [pc, #136]	; (8003294 <HAL_RCC_ClockConfig+0x1b8>)
 800320c:	683a      	ldr	r2, [r7, #0]
 800320e:	b2d2      	uxtb	r2, r2
 8003210:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003212:	4b20      	ldr	r3, [pc, #128]	; (8003294 <HAL_RCC_ClockConfig+0x1b8>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0307 	and.w	r3, r3, #7
 800321a:	683a      	ldr	r2, [r7, #0]
 800321c:	429a      	cmp	r2, r3
 800321e:	d001      	beq.n	8003224 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e032      	b.n	800328a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0304 	and.w	r3, r3, #4
 800322c:	2b00      	cmp	r3, #0
 800322e:	d008      	beq.n	8003242 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003230:	4b19      	ldr	r3, [pc, #100]	; (8003298 <HAL_RCC_ClockConfig+0x1bc>)
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	4916      	ldr	r1, [pc, #88]	; (8003298 <HAL_RCC_ClockConfig+0x1bc>)
 800323e:	4313      	orrs	r3, r2
 8003240:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0308 	and.w	r3, r3, #8
 800324a:	2b00      	cmp	r3, #0
 800324c:	d009      	beq.n	8003262 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800324e:	4b12      	ldr	r3, [pc, #72]	; (8003298 <HAL_RCC_ClockConfig+0x1bc>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	00db      	lsls	r3, r3, #3
 800325c:	490e      	ldr	r1, [pc, #56]	; (8003298 <HAL_RCC_ClockConfig+0x1bc>)
 800325e:	4313      	orrs	r3, r2
 8003260:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003262:	f000 f821 	bl	80032a8 <HAL_RCC_GetSysClockFreq>
 8003266:	4602      	mov	r2, r0
 8003268:	4b0b      	ldr	r3, [pc, #44]	; (8003298 <HAL_RCC_ClockConfig+0x1bc>)
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	091b      	lsrs	r3, r3, #4
 800326e:	f003 030f 	and.w	r3, r3, #15
 8003272:	490a      	ldr	r1, [pc, #40]	; (800329c <HAL_RCC_ClockConfig+0x1c0>)
 8003274:	5ccb      	ldrb	r3, [r1, r3]
 8003276:	fa22 f303 	lsr.w	r3, r2, r3
 800327a:	4a09      	ldr	r2, [pc, #36]	; (80032a0 <HAL_RCC_ClockConfig+0x1c4>)
 800327c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800327e:	4b09      	ldr	r3, [pc, #36]	; (80032a4 <HAL_RCC_ClockConfig+0x1c8>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4618      	mov	r0, r3
 8003284:	f7ff fb7c 	bl	8002980 <HAL_InitTick>

  return HAL_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3710      	adds	r7, #16
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	40023c00 	.word	0x40023c00
 8003298:	40023800 	.word	0x40023800
 800329c:	080076b8 	.word	0x080076b8
 80032a0:	20000008 	.word	0x20000008
 80032a4:	2000000c 	.word	0x2000000c

080032a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032ac:	b090      	sub	sp, #64	; 0x40
 80032ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80032b0:	2300      	movs	r3, #0
 80032b2:	637b      	str	r3, [r7, #52]	; 0x34
 80032b4:	2300      	movs	r3, #0
 80032b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032b8:	2300      	movs	r3, #0
 80032ba:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80032bc:	2300      	movs	r3, #0
 80032be:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032c0:	4b59      	ldr	r3, [pc, #356]	; (8003428 <HAL_RCC_GetSysClockFreq+0x180>)
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	f003 030c 	and.w	r3, r3, #12
 80032c8:	2b08      	cmp	r3, #8
 80032ca:	d00d      	beq.n	80032e8 <HAL_RCC_GetSysClockFreq+0x40>
 80032cc:	2b08      	cmp	r3, #8
 80032ce:	f200 80a1 	bhi.w	8003414 <HAL_RCC_GetSysClockFreq+0x16c>
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d002      	beq.n	80032dc <HAL_RCC_GetSysClockFreq+0x34>
 80032d6:	2b04      	cmp	r3, #4
 80032d8:	d003      	beq.n	80032e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80032da:	e09b      	b.n	8003414 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032dc:	4b53      	ldr	r3, [pc, #332]	; (800342c <HAL_RCC_GetSysClockFreq+0x184>)
 80032de:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80032e0:	e09b      	b.n	800341a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032e2:	4b53      	ldr	r3, [pc, #332]	; (8003430 <HAL_RCC_GetSysClockFreq+0x188>)
 80032e4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80032e6:	e098      	b.n	800341a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032e8:	4b4f      	ldr	r3, [pc, #316]	; (8003428 <HAL_RCC_GetSysClockFreq+0x180>)
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032f0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032f2:	4b4d      	ldr	r3, [pc, #308]	; (8003428 <HAL_RCC_GetSysClockFreq+0x180>)
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d028      	beq.n	8003350 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032fe:	4b4a      	ldr	r3, [pc, #296]	; (8003428 <HAL_RCC_GetSysClockFreq+0x180>)
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	099b      	lsrs	r3, r3, #6
 8003304:	2200      	movs	r2, #0
 8003306:	623b      	str	r3, [r7, #32]
 8003308:	627a      	str	r2, [r7, #36]	; 0x24
 800330a:	6a3b      	ldr	r3, [r7, #32]
 800330c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003310:	2100      	movs	r1, #0
 8003312:	4b47      	ldr	r3, [pc, #284]	; (8003430 <HAL_RCC_GetSysClockFreq+0x188>)
 8003314:	fb03 f201 	mul.w	r2, r3, r1
 8003318:	2300      	movs	r3, #0
 800331a:	fb00 f303 	mul.w	r3, r0, r3
 800331e:	4413      	add	r3, r2
 8003320:	4a43      	ldr	r2, [pc, #268]	; (8003430 <HAL_RCC_GetSysClockFreq+0x188>)
 8003322:	fba0 1202 	umull	r1, r2, r0, r2
 8003326:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003328:	460a      	mov	r2, r1
 800332a:	62ba      	str	r2, [r7, #40]	; 0x28
 800332c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800332e:	4413      	add	r3, r2
 8003330:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003334:	2200      	movs	r2, #0
 8003336:	61bb      	str	r3, [r7, #24]
 8003338:	61fa      	str	r2, [r7, #28]
 800333a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800333e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003342:	f7fd fca9 	bl	8000c98 <__aeabi_uldivmod>
 8003346:	4602      	mov	r2, r0
 8003348:	460b      	mov	r3, r1
 800334a:	4613      	mov	r3, r2
 800334c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800334e:	e053      	b.n	80033f8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003350:	4b35      	ldr	r3, [pc, #212]	; (8003428 <HAL_RCC_GetSysClockFreq+0x180>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	099b      	lsrs	r3, r3, #6
 8003356:	2200      	movs	r2, #0
 8003358:	613b      	str	r3, [r7, #16]
 800335a:	617a      	str	r2, [r7, #20]
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003362:	f04f 0b00 	mov.w	fp, #0
 8003366:	4652      	mov	r2, sl
 8003368:	465b      	mov	r3, fp
 800336a:	f04f 0000 	mov.w	r0, #0
 800336e:	f04f 0100 	mov.w	r1, #0
 8003372:	0159      	lsls	r1, r3, #5
 8003374:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003378:	0150      	lsls	r0, r2, #5
 800337a:	4602      	mov	r2, r0
 800337c:	460b      	mov	r3, r1
 800337e:	ebb2 080a 	subs.w	r8, r2, sl
 8003382:	eb63 090b 	sbc.w	r9, r3, fp
 8003386:	f04f 0200 	mov.w	r2, #0
 800338a:	f04f 0300 	mov.w	r3, #0
 800338e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003392:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003396:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800339a:	ebb2 0408 	subs.w	r4, r2, r8
 800339e:	eb63 0509 	sbc.w	r5, r3, r9
 80033a2:	f04f 0200 	mov.w	r2, #0
 80033a6:	f04f 0300 	mov.w	r3, #0
 80033aa:	00eb      	lsls	r3, r5, #3
 80033ac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033b0:	00e2      	lsls	r2, r4, #3
 80033b2:	4614      	mov	r4, r2
 80033b4:	461d      	mov	r5, r3
 80033b6:	eb14 030a 	adds.w	r3, r4, sl
 80033ba:	603b      	str	r3, [r7, #0]
 80033bc:	eb45 030b 	adc.w	r3, r5, fp
 80033c0:	607b      	str	r3, [r7, #4]
 80033c2:	f04f 0200 	mov.w	r2, #0
 80033c6:	f04f 0300 	mov.w	r3, #0
 80033ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033ce:	4629      	mov	r1, r5
 80033d0:	028b      	lsls	r3, r1, #10
 80033d2:	4621      	mov	r1, r4
 80033d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033d8:	4621      	mov	r1, r4
 80033da:	028a      	lsls	r2, r1, #10
 80033dc:	4610      	mov	r0, r2
 80033de:	4619      	mov	r1, r3
 80033e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033e2:	2200      	movs	r2, #0
 80033e4:	60bb      	str	r3, [r7, #8]
 80033e6:	60fa      	str	r2, [r7, #12]
 80033e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033ec:	f7fd fc54 	bl	8000c98 <__aeabi_uldivmod>
 80033f0:	4602      	mov	r2, r0
 80033f2:	460b      	mov	r3, r1
 80033f4:	4613      	mov	r3, r2
 80033f6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80033f8:	4b0b      	ldr	r3, [pc, #44]	; (8003428 <HAL_RCC_GetSysClockFreq+0x180>)
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	0c1b      	lsrs	r3, r3, #16
 80033fe:	f003 0303 	and.w	r3, r3, #3
 8003402:	3301      	adds	r3, #1
 8003404:	005b      	lsls	r3, r3, #1
 8003406:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003408:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800340a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800340c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003410:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003412:	e002      	b.n	800341a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003414:	4b05      	ldr	r3, [pc, #20]	; (800342c <HAL_RCC_GetSysClockFreq+0x184>)
 8003416:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003418:	bf00      	nop
    }
  }
  return sysclockfreq;
 800341a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800341c:	4618      	mov	r0, r3
 800341e:	3740      	adds	r7, #64	; 0x40
 8003420:	46bd      	mov	sp, r7
 8003422:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003426:	bf00      	nop
 8003428:	40023800 	.word	0x40023800
 800342c:	00f42400 	.word	0x00f42400
 8003430:	017d7840 	.word	0x017d7840

08003434 <LL_GPIO_SetPinMode>:
{
 8003434:	b480      	push	{r7}
 8003436:	b089      	sub	sp, #36	; 0x24
 8003438:	af00      	add	r7, sp, #0
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	60b9      	str	r1, [r7, #8]
 800343e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	fa93 f3a3 	rbit	r3, r3
 800344e:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	fab3 f383 	clz	r3, r3
 8003456:	b2db      	uxtb	r3, r3
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	2103      	movs	r1, #3
 800345c:	fa01 f303 	lsl.w	r3, r1, r3
 8003460:	43db      	mvns	r3, r3
 8003462:	401a      	ands	r2, r3
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	fa93 f3a3 	rbit	r3, r3
 800346e:	61bb      	str	r3, [r7, #24]
  return result;
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	fab3 f383 	clz	r3, r3
 8003476:	b2db      	uxtb	r3, r3
 8003478:	005b      	lsls	r3, r3, #1
 800347a:	6879      	ldr	r1, [r7, #4]
 800347c:	fa01 f303 	lsl.w	r3, r1, r3
 8003480:	431a      	orrs	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	601a      	str	r2, [r3, #0]
}
 8003486:	bf00      	nop
 8003488:	3724      	adds	r7, #36	; 0x24
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr

08003492 <LL_GPIO_SetPinOutputType>:
{
 8003492:	b480      	push	{r7}
 8003494:	b085      	sub	sp, #20
 8003496:	af00      	add	r7, sp, #0
 8003498:	60f8      	str	r0, [r7, #12]
 800349a:	60b9      	str	r1, [r7, #8]
 800349c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	685a      	ldr	r2, [r3, #4]
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	43db      	mvns	r3, r3
 80034a6:	401a      	ands	r2, r3
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	6879      	ldr	r1, [r7, #4]
 80034ac:	fb01 f303 	mul.w	r3, r1, r3
 80034b0:	431a      	orrs	r2, r3
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	605a      	str	r2, [r3, #4]
}
 80034b6:	bf00      	nop
 80034b8:	3714      	adds	r7, #20
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr

080034c2 <LL_GPIO_SetPinSpeed>:
{
 80034c2:	b480      	push	{r7}
 80034c4:	b089      	sub	sp, #36	; 0x24
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	60f8      	str	r0, [r7, #12]
 80034ca:	60b9      	str	r1, [r7, #8]
 80034cc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	689a      	ldr	r2, [r3, #8]
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	fa93 f3a3 	rbit	r3, r3
 80034dc:	613b      	str	r3, [r7, #16]
  return result;
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	fab3 f383 	clz	r3, r3
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	005b      	lsls	r3, r3, #1
 80034e8:	2103      	movs	r1, #3
 80034ea:	fa01 f303 	lsl.w	r3, r1, r3
 80034ee:	43db      	mvns	r3, r3
 80034f0:	401a      	ands	r2, r3
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	fa93 f3a3 	rbit	r3, r3
 80034fc:	61bb      	str	r3, [r7, #24]
  return result;
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	fab3 f383 	clz	r3, r3
 8003504:	b2db      	uxtb	r3, r3
 8003506:	005b      	lsls	r3, r3, #1
 8003508:	6879      	ldr	r1, [r7, #4]
 800350a:	fa01 f303 	lsl.w	r3, r1, r3
 800350e:	431a      	orrs	r2, r3
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	609a      	str	r2, [r3, #8]
}
 8003514:	bf00      	nop
 8003516:	3724      	adds	r7, #36	; 0x24
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <LL_GPIO_SetPinPull>:
{
 8003520:	b480      	push	{r7}
 8003522:	b089      	sub	sp, #36	; 0x24
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	68da      	ldr	r2, [r3, #12]
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	fa93 f3a3 	rbit	r3, r3
 800353a:	613b      	str	r3, [r7, #16]
  return result;
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	fab3 f383 	clz	r3, r3
 8003542:	b2db      	uxtb	r3, r3
 8003544:	005b      	lsls	r3, r3, #1
 8003546:	2103      	movs	r1, #3
 8003548:	fa01 f303 	lsl.w	r3, r1, r3
 800354c:	43db      	mvns	r3, r3
 800354e:	401a      	ands	r2, r3
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	fa93 f3a3 	rbit	r3, r3
 800355a:	61bb      	str	r3, [r7, #24]
  return result;
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	fab3 f383 	clz	r3, r3
 8003562:	b2db      	uxtb	r3, r3
 8003564:	005b      	lsls	r3, r3, #1
 8003566:	6879      	ldr	r1, [r7, #4]
 8003568:	fa01 f303 	lsl.w	r3, r1, r3
 800356c:	431a      	orrs	r2, r3
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	60da      	str	r2, [r3, #12]
}
 8003572:	bf00      	nop
 8003574:	3724      	adds	r7, #36	; 0x24
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr

0800357e <LL_GPIO_SetAFPin_0_7>:
{
 800357e:	b480      	push	{r7}
 8003580:	b089      	sub	sp, #36	; 0x24
 8003582:	af00      	add	r7, sp, #0
 8003584:	60f8      	str	r0, [r7, #12]
 8003586:	60b9      	str	r1, [r7, #8]
 8003588:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6a1a      	ldr	r2, [r3, #32]
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	fa93 f3a3 	rbit	r3, r3
 8003598:	613b      	str	r3, [r7, #16]
  return result;
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	fab3 f383 	clz	r3, r3
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	210f      	movs	r1, #15
 80035a6:	fa01 f303 	lsl.w	r3, r1, r3
 80035aa:	43db      	mvns	r3, r3
 80035ac:	401a      	ands	r2, r3
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	fa93 f3a3 	rbit	r3, r3
 80035b8:	61bb      	str	r3, [r7, #24]
  return result;
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	fab3 f383 	clz	r3, r3
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	6879      	ldr	r1, [r7, #4]
 80035c6:	fa01 f303 	lsl.w	r3, r1, r3
 80035ca:	431a      	orrs	r2, r3
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	621a      	str	r2, [r3, #32]
}
 80035d0:	bf00      	nop
 80035d2:	3724      	adds	r7, #36	; 0x24
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr

080035dc <LL_GPIO_SetAFPin_8_15>:
{
 80035dc:	b480      	push	{r7}
 80035de:	b089      	sub	sp, #36	; 0x24
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	0a1b      	lsrs	r3, r3, #8
 80035f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	fa93 f3a3 	rbit	r3, r3
 80035f8:	613b      	str	r3, [r7, #16]
  return result;
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	fab3 f383 	clz	r3, r3
 8003600:	b2db      	uxtb	r3, r3
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	210f      	movs	r1, #15
 8003606:	fa01 f303 	lsl.w	r3, r1, r3
 800360a:	43db      	mvns	r3, r3
 800360c:	401a      	ands	r2, r3
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	0a1b      	lsrs	r3, r3, #8
 8003612:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	fa93 f3a3 	rbit	r3, r3
 800361a:	61bb      	str	r3, [r7, #24]
  return result;
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	fab3 f383 	clz	r3, r3
 8003622:	b2db      	uxtb	r3, r3
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	6879      	ldr	r1, [r7, #4]
 8003628:	fa01 f303 	lsl.w	r3, r1, r3
 800362c:	431a      	orrs	r2, r3
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003632:	bf00      	nop
 8003634:	3724      	adds	r7, #36	; 0x24
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr

0800363e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800363e:	b580      	push	{r7, lr}
 8003640:	b088      	sub	sp, #32
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
 8003646:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8003648:	2300      	movs	r3, #0
 800364a:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 800364c:	2300      	movs	r3, #0
 800364e:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	fa93 f3a3 	rbit	r3, r3
 800365c:	613b      	str	r3, [r7, #16]
  return result;
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	fab3 f383 	clz	r3, r3
 8003664:	b2db      	uxtb	r3, r3
 8003666:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003668:	e050      	b.n	800370c <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	2101      	movs	r1, #1
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	fa01 f303 	lsl.w	r3, r1, r3
 8003676:	4013      	ands	r3, r2
 8003678:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d042      	beq.n	8003706 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	2b01      	cmp	r3, #1
 8003686:	d003      	beq.n	8003690 <LL_GPIO_Init+0x52>
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	2b02      	cmp	r3, #2
 800368e:	d10d      	bne.n	80036ac <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	461a      	mov	r2, r3
 8003696:	69b9      	ldr	r1, [r7, #24]
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f7ff ff12 	bl	80034c2 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	461a      	mov	r2, r3
 80036a4:	69b9      	ldr	r1, [r7, #24]
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f7ff fef3 	bl	8003492 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	691b      	ldr	r3, [r3, #16]
 80036b0:	461a      	mov	r2, r3
 80036b2:	69b9      	ldr	r1, [r7, #24]
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f7ff ff33 	bl	8003520 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d11a      	bne.n	80036f8 <LL_GPIO_Init+0xba>
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	fa93 f3a3 	rbit	r3, r3
 80036cc:	60bb      	str	r3, [r7, #8]
  return result;
 80036ce:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80036d0:	fab3 f383 	clz	r3, r3
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	2b07      	cmp	r3, #7
 80036d8:	d807      	bhi.n	80036ea <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	695b      	ldr	r3, [r3, #20]
 80036de:	461a      	mov	r2, r3
 80036e0:	69b9      	ldr	r1, [r7, #24]
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f7ff ff4b 	bl	800357e <LL_GPIO_SetAFPin_0_7>
 80036e8:	e006      	b.n	80036f8 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	695b      	ldr	r3, [r3, #20]
 80036ee:	461a      	mov	r2, r3
 80036f0:	69b9      	ldr	r1, [r7, #24]
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f7ff ff72 	bl	80035dc <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	461a      	mov	r2, r3
 80036fe:	69b9      	ldr	r1, [r7, #24]
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f7ff fe97 	bl	8003434 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	3301      	adds	r3, #1
 800370a:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	fa22 f303 	lsr.w	r3, r2, r3
 8003716:	2b00      	cmp	r3, #0
 8003718:	d1a7      	bne.n	800366a <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 800371a:	2300      	movs	r3, #0
}
 800371c:	4618      	mov	r0, r3
 800371e:	3720      	adds	r7, #32
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}

08003724 <LL_I2C_Enable>:
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f043 0201 	orr.w	r2, r3, #1
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	601a      	str	r2, [r3, #0]
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <LL_I2C_Disable>:
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f023 0201 	bic.w	r2, r3, #1
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	601a      	str	r2, [r3, #0]
}
 8003758:	bf00      	nop
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <LL_I2C_ConfigFilters>:
{
 8003764:	b480      	push	{r7}
 8003766:	b085      	sub	sp, #20
 8003768:	af00      	add	r7, sp, #0
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	60b9      	str	r1, [r7, #8]
 800376e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->FLTR, I2C_FLTR_ANOFF | I2C_FLTR_DNF, AnalogFilter | DigitalFilter);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003774:	f023 021f 	bic.w	r2, r3, #31
 8003778:	68b9      	ldr	r1, [r7, #8]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	430b      	orrs	r3, r1
 800377e:	431a      	orrs	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003784:	bf00      	nop
 8003786:	3714      	adds	r7, #20
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <LL_I2C_SetOwnAddress1>:
{
 8003790:	b480      	push	{r7}
 8003792:	b085      	sub	sp, #20
 8003794:	af00      	add	r7, sp, #0
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80037a4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80037a8:	68b9      	ldr	r1, [r7, #8]
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	430a      	orrs	r2, r1
 80037ae:	431a      	orrs	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	609a      	str	r2, [r3, #8]
}
 80037b4:	bf00      	nop
 80037b6:	3714      	adds	r7, #20
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <LL_I2C_ConfigSpeed>:
{
 80037c0:	b480      	push	{r7}
 80037c2:	b087      	sub	sp, #28
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	607a      	str	r2, [r7, #4]
 80037cc:	603b      	str	r3, [r7, #0]
  uint32_t freqrange = 0x0U;
 80037ce:	2300      	movs	r3, #0
 80037d0:	613b      	str	r3, [r7, #16]
  uint32_t clockconfig = 0x0U;
 80037d2:	2300      	movs	r3, #0
 80037d4:	617b      	str	r3, [r7, #20]
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	4a42      	ldr	r2, [pc, #264]	; (80038e4 <LL_I2C_ConfigSpeed+0x124>)
 80037da:	fba2 2303 	umull	r2, r3, r2, r3
 80037de:	0c9b      	lsrs	r3, r3, #18
 80037e0:	613b      	str	r3, [r7, #16]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	431a      	orrs	r2, r3
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	605a      	str	r2, [r3, #4]
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6a1b      	ldr	r3, [r3, #32]
 80037f6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	493a      	ldr	r1, [pc, #232]	; (80038e8 <LL_I2C_ConfigSpeed+0x128>)
 80037fe:	428b      	cmp	r3, r1
 8003800:	d802      	bhi.n	8003808 <LL_I2C_ConfigSpeed+0x48>
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	3301      	adds	r3, #1
 8003806:	e009      	b.n	800381c <LL_I2C_ConfigSpeed+0x5c>
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800380e:	fb01 f303 	mul.w	r3, r1, r3
 8003812:	4936      	ldr	r1, [pc, #216]	; (80038ec <LL_I2C_ConfigSpeed+0x12c>)
 8003814:	fba1 1303 	umull	r1, r3, r1, r3
 8003818:	099b      	lsrs	r3, r3, #6
 800381a:	3301      	adds	r3, #1
 800381c:	431a      	orrs	r2, r3
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	621a      	str	r2, [r3, #32]
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a30      	ldr	r2, [pc, #192]	; (80038e8 <LL_I2C_ConfigSpeed+0x128>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d939      	bls.n	800389e <LL_I2C_ConfigSpeed+0xde>
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d117      	bne.n	8003860 <LL_I2C_ConfigSpeed+0xa0>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	4613      	mov	r3, r2
 8003834:	005b      	lsls	r3, r3, #1
 8003836:	4413      	add	r3, r2
 8003838:	68ba      	ldr	r2, [r7, #8]
 800383a:	fbb2 f3f3 	udiv	r3, r2, r3
 800383e:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003842:	2b00      	cmp	r3, #0
 8003844:	d009      	beq.n	800385a <LL_I2C_ConfigSpeed+0x9a>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	4613      	mov	r3, r2
 800384a:	005b      	lsls	r3, r3, #1
 800384c:	4413      	add	r3, r2
 800384e:	68ba      	ldr	r2, [r7, #8]
 8003850:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003854:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003858:	e01d      	b.n	8003896 <LL_I2C_ConfigSpeed+0xd6>
 800385a:	f248 0301 	movw	r3, #32769	; 0x8001
 800385e:	e01a      	b.n	8003896 <LL_I2C_ConfigSpeed+0xd6>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	4613      	mov	r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	4413      	add	r3, r2
 8003868:	009a      	lsls	r2, r3, #2
 800386a:	4413      	add	r3, r2
 800386c:	68ba      	ldr	r2, [r7, #8]
 800386e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003872:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003876:	2b00      	cmp	r3, #0
 8003878:	d00b      	beq.n	8003892 <LL_I2C_ConfigSpeed+0xd2>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	4613      	mov	r3, r2
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	4413      	add	r3, r2
 8003882:	009a      	lsls	r2, r3, #2
 8003884:	4413      	add	r3, r2
 8003886:	68ba      	ldr	r2, [r7, #8]
 8003888:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800388c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003890:	e001      	b.n	8003896 <LL_I2C_ConfigSpeed+0xd6>
 8003892:	f248 0301 	movw	r3, #32769	; 0x8001
 8003896:	683a      	ldr	r2, [r7, #0]
 8003898:	4313      	orrs	r3, r2
 800389a:	617b      	str	r3, [r7, #20]
 800389c:	e011      	b.n	80038c2 <LL_I2C_ConfigSpeed+0x102>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	68ba      	ldr	r2, [r7, #8]
 80038a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80038a8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80038ac:	4013      	ands	r3, r2
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d005      	beq.n	80038be <LL_I2C_ConfigSpeed+0xfe>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 80038b6:	68ba      	ldr	r2, [r7, #8]
 80038b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038bc:	e000      	b.n	80038c0 <LL_I2C_ConfigSpeed+0x100>
 80038be:	2304      	movs	r3, #4
 80038c0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	69db      	ldr	r3, [r3, #28]
 80038c6:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 80038ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80038ce:	697a      	ldr	r2, [r7, #20]
 80038d0:	431a      	orrs	r2, r3
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	61da      	str	r2, [r3, #28]
}
 80038d6:	bf00      	nop
 80038d8:	371c      	adds	r7, #28
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop
 80038e4:	431bde83 	.word	0x431bde83
 80038e8:	000186a0 	.word	0x000186a0
 80038ec:	10624dd3 	.word	0x10624dd3

080038f0 <LL_I2C_SetMode>:
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f023 021a 	bic.w	r2, r3, #26
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	431a      	orrs	r2, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	601a      	str	r2, [r3, #0]
}
 800390a:	bf00      	nop
 800390c:	370c      	adds	r7, #12
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr

08003916 <LL_I2C_AcknowledgeNextData>:
{
 8003916:	b480      	push	{r7}
 8003918:	b083      	sub	sp, #12
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
 800391e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	431a      	orrs	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	601a      	str	r2, [r3, #0]
}
 8003930:	bf00      	nop
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b086      	sub	sp, #24
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f7ff fefc 	bl	8003744 <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800394c:	f107 0308 	add.w	r3, r7, #8
 8003950:	4618      	mov	r0, r3
 8003952:	f000 f89d 	bl	8003a90 <LL_RCC_GetSystemClocksFreq>
  /*---------------------------- I2Cx FLTR Configuration -----------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_FLTR_ANFOFF bit
   * - DigitalFilter: I2C_FLTR_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	68d9      	ldr	r1, [r3, #12]
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	461a      	mov	r2, r3
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f7ff feff 	bl	8003764 <LL_I2C_ConfigFilters>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 8003966:	6939      	ldr	r1, [r7, #16]
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	685a      	ldr	r2, [r3, #4]
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f7ff ff25 	bl	80037c0 <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	6959      	ldr	r1, [r3, #20]
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	69db      	ldr	r3, [r3, #28]
 800397e:	461a      	mov	r2, r3
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f7ff ff05 	bl	8003790 <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4619      	mov	r1, r3
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f7ff ffaf 	bl	80038f0 <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f7ff fec6 	bl	8003724 <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	4619      	mov	r1, r3
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f7ff ffb9 	bl	8003916 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3718      	adds	r7, #24
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
	...

080039b0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80039b0:	b480      	push	{r7}
 80039b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80039b4:	4b04      	ldr	r3, [pc, #16]	; (80039c8 <LL_RCC_GetSysClkSource+0x18>)
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f003 030c 	and.w	r3, r3, #12
}
 80039bc:	4618      	mov	r0, r3
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	40023800 	.word	0x40023800

080039cc <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80039cc:	b480      	push	{r7}
 80039ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80039d0:	4b04      	ldr	r3, [pc, #16]	; (80039e4 <LL_RCC_GetAHBPrescaler+0x18>)
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80039d8:	4618      	mov	r0, r3
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	40023800 	.word	0x40023800

080039e8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80039e8:	b480      	push	{r7}
 80039ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80039ec:	4b04      	ldr	r3, [pc, #16]	; (8003a00 <LL_RCC_GetAPB1Prescaler+0x18>)
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	40023800 	.word	0x40023800

08003a04 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8003a04:	b480      	push	{r7}
 8003a06:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003a08:	4b04      	ldr	r3, [pc, #16]	; (8003a1c <LL_RCC_GetAPB2Prescaler+0x18>)
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	40023800 	.word	0x40023800

08003a20 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003a20:	b480      	push	{r7}
 8003a22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003a24:	4b04      	ldr	r3, [pc, #16]	; (8003a38 <LL_RCC_PLL_GetMainSource+0x18>)
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr
 8003a36:	bf00      	nop
 8003a38:	40023800 	.word	0x40023800

08003a3c <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003a40:	4b04      	ldr	r3, [pc, #16]	; (8003a54 <LL_RCC_PLL_GetN+0x18>)
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	099b      	lsrs	r3, r3, #6
 8003a46:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr
 8003a54:	40023800 	.word	0x40023800

08003a58 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8003a5c:	4b04      	ldr	r3, [pc, #16]	; (8003a70 <LL_RCC_PLL_GetP+0x18>)
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	40023800 	.word	0x40023800

08003a74 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003a74:	b480      	push	{r7}
 8003a76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003a78:	4b04      	ldr	r3, [pc, #16]	; (8003a8c <LL_RCC_PLL_GetDivider+0x18>)
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr
 8003a8a:	bf00      	nop
 8003a8c:	40023800 	.word	0x40023800

08003a90 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8003a98:	f000 f820 	bl	8003adc <RCC_GetSystemClockFreq>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f000 f840 	bl	8003b2c <RCC_GetHCLKClockFreq>
 8003aac:	4602      	mov	r2, r0
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f000 f84e 	bl	8003b58 <RCC_GetPCLK1ClockFreq>
 8003abc:	4602      	mov	r2, r0
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f000 f85a 	bl	8003b80 <RCC_GetPCLK2ClockFreq>
 8003acc:	4602      	mov	r2, r0
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	60da      	str	r2, [r3, #12]
}
 8003ad2:	bf00      	nop
 8003ad4:	3708      	adds	r7, #8
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
	...

08003adc <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8003ae6:	f7ff ff63 	bl	80039b0 <LL_RCC_GetSysClkSource>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b08      	cmp	r3, #8
 8003aee:	d00c      	beq.n	8003b0a <RCC_GetSystemClockFreq+0x2e>
 8003af0:	2b08      	cmp	r3, #8
 8003af2:	d80f      	bhi.n	8003b14 <RCC_GetSystemClockFreq+0x38>
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d002      	beq.n	8003afe <RCC_GetSystemClockFreq+0x22>
 8003af8:	2b04      	cmp	r3, #4
 8003afa:	d003      	beq.n	8003b04 <RCC_GetSystemClockFreq+0x28>
 8003afc:	e00a      	b.n	8003b14 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8003afe:	4b09      	ldr	r3, [pc, #36]	; (8003b24 <RCC_GetSystemClockFreq+0x48>)
 8003b00:	607b      	str	r3, [r7, #4]
      break;
 8003b02:	e00a      	b.n	8003b1a <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8003b04:	4b08      	ldr	r3, [pc, #32]	; (8003b28 <RCC_GetSystemClockFreq+0x4c>)
 8003b06:	607b      	str	r3, [r7, #4]
      break;
 8003b08:	e007      	b.n	8003b1a <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8003b0a:	2008      	movs	r0, #8
 8003b0c:	f000 f84c 	bl	8003ba8 <RCC_PLL_GetFreqDomain_SYS>
 8003b10:	6078      	str	r0, [r7, #4]
      break;
 8003b12:	e002      	b.n	8003b1a <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8003b14:	4b03      	ldr	r3, [pc, #12]	; (8003b24 <RCC_GetSystemClockFreq+0x48>)
 8003b16:	607b      	str	r3, [r7, #4]
      break;
 8003b18:	bf00      	nop
  }

  return frequency;
 8003b1a:	687b      	ldr	r3, [r7, #4]
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3708      	adds	r7, #8
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	00f42400 	.word	0x00f42400
 8003b28:	017d7840 	.word	0x017d7840

08003b2c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003b34:	f7ff ff4a 	bl	80039cc <LL_RCC_GetAHBPrescaler>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	091b      	lsrs	r3, r3, #4
 8003b3c:	f003 030f 	and.w	r3, r3, #15
 8003b40:	4a04      	ldr	r2, [pc, #16]	; (8003b54 <RCC_GetHCLKClockFreq+0x28>)
 8003b42:	5cd3      	ldrb	r3, [r2, r3]
 8003b44:	461a      	mov	r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	40d3      	lsrs	r3, r2
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3708      	adds	r7, #8
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	080076b8 	.word	0x080076b8

08003b58 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8003b60:	f7ff ff42 	bl	80039e8 <LL_RCC_GetAPB1Prescaler>
 8003b64:	4603      	mov	r3, r0
 8003b66:	0a9b      	lsrs	r3, r3, #10
 8003b68:	4a04      	ldr	r2, [pc, #16]	; (8003b7c <RCC_GetPCLK1ClockFreq+0x24>)
 8003b6a:	5cd3      	ldrb	r3, [r2, r3]
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	40d3      	lsrs	r3, r2
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3708      	adds	r7, #8
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	080076c8 	.word	0x080076c8

08003b80 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8003b88:	f7ff ff3c 	bl	8003a04 <LL_RCC_GetAPB2Prescaler>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	0b5b      	lsrs	r3, r3, #13
 8003b90:	4a04      	ldr	r2, [pc, #16]	; (8003ba4 <RCC_GetPCLK2ClockFreq+0x24>)
 8003b92:	5cd3      	ldrb	r3, [r2, r3]
 8003b94:	461a      	mov	r2, r3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	40d3      	lsrs	r3, r2
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3708      	adds	r7, #8
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	080076c8 	.word	0x080076c8

08003ba8 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8003ba8:	b590      	push	{r4, r7, lr}
 8003baa:	b087      	sub	sp, #28
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	617b      	str	r3, [r7, #20]
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	60fb      	str	r3, [r7, #12]
 8003bb8:	2300      	movs	r3, #0
 8003bba:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8003bbc:	f7ff ff30 	bl	8003a20 <LL_RCC_PLL_GetMainSource>
 8003bc0:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d004      	beq.n	8003bd2 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bce:	d003      	beq.n	8003bd8 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8003bd0:	e005      	b.n	8003bde <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8003bd2:	4b12      	ldr	r3, [pc, #72]	; (8003c1c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003bd4:	617b      	str	r3, [r7, #20]
      break;
 8003bd6:	e005      	b.n	8003be4 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8003bd8:	4b11      	ldr	r3, [pc, #68]	; (8003c20 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8003bda:	617b      	str	r3, [r7, #20]
      break;
 8003bdc:	e002      	b.n	8003be4 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8003bde:	4b0f      	ldr	r3, [pc, #60]	; (8003c1c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003be0:	617b      	str	r3, [r7, #20]
      break;
 8003be2:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2b08      	cmp	r3, #8
 8003be8:	d113      	bne.n	8003c12 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003bea:	f7ff ff43 	bl	8003a74 <LL_RCC_PLL_GetDivider>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	fbb3 f4f2 	udiv	r4, r3, r2
 8003bf6:	f7ff ff21 	bl	8003a3c <LL_RCC_PLL_GetN>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	fb03 f404 	mul.w	r4, r3, r4
 8003c00:	f7ff ff2a 	bl	8003a58 <LL_RCC_PLL_GetP>
 8003c04:	4603      	mov	r3, r0
 8003c06:	0c1b      	lsrs	r3, r3, #16
 8003c08:	3301      	adds	r3, #1
 8003c0a:	005b      	lsls	r3, r3, #1
 8003c0c:	fbb4 f3f3 	udiv	r3, r4, r3
 8003c10:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8003c12:	693b      	ldr	r3, [r7, #16]
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	371c      	adds	r7, #28
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd90      	pop	{r4, r7, pc}
 8003c1c:	00f42400 	.word	0x00f42400
 8003c20:	017d7840 	.word	0x017d7840

08003c24 <LL_TIM_SetPrescaler>:
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	683a      	ldr	r2, [r7, #0]
 8003c32:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003c34:	bf00      	nop
 8003c36:	370c      	adds	r7, #12
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr

08003c40 <LL_TIM_SetAutoReload>:
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	683a      	ldr	r2, [r7, #0]
 8003c4e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003c50:	bf00      	nop
 8003c52:	370c      	adds	r7, #12
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr

08003c5c <LL_TIM_SetRepetitionCounter>:
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	683a      	ldr	r2, [r7, #0]
 8003c6a:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003c6c:	bf00      	nop
 8003c6e:	370c      	adds	r7, #12
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr

08003c78 <LL_TIM_OC_SetCompareCH1>:
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	683a      	ldr	r2, [r7, #0]
 8003c86:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003c88:	bf00      	nop
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <LL_TIM_OC_SetCompareCH2>:
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	683a      	ldr	r2, [r7, #0]
 8003ca2:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003ca4:	bf00      	nop
 8003ca6:	370c      	adds	r7, #12
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr

08003cb0 <LL_TIM_OC_SetCompareCH3>:
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	683a      	ldr	r2, [r7, #0]
 8003cbe:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003cc0:	bf00      	nop
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <LL_TIM_OC_SetCompareCH4>:
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	683a      	ldr	r2, [r7, #0]
 8003cda:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003cdc:	bf00      	nop
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	695b      	ldr	r3, [r3, #20]
 8003cf4:	f043 0201 	orr.w	r2, r3, #1
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	615a      	str	r2, [r3, #20]
}
 8003cfc:	bf00      	nop
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4a31      	ldr	r2, [pc, #196]	; (8003de0 <LL_TIM_Init+0xd8>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d00f      	beq.n	8003d40 <LL_TIM_Init+0x38>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d26:	d00b      	beq.n	8003d40 <LL_TIM_Init+0x38>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4a2e      	ldr	r2, [pc, #184]	; (8003de4 <LL_TIM_Init+0xdc>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d007      	beq.n	8003d40 <LL_TIM_Init+0x38>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4a2d      	ldr	r2, [pc, #180]	; (8003de8 <LL_TIM_Init+0xe0>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d003      	beq.n	8003d40 <LL_TIM_Init+0x38>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a2c      	ldr	r2, [pc, #176]	; (8003dec <LL_TIM_Init+0xe4>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d106      	bne.n	8003d4e <LL_TIM_Init+0x46>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a23      	ldr	r2, [pc, #140]	; (8003de0 <LL_TIM_Init+0xd8>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d01b      	beq.n	8003d8e <LL_TIM_Init+0x86>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d5c:	d017      	beq.n	8003d8e <LL_TIM_Init+0x86>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a20      	ldr	r2, [pc, #128]	; (8003de4 <LL_TIM_Init+0xdc>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d013      	beq.n	8003d8e <LL_TIM_Init+0x86>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a1f      	ldr	r2, [pc, #124]	; (8003de8 <LL_TIM_Init+0xe0>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d00f      	beq.n	8003d8e <LL_TIM_Init+0x86>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a1e      	ldr	r2, [pc, #120]	; (8003dec <LL_TIM_Init+0xe4>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d00b      	beq.n	8003d8e <LL_TIM_Init+0x86>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a1d      	ldr	r2, [pc, #116]	; (8003df0 <LL_TIM_Init+0xe8>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d007      	beq.n	8003d8e <LL_TIM_Init+0x86>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a1c      	ldr	r2, [pc, #112]	; (8003df4 <LL_TIM_Init+0xec>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d003      	beq.n	8003d8e <LL_TIM_Init+0x86>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a1b      	ldr	r2, [pc, #108]	; (8003df8 <LL_TIM_Init+0xf0>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d106      	bne.n	8003d9c <LL_TIM_Init+0x94>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	4619      	mov	r1, r3
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f7ff ff49 	bl	8003c40 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	881b      	ldrh	r3, [r3, #0]
 8003db2:	4619      	mov	r1, r3
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f7ff ff35 	bl	8003c24 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a08      	ldr	r2, [pc, #32]	; (8003de0 <LL_TIM_Init+0xd8>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d105      	bne.n	8003dce <LL_TIM_Init+0xc6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f7ff ff47 	bl	8003c5c <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f7ff ff8a 	bl	8003ce8 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3710      	adds	r7, #16
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	40010000 	.word	0x40010000
 8003de4:	40000400 	.word	0x40000400
 8003de8:	40000800 	.word	0x40000800
 8003dec:	40000c00 	.word	0x40000c00
 8003df0:	40014000 	.word	0x40014000
 8003df4:	40014400 	.word	0x40014400
 8003df8:	40014800 	.word	0x40014800

08003dfc <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b086      	sub	sp, #24
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	60b9      	str	r1, [r7, #8]
 8003e06:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e12:	d027      	beq.n	8003e64 <LL_TIM_OC_Init+0x68>
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e1a:	d82a      	bhi.n	8003e72 <LL_TIM_OC_Init+0x76>
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e22:	d018      	beq.n	8003e56 <LL_TIM_OC_Init+0x5a>
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e2a:	d822      	bhi.n	8003e72 <LL_TIM_OC_Init+0x76>
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d003      	beq.n	8003e3a <LL_TIM_OC_Init+0x3e>
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	2b10      	cmp	r3, #16
 8003e36:	d007      	beq.n	8003e48 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8003e38:	e01b      	b.n	8003e72 <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8003e3a:	6879      	ldr	r1, [r7, #4]
 8003e3c:	68f8      	ldr	r0, [r7, #12]
 8003e3e:	f000 f81f 	bl	8003e80 <OC1Config>
 8003e42:	4603      	mov	r3, r0
 8003e44:	75fb      	strb	r3, [r7, #23]
      break;
 8003e46:	e015      	b.n	8003e74 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8003e48:	6879      	ldr	r1, [r7, #4]
 8003e4a:	68f8      	ldr	r0, [r7, #12]
 8003e4c:	f000 f87e 	bl	8003f4c <OC2Config>
 8003e50:	4603      	mov	r3, r0
 8003e52:	75fb      	strb	r3, [r7, #23]
      break;
 8003e54:	e00e      	b.n	8003e74 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8003e56:	6879      	ldr	r1, [r7, #4]
 8003e58:	68f8      	ldr	r0, [r7, #12]
 8003e5a:	f000 f8e1 	bl	8004020 <OC3Config>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	75fb      	strb	r3, [r7, #23]
      break;
 8003e62:	e007      	b.n	8003e74 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8003e64:	6879      	ldr	r1, [r7, #4]
 8003e66:	68f8      	ldr	r0, [r7, #12]
 8003e68:	f000 f944 	bl	80040f4 <OC4Config>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	75fb      	strb	r3, [r7, #23]
      break;
 8003e70:	e000      	b.n	8003e74 <LL_TIM_OC_Init+0x78>
      break;
 8003e72:	bf00      	nop
  }

  return result;
 8003e74:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3718      	adds	r7, #24
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
	...

08003e80 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b086      	sub	sp, #24
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a1b      	ldr	r3, [r3, #32]
 8003e8e:	f023 0201 	bic.w	r2, r3, #1
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a1b      	ldr	r3, [r3, #32]
 8003e9a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	699b      	ldr	r3, [r3, #24]
 8003ea6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f023 0303 	bic.w	r3, r3, #3
 8003eae:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	f023 0202 	bic.w	r2, r3, #2
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	691b      	ldr	r3, [r3, #16]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	f023 0201 	bic.w	r2, r3, #1
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a1a      	ldr	r2, [pc, #104]	; (8003f48 <OC1Config+0xc8>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d11e      	bne.n	8003f20 <OC1Config+0xa0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	f023 0208 	bic.w	r2, r3, #8
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	695b      	ldr	r3, [r3, #20]
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	f023 0204 	bic.w	r2, r3, #4
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	4313      	orrs	r3, r2
 8003f00:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	699b      	ldr	r3, [r3, #24]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	69db      	ldr	r3, [r3, #28]
 8003f1a:	005b      	lsls	r3, r3, #1
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	693a      	ldr	r2, [r7, #16]
 8003f24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	68fa      	ldr	r2, [r7, #12]
 8003f2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	4619      	mov	r1, r3
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f7ff fea0 	bl	8003c78 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	697a      	ldr	r2, [r7, #20]
 8003f3c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003f3e:	2300      	movs	r3, #0
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3718      	adds	r7, #24
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	40010000 	.word	0x40010000

08003f4c <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b086      	sub	sp, #24
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	f023 0210 	bic.w	r2, r3, #16
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a1b      	ldr	r3, [r3, #32]
 8003f66:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	699b      	ldr	r3, [r3, #24]
 8003f72:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	021b      	lsls	r3, r3, #8
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	f023 0220 	bic.w	r2, r3, #32
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	691b      	ldr	r3, [r3, #16]
 8003f96:	011b      	lsls	r3, r3, #4
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	f023 0210 	bic.w	r2, r3, #16
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	011b      	lsls	r3, r3, #4
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4a1b      	ldr	r2, [pc, #108]	; (800401c <OC2Config+0xd0>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d11f      	bne.n	8003ff4 <OC2Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	019b      	lsls	r3, r3, #6
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	019b      	lsls	r3, r3, #6
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	699b      	ldr	r3, [r3, #24]
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	69db      	ldr	r3, [r3, #28]
 8003fee:	00db      	lsls	r3, r3, #3
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	693a      	ldr	r2, [r7, #16]
 8003ff8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	68fa      	ldr	r2, [r7, #12]
 8003ffe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	4619      	mov	r1, r3
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f7ff fe44 	bl	8003c94 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	697a      	ldr	r2, [r7, #20]
 8004010:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004012:	2300      	movs	r3, #0
}
 8004014:	4618      	mov	r0, r3
 8004016:	3718      	adds	r7, #24
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}
 800401c:	40010000 	.word	0x40010000

08004020 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b086      	sub	sp, #24
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a1b      	ldr	r3, [r3, #32]
 800402e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a1b      	ldr	r3, [r3, #32]
 800403a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	69db      	ldr	r3, [r3, #28]
 8004046:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f023 0303 	bic.w	r3, r3, #3
 800404e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4313      	orrs	r3, r2
 800405c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	691b      	ldr	r3, [r3, #16]
 8004068:	021b      	lsls	r3, r3, #8
 800406a:	4313      	orrs	r3, r2
 800406c:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	021b      	lsls	r3, r3, #8
 800407a:	4313      	orrs	r3, r2
 800407c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a1b      	ldr	r2, [pc, #108]	; (80040f0 <OC3Config+0xd0>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d11f      	bne.n	80040c6 <OC3Config+0xa6>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	695b      	ldr	r3, [r3, #20]
 8004090:	029b      	lsls	r3, r3, #10
 8004092:	4313      	orrs	r3, r2
 8004094:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	029b      	lsls	r3, r3, #10
 80040a2:	4313      	orrs	r3, r2
 80040a4:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	699b      	ldr	r3, [r3, #24]
 80040b0:	011b      	lsls	r3, r3, #4
 80040b2:	4313      	orrs	r3, r2
 80040b4:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	69db      	ldr	r3, [r3, #28]
 80040c0:	015b      	lsls	r3, r3, #5
 80040c2:	4313      	orrs	r3, r2
 80040c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	693a      	ldr	r2, [r7, #16]
 80040ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	4619      	mov	r1, r3
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f7ff fde9 	bl	8003cb0 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	697a      	ldr	r2, [r7, #20]
 80040e2:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3718      	adds	r7, #24
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	40010000 	.word	0x40010000

080040f4 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b086      	sub	sp, #24
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a1b      	ldr	r3, [r3, #32]
 800410e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	69db      	ldr	r3, [r3, #28]
 800411a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004122:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	021b      	lsls	r3, r3, #8
 8004130:	4313      	orrs	r3, r2
 8004132:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	031b      	lsls	r3, r3, #12
 8004140:	4313      	orrs	r3, r2
 8004142:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	031b      	lsls	r3, r3, #12
 8004150:	4313      	orrs	r3, r2
 8004152:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4a0f      	ldr	r2, [pc, #60]	; (8004194 <OC4Config+0xa0>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d107      	bne.n	800416c <OC4Config+0x78>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	699b      	ldr	r3, [r3, #24]
 8004166:	019b      	lsls	r3, r3, #6
 8004168:	4313      	orrs	r3, r2
 800416a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	697a      	ldr	r2, [r7, #20]
 8004170:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	68fa      	ldr	r2, [r7, #12]
 8004176:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	4619      	mov	r1, r3
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f7ff fda4 	bl	8003ccc <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	693a      	ldr	r2, [r7, #16]
 8004188:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800418a:	2300      	movs	r3, #0
}
 800418c:	4618      	mov	r0, r3
 800418e:	3718      	adds	r7, #24
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	40010000 	.word	0x40010000

08004198 <LL_USART_IsEnabled>:
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041ac:	bf0c      	ite	eq
 80041ae:	2301      	moveq	r3, #1
 80041b0:	2300      	movne	r3, #0
 80041b2:	b2db      	uxtb	r3, r3
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <LL_USART_SetStopBitsLength>:
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	431a      	orrs	r2, r3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	611a      	str	r2, [r3, #16]
}
 80041da:	bf00      	nop
 80041dc:	370c      	adds	r7, #12
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr

080041e6 <LL_USART_SetHWFlowCtrl>:
{
 80041e6:	b480      	push	{r7}
 80041e8:	b083      	sub	sp, #12
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
 80041ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	695b      	ldr	r3, [r3, #20]
 80041f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	431a      	orrs	r2, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	615a      	str	r2, [r3, #20]
}
 8004200:	bf00      	nop
 8004202:	370c      	adds	r7, #12
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr

0800420c <LL_USART_SetBaudRate>:
{
 800420c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004210:	b0c0      	sub	sp, #256	; 0x100
 8004212:	af00      	add	r7, sp, #0
 8004214:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004218:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 800421c:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8004220:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8004224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004228:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800422c:	f040 810c 	bne.w	8004448 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8004230:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004234:	2200      	movs	r2, #0
 8004236:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800423a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800423e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004242:	4622      	mov	r2, r4
 8004244:	462b      	mov	r3, r5
 8004246:	1891      	adds	r1, r2, r2
 8004248:	6639      	str	r1, [r7, #96]	; 0x60
 800424a:	415b      	adcs	r3, r3
 800424c:	667b      	str	r3, [r7, #100]	; 0x64
 800424e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004252:	4621      	mov	r1, r4
 8004254:	eb12 0801 	adds.w	r8, r2, r1
 8004258:	4629      	mov	r1, r5
 800425a:	eb43 0901 	adc.w	r9, r3, r1
 800425e:	f04f 0200 	mov.w	r2, #0
 8004262:	f04f 0300 	mov.w	r3, #0
 8004266:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800426a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800426e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004272:	4690      	mov	r8, r2
 8004274:	4699      	mov	r9, r3
 8004276:	4623      	mov	r3, r4
 8004278:	eb18 0303 	adds.w	r3, r8, r3
 800427c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004280:	462b      	mov	r3, r5
 8004282:	eb49 0303 	adc.w	r3, r9, r3
 8004286:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800428a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800428e:	2200      	movs	r2, #0
 8004290:	469a      	mov	sl, r3
 8004292:	4693      	mov	fp, r2
 8004294:	eb1a 030a 	adds.w	r3, sl, sl
 8004298:	65bb      	str	r3, [r7, #88]	; 0x58
 800429a:	eb4b 030b 	adc.w	r3, fp, fp
 800429e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042a0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80042a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80042a8:	f7fc fcf6 	bl	8000c98 <__aeabi_uldivmod>
 80042ac:	4602      	mov	r2, r0
 80042ae:	460b      	mov	r3, r1
 80042b0:	4b64      	ldr	r3, [pc, #400]	; (8004444 <LL_USART_SetBaudRate+0x238>)
 80042b2:	fba3 2302 	umull	r2, r3, r3, r2
 80042b6:	095b      	lsrs	r3, r3, #5
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	011b      	lsls	r3, r3, #4
 80042bc:	b29c      	uxth	r4, r3
 80042be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80042c2:	2200      	movs	r2, #0
 80042c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80042c8:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80042cc:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 80042d0:	4642      	mov	r2, r8
 80042d2:	464b      	mov	r3, r9
 80042d4:	1891      	adds	r1, r2, r2
 80042d6:	6539      	str	r1, [r7, #80]	; 0x50
 80042d8:	415b      	adcs	r3, r3
 80042da:	657b      	str	r3, [r7, #84]	; 0x54
 80042dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80042e0:	4641      	mov	r1, r8
 80042e2:	1851      	adds	r1, r2, r1
 80042e4:	64b9      	str	r1, [r7, #72]	; 0x48
 80042e6:	4649      	mov	r1, r9
 80042e8:	414b      	adcs	r3, r1
 80042ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042ec:	f04f 0200 	mov.w	r2, #0
 80042f0:	f04f 0300 	mov.w	r3, #0
 80042f4:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 80042f8:	4659      	mov	r1, fp
 80042fa:	00cb      	lsls	r3, r1, #3
 80042fc:	4651      	mov	r1, sl
 80042fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004302:	4651      	mov	r1, sl
 8004304:	00ca      	lsls	r2, r1, #3
 8004306:	4610      	mov	r0, r2
 8004308:	4619      	mov	r1, r3
 800430a:	4603      	mov	r3, r0
 800430c:	4642      	mov	r2, r8
 800430e:	189b      	adds	r3, r3, r2
 8004310:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004314:	464b      	mov	r3, r9
 8004316:	460a      	mov	r2, r1
 8004318:	eb42 0303 	adc.w	r3, r2, r3
 800431c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004320:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004324:	2200      	movs	r2, #0
 8004326:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800432a:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800432e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004332:	460b      	mov	r3, r1
 8004334:	18db      	adds	r3, r3, r3
 8004336:	643b      	str	r3, [r7, #64]	; 0x40
 8004338:	4613      	mov	r3, r2
 800433a:	eb42 0303 	adc.w	r3, r2, r3
 800433e:	647b      	str	r3, [r7, #68]	; 0x44
 8004340:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004344:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8004348:	f7fc fca6 	bl	8000c98 <__aeabi_uldivmod>
 800434c:	4602      	mov	r2, r0
 800434e:	460b      	mov	r3, r1
 8004350:	4611      	mov	r1, r2
 8004352:	4b3c      	ldr	r3, [pc, #240]	; (8004444 <LL_USART_SetBaudRate+0x238>)
 8004354:	fba3 2301 	umull	r2, r3, r3, r1
 8004358:	095b      	lsrs	r3, r3, #5
 800435a:	2264      	movs	r2, #100	; 0x64
 800435c:	fb02 f303 	mul.w	r3, r2, r3
 8004360:	1acb      	subs	r3, r1, r3
 8004362:	00db      	lsls	r3, r3, #3
 8004364:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004368:	4b36      	ldr	r3, [pc, #216]	; (8004444 <LL_USART_SetBaudRate+0x238>)
 800436a:	fba3 2302 	umull	r2, r3, r3, r2
 800436e:	095b      	lsrs	r3, r3, #5
 8004370:	b29b      	uxth	r3, r3
 8004372:	005b      	lsls	r3, r3, #1
 8004374:	b29b      	uxth	r3, r3
 8004376:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800437a:	b29b      	uxth	r3, r3
 800437c:	4423      	add	r3, r4
 800437e:	b29c      	uxth	r4, r3
 8004380:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004384:	2200      	movs	r2, #0
 8004386:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800438a:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800438e:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 8004392:	4642      	mov	r2, r8
 8004394:	464b      	mov	r3, r9
 8004396:	1891      	adds	r1, r2, r2
 8004398:	63b9      	str	r1, [r7, #56]	; 0x38
 800439a:	415b      	adcs	r3, r3
 800439c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800439e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80043a2:	4641      	mov	r1, r8
 80043a4:	1851      	adds	r1, r2, r1
 80043a6:	6339      	str	r1, [r7, #48]	; 0x30
 80043a8:	4649      	mov	r1, r9
 80043aa:	414b      	adcs	r3, r1
 80043ac:	637b      	str	r3, [r7, #52]	; 0x34
 80043ae:	f04f 0200 	mov.w	r2, #0
 80043b2:	f04f 0300 	mov.w	r3, #0
 80043b6:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80043ba:	4659      	mov	r1, fp
 80043bc:	00cb      	lsls	r3, r1, #3
 80043be:	4651      	mov	r1, sl
 80043c0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043c4:	4651      	mov	r1, sl
 80043c6:	00ca      	lsls	r2, r1, #3
 80043c8:	4610      	mov	r0, r2
 80043ca:	4619      	mov	r1, r3
 80043cc:	4603      	mov	r3, r0
 80043ce:	4642      	mov	r2, r8
 80043d0:	189b      	adds	r3, r3, r2
 80043d2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80043d6:	464b      	mov	r3, r9
 80043d8:	460a      	mov	r2, r1
 80043da:	eb42 0303 	adc.w	r3, r2, r3
 80043de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80043e2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80043e6:	2200      	movs	r2, #0
 80043e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80043ec:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80043f0:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80043f4:	460b      	mov	r3, r1
 80043f6:	18db      	adds	r3, r3, r3
 80043f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80043fa:	4613      	mov	r3, r2
 80043fc:	eb42 0303 	adc.w	r3, r2, r3
 8004400:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004402:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004406:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800440a:	f7fc fc45 	bl	8000c98 <__aeabi_uldivmod>
 800440e:	4602      	mov	r2, r0
 8004410:	460b      	mov	r3, r1
 8004412:	4b0c      	ldr	r3, [pc, #48]	; (8004444 <LL_USART_SetBaudRate+0x238>)
 8004414:	fba3 1302 	umull	r1, r3, r3, r2
 8004418:	095b      	lsrs	r3, r3, #5
 800441a:	2164      	movs	r1, #100	; 0x64
 800441c:	fb01 f303 	mul.w	r3, r1, r3
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	00db      	lsls	r3, r3, #3
 8004424:	3332      	adds	r3, #50	; 0x32
 8004426:	4a07      	ldr	r2, [pc, #28]	; (8004444 <LL_USART_SetBaudRate+0x238>)
 8004428:	fba2 2303 	umull	r2, r3, r2, r3
 800442c:	095b      	lsrs	r3, r3, #5
 800442e:	b29b      	uxth	r3, r3
 8004430:	f003 0307 	and.w	r3, r3, #7
 8004434:	b29b      	uxth	r3, r3
 8004436:	4423      	add	r3, r4
 8004438:	b29b      	uxth	r3, r3
 800443a:	461a      	mov	r2, r3
 800443c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004440:	609a      	str	r2, [r3, #8]
}
 8004442:	e108      	b.n	8004656 <LL_USART_SetBaudRate+0x44a>
 8004444:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8004448:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800444c:	2200      	movs	r2, #0
 800444e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004452:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004456:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 800445a:	4642      	mov	r2, r8
 800445c:	464b      	mov	r3, r9
 800445e:	1891      	adds	r1, r2, r2
 8004460:	6239      	str	r1, [r7, #32]
 8004462:	415b      	adcs	r3, r3
 8004464:	627b      	str	r3, [r7, #36]	; 0x24
 8004466:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800446a:	4641      	mov	r1, r8
 800446c:	1854      	adds	r4, r2, r1
 800446e:	4649      	mov	r1, r9
 8004470:	eb43 0501 	adc.w	r5, r3, r1
 8004474:	f04f 0200 	mov.w	r2, #0
 8004478:	f04f 0300 	mov.w	r3, #0
 800447c:	00eb      	lsls	r3, r5, #3
 800447e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004482:	00e2      	lsls	r2, r4, #3
 8004484:	4614      	mov	r4, r2
 8004486:	461d      	mov	r5, r3
 8004488:	4643      	mov	r3, r8
 800448a:	18e3      	adds	r3, r4, r3
 800448c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004490:	464b      	mov	r3, r9
 8004492:	eb45 0303 	adc.w	r3, r5, r3
 8004496:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800449a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800449e:	2200      	movs	r2, #0
 80044a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80044a4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80044a8:	f04f 0200 	mov.w	r2, #0
 80044ac:	f04f 0300 	mov.w	r3, #0
 80044b0:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 80044b4:	4629      	mov	r1, r5
 80044b6:	008b      	lsls	r3, r1, #2
 80044b8:	4621      	mov	r1, r4
 80044ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044be:	4621      	mov	r1, r4
 80044c0:	008a      	lsls	r2, r1, #2
 80044c2:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80044c6:	f7fc fbe7 	bl	8000c98 <__aeabi_uldivmod>
 80044ca:	4602      	mov	r2, r0
 80044cc:	460b      	mov	r3, r1
 80044ce:	4b65      	ldr	r3, [pc, #404]	; (8004664 <LL_USART_SetBaudRate+0x458>)
 80044d0:	fba3 2302 	umull	r2, r3, r3, r2
 80044d4:	095b      	lsrs	r3, r3, #5
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	011b      	lsls	r3, r3, #4
 80044da:	b29c      	uxth	r4, r3
 80044dc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80044e0:	2200      	movs	r2, #0
 80044e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80044e6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80044ea:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 80044ee:	4642      	mov	r2, r8
 80044f0:	464b      	mov	r3, r9
 80044f2:	1891      	adds	r1, r2, r2
 80044f4:	61b9      	str	r1, [r7, #24]
 80044f6:	415b      	adcs	r3, r3
 80044f8:	61fb      	str	r3, [r7, #28]
 80044fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044fe:	4641      	mov	r1, r8
 8004500:	1851      	adds	r1, r2, r1
 8004502:	6139      	str	r1, [r7, #16]
 8004504:	4649      	mov	r1, r9
 8004506:	414b      	adcs	r3, r1
 8004508:	617b      	str	r3, [r7, #20]
 800450a:	f04f 0200 	mov.w	r2, #0
 800450e:	f04f 0300 	mov.w	r3, #0
 8004512:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004516:	4659      	mov	r1, fp
 8004518:	00cb      	lsls	r3, r1, #3
 800451a:	4651      	mov	r1, sl
 800451c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004520:	4651      	mov	r1, sl
 8004522:	00ca      	lsls	r2, r1, #3
 8004524:	4610      	mov	r0, r2
 8004526:	4619      	mov	r1, r3
 8004528:	4603      	mov	r3, r0
 800452a:	4642      	mov	r2, r8
 800452c:	189b      	adds	r3, r3, r2
 800452e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004532:	464b      	mov	r3, r9
 8004534:	460a      	mov	r2, r1
 8004536:	eb42 0303 	adc.w	r3, r2, r3
 800453a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800453e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004542:	2200      	movs	r2, #0
 8004544:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004548:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800454c:	f04f 0200 	mov.w	r2, #0
 8004550:	f04f 0300 	mov.w	r3, #0
 8004554:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8004558:	4649      	mov	r1, r9
 800455a:	008b      	lsls	r3, r1, #2
 800455c:	4641      	mov	r1, r8
 800455e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004562:	4641      	mov	r1, r8
 8004564:	008a      	lsls	r2, r1, #2
 8004566:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800456a:	f7fc fb95 	bl	8000c98 <__aeabi_uldivmod>
 800456e:	4602      	mov	r2, r0
 8004570:	460b      	mov	r3, r1
 8004572:	4611      	mov	r1, r2
 8004574:	4b3b      	ldr	r3, [pc, #236]	; (8004664 <LL_USART_SetBaudRate+0x458>)
 8004576:	fba3 2301 	umull	r2, r3, r3, r1
 800457a:	095b      	lsrs	r3, r3, #5
 800457c:	2264      	movs	r2, #100	; 0x64
 800457e:	fb02 f303 	mul.w	r3, r2, r3
 8004582:	1acb      	subs	r3, r1, r3
 8004584:	011b      	lsls	r3, r3, #4
 8004586:	3332      	adds	r3, #50	; 0x32
 8004588:	4a36      	ldr	r2, [pc, #216]	; (8004664 <LL_USART_SetBaudRate+0x458>)
 800458a:	fba2 2303 	umull	r2, r3, r2, r3
 800458e:	095b      	lsrs	r3, r3, #5
 8004590:	b29b      	uxth	r3, r3
 8004592:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004596:	b29b      	uxth	r3, r3
 8004598:	4423      	add	r3, r4
 800459a:	b29c      	uxth	r4, r3
 800459c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80045a0:	2200      	movs	r2, #0
 80045a2:	67bb      	str	r3, [r7, #120]	; 0x78
 80045a4:	67fa      	str	r2, [r7, #124]	; 0x7c
 80045a6:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80045aa:	4642      	mov	r2, r8
 80045ac:	464b      	mov	r3, r9
 80045ae:	1891      	adds	r1, r2, r2
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	415b      	adcs	r3, r3
 80045b4:	60fb      	str	r3, [r7, #12]
 80045b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80045ba:	4641      	mov	r1, r8
 80045bc:	1851      	adds	r1, r2, r1
 80045be:	6039      	str	r1, [r7, #0]
 80045c0:	4649      	mov	r1, r9
 80045c2:	414b      	adcs	r3, r1
 80045c4:	607b      	str	r3, [r7, #4]
 80045c6:	f04f 0200 	mov.w	r2, #0
 80045ca:	f04f 0300 	mov.w	r3, #0
 80045ce:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80045d2:	4659      	mov	r1, fp
 80045d4:	00cb      	lsls	r3, r1, #3
 80045d6:	4651      	mov	r1, sl
 80045d8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045dc:	4651      	mov	r1, sl
 80045de:	00ca      	lsls	r2, r1, #3
 80045e0:	4610      	mov	r0, r2
 80045e2:	4619      	mov	r1, r3
 80045e4:	4603      	mov	r3, r0
 80045e6:	4642      	mov	r2, r8
 80045e8:	189b      	adds	r3, r3, r2
 80045ea:	673b      	str	r3, [r7, #112]	; 0x70
 80045ec:	464b      	mov	r3, r9
 80045ee:	460a      	mov	r2, r1
 80045f0:	eb42 0303 	adc.w	r3, r2, r3
 80045f4:	677b      	str	r3, [r7, #116]	; 0x74
 80045f6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80045fa:	2200      	movs	r2, #0
 80045fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80045fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004600:	f04f 0200 	mov.w	r2, #0
 8004604:	f04f 0300 	mov.w	r3, #0
 8004608:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 800460c:	4649      	mov	r1, r9
 800460e:	008b      	lsls	r3, r1, #2
 8004610:	4641      	mov	r1, r8
 8004612:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004616:	4641      	mov	r1, r8
 8004618:	008a      	lsls	r2, r1, #2
 800461a:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800461e:	f7fc fb3b 	bl	8000c98 <__aeabi_uldivmod>
 8004622:	4602      	mov	r2, r0
 8004624:	460b      	mov	r3, r1
 8004626:	4b0f      	ldr	r3, [pc, #60]	; (8004664 <LL_USART_SetBaudRate+0x458>)
 8004628:	fba3 1302 	umull	r1, r3, r3, r2
 800462c:	095b      	lsrs	r3, r3, #5
 800462e:	2164      	movs	r1, #100	; 0x64
 8004630:	fb01 f303 	mul.w	r3, r1, r3
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	011b      	lsls	r3, r3, #4
 8004638:	3332      	adds	r3, #50	; 0x32
 800463a:	4a0a      	ldr	r2, [pc, #40]	; (8004664 <LL_USART_SetBaudRate+0x458>)
 800463c:	fba2 2303 	umull	r2, r3, r2, r3
 8004640:	095b      	lsrs	r3, r3, #5
 8004642:	b29b      	uxth	r3, r3
 8004644:	f003 030f 	and.w	r3, r3, #15
 8004648:	b29b      	uxth	r3, r3
 800464a:	4423      	add	r3, r4
 800464c:	b29b      	uxth	r3, r3
 800464e:	461a      	mov	r2, r3
 8004650:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004654:	609a      	str	r2, [r3, #8]
}
 8004656:	bf00      	nop
 8004658:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800465c:	46bd      	mov	sp, r7
 800465e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004662:	bf00      	nop
 8004664:	51eb851f 	.word	0x51eb851f

08004668 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b088      	sub	sp, #32
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8004676:	2300      	movs	r3, #0
 8004678:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f7ff fd8c 	bl	8004198 <LL_USART_IsEnabled>
 8004680:	4603      	mov	r3, r0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d149      	bne.n	800471a <LL_USART_Init+0xb2>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800468e:	f023 030c 	bic.w	r3, r3, #12
 8004692:	683a      	ldr	r2, [r7, #0]
 8004694:	6851      	ldr	r1, [r2, #4]
 8004696:	683a      	ldr	r2, [r7, #0]
 8004698:	68d2      	ldr	r2, [r2, #12]
 800469a:	4311      	orrs	r1, r2
 800469c:	683a      	ldr	r2, [r7, #0]
 800469e:	6912      	ldr	r2, [r2, #16]
 80046a0:	4311      	orrs	r1, r2
 80046a2:	683a      	ldr	r2, [r7, #0]
 80046a4:	6992      	ldr	r2, [r2, #24]
 80046a6:	430a      	orrs	r2, r1
 80046a8:	431a      	orrs	r2, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	4619      	mov	r1, r3
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f7ff fd83 	bl	80041c0 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	695b      	ldr	r3, [r3, #20]
 80046be:	4619      	mov	r1, r3
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f7ff fd90 	bl	80041e6 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80046c6:	f107 0308 	add.w	r3, r7, #8
 80046ca:	4618      	mov	r0, r3
 80046cc:	f7ff f9e0 	bl	8003a90 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4a14      	ldr	r2, [pc, #80]	; (8004724 <LL_USART_Init+0xbc>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d102      	bne.n	80046de <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	61bb      	str	r3, [r7, #24]
 80046dc:	e00c      	b.n	80046f8 <LL_USART_Init+0x90>
    }
    else if (USARTx == USART2)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a11      	ldr	r2, [pc, #68]	; (8004728 <LL_USART_Init+0xc0>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d102      	bne.n	80046ec <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	61bb      	str	r3, [r7, #24]
 80046ea:	e005      	b.n	80046f8 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4a0f      	ldr	r2, [pc, #60]	; (800472c <LL_USART_Init+0xc4>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d101      	bne.n	80046f8 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00d      	beq.n	800471a <LL_USART_Init+0xb2>
        && (USART_InitStruct->BaudRate != 0U))
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d009      	beq.n	800471a <LL_USART_Init+0xb2>
    {
      status = SUCCESS;
 8004706:	2300      	movs	r3, #0
 8004708:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	699a      	ldr	r2, [r3, #24]
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	69b9      	ldr	r1, [r7, #24]
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f7ff fd79 	bl	800420c <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800471a:	7ffb      	ldrb	r3, [r7, #31]
}
 800471c:	4618      	mov	r0, r3
 800471e:	3720      	adds	r7, #32
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}
 8004724:	40011000 	.word	0x40011000
 8004728:	40004400 	.word	0x40004400
 800472c:	40011400 	.word	0x40011400

08004730 <__cvt>:
 8004730:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004734:	ec55 4b10 	vmov	r4, r5, d0
 8004738:	2d00      	cmp	r5, #0
 800473a:	460e      	mov	r6, r1
 800473c:	4619      	mov	r1, r3
 800473e:	462b      	mov	r3, r5
 8004740:	bfbb      	ittet	lt
 8004742:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004746:	461d      	movlt	r5, r3
 8004748:	2300      	movge	r3, #0
 800474a:	232d      	movlt	r3, #45	; 0x2d
 800474c:	700b      	strb	r3, [r1, #0]
 800474e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004750:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004754:	4691      	mov	r9, r2
 8004756:	f023 0820 	bic.w	r8, r3, #32
 800475a:	bfbc      	itt	lt
 800475c:	4622      	movlt	r2, r4
 800475e:	4614      	movlt	r4, r2
 8004760:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004764:	d005      	beq.n	8004772 <__cvt+0x42>
 8004766:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800476a:	d100      	bne.n	800476e <__cvt+0x3e>
 800476c:	3601      	adds	r6, #1
 800476e:	2102      	movs	r1, #2
 8004770:	e000      	b.n	8004774 <__cvt+0x44>
 8004772:	2103      	movs	r1, #3
 8004774:	ab03      	add	r3, sp, #12
 8004776:	9301      	str	r3, [sp, #4]
 8004778:	ab02      	add	r3, sp, #8
 800477a:	9300      	str	r3, [sp, #0]
 800477c:	ec45 4b10 	vmov	d0, r4, r5
 8004780:	4653      	mov	r3, sl
 8004782:	4632      	mov	r2, r6
 8004784:	f000 ff24 	bl	80055d0 <_dtoa_r>
 8004788:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800478c:	4607      	mov	r7, r0
 800478e:	d102      	bne.n	8004796 <__cvt+0x66>
 8004790:	f019 0f01 	tst.w	r9, #1
 8004794:	d022      	beq.n	80047dc <__cvt+0xac>
 8004796:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800479a:	eb07 0906 	add.w	r9, r7, r6
 800479e:	d110      	bne.n	80047c2 <__cvt+0x92>
 80047a0:	783b      	ldrb	r3, [r7, #0]
 80047a2:	2b30      	cmp	r3, #48	; 0x30
 80047a4:	d10a      	bne.n	80047bc <__cvt+0x8c>
 80047a6:	2200      	movs	r2, #0
 80047a8:	2300      	movs	r3, #0
 80047aa:	4620      	mov	r0, r4
 80047ac:	4629      	mov	r1, r5
 80047ae:	f7fc f993 	bl	8000ad8 <__aeabi_dcmpeq>
 80047b2:	b918      	cbnz	r0, 80047bc <__cvt+0x8c>
 80047b4:	f1c6 0601 	rsb	r6, r6, #1
 80047b8:	f8ca 6000 	str.w	r6, [sl]
 80047bc:	f8da 3000 	ldr.w	r3, [sl]
 80047c0:	4499      	add	r9, r3
 80047c2:	2200      	movs	r2, #0
 80047c4:	2300      	movs	r3, #0
 80047c6:	4620      	mov	r0, r4
 80047c8:	4629      	mov	r1, r5
 80047ca:	f7fc f985 	bl	8000ad8 <__aeabi_dcmpeq>
 80047ce:	b108      	cbz	r0, 80047d4 <__cvt+0xa4>
 80047d0:	f8cd 900c 	str.w	r9, [sp, #12]
 80047d4:	2230      	movs	r2, #48	; 0x30
 80047d6:	9b03      	ldr	r3, [sp, #12]
 80047d8:	454b      	cmp	r3, r9
 80047da:	d307      	bcc.n	80047ec <__cvt+0xbc>
 80047dc:	9b03      	ldr	r3, [sp, #12]
 80047de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80047e0:	1bdb      	subs	r3, r3, r7
 80047e2:	4638      	mov	r0, r7
 80047e4:	6013      	str	r3, [r2, #0]
 80047e6:	b004      	add	sp, #16
 80047e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047ec:	1c59      	adds	r1, r3, #1
 80047ee:	9103      	str	r1, [sp, #12]
 80047f0:	701a      	strb	r2, [r3, #0]
 80047f2:	e7f0      	b.n	80047d6 <__cvt+0xa6>

080047f4 <__exponent>:
 80047f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80047f6:	4603      	mov	r3, r0
 80047f8:	2900      	cmp	r1, #0
 80047fa:	bfb8      	it	lt
 80047fc:	4249      	neglt	r1, r1
 80047fe:	f803 2b02 	strb.w	r2, [r3], #2
 8004802:	bfb4      	ite	lt
 8004804:	222d      	movlt	r2, #45	; 0x2d
 8004806:	222b      	movge	r2, #43	; 0x2b
 8004808:	2909      	cmp	r1, #9
 800480a:	7042      	strb	r2, [r0, #1]
 800480c:	dd2a      	ble.n	8004864 <__exponent+0x70>
 800480e:	f10d 0207 	add.w	r2, sp, #7
 8004812:	4617      	mov	r7, r2
 8004814:	260a      	movs	r6, #10
 8004816:	4694      	mov	ip, r2
 8004818:	fb91 f5f6 	sdiv	r5, r1, r6
 800481c:	fb06 1415 	mls	r4, r6, r5, r1
 8004820:	3430      	adds	r4, #48	; 0x30
 8004822:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004826:	460c      	mov	r4, r1
 8004828:	2c63      	cmp	r4, #99	; 0x63
 800482a:	f102 32ff 	add.w	r2, r2, #4294967295
 800482e:	4629      	mov	r1, r5
 8004830:	dcf1      	bgt.n	8004816 <__exponent+0x22>
 8004832:	3130      	adds	r1, #48	; 0x30
 8004834:	f1ac 0402 	sub.w	r4, ip, #2
 8004838:	f802 1c01 	strb.w	r1, [r2, #-1]
 800483c:	1c41      	adds	r1, r0, #1
 800483e:	4622      	mov	r2, r4
 8004840:	42ba      	cmp	r2, r7
 8004842:	d30a      	bcc.n	800485a <__exponent+0x66>
 8004844:	f10d 0209 	add.w	r2, sp, #9
 8004848:	eba2 020c 	sub.w	r2, r2, ip
 800484c:	42bc      	cmp	r4, r7
 800484e:	bf88      	it	hi
 8004850:	2200      	movhi	r2, #0
 8004852:	4413      	add	r3, r2
 8004854:	1a18      	subs	r0, r3, r0
 8004856:	b003      	add	sp, #12
 8004858:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800485a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800485e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004862:	e7ed      	b.n	8004840 <__exponent+0x4c>
 8004864:	2330      	movs	r3, #48	; 0x30
 8004866:	3130      	adds	r1, #48	; 0x30
 8004868:	7083      	strb	r3, [r0, #2]
 800486a:	70c1      	strb	r1, [r0, #3]
 800486c:	1d03      	adds	r3, r0, #4
 800486e:	e7f1      	b.n	8004854 <__exponent+0x60>

08004870 <_printf_float>:
 8004870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004874:	ed2d 8b02 	vpush	{d8}
 8004878:	b08d      	sub	sp, #52	; 0x34
 800487a:	460c      	mov	r4, r1
 800487c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004880:	4616      	mov	r6, r2
 8004882:	461f      	mov	r7, r3
 8004884:	4605      	mov	r5, r0
 8004886:	f000 fda5 	bl	80053d4 <_localeconv_r>
 800488a:	f8d0 a000 	ldr.w	sl, [r0]
 800488e:	4650      	mov	r0, sl
 8004890:	f7fb fcf6 	bl	8000280 <strlen>
 8004894:	2300      	movs	r3, #0
 8004896:	930a      	str	r3, [sp, #40]	; 0x28
 8004898:	6823      	ldr	r3, [r4, #0]
 800489a:	9305      	str	r3, [sp, #20]
 800489c:	f8d8 3000 	ldr.w	r3, [r8]
 80048a0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80048a4:	3307      	adds	r3, #7
 80048a6:	f023 0307 	bic.w	r3, r3, #7
 80048aa:	f103 0208 	add.w	r2, r3, #8
 80048ae:	f8c8 2000 	str.w	r2, [r8]
 80048b2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80048b6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80048ba:	9307      	str	r3, [sp, #28]
 80048bc:	f8cd 8018 	str.w	r8, [sp, #24]
 80048c0:	ee08 0a10 	vmov	s16, r0
 80048c4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80048c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80048cc:	4b9e      	ldr	r3, [pc, #632]	; (8004b48 <_printf_float+0x2d8>)
 80048ce:	f04f 32ff 	mov.w	r2, #4294967295
 80048d2:	f7fc f933 	bl	8000b3c <__aeabi_dcmpun>
 80048d6:	bb88      	cbnz	r0, 800493c <_printf_float+0xcc>
 80048d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80048dc:	4b9a      	ldr	r3, [pc, #616]	; (8004b48 <_printf_float+0x2d8>)
 80048de:	f04f 32ff 	mov.w	r2, #4294967295
 80048e2:	f7fc f90d 	bl	8000b00 <__aeabi_dcmple>
 80048e6:	bb48      	cbnz	r0, 800493c <_printf_float+0xcc>
 80048e8:	2200      	movs	r2, #0
 80048ea:	2300      	movs	r3, #0
 80048ec:	4640      	mov	r0, r8
 80048ee:	4649      	mov	r1, r9
 80048f0:	f7fc f8fc 	bl	8000aec <__aeabi_dcmplt>
 80048f4:	b110      	cbz	r0, 80048fc <_printf_float+0x8c>
 80048f6:	232d      	movs	r3, #45	; 0x2d
 80048f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048fc:	4a93      	ldr	r2, [pc, #588]	; (8004b4c <_printf_float+0x2dc>)
 80048fe:	4b94      	ldr	r3, [pc, #592]	; (8004b50 <_printf_float+0x2e0>)
 8004900:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004904:	bf94      	ite	ls
 8004906:	4690      	movls	r8, r2
 8004908:	4698      	movhi	r8, r3
 800490a:	2303      	movs	r3, #3
 800490c:	6123      	str	r3, [r4, #16]
 800490e:	9b05      	ldr	r3, [sp, #20]
 8004910:	f023 0304 	bic.w	r3, r3, #4
 8004914:	6023      	str	r3, [r4, #0]
 8004916:	f04f 0900 	mov.w	r9, #0
 800491a:	9700      	str	r7, [sp, #0]
 800491c:	4633      	mov	r3, r6
 800491e:	aa0b      	add	r2, sp, #44	; 0x2c
 8004920:	4621      	mov	r1, r4
 8004922:	4628      	mov	r0, r5
 8004924:	f000 f9da 	bl	8004cdc <_printf_common>
 8004928:	3001      	adds	r0, #1
 800492a:	f040 8090 	bne.w	8004a4e <_printf_float+0x1de>
 800492e:	f04f 30ff 	mov.w	r0, #4294967295
 8004932:	b00d      	add	sp, #52	; 0x34
 8004934:	ecbd 8b02 	vpop	{d8}
 8004938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800493c:	4642      	mov	r2, r8
 800493e:	464b      	mov	r3, r9
 8004940:	4640      	mov	r0, r8
 8004942:	4649      	mov	r1, r9
 8004944:	f7fc f8fa 	bl	8000b3c <__aeabi_dcmpun>
 8004948:	b140      	cbz	r0, 800495c <_printf_float+0xec>
 800494a:	464b      	mov	r3, r9
 800494c:	2b00      	cmp	r3, #0
 800494e:	bfbc      	itt	lt
 8004950:	232d      	movlt	r3, #45	; 0x2d
 8004952:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004956:	4a7f      	ldr	r2, [pc, #508]	; (8004b54 <_printf_float+0x2e4>)
 8004958:	4b7f      	ldr	r3, [pc, #508]	; (8004b58 <_printf_float+0x2e8>)
 800495a:	e7d1      	b.n	8004900 <_printf_float+0x90>
 800495c:	6863      	ldr	r3, [r4, #4]
 800495e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004962:	9206      	str	r2, [sp, #24]
 8004964:	1c5a      	adds	r2, r3, #1
 8004966:	d13f      	bne.n	80049e8 <_printf_float+0x178>
 8004968:	2306      	movs	r3, #6
 800496a:	6063      	str	r3, [r4, #4]
 800496c:	9b05      	ldr	r3, [sp, #20]
 800496e:	6861      	ldr	r1, [r4, #4]
 8004970:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004974:	2300      	movs	r3, #0
 8004976:	9303      	str	r3, [sp, #12]
 8004978:	ab0a      	add	r3, sp, #40	; 0x28
 800497a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800497e:	ab09      	add	r3, sp, #36	; 0x24
 8004980:	ec49 8b10 	vmov	d0, r8, r9
 8004984:	9300      	str	r3, [sp, #0]
 8004986:	6022      	str	r2, [r4, #0]
 8004988:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800498c:	4628      	mov	r0, r5
 800498e:	f7ff fecf 	bl	8004730 <__cvt>
 8004992:	9b06      	ldr	r3, [sp, #24]
 8004994:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004996:	2b47      	cmp	r3, #71	; 0x47
 8004998:	4680      	mov	r8, r0
 800499a:	d108      	bne.n	80049ae <_printf_float+0x13e>
 800499c:	1cc8      	adds	r0, r1, #3
 800499e:	db02      	blt.n	80049a6 <_printf_float+0x136>
 80049a0:	6863      	ldr	r3, [r4, #4]
 80049a2:	4299      	cmp	r1, r3
 80049a4:	dd41      	ble.n	8004a2a <_printf_float+0x1ba>
 80049a6:	f1ab 0302 	sub.w	r3, fp, #2
 80049aa:	fa5f fb83 	uxtb.w	fp, r3
 80049ae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80049b2:	d820      	bhi.n	80049f6 <_printf_float+0x186>
 80049b4:	3901      	subs	r1, #1
 80049b6:	465a      	mov	r2, fp
 80049b8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80049bc:	9109      	str	r1, [sp, #36]	; 0x24
 80049be:	f7ff ff19 	bl	80047f4 <__exponent>
 80049c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80049c4:	1813      	adds	r3, r2, r0
 80049c6:	2a01      	cmp	r2, #1
 80049c8:	4681      	mov	r9, r0
 80049ca:	6123      	str	r3, [r4, #16]
 80049cc:	dc02      	bgt.n	80049d4 <_printf_float+0x164>
 80049ce:	6822      	ldr	r2, [r4, #0]
 80049d0:	07d2      	lsls	r2, r2, #31
 80049d2:	d501      	bpl.n	80049d8 <_printf_float+0x168>
 80049d4:	3301      	adds	r3, #1
 80049d6:	6123      	str	r3, [r4, #16]
 80049d8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d09c      	beq.n	800491a <_printf_float+0xaa>
 80049e0:	232d      	movs	r3, #45	; 0x2d
 80049e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049e6:	e798      	b.n	800491a <_printf_float+0xaa>
 80049e8:	9a06      	ldr	r2, [sp, #24]
 80049ea:	2a47      	cmp	r2, #71	; 0x47
 80049ec:	d1be      	bne.n	800496c <_printf_float+0xfc>
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d1bc      	bne.n	800496c <_printf_float+0xfc>
 80049f2:	2301      	movs	r3, #1
 80049f4:	e7b9      	b.n	800496a <_printf_float+0xfa>
 80049f6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80049fa:	d118      	bne.n	8004a2e <_printf_float+0x1be>
 80049fc:	2900      	cmp	r1, #0
 80049fe:	6863      	ldr	r3, [r4, #4]
 8004a00:	dd0b      	ble.n	8004a1a <_printf_float+0x1aa>
 8004a02:	6121      	str	r1, [r4, #16]
 8004a04:	b913      	cbnz	r3, 8004a0c <_printf_float+0x19c>
 8004a06:	6822      	ldr	r2, [r4, #0]
 8004a08:	07d0      	lsls	r0, r2, #31
 8004a0a:	d502      	bpl.n	8004a12 <_printf_float+0x1a2>
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	440b      	add	r3, r1
 8004a10:	6123      	str	r3, [r4, #16]
 8004a12:	65a1      	str	r1, [r4, #88]	; 0x58
 8004a14:	f04f 0900 	mov.w	r9, #0
 8004a18:	e7de      	b.n	80049d8 <_printf_float+0x168>
 8004a1a:	b913      	cbnz	r3, 8004a22 <_printf_float+0x1b2>
 8004a1c:	6822      	ldr	r2, [r4, #0]
 8004a1e:	07d2      	lsls	r2, r2, #31
 8004a20:	d501      	bpl.n	8004a26 <_printf_float+0x1b6>
 8004a22:	3302      	adds	r3, #2
 8004a24:	e7f4      	b.n	8004a10 <_printf_float+0x1a0>
 8004a26:	2301      	movs	r3, #1
 8004a28:	e7f2      	b.n	8004a10 <_printf_float+0x1a0>
 8004a2a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004a2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a30:	4299      	cmp	r1, r3
 8004a32:	db05      	blt.n	8004a40 <_printf_float+0x1d0>
 8004a34:	6823      	ldr	r3, [r4, #0]
 8004a36:	6121      	str	r1, [r4, #16]
 8004a38:	07d8      	lsls	r0, r3, #31
 8004a3a:	d5ea      	bpl.n	8004a12 <_printf_float+0x1a2>
 8004a3c:	1c4b      	adds	r3, r1, #1
 8004a3e:	e7e7      	b.n	8004a10 <_printf_float+0x1a0>
 8004a40:	2900      	cmp	r1, #0
 8004a42:	bfd4      	ite	le
 8004a44:	f1c1 0202 	rsble	r2, r1, #2
 8004a48:	2201      	movgt	r2, #1
 8004a4a:	4413      	add	r3, r2
 8004a4c:	e7e0      	b.n	8004a10 <_printf_float+0x1a0>
 8004a4e:	6823      	ldr	r3, [r4, #0]
 8004a50:	055a      	lsls	r2, r3, #21
 8004a52:	d407      	bmi.n	8004a64 <_printf_float+0x1f4>
 8004a54:	6923      	ldr	r3, [r4, #16]
 8004a56:	4642      	mov	r2, r8
 8004a58:	4631      	mov	r1, r6
 8004a5a:	4628      	mov	r0, r5
 8004a5c:	47b8      	blx	r7
 8004a5e:	3001      	adds	r0, #1
 8004a60:	d12c      	bne.n	8004abc <_printf_float+0x24c>
 8004a62:	e764      	b.n	800492e <_printf_float+0xbe>
 8004a64:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004a68:	f240 80e0 	bls.w	8004c2c <_printf_float+0x3bc>
 8004a6c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004a70:	2200      	movs	r2, #0
 8004a72:	2300      	movs	r3, #0
 8004a74:	f7fc f830 	bl	8000ad8 <__aeabi_dcmpeq>
 8004a78:	2800      	cmp	r0, #0
 8004a7a:	d034      	beq.n	8004ae6 <_printf_float+0x276>
 8004a7c:	4a37      	ldr	r2, [pc, #220]	; (8004b5c <_printf_float+0x2ec>)
 8004a7e:	2301      	movs	r3, #1
 8004a80:	4631      	mov	r1, r6
 8004a82:	4628      	mov	r0, r5
 8004a84:	47b8      	blx	r7
 8004a86:	3001      	adds	r0, #1
 8004a88:	f43f af51 	beq.w	800492e <_printf_float+0xbe>
 8004a8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a90:	429a      	cmp	r2, r3
 8004a92:	db02      	blt.n	8004a9a <_printf_float+0x22a>
 8004a94:	6823      	ldr	r3, [r4, #0]
 8004a96:	07d8      	lsls	r0, r3, #31
 8004a98:	d510      	bpl.n	8004abc <_printf_float+0x24c>
 8004a9a:	ee18 3a10 	vmov	r3, s16
 8004a9e:	4652      	mov	r2, sl
 8004aa0:	4631      	mov	r1, r6
 8004aa2:	4628      	mov	r0, r5
 8004aa4:	47b8      	blx	r7
 8004aa6:	3001      	adds	r0, #1
 8004aa8:	f43f af41 	beq.w	800492e <_printf_float+0xbe>
 8004aac:	f04f 0800 	mov.w	r8, #0
 8004ab0:	f104 091a 	add.w	r9, r4, #26
 8004ab4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ab6:	3b01      	subs	r3, #1
 8004ab8:	4543      	cmp	r3, r8
 8004aba:	dc09      	bgt.n	8004ad0 <_printf_float+0x260>
 8004abc:	6823      	ldr	r3, [r4, #0]
 8004abe:	079b      	lsls	r3, r3, #30
 8004ac0:	f100 8107 	bmi.w	8004cd2 <_printf_float+0x462>
 8004ac4:	68e0      	ldr	r0, [r4, #12]
 8004ac6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ac8:	4298      	cmp	r0, r3
 8004aca:	bfb8      	it	lt
 8004acc:	4618      	movlt	r0, r3
 8004ace:	e730      	b.n	8004932 <_printf_float+0xc2>
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	464a      	mov	r2, r9
 8004ad4:	4631      	mov	r1, r6
 8004ad6:	4628      	mov	r0, r5
 8004ad8:	47b8      	blx	r7
 8004ada:	3001      	adds	r0, #1
 8004adc:	f43f af27 	beq.w	800492e <_printf_float+0xbe>
 8004ae0:	f108 0801 	add.w	r8, r8, #1
 8004ae4:	e7e6      	b.n	8004ab4 <_printf_float+0x244>
 8004ae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	dc39      	bgt.n	8004b60 <_printf_float+0x2f0>
 8004aec:	4a1b      	ldr	r2, [pc, #108]	; (8004b5c <_printf_float+0x2ec>)
 8004aee:	2301      	movs	r3, #1
 8004af0:	4631      	mov	r1, r6
 8004af2:	4628      	mov	r0, r5
 8004af4:	47b8      	blx	r7
 8004af6:	3001      	adds	r0, #1
 8004af8:	f43f af19 	beq.w	800492e <_printf_float+0xbe>
 8004afc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004b00:	4313      	orrs	r3, r2
 8004b02:	d102      	bne.n	8004b0a <_printf_float+0x29a>
 8004b04:	6823      	ldr	r3, [r4, #0]
 8004b06:	07d9      	lsls	r1, r3, #31
 8004b08:	d5d8      	bpl.n	8004abc <_printf_float+0x24c>
 8004b0a:	ee18 3a10 	vmov	r3, s16
 8004b0e:	4652      	mov	r2, sl
 8004b10:	4631      	mov	r1, r6
 8004b12:	4628      	mov	r0, r5
 8004b14:	47b8      	blx	r7
 8004b16:	3001      	adds	r0, #1
 8004b18:	f43f af09 	beq.w	800492e <_printf_float+0xbe>
 8004b1c:	f04f 0900 	mov.w	r9, #0
 8004b20:	f104 0a1a 	add.w	sl, r4, #26
 8004b24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b26:	425b      	negs	r3, r3
 8004b28:	454b      	cmp	r3, r9
 8004b2a:	dc01      	bgt.n	8004b30 <_printf_float+0x2c0>
 8004b2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b2e:	e792      	b.n	8004a56 <_printf_float+0x1e6>
 8004b30:	2301      	movs	r3, #1
 8004b32:	4652      	mov	r2, sl
 8004b34:	4631      	mov	r1, r6
 8004b36:	4628      	mov	r0, r5
 8004b38:	47b8      	blx	r7
 8004b3a:	3001      	adds	r0, #1
 8004b3c:	f43f aef7 	beq.w	800492e <_printf_float+0xbe>
 8004b40:	f109 0901 	add.w	r9, r9, #1
 8004b44:	e7ee      	b.n	8004b24 <_printf_float+0x2b4>
 8004b46:	bf00      	nop
 8004b48:	7fefffff 	.word	0x7fefffff
 8004b4c:	080076df 	.word	0x080076df
 8004b50:	080076e3 	.word	0x080076e3
 8004b54:	080076e7 	.word	0x080076e7
 8004b58:	080076eb 	.word	0x080076eb
 8004b5c:	080076ef 	.word	0x080076ef
 8004b60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004b62:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004b64:	429a      	cmp	r2, r3
 8004b66:	bfa8      	it	ge
 8004b68:	461a      	movge	r2, r3
 8004b6a:	2a00      	cmp	r2, #0
 8004b6c:	4691      	mov	r9, r2
 8004b6e:	dc37      	bgt.n	8004be0 <_printf_float+0x370>
 8004b70:	f04f 0b00 	mov.w	fp, #0
 8004b74:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004b78:	f104 021a 	add.w	r2, r4, #26
 8004b7c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004b7e:	9305      	str	r3, [sp, #20]
 8004b80:	eba3 0309 	sub.w	r3, r3, r9
 8004b84:	455b      	cmp	r3, fp
 8004b86:	dc33      	bgt.n	8004bf0 <_printf_float+0x380>
 8004b88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	db3b      	blt.n	8004c08 <_printf_float+0x398>
 8004b90:	6823      	ldr	r3, [r4, #0]
 8004b92:	07da      	lsls	r2, r3, #31
 8004b94:	d438      	bmi.n	8004c08 <_printf_float+0x398>
 8004b96:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004b9a:	eba2 0903 	sub.w	r9, r2, r3
 8004b9e:	9b05      	ldr	r3, [sp, #20]
 8004ba0:	1ad2      	subs	r2, r2, r3
 8004ba2:	4591      	cmp	r9, r2
 8004ba4:	bfa8      	it	ge
 8004ba6:	4691      	movge	r9, r2
 8004ba8:	f1b9 0f00 	cmp.w	r9, #0
 8004bac:	dc35      	bgt.n	8004c1a <_printf_float+0x3aa>
 8004bae:	f04f 0800 	mov.w	r8, #0
 8004bb2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004bb6:	f104 0a1a 	add.w	sl, r4, #26
 8004bba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004bbe:	1a9b      	subs	r3, r3, r2
 8004bc0:	eba3 0309 	sub.w	r3, r3, r9
 8004bc4:	4543      	cmp	r3, r8
 8004bc6:	f77f af79 	ble.w	8004abc <_printf_float+0x24c>
 8004bca:	2301      	movs	r3, #1
 8004bcc:	4652      	mov	r2, sl
 8004bce:	4631      	mov	r1, r6
 8004bd0:	4628      	mov	r0, r5
 8004bd2:	47b8      	blx	r7
 8004bd4:	3001      	adds	r0, #1
 8004bd6:	f43f aeaa 	beq.w	800492e <_printf_float+0xbe>
 8004bda:	f108 0801 	add.w	r8, r8, #1
 8004bde:	e7ec      	b.n	8004bba <_printf_float+0x34a>
 8004be0:	4613      	mov	r3, r2
 8004be2:	4631      	mov	r1, r6
 8004be4:	4642      	mov	r2, r8
 8004be6:	4628      	mov	r0, r5
 8004be8:	47b8      	blx	r7
 8004bea:	3001      	adds	r0, #1
 8004bec:	d1c0      	bne.n	8004b70 <_printf_float+0x300>
 8004bee:	e69e      	b.n	800492e <_printf_float+0xbe>
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	4631      	mov	r1, r6
 8004bf4:	4628      	mov	r0, r5
 8004bf6:	9205      	str	r2, [sp, #20]
 8004bf8:	47b8      	blx	r7
 8004bfa:	3001      	adds	r0, #1
 8004bfc:	f43f ae97 	beq.w	800492e <_printf_float+0xbe>
 8004c00:	9a05      	ldr	r2, [sp, #20]
 8004c02:	f10b 0b01 	add.w	fp, fp, #1
 8004c06:	e7b9      	b.n	8004b7c <_printf_float+0x30c>
 8004c08:	ee18 3a10 	vmov	r3, s16
 8004c0c:	4652      	mov	r2, sl
 8004c0e:	4631      	mov	r1, r6
 8004c10:	4628      	mov	r0, r5
 8004c12:	47b8      	blx	r7
 8004c14:	3001      	adds	r0, #1
 8004c16:	d1be      	bne.n	8004b96 <_printf_float+0x326>
 8004c18:	e689      	b.n	800492e <_printf_float+0xbe>
 8004c1a:	9a05      	ldr	r2, [sp, #20]
 8004c1c:	464b      	mov	r3, r9
 8004c1e:	4442      	add	r2, r8
 8004c20:	4631      	mov	r1, r6
 8004c22:	4628      	mov	r0, r5
 8004c24:	47b8      	blx	r7
 8004c26:	3001      	adds	r0, #1
 8004c28:	d1c1      	bne.n	8004bae <_printf_float+0x33e>
 8004c2a:	e680      	b.n	800492e <_printf_float+0xbe>
 8004c2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004c2e:	2a01      	cmp	r2, #1
 8004c30:	dc01      	bgt.n	8004c36 <_printf_float+0x3c6>
 8004c32:	07db      	lsls	r3, r3, #31
 8004c34:	d53a      	bpl.n	8004cac <_printf_float+0x43c>
 8004c36:	2301      	movs	r3, #1
 8004c38:	4642      	mov	r2, r8
 8004c3a:	4631      	mov	r1, r6
 8004c3c:	4628      	mov	r0, r5
 8004c3e:	47b8      	blx	r7
 8004c40:	3001      	adds	r0, #1
 8004c42:	f43f ae74 	beq.w	800492e <_printf_float+0xbe>
 8004c46:	ee18 3a10 	vmov	r3, s16
 8004c4a:	4652      	mov	r2, sl
 8004c4c:	4631      	mov	r1, r6
 8004c4e:	4628      	mov	r0, r5
 8004c50:	47b8      	blx	r7
 8004c52:	3001      	adds	r0, #1
 8004c54:	f43f ae6b 	beq.w	800492e <_printf_float+0xbe>
 8004c58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	2300      	movs	r3, #0
 8004c60:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8004c64:	f7fb ff38 	bl	8000ad8 <__aeabi_dcmpeq>
 8004c68:	b9d8      	cbnz	r0, 8004ca2 <_printf_float+0x432>
 8004c6a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004c6e:	f108 0201 	add.w	r2, r8, #1
 8004c72:	4631      	mov	r1, r6
 8004c74:	4628      	mov	r0, r5
 8004c76:	47b8      	blx	r7
 8004c78:	3001      	adds	r0, #1
 8004c7a:	d10e      	bne.n	8004c9a <_printf_float+0x42a>
 8004c7c:	e657      	b.n	800492e <_printf_float+0xbe>
 8004c7e:	2301      	movs	r3, #1
 8004c80:	4652      	mov	r2, sl
 8004c82:	4631      	mov	r1, r6
 8004c84:	4628      	mov	r0, r5
 8004c86:	47b8      	blx	r7
 8004c88:	3001      	adds	r0, #1
 8004c8a:	f43f ae50 	beq.w	800492e <_printf_float+0xbe>
 8004c8e:	f108 0801 	add.w	r8, r8, #1
 8004c92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c94:	3b01      	subs	r3, #1
 8004c96:	4543      	cmp	r3, r8
 8004c98:	dcf1      	bgt.n	8004c7e <_printf_float+0x40e>
 8004c9a:	464b      	mov	r3, r9
 8004c9c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004ca0:	e6da      	b.n	8004a58 <_printf_float+0x1e8>
 8004ca2:	f04f 0800 	mov.w	r8, #0
 8004ca6:	f104 0a1a 	add.w	sl, r4, #26
 8004caa:	e7f2      	b.n	8004c92 <_printf_float+0x422>
 8004cac:	2301      	movs	r3, #1
 8004cae:	4642      	mov	r2, r8
 8004cb0:	e7df      	b.n	8004c72 <_printf_float+0x402>
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	464a      	mov	r2, r9
 8004cb6:	4631      	mov	r1, r6
 8004cb8:	4628      	mov	r0, r5
 8004cba:	47b8      	blx	r7
 8004cbc:	3001      	adds	r0, #1
 8004cbe:	f43f ae36 	beq.w	800492e <_printf_float+0xbe>
 8004cc2:	f108 0801 	add.w	r8, r8, #1
 8004cc6:	68e3      	ldr	r3, [r4, #12]
 8004cc8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004cca:	1a5b      	subs	r3, r3, r1
 8004ccc:	4543      	cmp	r3, r8
 8004cce:	dcf0      	bgt.n	8004cb2 <_printf_float+0x442>
 8004cd0:	e6f8      	b.n	8004ac4 <_printf_float+0x254>
 8004cd2:	f04f 0800 	mov.w	r8, #0
 8004cd6:	f104 0919 	add.w	r9, r4, #25
 8004cda:	e7f4      	b.n	8004cc6 <_printf_float+0x456>

08004cdc <_printf_common>:
 8004cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ce0:	4616      	mov	r6, r2
 8004ce2:	4699      	mov	r9, r3
 8004ce4:	688a      	ldr	r2, [r1, #8]
 8004ce6:	690b      	ldr	r3, [r1, #16]
 8004ce8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004cec:	4293      	cmp	r3, r2
 8004cee:	bfb8      	it	lt
 8004cf0:	4613      	movlt	r3, r2
 8004cf2:	6033      	str	r3, [r6, #0]
 8004cf4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004cf8:	4607      	mov	r7, r0
 8004cfa:	460c      	mov	r4, r1
 8004cfc:	b10a      	cbz	r2, 8004d02 <_printf_common+0x26>
 8004cfe:	3301      	adds	r3, #1
 8004d00:	6033      	str	r3, [r6, #0]
 8004d02:	6823      	ldr	r3, [r4, #0]
 8004d04:	0699      	lsls	r1, r3, #26
 8004d06:	bf42      	ittt	mi
 8004d08:	6833      	ldrmi	r3, [r6, #0]
 8004d0a:	3302      	addmi	r3, #2
 8004d0c:	6033      	strmi	r3, [r6, #0]
 8004d0e:	6825      	ldr	r5, [r4, #0]
 8004d10:	f015 0506 	ands.w	r5, r5, #6
 8004d14:	d106      	bne.n	8004d24 <_printf_common+0x48>
 8004d16:	f104 0a19 	add.w	sl, r4, #25
 8004d1a:	68e3      	ldr	r3, [r4, #12]
 8004d1c:	6832      	ldr	r2, [r6, #0]
 8004d1e:	1a9b      	subs	r3, r3, r2
 8004d20:	42ab      	cmp	r3, r5
 8004d22:	dc26      	bgt.n	8004d72 <_printf_common+0x96>
 8004d24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004d28:	1e13      	subs	r3, r2, #0
 8004d2a:	6822      	ldr	r2, [r4, #0]
 8004d2c:	bf18      	it	ne
 8004d2e:	2301      	movne	r3, #1
 8004d30:	0692      	lsls	r2, r2, #26
 8004d32:	d42b      	bmi.n	8004d8c <_printf_common+0xb0>
 8004d34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d38:	4649      	mov	r1, r9
 8004d3a:	4638      	mov	r0, r7
 8004d3c:	47c0      	blx	r8
 8004d3e:	3001      	adds	r0, #1
 8004d40:	d01e      	beq.n	8004d80 <_printf_common+0xa4>
 8004d42:	6823      	ldr	r3, [r4, #0]
 8004d44:	6922      	ldr	r2, [r4, #16]
 8004d46:	f003 0306 	and.w	r3, r3, #6
 8004d4a:	2b04      	cmp	r3, #4
 8004d4c:	bf02      	ittt	eq
 8004d4e:	68e5      	ldreq	r5, [r4, #12]
 8004d50:	6833      	ldreq	r3, [r6, #0]
 8004d52:	1aed      	subeq	r5, r5, r3
 8004d54:	68a3      	ldr	r3, [r4, #8]
 8004d56:	bf0c      	ite	eq
 8004d58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d5c:	2500      	movne	r5, #0
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	bfc4      	itt	gt
 8004d62:	1a9b      	subgt	r3, r3, r2
 8004d64:	18ed      	addgt	r5, r5, r3
 8004d66:	2600      	movs	r6, #0
 8004d68:	341a      	adds	r4, #26
 8004d6a:	42b5      	cmp	r5, r6
 8004d6c:	d11a      	bne.n	8004da4 <_printf_common+0xc8>
 8004d6e:	2000      	movs	r0, #0
 8004d70:	e008      	b.n	8004d84 <_printf_common+0xa8>
 8004d72:	2301      	movs	r3, #1
 8004d74:	4652      	mov	r2, sl
 8004d76:	4649      	mov	r1, r9
 8004d78:	4638      	mov	r0, r7
 8004d7a:	47c0      	blx	r8
 8004d7c:	3001      	adds	r0, #1
 8004d7e:	d103      	bne.n	8004d88 <_printf_common+0xac>
 8004d80:	f04f 30ff 	mov.w	r0, #4294967295
 8004d84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d88:	3501      	adds	r5, #1
 8004d8a:	e7c6      	b.n	8004d1a <_printf_common+0x3e>
 8004d8c:	18e1      	adds	r1, r4, r3
 8004d8e:	1c5a      	adds	r2, r3, #1
 8004d90:	2030      	movs	r0, #48	; 0x30
 8004d92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d96:	4422      	add	r2, r4
 8004d98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004da0:	3302      	adds	r3, #2
 8004da2:	e7c7      	b.n	8004d34 <_printf_common+0x58>
 8004da4:	2301      	movs	r3, #1
 8004da6:	4622      	mov	r2, r4
 8004da8:	4649      	mov	r1, r9
 8004daa:	4638      	mov	r0, r7
 8004dac:	47c0      	blx	r8
 8004dae:	3001      	adds	r0, #1
 8004db0:	d0e6      	beq.n	8004d80 <_printf_common+0xa4>
 8004db2:	3601      	adds	r6, #1
 8004db4:	e7d9      	b.n	8004d6a <_printf_common+0x8e>
	...

08004db8 <_printf_i>:
 8004db8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004dbc:	7e0f      	ldrb	r7, [r1, #24]
 8004dbe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004dc0:	2f78      	cmp	r7, #120	; 0x78
 8004dc2:	4691      	mov	r9, r2
 8004dc4:	4680      	mov	r8, r0
 8004dc6:	460c      	mov	r4, r1
 8004dc8:	469a      	mov	sl, r3
 8004dca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004dce:	d807      	bhi.n	8004de0 <_printf_i+0x28>
 8004dd0:	2f62      	cmp	r7, #98	; 0x62
 8004dd2:	d80a      	bhi.n	8004dea <_printf_i+0x32>
 8004dd4:	2f00      	cmp	r7, #0
 8004dd6:	f000 80d4 	beq.w	8004f82 <_printf_i+0x1ca>
 8004dda:	2f58      	cmp	r7, #88	; 0x58
 8004ddc:	f000 80c0 	beq.w	8004f60 <_printf_i+0x1a8>
 8004de0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004de4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004de8:	e03a      	b.n	8004e60 <_printf_i+0xa8>
 8004dea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004dee:	2b15      	cmp	r3, #21
 8004df0:	d8f6      	bhi.n	8004de0 <_printf_i+0x28>
 8004df2:	a101      	add	r1, pc, #4	; (adr r1, 8004df8 <_printf_i+0x40>)
 8004df4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004df8:	08004e51 	.word	0x08004e51
 8004dfc:	08004e65 	.word	0x08004e65
 8004e00:	08004de1 	.word	0x08004de1
 8004e04:	08004de1 	.word	0x08004de1
 8004e08:	08004de1 	.word	0x08004de1
 8004e0c:	08004de1 	.word	0x08004de1
 8004e10:	08004e65 	.word	0x08004e65
 8004e14:	08004de1 	.word	0x08004de1
 8004e18:	08004de1 	.word	0x08004de1
 8004e1c:	08004de1 	.word	0x08004de1
 8004e20:	08004de1 	.word	0x08004de1
 8004e24:	08004f69 	.word	0x08004f69
 8004e28:	08004e91 	.word	0x08004e91
 8004e2c:	08004f23 	.word	0x08004f23
 8004e30:	08004de1 	.word	0x08004de1
 8004e34:	08004de1 	.word	0x08004de1
 8004e38:	08004f8b 	.word	0x08004f8b
 8004e3c:	08004de1 	.word	0x08004de1
 8004e40:	08004e91 	.word	0x08004e91
 8004e44:	08004de1 	.word	0x08004de1
 8004e48:	08004de1 	.word	0x08004de1
 8004e4c:	08004f2b 	.word	0x08004f2b
 8004e50:	682b      	ldr	r3, [r5, #0]
 8004e52:	1d1a      	adds	r2, r3, #4
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	602a      	str	r2, [r5, #0]
 8004e58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e60:	2301      	movs	r3, #1
 8004e62:	e09f      	b.n	8004fa4 <_printf_i+0x1ec>
 8004e64:	6820      	ldr	r0, [r4, #0]
 8004e66:	682b      	ldr	r3, [r5, #0]
 8004e68:	0607      	lsls	r7, r0, #24
 8004e6a:	f103 0104 	add.w	r1, r3, #4
 8004e6e:	6029      	str	r1, [r5, #0]
 8004e70:	d501      	bpl.n	8004e76 <_printf_i+0xbe>
 8004e72:	681e      	ldr	r6, [r3, #0]
 8004e74:	e003      	b.n	8004e7e <_printf_i+0xc6>
 8004e76:	0646      	lsls	r6, r0, #25
 8004e78:	d5fb      	bpl.n	8004e72 <_printf_i+0xba>
 8004e7a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004e7e:	2e00      	cmp	r6, #0
 8004e80:	da03      	bge.n	8004e8a <_printf_i+0xd2>
 8004e82:	232d      	movs	r3, #45	; 0x2d
 8004e84:	4276      	negs	r6, r6
 8004e86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e8a:	485a      	ldr	r0, [pc, #360]	; (8004ff4 <_printf_i+0x23c>)
 8004e8c:	230a      	movs	r3, #10
 8004e8e:	e012      	b.n	8004eb6 <_printf_i+0xfe>
 8004e90:	682b      	ldr	r3, [r5, #0]
 8004e92:	6820      	ldr	r0, [r4, #0]
 8004e94:	1d19      	adds	r1, r3, #4
 8004e96:	6029      	str	r1, [r5, #0]
 8004e98:	0605      	lsls	r5, r0, #24
 8004e9a:	d501      	bpl.n	8004ea0 <_printf_i+0xe8>
 8004e9c:	681e      	ldr	r6, [r3, #0]
 8004e9e:	e002      	b.n	8004ea6 <_printf_i+0xee>
 8004ea0:	0641      	lsls	r1, r0, #25
 8004ea2:	d5fb      	bpl.n	8004e9c <_printf_i+0xe4>
 8004ea4:	881e      	ldrh	r6, [r3, #0]
 8004ea6:	4853      	ldr	r0, [pc, #332]	; (8004ff4 <_printf_i+0x23c>)
 8004ea8:	2f6f      	cmp	r7, #111	; 0x6f
 8004eaa:	bf0c      	ite	eq
 8004eac:	2308      	moveq	r3, #8
 8004eae:	230a      	movne	r3, #10
 8004eb0:	2100      	movs	r1, #0
 8004eb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004eb6:	6865      	ldr	r5, [r4, #4]
 8004eb8:	60a5      	str	r5, [r4, #8]
 8004eba:	2d00      	cmp	r5, #0
 8004ebc:	bfa2      	ittt	ge
 8004ebe:	6821      	ldrge	r1, [r4, #0]
 8004ec0:	f021 0104 	bicge.w	r1, r1, #4
 8004ec4:	6021      	strge	r1, [r4, #0]
 8004ec6:	b90e      	cbnz	r6, 8004ecc <_printf_i+0x114>
 8004ec8:	2d00      	cmp	r5, #0
 8004eca:	d04b      	beq.n	8004f64 <_printf_i+0x1ac>
 8004ecc:	4615      	mov	r5, r2
 8004ece:	fbb6 f1f3 	udiv	r1, r6, r3
 8004ed2:	fb03 6711 	mls	r7, r3, r1, r6
 8004ed6:	5dc7      	ldrb	r7, [r0, r7]
 8004ed8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004edc:	4637      	mov	r7, r6
 8004ede:	42bb      	cmp	r3, r7
 8004ee0:	460e      	mov	r6, r1
 8004ee2:	d9f4      	bls.n	8004ece <_printf_i+0x116>
 8004ee4:	2b08      	cmp	r3, #8
 8004ee6:	d10b      	bne.n	8004f00 <_printf_i+0x148>
 8004ee8:	6823      	ldr	r3, [r4, #0]
 8004eea:	07de      	lsls	r6, r3, #31
 8004eec:	d508      	bpl.n	8004f00 <_printf_i+0x148>
 8004eee:	6923      	ldr	r3, [r4, #16]
 8004ef0:	6861      	ldr	r1, [r4, #4]
 8004ef2:	4299      	cmp	r1, r3
 8004ef4:	bfde      	ittt	le
 8004ef6:	2330      	movle	r3, #48	; 0x30
 8004ef8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004efc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004f00:	1b52      	subs	r2, r2, r5
 8004f02:	6122      	str	r2, [r4, #16]
 8004f04:	f8cd a000 	str.w	sl, [sp]
 8004f08:	464b      	mov	r3, r9
 8004f0a:	aa03      	add	r2, sp, #12
 8004f0c:	4621      	mov	r1, r4
 8004f0e:	4640      	mov	r0, r8
 8004f10:	f7ff fee4 	bl	8004cdc <_printf_common>
 8004f14:	3001      	adds	r0, #1
 8004f16:	d14a      	bne.n	8004fae <_printf_i+0x1f6>
 8004f18:	f04f 30ff 	mov.w	r0, #4294967295
 8004f1c:	b004      	add	sp, #16
 8004f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f22:	6823      	ldr	r3, [r4, #0]
 8004f24:	f043 0320 	orr.w	r3, r3, #32
 8004f28:	6023      	str	r3, [r4, #0]
 8004f2a:	4833      	ldr	r0, [pc, #204]	; (8004ff8 <_printf_i+0x240>)
 8004f2c:	2778      	movs	r7, #120	; 0x78
 8004f2e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004f32:	6823      	ldr	r3, [r4, #0]
 8004f34:	6829      	ldr	r1, [r5, #0]
 8004f36:	061f      	lsls	r7, r3, #24
 8004f38:	f851 6b04 	ldr.w	r6, [r1], #4
 8004f3c:	d402      	bmi.n	8004f44 <_printf_i+0x18c>
 8004f3e:	065f      	lsls	r7, r3, #25
 8004f40:	bf48      	it	mi
 8004f42:	b2b6      	uxthmi	r6, r6
 8004f44:	07df      	lsls	r7, r3, #31
 8004f46:	bf48      	it	mi
 8004f48:	f043 0320 	orrmi.w	r3, r3, #32
 8004f4c:	6029      	str	r1, [r5, #0]
 8004f4e:	bf48      	it	mi
 8004f50:	6023      	strmi	r3, [r4, #0]
 8004f52:	b91e      	cbnz	r6, 8004f5c <_printf_i+0x1a4>
 8004f54:	6823      	ldr	r3, [r4, #0]
 8004f56:	f023 0320 	bic.w	r3, r3, #32
 8004f5a:	6023      	str	r3, [r4, #0]
 8004f5c:	2310      	movs	r3, #16
 8004f5e:	e7a7      	b.n	8004eb0 <_printf_i+0xf8>
 8004f60:	4824      	ldr	r0, [pc, #144]	; (8004ff4 <_printf_i+0x23c>)
 8004f62:	e7e4      	b.n	8004f2e <_printf_i+0x176>
 8004f64:	4615      	mov	r5, r2
 8004f66:	e7bd      	b.n	8004ee4 <_printf_i+0x12c>
 8004f68:	682b      	ldr	r3, [r5, #0]
 8004f6a:	6826      	ldr	r6, [r4, #0]
 8004f6c:	6961      	ldr	r1, [r4, #20]
 8004f6e:	1d18      	adds	r0, r3, #4
 8004f70:	6028      	str	r0, [r5, #0]
 8004f72:	0635      	lsls	r5, r6, #24
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	d501      	bpl.n	8004f7c <_printf_i+0x1c4>
 8004f78:	6019      	str	r1, [r3, #0]
 8004f7a:	e002      	b.n	8004f82 <_printf_i+0x1ca>
 8004f7c:	0670      	lsls	r0, r6, #25
 8004f7e:	d5fb      	bpl.n	8004f78 <_printf_i+0x1c0>
 8004f80:	8019      	strh	r1, [r3, #0]
 8004f82:	2300      	movs	r3, #0
 8004f84:	6123      	str	r3, [r4, #16]
 8004f86:	4615      	mov	r5, r2
 8004f88:	e7bc      	b.n	8004f04 <_printf_i+0x14c>
 8004f8a:	682b      	ldr	r3, [r5, #0]
 8004f8c:	1d1a      	adds	r2, r3, #4
 8004f8e:	602a      	str	r2, [r5, #0]
 8004f90:	681d      	ldr	r5, [r3, #0]
 8004f92:	6862      	ldr	r2, [r4, #4]
 8004f94:	2100      	movs	r1, #0
 8004f96:	4628      	mov	r0, r5
 8004f98:	f7fb f922 	bl	80001e0 <memchr>
 8004f9c:	b108      	cbz	r0, 8004fa2 <_printf_i+0x1ea>
 8004f9e:	1b40      	subs	r0, r0, r5
 8004fa0:	6060      	str	r0, [r4, #4]
 8004fa2:	6863      	ldr	r3, [r4, #4]
 8004fa4:	6123      	str	r3, [r4, #16]
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fac:	e7aa      	b.n	8004f04 <_printf_i+0x14c>
 8004fae:	6923      	ldr	r3, [r4, #16]
 8004fb0:	462a      	mov	r2, r5
 8004fb2:	4649      	mov	r1, r9
 8004fb4:	4640      	mov	r0, r8
 8004fb6:	47d0      	blx	sl
 8004fb8:	3001      	adds	r0, #1
 8004fba:	d0ad      	beq.n	8004f18 <_printf_i+0x160>
 8004fbc:	6823      	ldr	r3, [r4, #0]
 8004fbe:	079b      	lsls	r3, r3, #30
 8004fc0:	d413      	bmi.n	8004fea <_printf_i+0x232>
 8004fc2:	68e0      	ldr	r0, [r4, #12]
 8004fc4:	9b03      	ldr	r3, [sp, #12]
 8004fc6:	4298      	cmp	r0, r3
 8004fc8:	bfb8      	it	lt
 8004fca:	4618      	movlt	r0, r3
 8004fcc:	e7a6      	b.n	8004f1c <_printf_i+0x164>
 8004fce:	2301      	movs	r3, #1
 8004fd0:	4632      	mov	r2, r6
 8004fd2:	4649      	mov	r1, r9
 8004fd4:	4640      	mov	r0, r8
 8004fd6:	47d0      	blx	sl
 8004fd8:	3001      	adds	r0, #1
 8004fda:	d09d      	beq.n	8004f18 <_printf_i+0x160>
 8004fdc:	3501      	adds	r5, #1
 8004fde:	68e3      	ldr	r3, [r4, #12]
 8004fe0:	9903      	ldr	r1, [sp, #12]
 8004fe2:	1a5b      	subs	r3, r3, r1
 8004fe4:	42ab      	cmp	r3, r5
 8004fe6:	dcf2      	bgt.n	8004fce <_printf_i+0x216>
 8004fe8:	e7eb      	b.n	8004fc2 <_printf_i+0x20a>
 8004fea:	2500      	movs	r5, #0
 8004fec:	f104 0619 	add.w	r6, r4, #25
 8004ff0:	e7f5      	b.n	8004fde <_printf_i+0x226>
 8004ff2:	bf00      	nop
 8004ff4:	080076f1 	.word	0x080076f1
 8004ff8:	08007702 	.word	0x08007702

08004ffc <std>:
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	b510      	push	{r4, lr}
 8005000:	4604      	mov	r4, r0
 8005002:	e9c0 3300 	strd	r3, r3, [r0]
 8005006:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800500a:	6083      	str	r3, [r0, #8]
 800500c:	8181      	strh	r1, [r0, #12]
 800500e:	6643      	str	r3, [r0, #100]	; 0x64
 8005010:	81c2      	strh	r2, [r0, #14]
 8005012:	6183      	str	r3, [r0, #24]
 8005014:	4619      	mov	r1, r3
 8005016:	2208      	movs	r2, #8
 8005018:	305c      	adds	r0, #92	; 0x5c
 800501a:	f000 f9d3 	bl	80053c4 <memset>
 800501e:	4b05      	ldr	r3, [pc, #20]	; (8005034 <std+0x38>)
 8005020:	6263      	str	r3, [r4, #36]	; 0x24
 8005022:	4b05      	ldr	r3, [pc, #20]	; (8005038 <std+0x3c>)
 8005024:	62a3      	str	r3, [r4, #40]	; 0x28
 8005026:	4b05      	ldr	r3, [pc, #20]	; (800503c <std+0x40>)
 8005028:	62e3      	str	r3, [r4, #44]	; 0x2c
 800502a:	4b05      	ldr	r3, [pc, #20]	; (8005040 <std+0x44>)
 800502c:	6224      	str	r4, [r4, #32]
 800502e:	6323      	str	r3, [r4, #48]	; 0x30
 8005030:	bd10      	pop	{r4, pc}
 8005032:	bf00      	nop
 8005034:	08005215 	.word	0x08005215
 8005038:	08005237 	.word	0x08005237
 800503c:	0800526f 	.word	0x0800526f
 8005040:	08005293 	.word	0x08005293

08005044 <stdio_exit_handler>:
 8005044:	4a02      	ldr	r2, [pc, #8]	; (8005050 <stdio_exit_handler+0xc>)
 8005046:	4903      	ldr	r1, [pc, #12]	; (8005054 <stdio_exit_handler+0x10>)
 8005048:	4803      	ldr	r0, [pc, #12]	; (8005058 <stdio_exit_handler+0x14>)
 800504a:	f000 b869 	b.w	8005120 <_fwalk_sglue>
 800504e:	bf00      	nop
 8005050:	20000014 	.word	0x20000014
 8005054:	08006bb9 	.word	0x08006bb9
 8005058:	20000020 	.word	0x20000020

0800505c <cleanup_stdio>:
 800505c:	6841      	ldr	r1, [r0, #4]
 800505e:	4b0c      	ldr	r3, [pc, #48]	; (8005090 <cleanup_stdio+0x34>)
 8005060:	4299      	cmp	r1, r3
 8005062:	b510      	push	{r4, lr}
 8005064:	4604      	mov	r4, r0
 8005066:	d001      	beq.n	800506c <cleanup_stdio+0x10>
 8005068:	f001 fda6 	bl	8006bb8 <_fflush_r>
 800506c:	68a1      	ldr	r1, [r4, #8]
 800506e:	4b09      	ldr	r3, [pc, #36]	; (8005094 <cleanup_stdio+0x38>)
 8005070:	4299      	cmp	r1, r3
 8005072:	d002      	beq.n	800507a <cleanup_stdio+0x1e>
 8005074:	4620      	mov	r0, r4
 8005076:	f001 fd9f 	bl	8006bb8 <_fflush_r>
 800507a:	68e1      	ldr	r1, [r4, #12]
 800507c:	4b06      	ldr	r3, [pc, #24]	; (8005098 <cleanup_stdio+0x3c>)
 800507e:	4299      	cmp	r1, r3
 8005080:	d004      	beq.n	800508c <cleanup_stdio+0x30>
 8005082:	4620      	mov	r0, r4
 8005084:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005088:	f001 bd96 	b.w	8006bb8 <_fflush_r>
 800508c:	bd10      	pop	{r4, pc}
 800508e:	bf00      	nop
 8005090:	200002b0 	.word	0x200002b0
 8005094:	20000318 	.word	0x20000318
 8005098:	20000380 	.word	0x20000380

0800509c <global_stdio_init.part.0>:
 800509c:	b510      	push	{r4, lr}
 800509e:	4b0b      	ldr	r3, [pc, #44]	; (80050cc <global_stdio_init.part.0+0x30>)
 80050a0:	4c0b      	ldr	r4, [pc, #44]	; (80050d0 <global_stdio_init.part.0+0x34>)
 80050a2:	4a0c      	ldr	r2, [pc, #48]	; (80050d4 <global_stdio_init.part.0+0x38>)
 80050a4:	601a      	str	r2, [r3, #0]
 80050a6:	4620      	mov	r0, r4
 80050a8:	2200      	movs	r2, #0
 80050aa:	2104      	movs	r1, #4
 80050ac:	f7ff ffa6 	bl	8004ffc <std>
 80050b0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80050b4:	2201      	movs	r2, #1
 80050b6:	2109      	movs	r1, #9
 80050b8:	f7ff ffa0 	bl	8004ffc <std>
 80050bc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80050c0:	2202      	movs	r2, #2
 80050c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050c6:	2112      	movs	r1, #18
 80050c8:	f7ff bf98 	b.w	8004ffc <std>
 80050cc:	200003e8 	.word	0x200003e8
 80050d0:	200002b0 	.word	0x200002b0
 80050d4:	08005045 	.word	0x08005045

080050d8 <__sfp_lock_acquire>:
 80050d8:	4801      	ldr	r0, [pc, #4]	; (80050e0 <__sfp_lock_acquire+0x8>)
 80050da:	f000 b9ef 	b.w	80054bc <__retarget_lock_acquire_recursive>
 80050de:	bf00      	nop
 80050e0:	200003f1 	.word	0x200003f1

080050e4 <__sfp_lock_release>:
 80050e4:	4801      	ldr	r0, [pc, #4]	; (80050ec <__sfp_lock_release+0x8>)
 80050e6:	f000 b9ea 	b.w	80054be <__retarget_lock_release_recursive>
 80050ea:	bf00      	nop
 80050ec:	200003f1 	.word	0x200003f1

080050f0 <__sinit>:
 80050f0:	b510      	push	{r4, lr}
 80050f2:	4604      	mov	r4, r0
 80050f4:	f7ff fff0 	bl	80050d8 <__sfp_lock_acquire>
 80050f8:	6a23      	ldr	r3, [r4, #32]
 80050fa:	b11b      	cbz	r3, 8005104 <__sinit+0x14>
 80050fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005100:	f7ff bff0 	b.w	80050e4 <__sfp_lock_release>
 8005104:	4b04      	ldr	r3, [pc, #16]	; (8005118 <__sinit+0x28>)
 8005106:	6223      	str	r3, [r4, #32]
 8005108:	4b04      	ldr	r3, [pc, #16]	; (800511c <__sinit+0x2c>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d1f5      	bne.n	80050fc <__sinit+0xc>
 8005110:	f7ff ffc4 	bl	800509c <global_stdio_init.part.0>
 8005114:	e7f2      	b.n	80050fc <__sinit+0xc>
 8005116:	bf00      	nop
 8005118:	0800505d 	.word	0x0800505d
 800511c:	200003e8 	.word	0x200003e8

08005120 <_fwalk_sglue>:
 8005120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005124:	4607      	mov	r7, r0
 8005126:	4688      	mov	r8, r1
 8005128:	4614      	mov	r4, r2
 800512a:	2600      	movs	r6, #0
 800512c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005130:	f1b9 0901 	subs.w	r9, r9, #1
 8005134:	d505      	bpl.n	8005142 <_fwalk_sglue+0x22>
 8005136:	6824      	ldr	r4, [r4, #0]
 8005138:	2c00      	cmp	r4, #0
 800513a:	d1f7      	bne.n	800512c <_fwalk_sglue+0xc>
 800513c:	4630      	mov	r0, r6
 800513e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005142:	89ab      	ldrh	r3, [r5, #12]
 8005144:	2b01      	cmp	r3, #1
 8005146:	d907      	bls.n	8005158 <_fwalk_sglue+0x38>
 8005148:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800514c:	3301      	adds	r3, #1
 800514e:	d003      	beq.n	8005158 <_fwalk_sglue+0x38>
 8005150:	4629      	mov	r1, r5
 8005152:	4638      	mov	r0, r7
 8005154:	47c0      	blx	r8
 8005156:	4306      	orrs	r6, r0
 8005158:	3568      	adds	r5, #104	; 0x68
 800515a:	e7e9      	b.n	8005130 <_fwalk_sglue+0x10>

0800515c <_puts_r>:
 800515c:	6a03      	ldr	r3, [r0, #32]
 800515e:	b570      	push	{r4, r5, r6, lr}
 8005160:	6884      	ldr	r4, [r0, #8]
 8005162:	4605      	mov	r5, r0
 8005164:	460e      	mov	r6, r1
 8005166:	b90b      	cbnz	r3, 800516c <_puts_r+0x10>
 8005168:	f7ff ffc2 	bl	80050f0 <__sinit>
 800516c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800516e:	07db      	lsls	r3, r3, #31
 8005170:	d405      	bmi.n	800517e <_puts_r+0x22>
 8005172:	89a3      	ldrh	r3, [r4, #12]
 8005174:	0598      	lsls	r0, r3, #22
 8005176:	d402      	bmi.n	800517e <_puts_r+0x22>
 8005178:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800517a:	f000 f99f 	bl	80054bc <__retarget_lock_acquire_recursive>
 800517e:	89a3      	ldrh	r3, [r4, #12]
 8005180:	0719      	lsls	r1, r3, #28
 8005182:	d513      	bpl.n	80051ac <_puts_r+0x50>
 8005184:	6923      	ldr	r3, [r4, #16]
 8005186:	b18b      	cbz	r3, 80051ac <_puts_r+0x50>
 8005188:	3e01      	subs	r6, #1
 800518a:	68a3      	ldr	r3, [r4, #8]
 800518c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005190:	3b01      	subs	r3, #1
 8005192:	60a3      	str	r3, [r4, #8]
 8005194:	b9e9      	cbnz	r1, 80051d2 <_puts_r+0x76>
 8005196:	2b00      	cmp	r3, #0
 8005198:	da2e      	bge.n	80051f8 <_puts_r+0x9c>
 800519a:	4622      	mov	r2, r4
 800519c:	210a      	movs	r1, #10
 800519e:	4628      	mov	r0, r5
 80051a0:	f000 f87b 	bl	800529a <__swbuf_r>
 80051a4:	3001      	adds	r0, #1
 80051a6:	d007      	beq.n	80051b8 <_puts_r+0x5c>
 80051a8:	250a      	movs	r5, #10
 80051aa:	e007      	b.n	80051bc <_puts_r+0x60>
 80051ac:	4621      	mov	r1, r4
 80051ae:	4628      	mov	r0, r5
 80051b0:	f000 f8b0 	bl	8005314 <__swsetup_r>
 80051b4:	2800      	cmp	r0, #0
 80051b6:	d0e7      	beq.n	8005188 <_puts_r+0x2c>
 80051b8:	f04f 35ff 	mov.w	r5, #4294967295
 80051bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80051be:	07da      	lsls	r2, r3, #31
 80051c0:	d405      	bmi.n	80051ce <_puts_r+0x72>
 80051c2:	89a3      	ldrh	r3, [r4, #12]
 80051c4:	059b      	lsls	r3, r3, #22
 80051c6:	d402      	bmi.n	80051ce <_puts_r+0x72>
 80051c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80051ca:	f000 f978 	bl	80054be <__retarget_lock_release_recursive>
 80051ce:	4628      	mov	r0, r5
 80051d0:	bd70      	pop	{r4, r5, r6, pc}
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	da04      	bge.n	80051e0 <_puts_r+0x84>
 80051d6:	69a2      	ldr	r2, [r4, #24]
 80051d8:	429a      	cmp	r2, r3
 80051da:	dc06      	bgt.n	80051ea <_puts_r+0x8e>
 80051dc:	290a      	cmp	r1, #10
 80051de:	d004      	beq.n	80051ea <_puts_r+0x8e>
 80051e0:	6823      	ldr	r3, [r4, #0]
 80051e2:	1c5a      	adds	r2, r3, #1
 80051e4:	6022      	str	r2, [r4, #0]
 80051e6:	7019      	strb	r1, [r3, #0]
 80051e8:	e7cf      	b.n	800518a <_puts_r+0x2e>
 80051ea:	4622      	mov	r2, r4
 80051ec:	4628      	mov	r0, r5
 80051ee:	f000 f854 	bl	800529a <__swbuf_r>
 80051f2:	3001      	adds	r0, #1
 80051f4:	d1c9      	bne.n	800518a <_puts_r+0x2e>
 80051f6:	e7df      	b.n	80051b8 <_puts_r+0x5c>
 80051f8:	6823      	ldr	r3, [r4, #0]
 80051fa:	250a      	movs	r5, #10
 80051fc:	1c5a      	adds	r2, r3, #1
 80051fe:	6022      	str	r2, [r4, #0]
 8005200:	701d      	strb	r5, [r3, #0]
 8005202:	e7db      	b.n	80051bc <_puts_r+0x60>

08005204 <puts>:
 8005204:	4b02      	ldr	r3, [pc, #8]	; (8005210 <puts+0xc>)
 8005206:	4601      	mov	r1, r0
 8005208:	6818      	ldr	r0, [r3, #0]
 800520a:	f7ff bfa7 	b.w	800515c <_puts_r>
 800520e:	bf00      	nop
 8005210:	2000006c 	.word	0x2000006c

08005214 <__sread>:
 8005214:	b510      	push	{r4, lr}
 8005216:	460c      	mov	r4, r1
 8005218:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800521c:	f000 f900 	bl	8005420 <_read_r>
 8005220:	2800      	cmp	r0, #0
 8005222:	bfab      	itete	ge
 8005224:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005226:	89a3      	ldrhlt	r3, [r4, #12]
 8005228:	181b      	addge	r3, r3, r0
 800522a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800522e:	bfac      	ite	ge
 8005230:	6563      	strge	r3, [r4, #84]	; 0x54
 8005232:	81a3      	strhlt	r3, [r4, #12]
 8005234:	bd10      	pop	{r4, pc}

08005236 <__swrite>:
 8005236:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800523a:	461f      	mov	r7, r3
 800523c:	898b      	ldrh	r3, [r1, #12]
 800523e:	05db      	lsls	r3, r3, #23
 8005240:	4605      	mov	r5, r0
 8005242:	460c      	mov	r4, r1
 8005244:	4616      	mov	r6, r2
 8005246:	d505      	bpl.n	8005254 <__swrite+0x1e>
 8005248:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800524c:	2302      	movs	r3, #2
 800524e:	2200      	movs	r2, #0
 8005250:	f000 f8d4 	bl	80053fc <_lseek_r>
 8005254:	89a3      	ldrh	r3, [r4, #12]
 8005256:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800525a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800525e:	81a3      	strh	r3, [r4, #12]
 8005260:	4632      	mov	r2, r6
 8005262:	463b      	mov	r3, r7
 8005264:	4628      	mov	r0, r5
 8005266:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800526a:	f000 b8eb 	b.w	8005444 <_write_r>

0800526e <__sseek>:
 800526e:	b510      	push	{r4, lr}
 8005270:	460c      	mov	r4, r1
 8005272:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005276:	f000 f8c1 	bl	80053fc <_lseek_r>
 800527a:	1c43      	adds	r3, r0, #1
 800527c:	89a3      	ldrh	r3, [r4, #12]
 800527e:	bf15      	itete	ne
 8005280:	6560      	strne	r0, [r4, #84]	; 0x54
 8005282:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005286:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800528a:	81a3      	strheq	r3, [r4, #12]
 800528c:	bf18      	it	ne
 800528e:	81a3      	strhne	r3, [r4, #12]
 8005290:	bd10      	pop	{r4, pc}

08005292 <__sclose>:
 8005292:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005296:	f000 b8a1 	b.w	80053dc <_close_r>

0800529a <__swbuf_r>:
 800529a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800529c:	460e      	mov	r6, r1
 800529e:	4614      	mov	r4, r2
 80052a0:	4605      	mov	r5, r0
 80052a2:	b118      	cbz	r0, 80052ac <__swbuf_r+0x12>
 80052a4:	6a03      	ldr	r3, [r0, #32]
 80052a6:	b90b      	cbnz	r3, 80052ac <__swbuf_r+0x12>
 80052a8:	f7ff ff22 	bl	80050f0 <__sinit>
 80052ac:	69a3      	ldr	r3, [r4, #24]
 80052ae:	60a3      	str	r3, [r4, #8]
 80052b0:	89a3      	ldrh	r3, [r4, #12]
 80052b2:	071a      	lsls	r2, r3, #28
 80052b4:	d525      	bpl.n	8005302 <__swbuf_r+0x68>
 80052b6:	6923      	ldr	r3, [r4, #16]
 80052b8:	b31b      	cbz	r3, 8005302 <__swbuf_r+0x68>
 80052ba:	6823      	ldr	r3, [r4, #0]
 80052bc:	6922      	ldr	r2, [r4, #16]
 80052be:	1a98      	subs	r0, r3, r2
 80052c0:	6963      	ldr	r3, [r4, #20]
 80052c2:	b2f6      	uxtb	r6, r6
 80052c4:	4283      	cmp	r3, r0
 80052c6:	4637      	mov	r7, r6
 80052c8:	dc04      	bgt.n	80052d4 <__swbuf_r+0x3a>
 80052ca:	4621      	mov	r1, r4
 80052cc:	4628      	mov	r0, r5
 80052ce:	f001 fc73 	bl	8006bb8 <_fflush_r>
 80052d2:	b9e0      	cbnz	r0, 800530e <__swbuf_r+0x74>
 80052d4:	68a3      	ldr	r3, [r4, #8]
 80052d6:	3b01      	subs	r3, #1
 80052d8:	60a3      	str	r3, [r4, #8]
 80052da:	6823      	ldr	r3, [r4, #0]
 80052dc:	1c5a      	adds	r2, r3, #1
 80052de:	6022      	str	r2, [r4, #0]
 80052e0:	701e      	strb	r6, [r3, #0]
 80052e2:	6962      	ldr	r2, [r4, #20]
 80052e4:	1c43      	adds	r3, r0, #1
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d004      	beq.n	80052f4 <__swbuf_r+0x5a>
 80052ea:	89a3      	ldrh	r3, [r4, #12]
 80052ec:	07db      	lsls	r3, r3, #31
 80052ee:	d506      	bpl.n	80052fe <__swbuf_r+0x64>
 80052f0:	2e0a      	cmp	r6, #10
 80052f2:	d104      	bne.n	80052fe <__swbuf_r+0x64>
 80052f4:	4621      	mov	r1, r4
 80052f6:	4628      	mov	r0, r5
 80052f8:	f001 fc5e 	bl	8006bb8 <_fflush_r>
 80052fc:	b938      	cbnz	r0, 800530e <__swbuf_r+0x74>
 80052fe:	4638      	mov	r0, r7
 8005300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005302:	4621      	mov	r1, r4
 8005304:	4628      	mov	r0, r5
 8005306:	f000 f805 	bl	8005314 <__swsetup_r>
 800530a:	2800      	cmp	r0, #0
 800530c:	d0d5      	beq.n	80052ba <__swbuf_r+0x20>
 800530e:	f04f 37ff 	mov.w	r7, #4294967295
 8005312:	e7f4      	b.n	80052fe <__swbuf_r+0x64>

08005314 <__swsetup_r>:
 8005314:	b538      	push	{r3, r4, r5, lr}
 8005316:	4b2a      	ldr	r3, [pc, #168]	; (80053c0 <__swsetup_r+0xac>)
 8005318:	4605      	mov	r5, r0
 800531a:	6818      	ldr	r0, [r3, #0]
 800531c:	460c      	mov	r4, r1
 800531e:	b118      	cbz	r0, 8005328 <__swsetup_r+0x14>
 8005320:	6a03      	ldr	r3, [r0, #32]
 8005322:	b90b      	cbnz	r3, 8005328 <__swsetup_r+0x14>
 8005324:	f7ff fee4 	bl	80050f0 <__sinit>
 8005328:	89a3      	ldrh	r3, [r4, #12]
 800532a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800532e:	0718      	lsls	r0, r3, #28
 8005330:	d422      	bmi.n	8005378 <__swsetup_r+0x64>
 8005332:	06d9      	lsls	r1, r3, #27
 8005334:	d407      	bmi.n	8005346 <__swsetup_r+0x32>
 8005336:	2309      	movs	r3, #9
 8005338:	602b      	str	r3, [r5, #0]
 800533a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800533e:	81a3      	strh	r3, [r4, #12]
 8005340:	f04f 30ff 	mov.w	r0, #4294967295
 8005344:	e034      	b.n	80053b0 <__swsetup_r+0x9c>
 8005346:	0758      	lsls	r0, r3, #29
 8005348:	d512      	bpl.n	8005370 <__swsetup_r+0x5c>
 800534a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800534c:	b141      	cbz	r1, 8005360 <__swsetup_r+0x4c>
 800534e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005352:	4299      	cmp	r1, r3
 8005354:	d002      	beq.n	800535c <__swsetup_r+0x48>
 8005356:	4628      	mov	r0, r5
 8005358:	f000 ff2c 	bl	80061b4 <_free_r>
 800535c:	2300      	movs	r3, #0
 800535e:	6363      	str	r3, [r4, #52]	; 0x34
 8005360:	89a3      	ldrh	r3, [r4, #12]
 8005362:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005366:	81a3      	strh	r3, [r4, #12]
 8005368:	2300      	movs	r3, #0
 800536a:	6063      	str	r3, [r4, #4]
 800536c:	6923      	ldr	r3, [r4, #16]
 800536e:	6023      	str	r3, [r4, #0]
 8005370:	89a3      	ldrh	r3, [r4, #12]
 8005372:	f043 0308 	orr.w	r3, r3, #8
 8005376:	81a3      	strh	r3, [r4, #12]
 8005378:	6923      	ldr	r3, [r4, #16]
 800537a:	b94b      	cbnz	r3, 8005390 <__swsetup_r+0x7c>
 800537c:	89a3      	ldrh	r3, [r4, #12]
 800537e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005382:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005386:	d003      	beq.n	8005390 <__swsetup_r+0x7c>
 8005388:	4621      	mov	r1, r4
 800538a:	4628      	mov	r0, r5
 800538c:	f001 fc62 	bl	8006c54 <__smakebuf_r>
 8005390:	89a0      	ldrh	r0, [r4, #12]
 8005392:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005396:	f010 0301 	ands.w	r3, r0, #1
 800539a:	d00a      	beq.n	80053b2 <__swsetup_r+0x9e>
 800539c:	2300      	movs	r3, #0
 800539e:	60a3      	str	r3, [r4, #8]
 80053a0:	6963      	ldr	r3, [r4, #20]
 80053a2:	425b      	negs	r3, r3
 80053a4:	61a3      	str	r3, [r4, #24]
 80053a6:	6923      	ldr	r3, [r4, #16]
 80053a8:	b943      	cbnz	r3, 80053bc <__swsetup_r+0xa8>
 80053aa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80053ae:	d1c4      	bne.n	800533a <__swsetup_r+0x26>
 80053b0:	bd38      	pop	{r3, r4, r5, pc}
 80053b2:	0781      	lsls	r1, r0, #30
 80053b4:	bf58      	it	pl
 80053b6:	6963      	ldrpl	r3, [r4, #20]
 80053b8:	60a3      	str	r3, [r4, #8]
 80053ba:	e7f4      	b.n	80053a6 <__swsetup_r+0x92>
 80053bc:	2000      	movs	r0, #0
 80053be:	e7f7      	b.n	80053b0 <__swsetup_r+0x9c>
 80053c0:	2000006c 	.word	0x2000006c

080053c4 <memset>:
 80053c4:	4402      	add	r2, r0
 80053c6:	4603      	mov	r3, r0
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d100      	bne.n	80053ce <memset+0xa>
 80053cc:	4770      	bx	lr
 80053ce:	f803 1b01 	strb.w	r1, [r3], #1
 80053d2:	e7f9      	b.n	80053c8 <memset+0x4>

080053d4 <_localeconv_r>:
 80053d4:	4800      	ldr	r0, [pc, #0]	; (80053d8 <_localeconv_r+0x4>)
 80053d6:	4770      	bx	lr
 80053d8:	20000160 	.word	0x20000160

080053dc <_close_r>:
 80053dc:	b538      	push	{r3, r4, r5, lr}
 80053de:	4d06      	ldr	r5, [pc, #24]	; (80053f8 <_close_r+0x1c>)
 80053e0:	2300      	movs	r3, #0
 80053e2:	4604      	mov	r4, r0
 80053e4:	4608      	mov	r0, r1
 80053e6:	602b      	str	r3, [r5, #0]
 80053e8:	f7fc fe6f 	bl	80020ca <_close>
 80053ec:	1c43      	adds	r3, r0, #1
 80053ee:	d102      	bne.n	80053f6 <_close_r+0x1a>
 80053f0:	682b      	ldr	r3, [r5, #0]
 80053f2:	b103      	cbz	r3, 80053f6 <_close_r+0x1a>
 80053f4:	6023      	str	r3, [r4, #0]
 80053f6:	bd38      	pop	{r3, r4, r5, pc}
 80053f8:	200003ec 	.word	0x200003ec

080053fc <_lseek_r>:
 80053fc:	b538      	push	{r3, r4, r5, lr}
 80053fe:	4d07      	ldr	r5, [pc, #28]	; (800541c <_lseek_r+0x20>)
 8005400:	4604      	mov	r4, r0
 8005402:	4608      	mov	r0, r1
 8005404:	4611      	mov	r1, r2
 8005406:	2200      	movs	r2, #0
 8005408:	602a      	str	r2, [r5, #0]
 800540a:	461a      	mov	r2, r3
 800540c:	f7fc fe84 	bl	8002118 <_lseek>
 8005410:	1c43      	adds	r3, r0, #1
 8005412:	d102      	bne.n	800541a <_lseek_r+0x1e>
 8005414:	682b      	ldr	r3, [r5, #0]
 8005416:	b103      	cbz	r3, 800541a <_lseek_r+0x1e>
 8005418:	6023      	str	r3, [r4, #0]
 800541a:	bd38      	pop	{r3, r4, r5, pc}
 800541c:	200003ec 	.word	0x200003ec

08005420 <_read_r>:
 8005420:	b538      	push	{r3, r4, r5, lr}
 8005422:	4d07      	ldr	r5, [pc, #28]	; (8005440 <_read_r+0x20>)
 8005424:	4604      	mov	r4, r0
 8005426:	4608      	mov	r0, r1
 8005428:	4611      	mov	r1, r2
 800542a:	2200      	movs	r2, #0
 800542c:	602a      	str	r2, [r5, #0]
 800542e:	461a      	mov	r2, r3
 8005430:	f7fc fe2e 	bl	8002090 <_read>
 8005434:	1c43      	adds	r3, r0, #1
 8005436:	d102      	bne.n	800543e <_read_r+0x1e>
 8005438:	682b      	ldr	r3, [r5, #0]
 800543a:	b103      	cbz	r3, 800543e <_read_r+0x1e>
 800543c:	6023      	str	r3, [r4, #0]
 800543e:	bd38      	pop	{r3, r4, r5, pc}
 8005440:	200003ec 	.word	0x200003ec

08005444 <_write_r>:
 8005444:	b538      	push	{r3, r4, r5, lr}
 8005446:	4d07      	ldr	r5, [pc, #28]	; (8005464 <_write_r+0x20>)
 8005448:	4604      	mov	r4, r0
 800544a:	4608      	mov	r0, r1
 800544c:	4611      	mov	r1, r2
 800544e:	2200      	movs	r2, #0
 8005450:	602a      	str	r2, [r5, #0]
 8005452:	461a      	mov	r2, r3
 8005454:	f7fc fb94 	bl	8001b80 <_write>
 8005458:	1c43      	adds	r3, r0, #1
 800545a:	d102      	bne.n	8005462 <_write_r+0x1e>
 800545c:	682b      	ldr	r3, [r5, #0]
 800545e:	b103      	cbz	r3, 8005462 <_write_r+0x1e>
 8005460:	6023      	str	r3, [r4, #0]
 8005462:	bd38      	pop	{r3, r4, r5, pc}
 8005464:	200003ec 	.word	0x200003ec

08005468 <__errno>:
 8005468:	4b01      	ldr	r3, [pc, #4]	; (8005470 <__errno+0x8>)
 800546a:	6818      	ldr	r0, [r3, #0]
 800546c:	4770      	bx	lr
 800546e:	bf00      	nop
 8005470:	2000006c 	.word	0x2000006c

08005474 <__libc_init_array>:
 8005474:	b570      	push	{r4, r5, r6, lr}
 8005476:	4d0d      	ldr	r5, [pc, #52]	; (80054ac <__libc_init_array+0x38>)
 8005478:	4c0d      	ldr	r4, [pc, #52]	; (80054b0 <__libc_init_array+0x3c>)
 800547a:	1b64      	subs	r4, r4, r5
 800547c:	10a4      	asrs	r4, r4, #2
 800547e:	2600      	movs	r6, #0
 8005480:	42a6      	cmp	r6, r4
 8005482:	d109      	bne.n	8005498 <__libc_init_array+0x24>
 8005484:	4d0b      	ldr	r5, [pc, #44]	; (80054b4 <__libc_init_array+0x40>)
 8005486:	4c0c      	ldr	r4, [pc, #48]	; (80054b8 <__libc_init_array+0x44>)
 8005488:	f002 f906 	bl	8007698 <_init>
 800548c:	1b64      	subs	r4, r4, r5
 800548e:	10a4      	asrs	r4, r4, #2
 8005490:	2600      	movs	r6, #0
 8005492:	42a6      	cmp	r6, r4
 8005494:	d105      	bne.n	80054a2 <__libc_init_array+0x2e>
 8005496:	bd70      	pop	{r4, r5, r6, pc}
 8005498:	f855 3b04 	ldr.w	r3, [r5], #4
 800549c:	4798      	blx	r3
 800549e:	3601      	adds	r6, #1
 80054a0:	e7ee      	b.n	8005480 <__libc_init_array+0xc>
 80054a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80054a6:	4798      	blx	r3
 80054a8:	3601      	adds	r6, #1
 80054aa:	e7f2      	b.n	8005492 <__libc_init_array+0x1e>
 80054ac:	08007aa0 	.word	0x08007aa0
 80054b0:	08007aa0 	.word	0x08007aa0
 80054b4:	08007aa0 	.word	0x08007aa0
 80054b8:	08007aa4 	.word	0x08007aa4

080054bc <__retarget_lock_acquire_recursive>:
 80054bc:	4770      	bx	lr

080054be <__retarget_lock_release_recursive>:
 80054be:	4770      	bx	lr

080054c0 <quorem>:
 80054c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054c4:	6903      	ldr	r3, [r0, #16]
 80054c6:	690c      	ldr	r4, [r1, #16]
 80054c8:	42a3      	cmp	r3, r4
 80054ca:	4607      	mov	r7, r0
 80054cc:	db7e      	blt.n	80055cc <quorem+0x10c>
 80054ce:	3c01      	subs	r4, #1
 80054d0:	f101 0814 	add.w	r8, r1, #20
 80054d4:	f100 0514 	add.w	r5, r0, #20
 80054d8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80054dc:	9301      	str	r3, [sp, #4]
 80054de:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80054e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80054e6:	3301      	adds	r3, #1
 80054e8:	429a      	cmp	r2, r3
 80054ea:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80054ee:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80054f2:	fbb2 f6f3 	udiv	r6, r2, r3
 80054f6:	d331      	bcc.n	800555c <quorem+0x9c>
 80054f8:	f04f 0e00 	mov.w	lr, #0
 80054fc:	4640      	mov	r0, r8
 80054fe:	46ac      	mov	ip, r5
 8005500:	46f2      	mov	sl, lr
 8005502:	f850 2b04 	ldr.w	r2, [r0], #4
 8005506:	b293      	uxth	r3, r2
 8005508:	fb06 e303 	mla	r3, r6, r3, lr
 800550c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005510:	0c1a      	lsrs	r2, r3, #16
 8005512:	b29b      	uxth	r3, r3
 8005514:	ebaa 0303 	sub.w	r3, sl, r3
 8005518:	f8dc a000 	ldr.w	sl, [ip]
 800551c:	fa13 f38a 	uxtah	r3, r3, sl
 8005520:	fb06 220e 	mla	r2, r6, lr, r2
 8005524:	9300      	str	r3, [sp, #0]
 8005526:	9b00      	ldr	r3, [sp, #0]
 8005528:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800552c:	b292      	uxth	r2, r2
 800552e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005532:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005536:	f8bd 3000 	ldrh.w	r3, [sp]
 800553a:	4581      	cmp	r9, r0
 800553c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005540:	f84c 3b04 	str.w	r3, [ip], #4
 8005544:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005548:	d2db      	bcs.n	8005502 <quorem+0x42>
 800554a:	f855 300b 	ldr.w	r3, [r5, fp]
 800554e:	b92b      	cbnz	r3, 800555c <quorem+0x9c>
 8005550:	9b01      	ldr	r3, [sp, #4]
 8005552:	3b04      	subs	r3, #4
 8005554:	429d      	cmp	r5, r3
 8005556:	461a      	mov	r2, r3
 8005558:	d32c      	bcc.n	80055b4 <quorem+0xf4>
 800555a:	613c      	str	r4, [r7, #16]
 800555c:	4638      	mov	r0, r7
 800555e:	f001 f9a5 	bl	80068ac <__mcmp>
 8005562:	2800      	cmp	r0, #0
 8005564:	db22      	blt.n	80055ac <quorem+0xec>
 8005566:	3601      	adds	r6, #1
 8005568:	4629      	mov	r1, r5
 800556a:	2000      	movs	r0, #0
 800556c:	f858 2b04 	ldr.w	r2, [r8], #4
 8005570:	f8d1 c000 	ldr.w	ip, [r1]
 8005574:	b293      	uxth	r3, r2
 8005576:	1ac3      	subs	r3, r0, r3
 8005578:	0c12      	lsrs	r2, r2, #16
 800557a:	fa13 f38c 	uxtah	r3, r3, ip
 800557e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005582:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005586:	b29b      	uxth	r3, r3
 8005588:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800558c:	45c1      	cmp	r9, r8
 800558e:	f841 3b04 	str.w	r3, [r1], #4
 8005592:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005596:	d2e9      	bcs.n	800556c <quorem+0xac>
 8005598:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800559c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80055a0:	b922      	cbnz	r2, 80055ac <quorem+0xec>
 80055a2:	3b04      	subs	r3, #4
 80055a4:	429d      	cmp	r5, r3
 80055a6:	461a      	mov	r2, r3
 80055a8:	d30a      	bcc.n	80055c0 <quorem+0x100>
 80055aa:	613c      	str	r4, [r7, #16]
 80055ac:	4630      	mov	r0, r6
 80055ae:	b003      	add	sp, #12
 80055b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055b4:	6812      	ldr	r2, [r2, #0]
 80055b6:	3b04      	subs	r3, #4
 80055b8:	2a00      	cmp	r2, #0
 80055ba:	d1ce      	bne.n	800555a <quorem+0x9a>
 80055bc:	3c01      	subs	r4, #1
 80055be:	e7c9      	b.n	8005554 <quorem+0x94>
 80055c0:	6812      	ldr	r2, [r2, #0]
 80055c2:	3b04      	subs	r3, #4
 80055c4:	2a00      	cmp	r2, #0
 80055c6:	d1f0      	bne.n	80055aa <quorem+0xea>
 80055c8:	3c01      	subs	r4, #1
 80055ca:	e7eb      	b.n	80055a4 <quorem+0xe4>
 80055cc:	2000      	movs	r0, #0
 80055ce:	e7ee      	b.n	80055ae <quorem+0xee>

080055d0 <_dtoa_r>:
 80055d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055d4:	ed2d 8b04 	vpush	{d8-d9}
 80055d8:	69c5      	ldr	r5, [r0, #28]
 80055da:	b093      	sub	sp, #76	; 0x4c
 80055dc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80055e0:	ec57 6b10 	vmov	r6, r7, d0
 80055e4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80055e8:	9107      	str	r1, [sp, #28]
 80055ea:	4604      	mov	r4, r0
 80055ec:	920a      	str	r2, [sp, #40]	; 0x28
 80055ee:	930d      	str	r3, [sp, #52]	; 0x34
 80055f0:	b975      	cbnz	r5, 8005610 <_dtoa_r+0x40>
 80055f2:	2010      	movs	r0, #16
 80055f4:	f000 fe2a 	bl	800624c <malloc>
 80055f8:	4602      	mov	r2, r0
 80055fa:	61e0      	str	r0, [r4, #28]
 80055fc:	b920      	cbnz	r0, 8005608 <_dtoa_r+0x38>
 80055fe:	4bae      	ldr	r3, [pc, #696]	; (80058b8 <_dtoa_r+0x2e8>)
 8005600:	21ef      	movs	r1, #239	; 0xef
 8005602:	48ae      	ldr	r0, [pc, #696]	; (80058bc <_dtoa_r+0x2ec>)
 8005604:	f001 fba2 	bl	8006d4c <__assert_func>
 8005608:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800560c:	6005      	str	r5, [r0, #0]
 800560e:	60c5      	str	r5, [r0, #12]
 8005610:	69e3      	ldr	r3, [r4, #28]
 8005612:	6819      	ldr	r1, [r3, #0]
 8005614:	b151      	cbz	r1, 800562c <_dtoa_r+0x5c>
 8005616:	685a      	ldr	r2, [r3, #4]
 8005618:	604a      	str	r2, [r1, #4]
 800561a:	2301      	movs	r3, #1
 800561c:	4093      	lsls	r3, r2
 800561e:	608b      	str	r3, [r1, #8]
 8005620:	4620      	mov	r0, r4
 8005622:	f000 ff07 	bl	8006434 <_Bfree>
 8005626:	69e3      	ldr	r3, [r4, #28]
 8005628:	2200      	movs	r2, #0
 800562a:	601a      	str	r2, [r3, #0]
 800562c:	1e3b      	subs	r3, r7, #0
 800562e:	bfbb      	ittet	lt
 8005630:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005634:	9303      	strlt	r3, [sp, #12]
 8005636:	2300      	movge	r3, #0
 8005638:	2201      	movlt	r2, #1
 800563a:	bfac      	ite	ge
 800563c:	f8c8 3000 	strge.w	r3, [r8]
 8005640:	f8c8 2000 	strlt.w	r2, [r8]
 8005644:	4b9e      	ldr	r3, [pc, #632]	; (80058c0 <_dtoa_r+0x2f0>)
 8005646:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800564a:	ea33 0308 	bics.w	r3, r3, r8
 800564e:	d11b      	bne.n	8005688 <_dtoa_r+0xb8>
 8005650:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005652:	f242 730f 	movw	r3, #9999	; 0x270f
 8005656:	6013      	str	r3, [r2, #0]
 8005658:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800565c:	4333      	orrs	r3, r6
 800565e:	f000 8593 	beq.w	8006188 <_dtoa_r+0xbb8>
 8005662:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005664:	b963      	cbnz	r3, 8005680 <_dtoa_r+0xb0>
 8005666:	4b97      	ldr	r3, [pc, #604]	; (80058c4 <_dtoa_r+0x2f4>)
 8005668:	e027      	b.n	80056ba <_dtoa_r+0xea>
 800566a:	4b97      	ldr	r3, [pc, #604]	; (80058c8 <_dtoa_r+0x2f8>)
 800566c:	9300      	str	r3, [sp, #0]
 800566e:	3308      	adds	r3, #8
 8005670:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005672:	6013      	str	r3, [r2, #0]
 8005674:	9800      	ldr	r0, [sp, #0]
 8005676:	b013      	add	sp, #76	; 0x4c
 8005678:	ecbd 8b04 	vpop	{d8-d9}
 800567c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005680:	4b90      	ldr	r3, [pc, #576]	; (80058c4 <_dtoa_r+0x2f4>)
 8005682:	9300      	str	r3, [sp, #0]
 8005684:	3303      	adds	r3, #3
 8005686:	e7f3      	b.n	8005670 <_dtoa_r+0xa0>
 8005688:	ed9d 7b02 	vldr	d7, [sp, #8]
 800568c:	2200      	movs	r2, #0
 800568e:	ec51 0b17 	vmov	r0, r1, d7
 8005692:	eeb0 8a47 	vmov.f32	s16, s14
 8005696:	eef0 8a67 	vmov.f32	s17, s15
 800569a:	2300      	movs	r3, #0
 800569c:	f7fb fa1c 	bl	8000ad8 <__aeabi_dcmpeq>
 80056a0:	4681      	mov	r9, r0
 80056a2:	b160      	cbz	r0, 80056be <_dtoa_r+0xee>
 80056a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80056a6:	2301      	movs	r3, #1
 80056a8:	6013      	str	r3, [r2, #0]
 80056aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	f000 8568 	beq.w	8006182 <_dtoa_r+0xbb2>
 80056b2:	4b86      	ldr	r3, [pc, #536]	; (80058cc <_dtoa_r+0x2fc>)
 80056b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80056b6:	6013      	str	r3, [r2, #0]
 80056b8:	3b01      	subs	r3, #1
 80056ba:	9300      	str	r3, [sp, #0]
 80056bc:	e7da      	b.n	8005674 <_dtoa_r+0xa4>
 80056be:	aa10      	add	r2, sp, #64	; 0x40
 80056c0:	a911      	add	r1, sp, #68	; 0x44
 80056c2:	4620      	mov	r0, r4
 80056c4:	eeb0 0a48 	vmov.f32	s0, s16
 80056c8:	eef0 0a68 	vmov.f32	s1, s17
 80056cc:	f001 f994 	bl	80069f8 <__d2b>
 80056d0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80056d4:	4682      	mov	sl, r0
 80056d6:	2d00      	cmp	r5, #0
 80056d8:	d07f      	beq.n	80057da <_dtoa_r+0x20a>
 80056da:	ee18 3a90 	vmov	r3, s17
 80056de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80056e2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80056e6:	ec51 0b18 	vmov	r0, r1, d8
 80056ea:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80056ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80056f2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80056f6:	4619      	mov	r1, r3
 80056f8:	2200      	movs	r2, #0
 80056fa:	4b75      	ldr	r3, [pc, #468]	; (80058d0 <_dtoa_r+0x300>)
 80056fc:	f7fa fdcc 	bl	8000298 <__aeabi_dsub>
 8005700:	a367      	add	r3, pc, #412	; (adr r3, 80058a0 <_dtoa_r+0x2d0>)
 8005702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005706:	f7fa ff7f 	bl	8000608 <__aeabi_dmul>
 800570a:	a367      	add	r3, pc, #412	; (adr r3, 80058a8 <_dtoa_r+0x2d8>)
 800570c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005710:	f7fa fdc4 	bl	800029c <__adddf3>
 8005714:	4606      	mov	r6, r0
 8005716:	4628      	mov	r0, r5
 8005718:	460f      	mov	r7, r1
 800571a:	f7fa ff0b 	bl	8000534 <__aeabi_i2d>
 800571e:	a364      	add	r3, pc, #400	; (adr r3, 80058b0 <_dtoa_r+0x2e0>)
 8005720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005724:	f7fa ff70 	bl	8000608 <__aeabi_dmul>
 8005728:	4602      	mov	r2, r0
 800572a:	460b      	mov	r3, r1
 800572c:	4630      	mov	r0, r6
 800572e:	4639      	mov	r1, r7
 8005730:	f7fa fdb4 	bl	800029c <__adddf3>
 8005734:	4606      	mov	r6, r0
 8005736:	460f      	mov	r7, r1
 8005738:	f7fb fa16 	bl	8000b68 <__aeabi_d2iz>
 800573c:	2200      	movs	r2, #0
 800573e:	4683      	mov	fp, r0
 8005740:	2300      	movs	r3, #0
 8005742:	4630      	mov	r0, r6
 8005744:	4639      	mov	r1, r7
 8005746:	f7fb f9d1 	bl	8000aec <__aeabi_dcmplt>
 800574a:	b148      	cbz	r0, 8005760 <_dtoa_r+0x190>
 800574c:	4658      	mov	r0, fp
 800574e:	f7fa fef1 	bl	8000534 <__aeabi_i2d>
 8005752:	4632      	mov	r2, r6
 8005754:	463b      	mov	r3, r7
 8005756:	f7fb f9bf 	bl	8000ad8 <__aeabi_dcmpeq>
 800575a:	b908      	cbnz	r0, 8005760 <_dtoa_r+0x190>
 800575c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005760:	f1bb 0f16 	cmp.w	fp, #22
 8005764:	d857      	bhi.n	8005816 <_dtoa_r+0x246>
 8005766:	4b5b      	ldr	r3, [pc, #364]	; (80058d4 <_dtoa_r+0x304>)
 8005768:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800576c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005770:	ec51 0b18 	vmov	r0, r1, d8
 8005774:	f7fb f9ba 	bl	8000aec <__aeabi_dcmplt>
 8005778:	2800      	cmp	r0, #0
 800577a:	d04e      	beq.n	800581a <_dtoa_r+0x24a>
 800577c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005780:	2300      	movs	r3, #0
 8005782:	930c      	str	r3, [sp, #48]	; 0x30
 8005784:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005786:	1b5b      	subs	r3, r3, r5
 8005788:	1e5a      	subs	r2, r3, #1
 800578a:	bf45      	ittet	mi
 800578c:	f1c3 0301 	rsbmi	r3, r3, #1
 8005790:	9305      	strmi	r3, [sp, #20]
 8005792:	2300      	movpl	r3, #0
 8005794:	2300      	movmi	r3, #0
 8005796:	9206      	str	r2, [sp, #24]
 8005798:	bf54      	ite	pl
 800579a:	9305      	strpl	r3, [sp, #20]
 800579c:	9306      	strmi	r3, [sp, #24]
 800579e:	f1bb 0f00 	cmp.w	fp, #0
 80057a2:	db3c      	blt.n	800581e <_dtoa_r+0x24e>
 80057a4:	9b06      	ldr	r3, [sp, #24]
 80057a6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80057aa:	445b      	add	r3, fp
 80057ac:	9306      	str	r3, [sp, #24]
 80057ae:	2300      	movs	r3, #0
 80057b0:	9308      	str	r3, [sp, #32]
 80057b2:	9b07      	ldr	r3, [sp, #28]
 80057b4:	2b09      	cmp	r3, #9
 80057b6:	d868      	bhi.n	800588a <_dtoa_r+0x2ba>
 80057b8:	2b05      	cmp	r3, #5
 80057ba:	bfc4      	itt	gt
 80057bc:	3b04      	subgt	r3, #4
 80057be:	9307      	strgt	r3, [sp, #28]
 80057c0:	9b07      	ldr	r3, [sp, #28]
 80057c2:	f1a3 0302 	sub.w	r3, r3, #2
 80057c6:	bfcc      	ite	gt
 80057c8:	2500      	movgt	r5, #0
 80057ca:	2501      	movle	r5, #1
 80057cc:	2b03      	cmp	r3, #3
 80057ce:	f200 8085 	bhi.w	80058dc <_dtoa_r+0x30c>
 80057d2:	e8df f003 	tbb	[pc, r3]
 80057d6:	3b2e      	.short	0x3b2e
 80057d8:	5839      	.short	0x5839
 80057da:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80057de:	441d      	add	r5, r3
 80057e0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80057e4:	2b20      	cmp	r3, #32
 80057e6:	bfc1      	itttt	gt
 80057e8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80057ec:	fa08 f803 	lslgt.w	r8, r8, r3
 80057f0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80057f4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80057f8:	bfd6      	itet	le
 80057fa:	f1c3 0320 	rsble	r3, r3, #32
 80057fe:	ea48 0003 	orrgt.w	r0, r8, r3
 8005802:	fa06 f003 	lslle.w	r0, r6, r3
 8005806:	f7fa fe85 	bl	8000514 <__aeabi_ui2d>
 800580a:	2201      	movs	r2, #1
 800580c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005810:	3d01      	subs	r5, #1
 8005812:	920e      	str	r2, [sp, #56]	; 0x38
 8005814:	e76f      	b.n	80056f6 <_dtoa_r+0x126>
 8005816:	2301      	movs	r3, #1
 8005818:	e7b3      	b.n	8005782 <_dtoa_r+0x1b2>
 800581a:	900c      	str	r0, [sp, #48]	; 0x30
 800581c:	e7b2      	b.n	8005784 <_dtoa_r+0x1b4>
 800581e:	9b05      	ldr	r3, [sp, #20]
 8005820:	eba3 030b 	sub.w	r3, r3, fp
 8005824:	9305      	str	r3, [sp, #20]
 8005826:	f1cb 0300 	rsb	r3, fp, #0
 800582a:	9308      	str	r3, [sp, #32]
 800582c:	2300      	movs	r3, #0
 800582e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005830:	e7bf      	b.n	80057b2 <_dtoa_r+0x1e2>
 8005832:	2300      	movs	r3, #0
 8005834:	9309      	str	r3, [sp, #36]	; 0x24
 8005836:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005838:	2b00      	cmp	r3, #0
 800583a:	dc52      	bgt.n	80058e2 <_dtoa_r+0x312>
 800583c:	2301      	movs	r3, #1
 800583e:	9301      	str	r3, [sp, #4]
 8005840:	9304      	str	r3, [sp, #16]
 8005842:	461a      	mov	r2, r3
 8005844:	920a      	str	r2, [sp, #40]	; 0x28
 8005846:	e00b      	b.n	8005860 <_dtoa_r+0x290>
 8005848:	2301      	movs	r3, #1
 800584a:	e7f3      	b.n	8005834 <_dtoa_r+0x264>
 800584c:	2300      	movs	r3, #0
 800584e:	9309      	str	r3, [sp, #36]	; 0x24
 8005850:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005852:	445b      	add	r3, fp
 8005854:	9301      	str	r3, [sp, #4]
 8005856:	3301      	adds	r3, #1
 8005858:	2b01      	cmp	r3, #1
 800585a:	9304      	str	r3, [sp, #16]
 800585c:	bfb8      	it	lt
 800585e:	2301      	movlt	r3, #1
 8005860:	69e0      	ldr	r0, [r4, #28]
 8005862:	2100      	movs	r1, #0
 8005864:	2204      	movs	r2, #4
 8005866:	f102 0614 	add.w	r6, r2, #20
 800586a:	429e      	cmp	r6, r3
 800586c:	d93d      	bls.n	80058ea <_dtoa_r+0x31a>
 800586e:	6041      	str	r1, [r0, #4]
 8005870:	4620      	mov	r0, r4
 8005872:	f000 fd9f 	bl	80063b4 <_Balloc>
 8005876:	9000      	str	r0, [sp, #0]
 8005878:	2800      	cmp	r0, #0
 800587a:	d139      	bne.n	80058f0 <_dtoa_r+0x320>
 800587c:	4b16      	ldr	r3, [pc, #88]	; (80058d8 <_dtoa_r+0x308>)
 800587e:	4602      	mov	r2, r0
 8005880:	f240 11af 	movw	r1, #431	; 0x1af
 8005884:	e6bd      	b.n	8005602 <_dtoa_r+0x32>
 8005886:	2301      	movs	r3, #1
 8005888:	e7e1      	b.n	800584e <_dtoa_r+0x27e>
 800588a:	2501      	movs	r5, #1
 800588c:	2300      	movs	r3, #0
 800588e:	9307      	str	r3, [sp, #28]
 8005890:	9509      	str	r5, [sp, #36]	; 0x24
 8005892:	f04f 33ff 	mov.w	r3, #4294967295
 8005896:	9301      	str	r3, [sp, #4]
 8005898:	9304      	str	r3, [sp, #16]
 800589a:	2200      	movs	r2, #0
 800589c:	2312      	movs	r3, #18
 800589e:	e7d1      	b.n	8005844 <_dtoa_r+0x274>
 80058a0:	636f4361 	.word	0x636f4361
 80058a4:	3fd287a7 	.word	0x3fd287a7
 80058a8:	8b60c8b3 	.word	0x8b60c8b3
 80058ac:	3fc68a28 	.word	0x3fc68a28
 80058b0:	509f79fb 	.word	0x509f79fb
 80058b4:	3fd34413 	.word	0x3fd34413
 80058b8:	08007720 	.word	0x08007720
 80058bc:	08007737 	.word	0x08007737
 80058c0:	7ff00000 	.word	0x7ff00000
 80058c4:	0800771c 	.word	0x0800771c
 80058c8:	08007713 	.word	0x08007713
 80058cc:	080076f0 	.word	0x080076f0
 80058d0:	3ff80000 	.word	0x3ff80000
 80058d4:	08007828 	.word	0x08007828
 80058d8:	0800778f 	.word	0x0800778f
 80058dc:	2301      	movs	r3, #1
 80058de:	9309      	str	r3, [sp, #36]	; 0x24
 80058e0:	e7d7      	b.n	8005892 <_dtoa_r+0x2c2>
 80058e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058e4:	9301      	str	r3, [sp, #4]
 80058e6:	9304      	str	r3, [sp, #16]
 80058e8:	e7ba      	b.n	8005860 <_dtoa_r+0x290>
 80058ea:	3101      	adds	r1, #1
 80058ec:	0052      	lsls	r2, r2, #1
 80058ee:	e7ba      	b.n	8005866 <_dtoa_r+0x296>
 80058f0:	69e3      	ldr	r3, [r4, #28]
 80058f2:	9a00      	ldr	r2, [sp, #0]
 80058f4:	601a      	str	r2, [r3, #0]
 80058f6:	9b04      	ldr	r3, [sp, #16]
 80058f8:	2b0e      	cmp	r3, #14
 80058fa:	f200 80a8 	bhi.w	8005a4e <_dtoa_r+0x47e>
 80058fe:	2d00      	cmp	r5, #0
 8005900:	f000 80a5 	beq.w	8005a4e <_dtoa_r+0x47e>
 8005904:	f1bb 0f00 	cmp.w	fp, #0
 8005908:	dd38      	ble.n	800597c <_dtoa_r+0x3ac>
 800590a:	4bc0      	ldr	r3, [pc, #768]	; (8005c0c <_dtoa_r+0x63c>)
 800590c:	f00b 020f 	and.w	r2, fp, #15
 8005910:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005914:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005918:	e9d3 6700 	ldrd	r6, r7, [r3]
 800591c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8005920:	d019      	beq.n	8005956 <_dtoa_r+0x386>
 8005922:	4bbb      	ldr	r3, [pc, #748]	; (8005c10 <_dtoa_r+0x640>)
 8005924:	ec51 0b18 	vmov	r0, r1, d8
 8005928:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800592c:	f7fa ff96 	bl	800085c <__aeabi_ddiv>
 8005930:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005934:	f008 080f 	and.w	r8, r8, #15
 8005938:	2503      	movs	r5, #3
 800593a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8005c10 <_dtoa_r+0x640>
 800593e:	f1b8 0f00 	cmp.w	r8, #0
 8005942:	d10a      	bne.n	800595a <_dtoa_r+0x38a>
 8005944:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005948:	4632      	mov	r2, r6
 800594a:	463b      	mov	r3, r7
 800594c:	f7fa ff86 	bl	800085c <__aeabi_ddiv>
 8005950:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005954:	e02b      	b.n	80059ae <_dtoa_r+0x3de>
 8005956:	2502      	movs	r5, #2
 8005958:	e7ef      	b.n	800593a <_dtoa_r+0x36a>
 800595a:	f018 0f01 	tst.w	r8, #1
 800595e:	d008      	beq.n	8005972 <_dtoa_r+0x3a2>
 8005960:	4630      	mov	r0, r6
 8005962:	4639      	mov	r1, r7
 8005964:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005968:	f7fa fe4e 	bl	8000608 <__aeabi_dmul>
 800596c:	3501      	adds	r5, #1
 800596e:	4606      	mov	r6, r0
 8005970:	460f      	mov	r7, r1
 8005972:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005976:	f109 0908 	add.w	r9, r9, #8
 800597a:	e7e0      	b.n	800593e <_dtoa_r+0x36e>
 800597c:	f000 809f 	beq.w	8005abe <_dtoa_r+0x4ee>
 8005980:	f1cb 0600 	rsb	r6, fp, #0
 8005984:	4ba1      	ldr	r3, [pc, #644]	; (8005c0c <_dtoa_r+0x63c>)
 8005986:	4fa2      	ldr	r7, [pc, #648]	; (8005c10 <_dtoa_r+0x640>)
 8005988:	f006 020f 	and.w	r2, r6, #15
 800598c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005994:	ec51 0b18 	vmov	r0, r1, d8
 8005998:	f7fa fe36 	bl	8000608 <__aeabi_dmul>
 800599c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059a0:	1136      	asrs	r6, r6, #4
 80059a2:	2300      	movs	r3, #0
 80059a4:	2502      	movs	r5, #2
 80059a6:	2e00      	cmp	r6, #0
 80059a8:	d17e      	bne.n	8005aa8 <_dtoa_r+0x4d8>
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d1d0      	bne.n	8005950 <_dtoa_r+0x380>
 80059ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80059b0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	f000 8084 	beq.w	8005ac2 <_dtoa_r+0x4f2>
 80059ba:	4b96      	ldr	r3, [pc, #600]	; (8005c14 <_dtoa_r+0x644>)
 80059bc:	2200      	movs	r2, #0
 80059be:	4640      	mov	r0, r8
 80059c0:	4649      	mov	r1, r9
 80059c2:	f7fb f893 	bl	8000aec <__aeabi_dcmplt>
 80059c6:	2800      	cmp	r0, #0
 80059c8:	d07b      	beq.n	8005ac2 <_dtoa_r+0x4f2>
 80059ca:	9b04      	ldr	r3, [sp, #16]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d078      	beq.n	8005ac2 <_dtoa_r+0x4f2>
 80059d0:	9b01      	ldr	r3, [sp, #4]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	dd39      	ble.n	8005a4a <_dtoa_r+0x47a>
 80059d6:	4b90      	ldr	r3, [pc, #576]	; (8005c18 <_dtoa_r+0x648>)
 80059d8:	2200      	movs	r2, #0
 80059da:	4640      	mov	r0, r8
 80059dc:	4649      	mov	r1, r9
 80059de:	f7fa fe13 	bl	8000608 <__aeabi_dmul>
 80059e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059e6:	9e01      	ldr	r6, [sp, #4]
 80059e8:	f10b 37ff 	add.w	r7, fp, #4294967295
 80059ec:	3501      	adds	r5, #1
 80059ee:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80059f2:	4628      	mov	r0, r5
 80059f4:	f7fa fd9e 	bl	8000534 <__aeabi_i2d>
 80059f8:	4642      	mov	r2, r8
 80059fa:	464b      	mov	r3, r9
 80059fc:	f7fa fe04 	bl	8000608 <__aeabi_dmul>
 8005a00:	4b86      	ldr	r3, [pc, #536]	; (8005c1c <_dtoa_r+0x64c>)
 8005a02:	2200      	movs	r2, #0
 8005a04:	f7fa fc4a 	bl	800029c <__adddf3>
 8005a08:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005a0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a10:	9303      	str	r3, [sp, #12]
 8005a12:	2e00      	cmp	r6, #0
 8005a14:	d158      	bne.n	8005ac8 <_dtoa_r+0x4f8>
 8005a16:	4b82      	ldr	r3, [pc, #520]	; (8005c20 <_dtoa_r+0x650>)
 8005a18:	2200      	movs	r2, #0
 8005a1a:	4640      	mov	r0, r8
 8005a1c:	4649      	mov	r1, r9
 8005a1e:	f7fa fc3b 	bl	8000298 <__aeabi_dsub>
 8005a22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005a26:	4680      	mov	r8, r0
 8005a28:	4689      	mov	r9, r1
 8005a2a:	f7fb f87d 	bl	8000b28 <__aeabi_dcmpgt>
 8005a2e:	2800      	cmp	r0, #0
 8005a30:	f040 8296 	bne.w	8005f60 <_dtoa_r+0x990>
 8005a34:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005a38:	4640      	mov	r0, r8
 8005a3a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005a3e:	4649      	mov	r1, r9
 8005a40:	f7fb f854 	bl	8000aec <__aeabi_dcmplt>
 8005a44:	2800      	cmp	r0, #0
 8005a46:	f040 8289 	bne.w	8005f5c <_dtoa_r+0x98c>
 8005a4a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005a4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	f2c0 814e 	blt.w	8005cf2 <_dtoa_r+0x722>
 8005a56:	f1bb 0f0e 	cmp.w	fp, #14
 8005a5a:	f300 814a 	bgt.w	8005cf2 <_dtoa_r+0x722>
 8005a5e:	4b6b      	ldr	r3, [pc, #428]	; (8005c0c <_dtoa_r+0x63c>)
 8005a60:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005a64:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005a68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	f280 80dc 	bge.w	8005c28 <_dtoa_r+0x658>
 8005a70:	9b04      	ldr	r3, [sp, #16]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	f300 80d8 	bgt.w	8005c28 <_dtoa_r+0x658>
 8005a78:	f040 826f 	bne.w	8005f5a <_dtoa_r+0x98a>
 8005a7c:	4b68      	ldr	r3, [pc, #416]	; (8005c20 <_dtoa_r+0x650>)
 8005a7e:	2200      	movs	r2, #0
 8005a80:	4640      	mov	r0, r8
 8005a82:	4649      	mov	r1, r9
 8005a84:	f7fa fdc0 	bl	8000608 <__aeabi_dmul>
 8005a88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005a8c:	f7fb f842 	bl	8000b14 <__aeabi_dcmpge>
 8005a90:	9e04      	ldr	r6, [sp, #16]
 8005a92:	4637      	mov	r7, r6
 8005a94:	2800      	cmp	r0, #0
 8005a96:	f040 8245 	bne.w	8005f24 <_dtoa_r+0x954>
 8005a9a:	9d00      	ldr	r5, [sp, #0]
 8005a9c:	2331      	movs	r3, #49	; 0x31
 8005a9e:	f805 3b01 	strb.w	r3, [r5], #1
 8005aa2:	f10b 0b01 	add.w	fp, fp, #1
 8005aa6:	e241      	b.n	8005f2c <_dtoa_r+0x95c>
 8005aa8:	07f2      	lsls	r2, r6, #31
 8005aaa:	d505      	bpl.n	8005ab8 <_dtoa_r+0x4e8>
 8005aac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ab0:	f7fa fdaa 	bl	8000608 <__aeabi_dmul>
 8005ab4:	3501      	adds	r5, #1
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	1076      	asrs	r6, r6, #1
 8005aba:	3708      	adds	r7, #8
 8005abc:	e773      	b.n	80059a6 <_dtoa_r+0x3d6>
 8005abe:	2502      	movs	r5, #2
 8005ac0:	e775      	b.n	80059ae <_dtoa_r+0x3de>
 8005ac2:	9e04      	ldr	r6, [sp, #16]
 8005ac4:	465f      	mov	r7, fp
 8005ac6:	e792      	b.n	80059ee <_dtoa_r+0x41e>
 8005ac8:	9900      	ldr	r1, [sp, #0]
 8005aca:	4b50      	ldr	r3, [pc, #320]	; (8005c0c <_dtoa_r+0x63c>)
 8005acc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005ad0:	4431      	add	r1, r6
 8005ad2:	9102      	str	r1, [sp, #8]
 8005ad4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ad6:	eeb0 9a47 	vmov.f32	s18, s14
 8005ada:	eef0 9a67 	vmov.f32	s19, s15
 8005ade:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005ae2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005ae6:	2900      	cmp	r1, #0
 8005ae8:	d044      	beq.n	8005b74 <_dtoa_r+0x5a4>
 8005aea:	494e      	ldr	r1, [pc, #312]	; (8005c24 <_dtoa_r+0x654>)
 8005aec:	2000      	movs	r0, #0
 8005aee:	f7fa feb5 	bl	800085c <__aeabi_ddiv>
 8005af2:	ec53 2b19 	vmov	r2, r3, d9
 8005af6:	f7fa fbcf 	bl	8000298 <__aeabi_dsub>
 8005afa:	9d00      	ldr	r5, [sp, #0]
 8005afc:	ec41 0b19 	vmov	d9, r0, r1
 8005b00:	4649      	mov	r1, r9
 8005b02:	4640      	mov	r0, r8
 8005b04:	f7fb f830 	bl	8000b68 <__aeabi_d2iz>
 8005b08:	4606      	mov	r6, r0
 8005b0a:	f7fa fd13 	bl	8000534 <__aeabi_i2d>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	460b      	mov	r3, r1
 8005b12:	4640      	mov	r0, r8
 8005b14:	4649      	mov	r1, r9
 8005b16:	f7fa fbbf 	bl	8000298 <__aeabi_dsub>
 8005b1a:	3630      	adds	r6, #48	; 0x30
 8005b1c:	f805 6b01 	strb.w	r6, [r5], #1
 8005b20:	ec53 2b19 	vmov	r2, r3, d9
 8005b24:	4680      	mov	r8, r0
 8005b26:	4689      	mov	r9, r1
 8005b28:	f7fa ffe0 	bl	8000aec <__aeabi_dcmplt>
 8005b2c:	2800      	cmp	r0, #0
 8005b2e:	d164      	bne.n	8005bfa <_dtoa_r+0x62a>
 8005b30:	4642      	mov	r2, r8
 8005b32:	464b      	mov	r3, r9
 8005b34:	4937      	ldr	r1, [pc, #220]	; (8005c14 <_dtoa_r+0x644>)
 8005b36:	2000      	movs	r0, #0
 8005b38:	f7fa fbae 	bl	8000298 <__aeabi_dsub>
 8005b3c:	ec53 2b19 	vmov	r2, r3, d9
 8005b40:	f7fa ffd4 	bl	8000aec <__aeabi_dcmplt>
 8005b44:	2800      	cmp	r0, #0
 8005b46:	f040 80b6 	bne.w	8005cb6 <_dtoa_r+0x6e6>
 8005b4a:	9b02      	ldr	r3, [sp, #8]
 8005b4c:	429d      	cmp	r5, r3
 8005b4e:	f43f af7c 	beq.w	8005a4a <_dtoa_r+0x47a>
 8005b52:	4b31      	ldr	r3, [pc, #196]	; (8005c18 <_dtoa_r+0x648>)
 8005b54:	ec51 0b19 	vmov	r0, r1, d9
 8005b58:	2200      	movs	r2, #0
 8005b5a:	f7fa fd55 	bl	8000608 <__aeabi_dmul>
 8005b5e:	4b2e      	ldr	r3, [pc, #184]	; (8005c18 <_dtoa_r+0x648>)
 8005b60:	ec41 0b19 	vmov	d9, r0, r1
 8005b64:	2200      	movs	r2, #0
 8005b66:	4640      	mov	r0, r8
 8005b68:	4649      	mov	r1, r9
 8005b6a:	f7fa fd4d 	bl	8000608 <__aeabi_dmul>
 8005b6e:	4680      	mov	r8, r0
 8005b70:	4689      	mov	r9, r1
 8005b72:	e7c5      	b.n	8005b00 <_dtoa_r+0x530>
 8005b74:	ec51 0b17 	vmov	r0, r1, d7
 8005b78:	f7fa fd46 	bl	8000608 <__aeabi_dmul>
 8005b7c:	9b02      	ldr	r3, [sp, #8]
 8005b7e:	9d00      	ldr	r5, [sp, #0]
 8005b80:	930f      	str	r3, [sp, #60]	; 0x3c
 8005b82:	ec41 0b19 	vmov	d9, r0, r1
 8005b86:	4649      	mov	r1, r9
 8005b88:	4640      	mov	r0, r8
 8005b8a:	f7fa ffed 	bl	8000b68 <__aeabi_d2iz>
 8005b8e:	4606      	mov	r6, r0
 8005b90:	f7fa fcd0 	bl	8000534 <__aeabi_i2d>
 8005b94:	3630      	adds	r6, #48	; 0x30
 8005b96:	4602      	mov	r2, r0
 8005b98:	460b      	mov	r3, r1
 8005b9a:	4640      	mov	r0, r8
 8005b9c:	4649      	mov	r1, r9
 8005b9e:	f7fa fb7b 	bl	8000298 <__aeabi_dsub>
 8005ba2:	f805 6b01 	strb.w	r6, [r5], #1
 8005ba6:	9b02      	ldr	r3, [sp, #8]
 8005ba8:	429d      	cmp	r5, r3
 8005baa:	4680      	mov	r8, r0
 8005bac:	4689      	mov	r9, r1
 8005bae:	f04f 0200 	mov.w	r2, #0
 8005bb2:	d124      	bne.n	8005bfe <_dtoa_r+0x62e>
 8005bb4:	4b1b      	ldr	r3, [pc, #108]	; (8005c24 <_dtoa_r+0x654>)
 8005bb6:	ec51 0b19 	vmov	r0, r1, d9
 8005bba:	f7fa fb6f 	bl	800029c <__adddf3>
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	460b      	mov	r3, r1
 8005bc2:	4640      	mov	r0, r8
 8005bc4:	4649      	mov	r1, r9
 8005bc6:	f7fa ffaf 	bl	8000b28 <__aeabi_dcmpgt>
 8005bca:	2800      	cmp	r0, #0
 8005bcc:	d173      	bne.n	8005cb6 <_dtoa_r+0x6e6>
 8005bce:	ec53 2b19 	vmov	r2, r3, d9
 8005bd2:	4914      	ldr	r1, [pc, #80]	; (8005c24 <_dtoa_r+0x654>)
 8005bd4:	2000      	movs	r0, #0
 8005bd6:	f7fa fb5f 	bl	8000298 <__aeabi_dsub>
 8005bda:	4602      	mov	r2, r0
 8005bdc:	460b      	mov	r3, r1
 8005bde:	4640      	mov	r0, r8
 8005be0:	4649      	mov	r1, r9
 8005be2:	f7fa ff83 	bl	8000aec <__aeabi_dcmplt>
 8005be6:	2800      	cmp	r0, #0
 8005be8:	f43f af2f 	beq.w	8005a4a <_dtoa_r+0x47a>
 8005bec:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005bee:	1e6b      	subs	r3, r5, #1
 8005bf0:	930f      	str	r3, [sp, #60]	; 0x3c
 8005bf2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005bf6:	2b30      	cmp	r3, #48	; 0x30
 8005bf8:	d0f8      	beq.n	8005bec <_dtoa_r+0x61c>
 8005bfa:	46bb      	mov	fp, r7
 8005bfc:	e04a      	b.n	8005c94 <_dtoa_r+0x6c4>
 8005bfe:	4b06      	ldr	r3, [pc, #24]	; (8005c18 <_dtoa_r+0x648>)
 8005c00:	f7fa fd02 	bl	8000608 <__aeabi_dmul>
 8005c04:	4680      	mov	r8, r0
 8005c06:	4689      	mov	r9, r1
 8005c08:	e7bd      	b.n	8005b86 <_dtoa_r+0x5b6>
 8005c0a:	bf00      	nop
 8005c0c:	08007828 	.word	0x08007828
 8005c10:	08007800 	.word	0x08007800
 8005c14:	3ff00000 	.word	0x3ff00000
 8005c18:	40240000 	.word	0x40240000
 8005c1c:	401c0000 	.word	0x401c0000
 8005c20:	40140000 	.word	0x40140000
 8005c24:	3fe00000 	.word	0x3fe00000
 8005c28:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005c2c:	9d00      	ldr	r5, [sp, #0]
 8005c2e:	4642      	mov	r2, r8
 8005c30:	464b      	mov	r3, r9
 8005c32:	4630      	mov	r0, r6
 8005c34:	4639      	mov	r1, r7
 8005c36:	f7fa fe11 	bl	800085c <__aeabi_ddiv>
 8005c3a:	f7fa ff95 	bl	8000b68 <__aeabi_d2iz>
 8005c3e:	9001      	str	r0, [sp, #4]
 8005c40:	f7fa fc78 	bl	8000534 <__aeabi_i2d>
 8005c44:	4642      	mov	r2, r8
 8005c46:	464b      	mov	r3, r9
 8005c48:	f7fa fcde 	bl	8000608 <__aeabi_dmul>
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	460b      	mov	r3, r1
 8005c50:	4630      	mov	r0, r6
 8005c52:	4639      	mov	r1, r7
 8005c54:	f7fa fb20 	bl	8000298 <__aeabi_dsub>
 8005c58:	9e01      	ldr	r6, [sp, #4]
 8005c5a:	9f04      	ldr	r7, [sp, #16]
 8005c5c:	3630      	adds	r6, #48	; 0x30
 8005c5e:	f805 6b01 	strb.w	r6, [r5], #1
 8005c62:	9e00      	ldr	r6, [sp, #0]
 8005c64:	1bae      	subs	r6, r5, r6
 8005c66:	42b7      	cmp	r7, r6
 8005c68:	4602      	mov	r2, r0
 8005c6a:	460b      	mov	r3, r1
 8005c6c:	d134      	bne.n	8005cd8 <_dtoa_r+0x708>
 8005c6e:	f7fa fb15 	bl	800029c <__adddf3>
 8005c72:	4642      	mov	r2, r8
 8005c74:	464b      	mov	r3, r9
 8005c76:	4606      	mov	r6, r0
 8005c78:	460f      	mov	r7, r1
 8005c7a:	f7fa ff55 	bl	8000b28 <__aeabi_dcmpgt>
 8005c7e:	b9c8      	cbnz	r0, 8005cb4 <_dtoa_r+0x6e4>
 8005c80:	4642      	mov	r2, r8
 8005c82:	464b      	mov	r3, r9
 8005c84:	4630      	mov	r0, r6
 8005c86:	4639      	mov	r1, r7
 8005c88:	f7fa ff26 	bl	8000ad8 <__aeabi_dcmpeq>
 8005c8c:	b110      	cbz	r0, 8005c94 <_dtoa_r+0x6c4>
 8005c8e:	9b01      	ldr	r3, [sp, #4]
 8005c90:	07db      	lsls	r3, r3, #31
 8005c92:	d40f      	bmi.n	8005cb4 <_dtoa_r+0x6e4>
 8005c94:	4651      	mov	r1, sl
 8005c96:	4620      	mov	r0, r4
 8005c98:	f000 fbcc 	bl	8006434 <_Bfree>
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005ca0:	702b      	strb	r3, [r5, #0]
 8005ca2:	f10b 0301 	add.w	r3, fp, #1
 8005ca6:	6013      	str	r3, [r2, #0]
 8005ca8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	f43f ace2 	beq.w	8005674 <_dtoa_r+0xa4>
 8005cb0:	601d      	str	r5, [r3, #0]
 8005cb2:	e4df      	b.n	8005674 <_dtoa_r+0xa4>
 8005cb4:	465f      	mov	r7, fp
 8005cb6:	462b      	mov	r3, r5
 8005cb8:	461d      	mov	r5, r3
 8005cba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005cbe:	2a39      	cmp	r2, #57	; 0x39
 8005cc0:	d106      	bne.n	8005cd0 <_dtoa_r+0x700>
 8005cc2:	9a00      	ldr	r2, [sp, #0]
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d1f7      	bne.n	8005cb8 <_dtoa_r+0x6e8>
 8005cc8:	9900      	ldr	r1, [sp, #0]
 8005cca:	2230      	movs	r2, #48	; 0x30
 8005ccc:	3701      	adds	r7, #1
 8005cce:	700a      	strb	r2, [r1, #0]
 8005cd0:	781a      	ldrb	r2, [r3, #0]
 8005cd2:	3201      	adds	r2, #1
 8005cd4:	701a      	strb	r2, [r3, #0]
 8005cd6:	e790      	b.n	8005bfa <_dtoa_r+0x62a>
 8005cd8:	4ba3      	ldr	r3, [pc, #652]	; (8005f68 <_dtoa_r+0x998>)
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f7fa fc94 	bl	8000608 <__aeabi_dmul>
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	4606      	mov	r6, r0
 8005ce6:	460f      	mov	r7, r1
 8005ce8:	f7fa fef6 	bl	8000ad8 <__aeabi_dcmpeq>
 8005cec:	2800      	cmp	r0, #0
 8005cee:	d09e      	beq.n	8005c2e <_dtoa_r+0x65e>
 8005cf0:	e7d0      	b.n	8005c94 <_dtoa_r+0x6c4>
 8005cf2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005cf4:	2a00      	cmp	r2, #0
 8005cf6:	f000 80ca 	beq.w	8005e8e <_dtoa_r+0x8be>
 8005cfa:	9a07      	ldr	r2, [sp, #28]
 8005cfc:	2a01      	cmp	r2, #1
 8005cfe:	f300 80ad 	bgt.w	8005e5c <_dtoa_r+0x88c>
 8005d02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005d04:	2a00      	cmp	r2, #0
 8005d06:	f000 80a5 	beq.w	8005e54 <_dtoa_r+0x884>
 8005d0a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005d0e:	9e08      	ldr	r6, [sp, #32]
 8005d10:	9d05      	ldr	r5, [sp, #20]
 8005d12:	9a05      	ldr	r2, [sp, #20]
 8005d14:	441a      	add	r2, r3
 8005d16:	9205      	str	r2, [sp, #20]
 8005d18:	9a06      	ldr	r2, [sp, #24]
 8005d1a:	2101      	movs	r1, #1
 8005d1c:	441a      	add	r2, r3
 8005d1e:	4620      	mov	r0, r4
 8005d20:	9206      	str	r2, [sp, #24]
 8005d22:	f000 fc3d 	bl	80065a0 <__i2b>
 8005d26:	4607      	mov	r7, r0
 8005d28:	b165      	cbz	r5, 8005d44 <_dtoa_r+0x774>
 8005d2a:	9b06      	ldr	r3, [sp, #24]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	dd09      	ble.n	8005d44 <_dtoa_r+0x774>
 8005d30:	42ab      	cmp	r3, r5
 8005d32:	9a05      	ldr	r2, [sp, #20]
 8005d34:	bfa8      	it	ge
 8005d36:	462b      	movge	r3, r5
 8005d38:	1ad2      	subs	r2, r2, r3
 8005d3a:	9205      	str	r2, [sp, #20]
 8005d3c:	9a06      	ldr	r2, [sp, #24]
 8005d3e:	1aed      	subs	r5, r5, r3
 8005d40:	1ad3      	subs	r3, r2, r3
 8005d42:	9306      	str	r3, [sp, #24]
 8005d44:	9b08      	ldr	r3, [sp, #32]
 8005d46:	b1f3      	cbz	r3, 8005d86 <_dtoa_r+0x7b6>
 8005d48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	f000 80a3 	beq.w	8005e96 <_dtoa_r+0x8c6>
 8005d50:	2e00      	cmp	r6, #0
 8005d52:	dd10      	ble.n	8005d76 <_dtoa_r+0x7a6>
 8005d54:	4639      	mov	r1, r7
 8005d56:	4632      	mov	r2, r6
 8005d58:	4620      	mov	r0, r4
 8005d5a:	f000 fce1 	bl	8006720 <__pow5mult>
 8005d5e:	4652      	mov	r2, sl
 8005d60:	4601      	mov	r1, r0
 8005d62:	4607      	mov	r7, r0
 8005d64:	4620      	mov	r0, r4
 8005d66:	f000 fc31 	bl	80065cc <__multiply>
 8005d6a:	4651      	mov	r1, sl
 8005d6c:	4680      	mov	r8, r0
 8005d6e:	4620      	mov	r0, r4
 8005d70:	f000 fb60 	bl	8006434 <_Bfree>
 8005d74:	46c2      	mov	sl, r8
 8005d76:	9b08      	ldr	r3, [sp, #32]
 8005d78:	1b9a      	subs	r2, r3, r6
 8005d7a:	d004      	beq.n	8005d86 <_dtoa_r+0x7b6>
 8005d7c:	4651      	mov	r1, sl
 8005d7e:	4620      	mov	r0, r4
 8005d80:	f000 fcce 	bl	8006720 <__pow5mult>
 8005d84:	4682      	mov	sl, r0
 8005d86:	2101      	movs	r1, #1
 8005d88:	4620      	mov	r0, r4
 8005d8a:	f000 fc09 	bl	80065a0 <__i2b>
 8005d8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	4606      	mov	r6, r0
 8005d94:	f340 8081 	ble.w	8005e9a <_dtoa_r+0x8ca>
 8005d98:	461a      	mov	r2, r3
 8005d9a:	4601      	mov	r1, r0
 8005d9c:	4620      	mov	r0, r4
 8005d9e:	f000 fcbf 	bl	8006720 <__pow5mult>
 8005da2:	9b07      	ldr	r3, [sp, #28]
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	4606      	mov	r6, r0
 8005da8:	dd7a      	ble.n	8005ea0 <_dtoa_r+0x8d0>
 8005daa:	f04f 0800 	mov.w	r8, #0
 8005dae:	6933      	ldr	r3, [r6, #16]
 8005db0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005db4:	6918      	ldr	r0, [r3, #16]
 8005db6:	f000 fba5 	bl	8006504 <__hi0bits>
 8005dba:	f1c0 0020 	rsb	r0, r0, #32
 8005dbe:	9b06      	ldr	r3, [sp, #24]
 8005dc0:	4418      	add	r0, r3
 8005dc2:	f010 001f 	ands.w	r0, r0, #31
 8005dc6:	f000 8094 	beq.w	8005ef2 <_dtoa_r+0x922>
 8005dca:	f1c0 0320 	rsb	r3, r0, #32
 8005dce:	2b04      	cmp	r3, #4
 8005dd0:	f340 8085 	ble.w	8005ede <_dtoa_r+0x90e>
 8005dd4:	9b05      	ldr	r3, [sp, #20]
 8005dd6:	f1c0 001c 	rsb	r0, r0, #28
 8005dda:	4403      	add	r3, r0
 8005ddc:	9305      	str	r3, [sp, #20]
 8005dde:	9b06      	ldr	r3, [sp, #24]
 8005de0:	4403      	add	r3, r0
 8005de2:	4405      	add	r5, r0
 8005de4:	9306      	str	r3, [sp, #24]
 8005de6:	9b05      	ldr	r3, [sp, #20]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	dd05      	ble.n	8005df8 <_dtoa_r+0x828>
 8005dec:	4651      	mov	r1, sl
 8005dee:	461a      	mov	r2, r3
 8005df0:	4620      	mov	r0, r4
 8005df2:	f000 fcef 	bl	80067d4 <__lshift>
 8005df6:	4682      	mov	sl, r0
 8005df8:	9b06      	ldr	r3, [sp, #24]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	dd05      	ble.n	8005e0a <_dtoa_r+0x83a>
 8005dfe:	4631      	mov	r1, r6
 8005e00:	461a      	mov	r2, r3
 8005e02:	4620      	mov	r0, r4
 8005e04:	f000 fce6 	bl	80067d4 <__lshift>
 8005e08:	4606      	mov	r6, r0
 8005e0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d072      	beq.n	8005ef6 <_dtoa_r+0x926>
 8005e10:	4631      	mov	r1, r6
 8005e12:	4650      	mov	r0, sl
 8005e14:	f000 fd4a 	bl	80068ac <__mcmp>
 8005e18:	2800      	cmp	r0, #0
 8005e1a:	da6c      	bge.n	8005ef6 <_dtoa_r+0x926>
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	4651      	mov	r1, sl
 8005e20:	220a      	movs	r2, #10
 8005e22:	4620      	mov	r0, r4
 8005e24:	f000 fb28 	bl	8006478 <__multadd>
 8005e28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e2a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005e2e:	4682      	mov	sl, r0
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	f000 81b0 	beq.w	8006196 <_dtoa_r+0xbc6>
 8005e36:	2300      	movs	r3, #0
 8005e38:	4639      	mov	r1, r7
 8005e3a:	220a      	movs	r2, #10
 8005e3c:	4620      	mov	r0, r4
 8005e3e:	f000 fb1b 	bl	8006478 <__multadd>
 8005e42:	9b01      	ldr	r3, [sp, #4]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	4607      	mov	r7, r0
 8005e48:	f300 8096 	bgt.w	8005f78 <_dtoa_r+0x9a8>
 8005e4c:	9b07      	ldr	r3, [sp, #28]
 8005e4e:	2b02      	cmp	r3, #2
 8005e50:	dc59      	bgt.n	8005f06 <_dtoa_r+0x936>
 8005e52:	e091      	b.n	8005f78 <_dtoa_r+0x9a8>
 8005e54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005e56:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005e5a:	e758      	b.n	8005d0e <_dtoa_r+0x73e>
 8005e5c:	9b04      	ldr	r3, [sp, #16]
 8005e5e:	1e5e      	subs	r6, r3, #1
 8005e60:	9b08      	ldr	r3, [sp, #32]
 8005e62:	42b3      	cmp	r3, r6
 8005e64:	bfbf      	itttt	lt
 8005e66:	9b08      	ldrlt	r3, [sp, #32]
 8005e68:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8005e6a:	9608      	strlt	r6, [sp, #32]
 8005e6c:	1af3      	sublt	r3, r6, r3
 8005e6e:	bfb4      	ite	lt
 8005e70:	18d2      	addlt	r2, r2, r3
 8005e72:	1b9e      	subge	r6, r3, r6
 8005e74:	9b04      	ldr	r3, [sp, #16]
 8005e76:	bfbc      	itt	lt
 8005e78:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8005e7a:	2600      	movlt	r6, #0
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	bfb7      	itett	lt
 8005e80:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8005e84:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8005e88:	1a9d      	sublt	r5, r3, r2
 8005e8a:	2300      	movlt	r3, #0
 8005e8c:	e741      	b.n	8005d12 <_dtoa_r+0x742>
 8005e8e:	9e08      	ldr	r6, [sp, #32]
 8005e90:	9d05      	ldr	r5, [sp, #20]
 8005e92:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005e94:	e748      	b.n	8005d28 <_dtoa_r+0x758>
 8005e96:	9a08      	ldr	r2, [sp, #32]
 8005e98:	e770      	b.n	8005d7c <_dtoa_r+0x7ac>
 8005e9a:	9b07      	ldr	r3, [sp, #28]
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	dc19      	bgt.n	8005ed4 <_dtoa_r+0x904>
 8005ea0:	9b02      	ldr	r3, [sp, #8]
 8005ea2:	b9bb      	cbnz	r3, 8005ed4 <_dtoa_r+0x904>
 8005ea4:	9b03      	ldr	r3, [sp, #12]
 8005ea6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005eaa:	b99b      	cbnz	r3, 8005ed4 <_dtoa_r+0x904>
 8005eac:	9b03      	ldr	r3, [sp, #12]
 8005eae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005eb2:	0d1b      	lsrs	r3, r3, #20
 8005eb4:	051b      	lsls	r3, r3, #20
 8005eb6:	b183      	cbz	r3, 8005eda <_dtoa_r+0x90a>
 8005eb8:	9b05      	ldr	r3, [sp, #20]
 8005eba:	3301      	adds	r3, #1
 8005ebc:	9305      	str	r3, [sp, #20]
 8005ebe:	9b06      	ldr	r3, [sp, #24]
 8005ec0:	3301      	adds	r3, #1
 8005ec2:	9306      	str	r3, [sp, #24]
 8005ec4:	f04f 0801 	mov.w	r8, #1
 8005ec8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	f47f af6f 	bne.w	8005dae <_dtoa_r+0x7de>
 8005ed0:	2001      	movs	r0, #1
 8005ed2:	e774      	b.n	8005dbe <_dtoa_r+0x7ee>
 8005ed4:	f04f 0800 	mov.w	r8, #0
 8005ed8:	e7f6      	b.n	8005ec8 <_dtoa_r+0x8f8>
 8005eda:	4698      	mov	r8, r3
 8005edc:	e7f4      	b.n	8005ec8 <_dtoa_r+0x8f8>
 8005ede:	d082      	beq.n	8005de6 <_dtoa_r+0x816>
 8005ee0:	9a05      	ldr	r2, [sp, #20]
 8005ee2:	331c      	adds	r3, #28
 8005ee4:	441a      	add	r2, r3
 8005ee6:	9205      	str	r2, [sp, #20]
 8005ee8:	9a06      	ldr	r2, [sp, #24]
 8005eea:	441a      	add	r2, r3
 8005eec:	441d      	add	r5, r3
 8005eee:	9206      	str	r2, [sp, #24]
 8005ef0:	e779      	b.n	8005de6 <_dtoa_r+0x816>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	e7f4      	b.n	8005ee0 <_dtoa_r+0x910>
 8005ef6:	9b04      	ldr	r3, [sp, #16]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	dc37      	bgt.n	8005f6c <_dtoa_r+0x99c>
 8005efc:	9b07      	ldr	r3, [sp, #28]
 8005efe:	2b02      	cmp	r3, #2
 8005f00:	dd34      	ble.n	8005f6c <_dtoa_r+0x99c>
 8005f02:	9b04      	ldr	r3, [sp, #16]
 8005f04:	9301      	str	r3, [sp, #4]
 8005f06:	9b01      	ldr	r3, [sp, #4]
 8005f08:	b963      	cbnz	r3, 8005f24 <_dtoa_r+0x954>
 8005f0a:	4631      	mov	r1, r6
 8005f0c:	2205      	movs	r2, #5
 8005f0e:	4620      	mov	r0, r4
 8005f10:	f000 fab2 	bl	8006478 <__multadd>
 8005f14:	4601      	mov	r1, r0
 8005f16:	4606      	mov	r6, r0
 8005f18:	4650      	mov	r0, sl
 8005f1a:	f000 fcc7 	bl	80068ac <__mcmp>
 8005f1e:	2800      	cmp	r0, #0
 8005f20:	f73f adbb 	bgt.w	8005a9a <_dtoa_r+0x4ca>
 8005f24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f26:	9d00      	ldr	r5, [sp, #0]
 8005f28:	ea6f 0b03 	mvn.w	fp, r3
 8005f2c:	f04f 0800 	mov.w	r8, #0
 8005f30:	4631      	mov	r1, r6
 8005f32:	4620      	mov	r0, r4
 8005f34:	f000 fa7e 	bl	8006434 <_Bfree>
 8005f38:	2f00      	cmp	r7, #0
 8005f3a:	f43f aeab 	beq.w	8005c94 <_dtoa_r+0x6c4>
 8005f3e:	f1b8 0f00 	cmp.w	r8, #0
 8005f42:	d005      	beq.n	8005f50 <_dtoa_r+0x980>
 8005f44:	45b8      	cmp	r8, r7
 8005f46:	d003      	beq.n	8005f50 <_dtoa_r+0x980>
 8005f48:	4641      	mov	r1, r8
 8005f4a:	4620      	mov	r0, r4
 8005f4c:	f000 fa72 	bl	8006434 <_Bfree>
 8005f50:	4639      	mov	r1, r7
 8005f52:	4620      	mov	r0, r4
 8005f54:	f000 fa6e 	bl	8006434 <_Bfree>
 8005f58:	e69c      	b.n	8005c94 <_dtoa_r+0x6c4>
 8005f5a:	2600      	movs	r6, #0
 8005f5c:	4637      	mov	r7, r6
 8005f5e:	e7e1      	b.n	8005f24 <_dtoa_r+0x954>
 8005f60:	46bb      	mov	fp, r7
 8005f62:	4637      	mov	r7, r6
 8005f64:	e599      	b.n	8005a9a <_dtoa_r+0x4ca>
 8005f66:	bf00      	nop
 8005f68:	40240000 	.word	0x40240000
 8005f6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	f000 80c8 	beq.w	8006104 <_dtoa_r+0xb34>
 8005f74:	9b04      	ldr	r3, [sp, #16]
 8005f76:	9301      	str	r3, [sp, #4]
 8005f78:	2d00      	cmp	r5, #0
 8005f7a:	dd05      	ble.n	8005f88 <_dtoa_r+0x9b8>
 8005f7c:	4639      	mov	r1, r7
 8005f7e:	462a      	mov	r2, r5
 8005f80:	4620      	mov	r0, r4
 8005f82:	f000 fc27 	bl	80067d4 <__lshift>
 8005f86:	4607      	mov	r7, r0
 8005f88:	f1b8 0f00 	cmp.w	r8, #0
 8005f8c:	d05b      	beq.n	8006046 <_dtoa_r+0xa76>
 8005f8e:	6879      	ldr	r1, [r7, #4]
 8005f90:	4620      	mov	r0, r4
 8005f92:	f000 fa0f 	bl	80063b4 <_Balloc>
 8005f96:	4605      	mov	r5, r0
 8005f98:	b928      	cbnz	r0, 8005fa6 <_dtoa_r+0x9d6>
 8005f9a:	4b83      	ldr	r3, [pc, #524]	; (80061a8 <_dtoa_r+0xbd8>)
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8005fa2:	f7ff bb2e 	b.w	8005602 <_dtoa_r+0x32>
 8005fa6:	693a      	ldr	r2, [r7, #16]
 8005fa8:	3202      	adds	r2, #2
 8005faa:	0092      	lsls	r2, r2, #2
 8005fac:	f107 010c 	add.w	r1, r7, #12
 8005fb0:	300c      	adds	r0, #12
 8005fb2:	f000 febd 	bl	8006d30 <memcpy>
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	4629      	mov	r1, r5
 8005fba:	4620      	mov	r0, r4
 8005fbc:	f000 fc0a 	bl	80067d4 <__lshift>
 8005fc0:	9b00      	ldr	r3, [sp, #0]
 8005fc2:	3301      	adds	r3, #1
 8005fc4:	9304      	str	r3, [sp, #16]
 8005fc6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005fca:	4413      	add	r3, r2
 8005fcc:	9308      	str	r3, [sp, #32]
 8005fce:	9b02      	ldr	r3, [sp, #8]
 8005fd0:	f003 0301 	and.w	r3, r3, #1
 8005fd4:	46b8      	mov	r8, r7
 8005fd6:	9306      	str	r3, [sp, #24]
 8005fd8:	4607      	mov	r7, r0
 8005fda:	9b04      	ldr	r3, [sp, #16]
 8005fdc:	4631      	mov	r1, r6
 8005fde:	3b01      	subs	r3, #1
 8005fe0:	4650      	mov	r0, sl
 8005fe2:	9301      	str	r3, [sp, #4]
 8005fe4:	f7ff fa6c 	bl	80054c0 <quorem>
 8005fe8:	4641      	mov	r1, r8
 8005fea:	9002      	str	r0, [sp, #8]
 8005fec:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005ff0:	4650      	mov	r0, sl
 8005ff2:	f000 fc5b 	bl	80068ac <__mcmp>
 8005ff6:	463a      	mov	r2, r7
 8005ff8:	9005      	str	r0, [sp, #20]
 8005ffa:	4631      	mov	r1, r6
 8005ffc:	4620      	mov	r0, r4
 8005ffe:	f000 fc71 	bl	80068e4 <__mdiff>
 8006002:	68c2      	ldr	r2, [r0, #12]
 8006004:	4605      	mov	r5, r0
 8006006:	bb02      	cbnz	r2, 800604a <_dtoa_r+0xa7a>
 8006008:	4601      	mov	r1, r0
 800600a:	4650      	mov	r0, sl
 800600c:	f000 fc4e 	bl	80068ac <__mcmp>
 8006010:	4602      	mov	r2, r0
 8006012:	4629      	mov	r1, r5
 8006014:	4620      	mov	r0, r4
 8006016:	9209      	str	r2, [sp, #36]	; 0x24
 8006018:	f000 fa0c 	bl	8006434 <_Bfree>
 800601c:	9b07      	ldr	r3, [sp, #28]
 800601e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006020:	9d04      	ldr	r5, [sp, #16]
 8006022:	ea43 0102 	orr.w	r1, r3, r2
 8006026:	9b06      	ldr	r3, [sp, #24]
 8006028:	4319      	orrs	r1, r3
 800602a:	d110      	bne.n	800604e <_dtoa_r+0xa7e>
 800602c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006030:	d029      	beq.n	8006086 <_dtoa_r+0xab6>
 8006032:	9b05      	ldr	r3, [sp, #20]
 8006034:	2b00      	cmp	r3, #0
 8006036:	dd02      	ble.n	800603e <_dtoa_r+0xa6e>
 8006038:	9b02      	ldr	r3, [sp, #8]
 800603a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800603e:	9b01      	ldr	r3, [sp, #4]
 8006040:	f883 9000 	strb.w	r9, [r3]
 8006044:	e774      	b.n	8005f30 <_dtoa_r+0x960>
 8006046:	4638      	mov	r0, r7
 8006048:	e7ba      	b.n	8005fc0 <_dtoa_r+0x9f0>
 800604a:	2201      	movs	r2, #1
 800604c:	e7e1      	b.n	8006012 <_dtoa_r+0xa42>
 800604e:	9b05      	ldr	r3, [sp, #20]
 8006050:	2b00      	cmp	r3, #0
 8006052:	db04      	blt.n	800605e <_dtoa_r+0xa8e>
 8006054:	9907      	ldr	r1, [sp, #28]
 8006056:	430b      	orrs	r3, r1
 8006058:	9906      	ldr	r1, [sp, #24]
 800605a:	430b      	orrs	r3, r1
 800605c:	d120      	bne.n	80060a0 <_dtoa_r+0xad0>
 800605e:	2a00      	cmp	r2, #0
 8006060:	dded      	ble.n	800603e <_dtoa_r+0xa6e>
 8006062:	4651      	mov	r1, sl
 8006064:	2201      	movs	r2, #1
 8006066:	4620      	mov	r0, r4
 8006068:	f000 fbb4 	bl	80067d4 <__lshift>
 800606c:	4631      	mov	r1, r6
 800606e:	4682      	mov	sl, r0
 8006070:	f000 fc1c 	bl	80068ac <__mcmp>
 8006074:	2800      	cmp	r0, #0
 8006076:	dc03      	bgt.n	8006080 <_dtoa_r+0xab0>
 8006078:	d1e1      	bne.n	800603e <_dtoa_r+0xa6e>
 800607a:	f019 0f01 	tst.w	r9, #1
 800607e:	d0de      	beq.n	800603e <_dtoa_r+0xa6e>
 8006080:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006084:	d1d8      	bne.n	8006038 <_dtoa_r+0xa68>
 8006086:	9a01      	ldr	r2, [sp, #4]
 8006088:	2339      	movs	r3, #57	; 0x39
 800608a:	7013      	strb	r3, [r2, #0]
 800608c:	462b      	mov	r3, r5
 800608e:	461d      	mov	r5, r3
 8006090:	3b01      	subs	r3, #1
 8006092:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006096:	2a39      	cmp	r2, #57	; 0x39
 8006098:	d06c      	beq.n	8006174 <_dtoa_r+0xba4>
 800609a:	3201      	adds	r2, #1
 800609c:	701a      	strb	r2, [r3, #0]
 800609e:	e747      	b.n	8005f30 <_dtoa_r+0x960>
 80060a0:	2a00      	cmp	r2, #0
 80060a2:	dd07      	ble.n	80060b4 <_dtoa_r+0xae4>
 80060a4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80060a8:	d0ed      	beq.n	8006086 <_dtoa_r+0xab6>
 80060aa:	9a01      	ldr	r2, [sp, #4]
 80060ac:	f109 0301 	add.w	r3, r9, #1
 80060b0:	7013      	strb	r3, [r2, #0]
 80060b2:	e73d      	b.n	8005f30 <_dtoa_r+0x960>
 80060b4:	9b04      	ldr	r3, [sp, #16]
 80060b6:	9a08      	ldr	r2, [sp, #32]
 80060b8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80060bc:	4293      	cmp	r3, r2
 80060be:	d043      	beq.n	8006148 <_dtoa_r+0xb78>
 80060c0:	4651      	mov	r1, sl
 80060c2:	2300      	movs	r3, #0
 80060c4:	220a      	movs	r2, #10
 80060c6:	4620      	mov	r0, r4
 80060c8:	f000 f9d6 	bl	8006478 <__multadd>
 80060cc:	45b8      	cmp	r8, r7
 80060ce:	4682      	mov	sl, r0
 80060d0:	f04f 0300 	mov.w	r3, #0
 80060d4:	f04f 020a 	mov.w	r2, #10
 80060d8:	4641      	mov	r1, r8
 80060da:	4620      	mov	r0, r4
 80060dc:	d107      	bne.n	80060ee <_dtoa_r+0xb1e>
 80060de:	f000 f9cb 	bl	8006478 <__multadd>
 80060e2:	4680      	mov	r8, r0
 80060e4:	4607      	mov	r7, r0
 80060e6:	9b04      	ldr	r3, [sp, #16]
 80060e8:	3301      	adds	r3, #1
 80060ea:	9304      	str	r3, [sp, #16]
 80060ec:	e775      	b.n	8005fda <_dtoa_r+0xa0a>
 80060ee:	f000 f9c3 	bl	8006478 <__multadd>
 80060f2:	4639      	mov	r1, r7
 80060f4:	4680      	mov	r8, r0
 80060f6:	2300      	movs	r3, #0
 80060f8:	220a      	movs	r2, #10
 80060fa:	4620      	mov	r0, r4
 80060fc:	f000 f9bc 	bl	8006478 <__multadd>
 8006100:	4607      	mov	r7, r0
 8006102:	e7f0      	b.n	80060e6 <_dtoa_r+0xb16>
 8006104:	9b04      	ldr	r3, [sp, #16]
 8006106:	9301      	str	r3, [sp, #4]
 8006108:	9d00      	ldr	r5, [sp, #0]
 800610a:	4631      	mov	r1, r6
 800610c:	4650      	mov	r0, sl
 800610e:	f7ff f9d7 	bl	80054c0 <quorem>
 8006112:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006116:	9b00      	ldr	r3, [sp, #0]
 8006118:	f805 9b01 	strb.w	r9, [r5], #1
 800611c:	1aea      	subs	r2, r5, r3
 800611e:	9b01      	ldr	r3, [sp, #4]
 8006120:	4293      	cmp	r3, r2
 8006122:	dd07      	ble.n	8006134 <_dtoa_r+0xb64>
 8006124:	4651      	mov	r1, sl
 8006126:	2300      	movs	r3, #0
 8006128:	220a      	movs	r2, #10
 800612a:	4620      	mov	r0, r4
 800612c:	f000 f9a4 	bl	8006478 <__multadd>
 8006130:	4682      	mov	sl, r0
 8006132:	e7ea      	b.n	800610a <_dtoa_r+0xb3a>
 8006134:	9b01      	ldr	r3, [sp, #4]
 8006136:	2b00      	cmp	r3, #0
 8006138:	bfc8      	it	gt
 800613a:	461d      	movgt	r5, r3
 800613c:	9b00      	ldr	r3, [sp, #0]
 800613e:	bfd8      	it	le
 8006140:	2501      	movle	r5, #1
 8006142:	441d      	add	r5, r3
 8006144:	f04f 0800 	mov.w	r8, #0
 8006148:	4651      	mov	r1, sl
 800614a:	2201      	movs	r2, #1
 800614c:	4620      	mov	r0, r4
 800614e:	f000 fb41 	bl	80067d4 <__lshift>
 8006152:	4631      	mov	r1, r6
 8006154:	4682      	mov	sl, r0
 8006156:	f000 fba9 	bl	80068ac <__mcmp>
 800615a:	2800      	cmp	r0, #0
 800615c:	dc96      	bgt.n	800608c <_dtoa_r+0xabc>
 800615e:	d102      	bne.n	8006166 <_dtoa_r+0xb96>
 8006160:	f019 0f01 	tst.w	r9, #1
 8006164:	d192      	bne.n	800608c <_dtoa_r+0xabc>
 8006166:	462b      	mov	r3, r5
 8006168:	461d      	mov	r5, r3
 800616a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800616e:	2a30      	cmp	r2, #48	; 0x30
 8006170:	d0fa      	beq.n	8006168 <_dtoa_r+0xb98>
 8006172:	e6dd      	b.n	8005f30 <_dtoa_r+0x960>
 8006174:	9a00      	ldr	r2, [sp, #0]
 8006176:	429a      	cmp	r2, r3
 8006178:	d189      	bne.n	800608e <_dtoa_r+0xabe>
 800617a:	f10b 0b01 	add.w	fp, fp, #1
 800617e:	2331      	movs	r3, #49	; 0x31
 8006180:	e796      	b.n	80060b0 <_dtoa_r+0xae0>
 8006182:	4b0a      	ldr	r3, [pc, #40]	; (80061ac <_dtoa_r+0xbdc>)
 8006184:	f7ff ba99 	b.w	80056ba <_dtoa_r+0xea>
 8006188:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800618a:	2b00      	cmp	r3, #0
 800618c:	f47f aa6d 	bne.w	800566a <_dtoa_r+0x9a>
 8006190:	4b07      	ldr	r3, [pc, #28]	; (80061b0 <_dtoa_r+0xbe0>)
 8006192:	f7ff ba92 	b.w	80056ba <_dtoa_r+0xea>
 8006196:	9b01      	ldr	r3, [sp, #4]
 8006198:	2b00      	cmp	r3, #0
 800619a:	dcb5      	bgt.n	8006108 <_dtoa_r+0xb38>
 800619c:	9b07      	ldr	r3, [sp, #28]
 800619e:	2b02      	cmp	r3, #2
 80061a0:	f73f aeb1 	bgt.w	8005f06 <_dtoa_r+0x936>
 80061a4:	e7b0      	b.n	8006108 <_dtoa_r+0xb38>
 80061a6:	bf00      	nop
 80061a8:	0800778f 	.word	0x0800778f
 80061ac:	080076ef 	.word	0x080076ef
 80061b0:	08007713 	.word	0x08007713

080061b4 <_free_r>:
 80061b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80061b6:	2900      	cmp	r1, #0
 80061b8:	d044      	beq.n	8006244 <_free_r+0x90>
 80061ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061be:	9001      	str	r0, [sp, #4]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	f1a1 0404 	sub.w	r4, r1, #4
 80061c6:	bfb8      	it	lt
 80061c8:	18e4      	addlt	r4, r4, r3
 80061ca:	f000 f8e7 	bl	800639c <__malloc_lock>
 80061ce:	4a1e      	ldr	r2, [pc, #120]	; (8006248 <_free_r+0x94>)
 80061d0:	9801      	ldr	r0, [sp, #4]
 80061d2:	6813      	ldr	r3, [r2, #0]
 80061d4:	b933      	cbnz	r3, 80061e4 <_free_r+0x30>
 80061d6:	6063      	str	r3, [r4, #4]
 80061d8:	6014      	str	r4, [r2, #0]
 80061da:	b003      	add	sp, #12
 80061dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80061e0:	f000 b8e2 	b.w	80063a8 <__malloc_unlock>
 80061e4:	42a3      	cmp	r3, r4
 80061e6:	d908      	bls.n	80061fa <_free_r+0x46>
 80061e8:	6825      	ldr	r5, [r4, #0]
 80061ea:	1961      	adds	r1, r4, r5
 80061ec:	428b      	cmp	r3, r1
 80061ee:	bf01      	itttt	eq
 80061f0:	6819      	ldreq	r1, [r3, #0]
 80061f2:	685b      	ldreq	r3, [r3, #4]
 80061f4:	1949      	addeq	r1, r1, r5
 80061f6:	6021      	streq	r1, [r4, #0]
 80061f8:	e7ed      	b.n	80061d6 <_free_r+0x22>
 80061fa:	461a      	mov	r2, r3
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	b10b      	cbz	r3, 8006204 <_free_r+0x50>
 8006200:	42a3      	cmp	r3, r4
 8006202:	d9fa      	bls.n	80061fa <_free_r+0x46>
 8006204:	6811      	ldr	r1, [r2, #0]
 8006206:	1855      	adds	r5, r2, r1
 8006208:	42a5      	cmp	r5, r4
 800620a:	d10b      	bne.n	8006224 <_free_r+0x70>
 800620c:	6824      	ldr	r4, [r4, #0]
 800620e:	4421      	add	r1, r4
 8006210:	1854      	adds	r4, r2, r1
 8006212:	42a3      	cmp	r3, r4
 8006214:	6011      	str	r1, [r2, #0]
 8006216:	d1e0      	bne.n	80061da <_free_r+0x26>
 8006218:	681c      	ldr	r4, [r3, #0]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	6053      	str	r3, [r2, #4]
 800621e:	440c      	add	r4, r1
 8006220:	6014      	str	r4, [r2, #0]
 8006222:	e7da      	b.n	80061da <_free_r+0x26>
 8006224:	d902      	bls.n	800622c <_free_r+0x78>
 8006226:	230c      	movs	r3, #12
 8006228:	6003      	str	r3, [r0, #0]
 800622a:	e7d6      	b.n	80061da <_free_r+0x26>
 800622c:	6825      	ldr	r5, [r4, #0]
 800622e:	1961      	adds	r1, r4, r5
 8006230:	428b      	cmp	r3, r1
 8006232:	bf04      	itt	eq
 8006234:	6819      	ldreq	r1, [r3, #0]
 8006236:	685b      	ldreq	r3, [r3, #4]
 8006238:	6063      	str	r3, [r4, #4]
 800623a:	bf04      	itt	eq
 800623c:	1949      	addeq	r1, r1, r5
 800623e:	6021      	streq	r1, [r4, #0]
 8006240:	6054      	str	r4, [r2, #4]
 8006242:	e7ca      	b.n	80061da <_free_r+0x26>
 8006244:	b003      	add	sp, #12
 8006246:	bd30      	pop	{r4, r5, pc}
 8006248:	200003f4 	.word	0x200003f4

0800624c <malloc>:
 800624c:	4b02      	ldr	r3, [pc, #8]	; (8006258 <malloc+0xc>)
 800624e:	4601      	mov	r1, r0
 8006250:	6818      	ldr	r0, [r3, #0]
 8006252:	f000 b823 	b.w	800629c <_malloc_r>
 8006256:	bf00      	nop
 8006258:	2000006c 	.word	0x2000006c

0800625c <sbrk_aligned>:
 800625c:	b570      	push	{r4, r5, r6, lr}
 800625e:	4e0e      	ldr	r6, [pc, #56]	; (8006298 <sbrk_aligned+0x3c>)
 8006260:	460c      	mov	r4, r1
 8006262:	6831      	ldr	r1, [r6, #0]
 8006264:	4605      	mov	r5, r0
 8006266:	b911      	cbnz	r1, 800626e <sbrk_aligned+0x12>
 8006268:	f000 fd52 	bl	8006d10 <_sbrk_r>
 800626c:	6030      	str	r0, [r6, #0]
 800626e:	4621      	mov	r1, r4
 8006270:	4628      	mov	r0, r5
 8006272:	f000 fd4d 	bl	8006d10 <_sbrk_r>
 8006276:	1c43      	adds	r3, r0, #1
 8006278:	d00a      	beq.n	8006290 <sbrk_aligned+0x34>
 800627a:	1cc4      	adds	r4, r0, #3
 800627c:	f024 0403 	bic.w	r4, r4, #3
 8006280:	42a0      	cmp	r0, r4
 8006282:	d007      	beq.n	8006294 <sbrk_aligned+0x38>
 8006284:	1a21      	subs	r1, r4, r0
 8006286:	4628      	mov	r0, r5
 8006288:	f000 fd42 	bl	8006d10 <_sbrk_r>
 800628c:	3001      	adds	r0, #1
 800628e:	d101      	bne.n	8006294 <sbrk_aligned+0x38>
 8006290:	f04f 34ff 	mov.w	r4, #4294967295
 8006294:	4620      	mov	r0, r4
 8006296:	bd70      	pop	{r4, r5, r6, pc}
 8006298:	200003f8 	.word	0x200003f8

0800629c <_malloc_r>:
 800629c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062a0:	1ccd      	adds	r5, r1, #3
 80062a2:	f025 0503 	bic.w	r5, r5, #3
 80062a6:	3508      	adds	r5, #8
 80062a8:	2d0c      	cmp	r5, #12
 80062aa:	bf38      	it	cc
 80062ac:	250c      	movcc	r5, #12
 80062ae:	2d00      	cmp	r5, #0
 80062b0:	4607      	mov	r7, r0
 80062b2:	db01      	blt.n	80062b8 <_malloc_r+0x1c>
 80062b4:	42a9      	cmp	r1, r5
 80062b6:	d905      	bls.n	80062c4 <_malloc_r+0x28>
 80062b8:	230c      	movs	r3, #12
 80062ba:	603b      	str	r3, [r7, #0]
 80062bc:	2600      	movs	r6, #0
 80062be:	4630      	mov	r0, r6
 80062c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062c4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006398 <_malloc_r+0xfc>
 80062c8:	f000 f868 	bl	800639c <__malloc_lock>
 80062cc:	f8d8 3000 	ldr.w	r3, [r8]
 80062d0:	461c      	mov	r4, r3
 80062d2:	bb5c      	cbnz	r4, 800632c <_malloc_r+0x90>
 80062d4:	4629      	mov	r1, r5
 80062d6:	4638      	mov	r0, r7
 80062d8:	f7ff ffc0 	bl	800625c <sbrk_aligned>
 80062dc:	1c43      	adds	r3, r0, #1
 80062de:	4604      	mov	r4, r0
 80062e0:	d155      	bne.n	800638e <_malloc_r+0xf2>
 80062e2:	f8d8 4000 	ldr.w	r4, [r8]
 80062e6:	4626      	mov	r6, r4
 80062e8:	2e00      	cmp	r6, #0
 80062ea:	d145      	bne.n	8006378 <_malloc_r+0xdc>
 80062ec:	2c00      	cmp	r4, #0
 80062ee:	d048      	beq.n	8006382 <_malloc_r+0xe6>
 80062f0:	6823      	ldr	r3, [r4, #0]
 80062f2:	4631      	mov	r1, r6
 80062f4:	4638      	mov	r0, r7
 80062f6:	eb04 0903 	add.w	r9, r4, r3
 80062fa:	f000 fd09 	bl	8006d10 <_sbrk_r>
 80062fe:	4581      	cmp	r9, r0
 8006300:	d13f      	bne.n	8006382 <_malloc_r+0xe6>
 8006302:	6821      	ldr	r1, [r4, #0]
 8006304:	1a6d      	subs	r5, r5, r1
 8006306:	4629      	mov	r1, r5
 8006308:	4638      	mov	r0, r7
 800630a:	f7ff ffa7 	bl	800625c <sbrk_aligned>
 800630e:	3001      	adds	r0, #1
 8006310:	d037      	beq.n	8006382 <_malloc_r+0xe6>
 8006312:	6823      	ldr	r3, [r4, #0]
 8006314:	442b      	add	r3, r5
 8006316:	6023      	str	r3, [r4, #0]
 8006318:	f8d8 3000 	ldr.w	r3, [r8]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d038      	beq.n	8006392 <_malloc_r+0xf6>
 8006320:	685a      	ldr	r2, [r3, #4]
 8006322:	42a2      	cmp	r2, r4
 8006324:	d12b      	bne.n	800637e <_malloc_r+0xe2>
 8006326:	2200      	movs	r2, #0
 8006328:	605a      	str	r2, [r3, #4]
 800632a:	e00f      	b.n	800634c <_malloc_r+0xb0>
 800632c:	6822      	ldr	r2, [r4, #0]
 800632e:	1b52      	subs	r2, r2, r5
 8006330:	d41f      	bmi.n	8006372 <_malloc_r+0xd6>
 8006332:	2a0b      	cmp	r2, #11
 8006334:	d917      	bls.n	8006366 <_malloc_r+0xca>
 8006336:	1961      	adds	r1, r4, r5
 8006338:	42a3      	cmp	r3, r4
 800633a:	6025      	str	r5, [r4, #0]
 800633c:	bf18      	it	ne
 800633e:	6059      	strne	r1, [r3, #4]
 8006340:	6863      	ldr	r3, [r4, #4]
 8006342:	bf08      	it	eq
 8006344:	f8c8 1000 	streq.w	r1, [r8]
 8006348:	5162      	str	r2, [r4, r5]
 800634a:	604b      	str	r3, [r1, #4]
 800634c:	4638      	mov	r0, r7
 800634e:	f104 060b 	add.w	r6, r4, #11
 8006352:	f000 f829 	bl	80063a8 <__malloc_unlock>
 8006356:	f026 0607 	bic.w	r6, r6, #7
 800635a:	1d23      	adds	r3, r4, #4
 800635c:	1af2      	subs	r2, r6, r3
 800635e:	d0ae      	beq.n	80062be <_malloc_r+0x22>
 8006360:	1b9b      	subs	r3, r3, r6
 8006362:	50a3      	str	r3, [r4, r2]
 8006364:	e7ab      	b.n	80062be <_malloc_r+0x22>
 8006366:	42a3      	cmp	r3, r4
 8006368:	6862      	ldr	r2, [r4, #4]
 800636a:	d1dd      	bne.n	8006328 <_malloc_r+0x8c>
 800636c:	f8c8 2000 	str.w	r2, [r8]
 8006370:	e7ec      	b.n	800634c <_malloc_r+0xb0>
 8006372:	4623      	mov	r3, r4
 8006374:	6864      	ldr	r4, [r4, #4]
 8006376:	e7ac      	b.n	80062d2 <_malloc_r+0x36>
 8006378:	4634      	mov	r4, r6
 800637a:	6876      	ldr	r6, [r6, #4]
 800637c:	e7b4      	b.n	80062e8 <_malloc_r+0x4c>
 800637e:	4613      	mov	r3, r2
 8006380:	e7cc      	b.n	800631c <_malloc_r+0x80>
 8006382:	230c      	movs	r3, #12
 8006384:	603b      	str	r3, [r7, #0]
 8006386:	4638      	mov	r0, r7
 8006388:	f000 f80e 	bl	80063a8 <__malloc_unlock>
 800638c:	e797      	b.n	80062be <_malloc_r+0x22>
 800638e:	6025      	str	r5, [r4, #0]
 8006390:	e7dc      	b.n	800634c <_malloc_r+0xb0>
 8006392:	605b      	str	r3, [r3, #4]
 8006394:	deff      	udf	#255	; 0xff
 8006396:	bf00      	nop
 8006398:	200003f4 	.word	0x200003f4

0800639c <__malloc_lock>:
 800639c:	4801      	ldr	r0, [pc, #4]	; (80063a4 <__malloc_lock+0x8>)
 800639e:	f7ff b88d 	b.w	80054bc <__retarget_lock_acquire_recursive>
 80063a2:	bf00      	nop
 80063a4:	200003f0 	.word	0x200003f0

080063a8 <__malloc_unlock>:
 80063a8:	4801      	ldr	r0, [pc, #4]	; (80063b0 <__malloc_unlock+0x8>)
 80063aa:	f7ff b888 	b.w	80054be <__retarget_lock_release_recursive>
 80063ae:	bf00      	nop
 80063b0:	200003f0 	.word	0x200003f0

080063b4 <_Balloc>:
 80063b4:	b570      	push	{r4, r5, r6, lr}
 80063b6:	69c6      	ldr	r6, [r0, #28]
 80063b8:	4604      	mov	r4, r0
 80063ba:	460d      	mov	r5, r1
 80063bc:	b976      	cbnz	r6, 80063dc <_Balloc+0x28>
 80063be:	2010      	movs	r0, #16
 80063c0:	f7ff ff44 	bl	800624c <malloc>
 80063c4:	4602      	mov	r2, r0
 80063c6:	61e0      	str	r0, [r4, #28]
 80063c8:	b920      	cbnz	r0, 80063d4 <_Balloc+0x20>
 80063ca:	4b18      	ldr	r3, [pc, #96]	; (800642c <_Balloc+0x78>)
 80063cc:	4818      	ldr	r0, [pc, #96]	; (8006430 <_Balloc+0x7c>)
 80063ce:	216b      	movs	r1, #107	; 0x6b
 80063d0:	f000 fcbc 	bl	8006d4c <__assert_func>
 80063d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80063d8:	6006      	str	r6, [r0, #0]
 80063da:	60c6      	str	r6, [r0, #12]
 80063dc:	69e6      	ldr	r6, [r4, #28]
 80063de:	68f3      	ldr	r3, [r6, #12]
 80063e0:	b183      	cbz	r3, 8006404 <_Balloc+0x50>
 80063e2:	69e3      	ldr	r3, [r4, #28]
 80063e4:	68db      	ldr	r3, [r3, #12]
 80063e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80063ea:	b9b8      	cbnz	r0, 800641c <_Balloc+0x68>
 80063ec:	2101      	movs	r1, #1
 80063ee:	fa01 f605 	lsl.w	r6, r1, r5
 80063f2:	1d72      	adds	r2, r6, #5
 80063f4:	0092      	lsls	r2, r2, #2
 80063f6:	4620      	mov	r0, r4
 80063f8:	f000 fcc6 	bl	8006d88 <_calloc_r>
 80063fc:	b160      	cbz	r0, 8006418 <_Balloc+0x64>
 80063fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006402:	e00e      	b.n	8006422 <_Balloc+0x6e>
 8006404:	2221      	movs	r2, #33	; 0x21
 8006406:	2104      	movs	r1, #4
 8006408:	4620      	mov	r0, r4
 800640a:	f000 fcbd 	bl	8006d88 <_calloc_r>
 800640e:	69e3      	ldr	r3, [r4, #28]
 8006410:	60f0      	str	r0, [r6, #12]
 8006412:	68db      	ldr	r3, [r3, #12]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d1e4      	bne.n	80063e2 <_Balloc+0x2e>
 8006418:	2000      	movs	r0, #0
 800641a:	bd70      	pop	{r4, r5, r6, pc}
 800641c:	6802      	ldr	r2, [r0, #0]
 800641e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006422:	2300      	movs	r3, #0
 8006424:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006428:	e7f7      	b.n	800641a <_Balloc+0x66>
 800642a:	bf00      	nop
 800642c:	08007720 	.word	0x08007720
 8006430:	080077a0 	.word	0x080077a0

08006434 <_Bfree>:
 8006434:	b570      	push	{r4, r5, r6, lr}
 8006436:	69c6      	ldr	r6, [r0, #28]
 8006438:	4605      	mov	r5, r0
 800643a:	460c      	mov	r4, r1
 800643c:	b976      	cbnz	r6, 800645c <_Bfree+0x28>
 800643e:	2010      	movs	r0, #16
 8006440:	f7ff ff04 	bl	800624c <malloc>
 8006444:	4602      	mov	r2, r0
 8006446:	61e8      	str	r0, [r5, #28]
 8006448:	b920      	cbnz	r0, 8006454 <_Bfree+0x20>
 800644a:	4b09      	ldr	r3, [pc, #36]	; (8006470 <_Bfree+0x3c>)
 800644c:	4809      	ldr	r0, [pc, #36]	; (8006474 <_Bfree+0x40>)
 800644e:	218f      	movs	r1, #143	; 0x8f
 8006450:	f000 fc7c 	bl	8006d4c <__assert_func>
 8006454:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006458:	6006      	str	r6, [r0, #0]
 800645a:	60c6      	str	r6, [r0, #12]
 800645c:	b13c      	cbz	r4, 800646e <_Bfree+0x3a>
 800645e:	69eb      	ldr	r3, [r5, #28]
 8006460:	6862      	ldr	r2, [r4, #4]
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006468:	6021      	str	r1, [r4, #0]
 800646a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800646e:	bd70      	pop	{r4, r5, r6, pc}
 8006470:	08007720 	.word	0x08007720
 8006474:	080077a0 	.word	0x080077a0

08006478 <__multadd>:
 8006478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800647c:	690d      	ldr	r5, [r1, #16]
 800647e:	4607      	mov	r7, r0
 8006480:	460c      	mov	r4, r1
 8006482:	461e      	mov	r6, r3
 8006484:	f101 0c14 	add.w	ip, r1, #20
 8006488:	2000      	movs	r0, #0
 800648a:	f8dc 3000 	ldr.w	r3, [ip]
 800648e:	b299      	uxth	r1, r3
 8006490:	fb02 6101 	mla	r1, r2, r1, r6
 8006494:	0c1e      	lsrs	r6, r3, #16
 8006496:	0c0b      	lsrs	r3, r1, #16
 8006498:	fb02 3306 	mla	r3, r2, r6, r3
 800649c:	b289      	uxth	r1, r1
 800649e:	3001      	adds	r0, #1
 80064a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80064a4:	4285      	cmp	r5, r0
 80064a6:	f84c 1b04 	str.w	r1, [ip], #4
 80064aa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80064ae:	dcec      	bgt.n	800648a <__multadd+0x12>
 80064b0:	b30e      	cbz	r6, 80064f6 <__multadd+0x7e>
 80064b2:	68a3      	ldr	r3, [r4, #8]
 80064b4:	42ab      	cmp	r3, r5
 80064b6:	dc19      	bgt.n	80064ec <__multadd+0x74>
 80064b8:	6861      	ldr	r1, [r4, #4]
 80064ba:	4638      	mov	r0, r7
 80064bc:	3101      	adds	r1, #1
 80064be:	f7ff ff79 	bl	80063b4 <_Balloc>
 80064c2:	4680      	mov	r8, r0
 80064c4:	b928      	cbnz	r0, 80064d2 <__multadd+0x5a>
 80064c6:	4602      	mov	r2, r0
 80064c8:	4b0c      	ldr	r3, [pc, #48]	; (80064fc <__multadd+0x84>)
 80064ca:	480d      	ldr	r0, [pc, #52]	; (8006500 <__multadd+0x88>)
 80064cc:	21ba      	movs	r1, #186	; 0xba
 80064ce:	f000 fc3d 	bl	8006d4c <__assert_func>
 80064d2:	6922      	ldr	r2, [r4, #16]
 80064d4:	3202      	adds	r2, #2
 80064d6:	f104 010c 	add.w	r1, r4, #12
 80064da:	0092      	lsls	r2, r2, #2
 80064dc:	300c      	adds	r0, #12
 80064de:	f000 fc27 	bl	8006d30 <memcpy>
 80064e2:	4621      	mov	r1, r4
 80064e4:	4638      	mov	r0, r7
 80064e6:	f7ff ffa5 	bl	8006434 <_Bfree>
 80064ea:	4644      	mov	r4, r8
 80064ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80064f0:	3501      	adds	r5, #1
 80064f2:	615e      	str	r6, [r3, #20]
 80064f4:	6125      	str	r5, [r4, #16]
 80064f6:	4620      	mov	r0, r4
 80064f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064fc:	0800778f 	.word	0x0800778f
 8006500:	080077a0 	.word	0x080077a0

08006504 <__hi0bits>:
 8006504:	0c03      	lsrs	r3, r0, #16
 8006506:	041b      	lsls	r3, r3, #16
 8006508:	b9d3      	cbnz	r3, 8006540 <__hi0bits+0x3c>
 800650a:	0400      	lsls	r0, r0, #16
 800650c:	2310      	movs	r3, #16
 800650e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006512:	bf04      	itt	eq
 8006514:	0200      	lsleq	r0, r0, #8
 8006516:	3308      	addeq	r3, #8
 8006518:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800651c:	bf04      	itt	eq
 800651e:	0100      	lsleq	r0, r0, #4
 8006520:	3304      	addeq	r3, #4
 8006522:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006526:	bf04      	itt	eq
 8006528:	0080      	lsleq	r0, r0, #2
 800652a:	3302      	addeq	r3, #2
 800652c:	2800      	cmp	r0, #0
 800652e:	db05      	blt.n	800653c <__hi0bits+0x38>
 8006530:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006534:	f103 0301 	add.w	r3, r3, #1
 8006538:	bf08      	it	eq
 800653a:	2320      	moveq	r3, #32
 800653c:	4618      	mov	r0, r3
 800653e:	4770      	bx	lr
 8006540:	2300      	movs	r3, #0
 8006542:	e7e4      	b.n	800650e <__hi0bits+0xa>

08006544 <__lo0bits>:
 8006544:	6803      	ldr	r3, [r0, #0]
 8006546:	f013 0207 	ands.w	r2, r3, #7
 800654a:	d00c      	beq.n	8006566 <__lo0bits+0x22>
 800654c:	07d9      	lsls	r1, r3, #31
 800654e:	d422      	bmi.n	8006596 <__lo0bits+0x52>
 8006550:	079a      	lsls	r2, r3, #30
 8006552:	bf49      	itett	mi
 8006554:	085b      	lsrmi	r3, r3, #1
 8006556:	089b      	lsrpl	r3, r3, #2
 8006558:	6003      	strmi	r3, [r0, #0]
 800655a:	2201      	movmi	r2, #1
 800655c:	bf5c      	itt	pl
 800655e:	6003      	strpl	r3, [r0, #0]
 8006560:	2202      	movpl	r2, #2
 8006562:	4610      	mov	r0, r2
 8006564:	4770      	bx	lr
 8006566:	b299      	uxth	r1, r3
 8006568:	b909      	cbnz	r1, 800656e <__lo0bits+0x2a>
 800656a:	0c1b      	lsrs	r3, r3, #16
 800656c:	2210      	movs	r2, #16
 800656e:	b2d9      	uxtb	r1, r3
 8006570:	b909      	cbnz	r1, 8006576 <__lo0bits+0x32>
 8006572:	3208      	adds	r2, #8
 8006574:	0a1b      	lsrs	r3, r3, #8
 8006576:	0719      	lsls	r1, r3, #28
 8006578:	bf04      	itt	eq
 800657a:	091b      	lsreq	r3, r3, #4
 800657c:	3204      	addeq	r2, #4
 800657e:	0799      	lsls	r1, r3, #30
 8006580:	bf04      	itt	eq
 8006582:	089b      	lsreq	r3, r3, #2
 8006584:	3202      	addeq	r2, #2
 8006586:	07d9      	lsls	r1, r3, #31
 8006588:	d403      	bmi.n	8006592 <__lo0bits+0x4e>
 800658a:	085b      	lsrs	r3, r3, #1
 800658c:	f102 0201 	add.w	r2, r2, #1
 8006590:	d003      	beq.n	800659a <__lo0bits+0x56>
 8006592:	6003      	str	r3, [r0, #0]
 8006594:	e7e5      	b.n	8006562 <__lo0bits+0x1e>
 8006596:	2200      	movs	r2, #0
 8006598:	e7e3      	b.n	8006562 <__lo0bits+0x1e>
 800659a:	2220      	movs	r2, #32
 800659c:	e7e1      	b.n	8006562 <__lo0bits+0x1e>
	...

080065a0 <__i2b>:
 80065a0:	b510      	push	{r4, lr}
 80065a2:	460c      	mov	r4, r1
 80065a4:	2101      	movs	r1, #1
 80065a6:	f7ff ff05 	bl	80063b4 <_Balloc>
 80065aa:	4602      	mov	r2, r0
 80065ac:	b928      	cbnz	r0, 80065ba <__i2b+0x1a>
 80065ae:	4b05      	ldr	r3, [pc, #20]	; (80065c4 <__i2b+0x24>)
 80065b0:	4805      	ldr	r0, [pc, #20]	; (80065c8 <__i2b+0x28>)
 80065b2:	f240 1145 	movw	r1, #325	; 0x145
 80065b6:	f000 fbc9 	bl	8006d4c <__assert_func>
 80065ba:	2301      	movs	r3, #1
 80065bc:	6144      	str	r4, [r0, #20]
 80065be:	6103      	str	r3, [r0, #16]
 80065c0:	bd10      	pop	{r4, pc}
 80065c2:	bf00      	nop
 80065c4:	0800778f 	.word	0x0800778f
 80065c8:	080077a0 	.word	0x080077a0

080065cc <__multiply>:
 80065cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065d0:	4691      	mov	r9, r2
 80065d2:	690a      	ldr	r2, [r1, #16]
 80065d4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80065d8:	429a      	cmp	r2, r3
 80065da:	bfb8      	it	lt
 80065dc:	460b      	movlt	r3, r1
 80065de:	460c      	mov	r4, r1
 80065e0:	bfbc      	itt	lt
 80065e2:	464c      	movlt	r4, r9
 80065e4:	4699      	movlt	r9, r3
 80065e6:	6927      	ldr	r7, [r4, #16]
 80065e8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80065ec:	68a3      	ldr	r3, [r4, #8]
 80065ee:	6861      	ldr	r1, [r4, #4]
 80065f0:	eb07 060a 	add.w	r6, r7, sl
 80065f4:	42b3      	cmp	r3, r6
 80065f6:	b085      	sub	sp, #20
 80065f8:	bfb8      	it	lt
 80065fa:	3101      	addlt	r1, #1
 80065fc:	f7ff feda 	bl	80063b4 <_Balloc>
 8006600:	b930      	cbnz	r0, 8006610 <__multiply+0x44>
 8006602:	4602      	mov	r2, r0
 8006604:	4b44      	ldr	r3, [pc, #272]	; (8006718 <__multiply+0x14c>)
 8006606:	4845      	ldr	r0, [pc, #276]	; (800671c <__multiply+0x150>)
 8006608:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800660c:	f000 fb9e 	bl	8006d4c <__assert_func>
 8006610:	f100 0514 	add.w	r5, r0, #20
 8006614:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006618:	462b      	mov	r3, r5
 800661a:	2200      	movs	r2, #0
 800661c:	4543      	cmp	r3, r8
 800661e:	d321      	bcc.n	8006664 <__multiply+0x98>
 8006620:	f104 0314 	add.w	r3, r4, #20
 8006624:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006628:	f109 0314 	add.w	r3, r9, #20
 800662c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006630:	9202      	str	r2, [sp, #8]
 8006632:	1b3a      	subs	r2, r7, r4
 8006634:	3a15      	subs	r2, #21
 8006636:	f022 0203 	bic.w	r2, r2, #3
 800663a:	3204      	adds	r2, #4
 800663c:	f104 0115 	add.w	r1, r4, #21
 8006640:	428f      	cmp	r7, r1
 8006642:	bf38      	it	cc
 8006644:	2204      	movcc	r2, #4
 8006646:	9201      	str	r2, [sp, #4]
 8006648:	9a02      	ldr	r2, [sp, #8]
 800664a:	9303      	str	r3, [sp, #12]
 800664c:	429a      	cmp	r2, r3
 800664e:	d80c      	bhi.n	800666a <__multiply+0x9e>
 8006650:	2e00      	cmp	r6, #0
 8006652:	dd03      	ble.n	800665c <__multiply+0x90>
 8006654:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006658:	2b00      	cmp	r3, #0
 800665a:	d05b      	beq.n	8006714 <__multiply+0x148>
 800665c:	6106      	str	r6, [r0, #16]
 800665e:	b005      	add	sp, #20
 8006660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006664:	f843 2b04 	str.w	r2, [r3], #4
 8006668:	e7d8      	b.n	800661c <__multiply+0x50>
 800666a:	f8b3 a000 	ldrh.w	sl, [r3]
 800666e:	f1ba 0f00 	cmp.w	sl, #0
 8006672:	d024      	beq.n	80066be <__multiply+0xf2>
 8006674:	f104 0e14 	add.w	lr, r4, #20
 8006678:	46a9      	mov	r9, r5
 800667a:	f04f 0c00 	mov.w	ip, #0
 800667e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006682:	f8d9 1000 	ldr.w	r1, [r9]
 8006686:	fa1f fb82 	uxth.w	fp, r2
 800668a:	b289      	uxth	r1, r1
 800668c:	fb0a 110b 	mla	r1, sl, fp, r1
 8006690:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006694:	f8d9 2000 	ldr.w	r2, [r9]
 8006698:	4461      	add	r1, ip
 800669a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800669e:	fb0a c20b 	mla	r2, sl, fp, ip
 80066a2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80066a6:	b289      	uxth	r1, r1
 80066a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80066ac:	4577      	cmp	r7, lr
 80066ae:	f849 1b04 	str.w	r1, [r9], #4
 80066b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80066b6:	d8e2      	bhi.n	800667e <__multiply+0xb2>
 80066b8:	9a01      	ldr	r2, [sp, #4]
 80066ba:	f845 c002 	str.w	ip, [r5, r2]
 80066be:	9a03      	ldr	r2, [sp, #12]
 80066c0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80066c4:	3304      	adds	r3, #4
 80066c6:	f1b9 0f00 	cmp.w	r9, #0
 80066ca:	d021      	beq.n	8006710 <__multiply+0x144>
 80066cc:	6829      	ldr	r1, [r5, #0]
 80066ce:	f104 0c14 	add.w	ip, r4, #20
 80066d2:	46ae      	mov	lr, r5
 80066d4:	f04f 0a00 	mov.w	sl, #0
 80066d8:	f8bc b000 	ldrh.w	fp, [ip]
 80066dc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80066e0:	fb09 220b 	mla	r2, r9, fp, r2
 80066e4:	4452      	add	r2, sl
 80066e6:	b289      	uxth	r1, r1
 80066e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80066ec:	f84e 1b04 	str.w	r1, [lr], #4
 80066f0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80066f4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80066f8:	f8be 1000 	ldrh.w	r1, [lr]
 80066fc:	fb09 110a 	mla	r1, r9, sl, r1
 8006700:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006704:	4567      	cmp	r7, ip
 8006706:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800670a:	d8e5      	bhi.n	80066d8 <__multiply+0x10c>
 800670c:	9a01      	ldr	r2, [sp, #4]
 800670e:	50a9      	str	r1, [r5, r2]
 8006710:	3504      	adds	r5, #4
 8006712:	e799      	b.n	8006648 <__multiply+0x7c>
 8006714:	3e01      	subs	r6, #1
 8006716:	e79b      	b.n	8006650 <__multiply+0x84>
 8006718:	0800778f 	.word	0x0800778f
 800671c:	080077a0 	.word	0x080077a0

08006720 <__pow5mult>:
 8006720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006724:	4615      	mov	r5, r2
 8006726:	f012 0203 	ands.w	r2, r2, #3
 800672a:	4606      	mov	r6, r0
 800672c:	460f      	mov	r7, r1
 800672e:	d007      	beq.n	8006740 <__pow5mult+0x20>
 8006730:	4c25      	ldr	r4, [pc, #148]	; (80067c8 <__pow5mult+0xa8>)
 8006732:	3a01      	subs	r2, #1
 8006734:	2300      	movs	r3, #0
 8006736:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800673a:	f7ff fe9d 	bl	8006478 <__multadd>
 800673e:	4607      	mov	r7, r0
 8006740:	10ad      	asrs	r5, r5, #2
 8006742:	d03d      	beq.n	80067c0 <__pow5mult+0xa0>
 8006744:	69f4      	ldr	r4, [r6, #28]
 8006746:	b97c      	cbnz	r4, 8006768 <__pow5mult+0x48>
 8006748:	2010      	movs	r0, #16
 800674a:	f7ff fd7f 	bl	800624c <malloc>
 800674e:	4602      	mov	r2, r0
 8006750:	61f0      	str	r0, [r6, #28]
 8006752:	b928      	cbnz	r0, 8006760 <__pow5mult+0x40>
 8006754:	4b1d      	ldr	r3, [pc, #116]	; (80067cc <__pow5mult+0xac>)
 8006756:	481e      	ldr	r0, [pc, #120]	; (80067d0 <__pow5mult+0xb0>)
 8006758:	f240 11b3 	movw	r1, #435	; 0x1b3
 800675c:	f000 faf6 	bl	8006d4c <__assert_func>
 8006760:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006764:	6004      	str	r4, [r0, #0]
 8006766:	60c4      	str	r4, [r0, #12]
 8006768:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800676c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006770:	b94c      	cbnz	r4, 8006786 <__pow5mult+0x66>
 8006772:	f240 2171 	movw	r1, #625	; 0x271
 8006776:	4630      	mov	r0, r6
 8006778:	f7ff ff12 	bl	80065a0 <__i2b>
 800677c:	2300      	movs	r3, #0
 800677e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006782:	4604      	mov	r4, r0
 8006784:	6003      	str	r3, [r0, #0]
 8006786:	f04f 0900 	mov.w	r9, #0
 800678a:	07eb      	lsls	r3, r5, #31
 800678c:	d50a      	bpl.n	80067a4 <__pow5mult+0x84>
 800678e:	4639      	mov	r1, r7
 8006790:	4622      	mov	r2, r4
 8006792:	4630      	mov	r0, r6
 8006794:	f7ff ff1a 	bl	80065cc <__multiply>
 8006798:	4639      	mov	r1, r7
 800679a:	4680      	mov	r8, r0
 800679c:	4630      	mov	r0, r6
 800679e:	f7ff fe49 	bl	8006434 <_Bfree>
 80067a2:	4647      	mov	r7, r8
 80067a4:	106d      	asrs	r5, r5, #1
 80067a6:	d00b      	beq.n	80067c0 <__pow5mult+0xa0>
 80067a8:	6820      	ldr	r0, [r4, #0]
 80067aa:	b938      	cbnz	r0, 80067bc <__pow5mult+0x9c>
 80067ac:	4622      	mov	r2, r4
 80067ae:	4621      	mov	r1, r4
 80067b0:	4630      	mov	r0, r6
 80067b2:	f7ff ff0b 	bl	80065cc <__multiply>
 80067b6:	6020      	str	r0, [r4, #0]
 80067b8:	f8c0 9000 	str.w	r9, [r0]
 80067bc:	4604      	mov	r4, r0
 80067be:	e7e4      	b.n	800678a <__pow5mult+0x6a>
 80067c0:	4638      	mov	r0, r7
 80067c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067c6:	bf00      	nop
 80067c8:	080078f0 	.word	0x080078f0
 80067cc:	08007720 	.word	0x08007720
 80067d0:	080077a0 	.word	0x080077a0

080067d4 <__lshift>:
 80067d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067d8:	460c      	mov	r4, r1
 80067da:	6849      	ldr	r1, [r1, #4]
 80067dc:	6923      	ldr	r3, [r4, #16]
 80067de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80067e2:	68a3      	ldr	r3, [r4, #8]
 80067e4:	4607      	mov	r7, r0
 80067e6:	4691      	mov	r9, r2
 80067e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80067ec:	f108 0601 	add.w	r6, r8, #1
 80067f0:	42b3      	cmp	r3, r6
 80067f2:	db0b      	blt.n	800680c <__lshift+0x38>
 80067f4:	4638      	mov	r0, r7
 80067f6:	f7ff fddd 	bl	80063b4 <_Balloc>
 80067fa:	4605      	mov	r5, r0
 80067fc:	b948      	cbnz	r0, 8006812 <__lshift+0x3e>
 80067fe:	4602      	mov	r2, r0
 8006800:	4b28      	ldr	r3, [pc, #160]	; (80068a4 <__lshift+0xd0>)
 8006802:	4829      	ldr	r0, [pc, #164]	; (80068a8 <__lshift+0xd4>)
 8006804:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006808:	f000 faa0 	bl	8006d4c <__assert_func>
 800680c:	3101      	adds	r1, #1
 800680e:	005b      	lsls	r3, r3, #1
 8006810:	e7ee      	b.n	80067f0 <__lshift+0x1c>
 8006812:	2300      	movs	r3, #0
 8006814:	f100 0114 	add.w	r1, r0, #20
 8006818:	f100 0210 	add.w	r2, r0, #16
 800681c:	4618      	mov	r0, r3
 800681e:	4553      	cmp	r3, sl
 8006820:	db33      	blt.n	800688a <__lshift+0xb6>
 8006822:	6920      	ldr	r0, [r4, #16]
 8006824:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006828:	f104 0314 	add.w	r3, r4, #20
 800682c:	f019 091f 	ands.w	r9, r9, #31
 8006830:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006834:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006838:	d02b      	beq.n	8006892 <__lshift+0xbe>
 800683a:	f1c9 0e20 	rsb	lr, r9, #32
 800683e:	468a      	mov	sl, r1
 8006840:	2200      	movs	r2, #0
 8006842:	6818      	ldr	r0, [r3, #0]
 8006844:	fa00 f009 	lsl.w	r0, r0, r9
 8006848:	4310      	orrs	r0, r2
 800684a:	f84a 0b04 	str.w	r0, [sl], #4
 800684e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006852:	459c      	cmp	ip, r3
 8006854:	fa22 f20e 	lsr.w	r2, r2, lr
 8006858:	d8f3      	bhi.n	8006842 <__lshift+0x6e>
 800685a:	ebac 0304 	sub.w	r3, ip, r4
 800685e:	3b15      	subs	r3, #21
 8006860:	f023 0303 	bic.w	r3, r3, #3
 8006864:	3304      	adds	r3, #4
 8006866:	f104 0015 	add.w	r0, r4, #21
 800686a:	4584      	cmp	ip, r0
 800686c:	bf38      	it	cc
 800686e:	2304      	movcc	r3, #4
 8006870:	50ca      	str	r2, [r1, r3]
 8006872:	b10a      	cbz	r2, 8006878 <__lshift+0xa4>
 8006874:	f108 0602 	add.w	r6, r8, #2
 8006878:	3e01      	subs	r6, #1
 800687a:	4638      	mov	r0, r7
 800687c:	612e      	str	r6, [r5, #16]
 800687e:	4621      	mov	r1, r4
 8006880:	f7ff fdd8 	bl	8006434 <_Bfree>
 8006884:	4628      	mov	r0, r5
 8006886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800688a:	f842 0f04 	str.w	r0, [r2, #4]!
 800688e:	3301      	adds	r3, #1
 8006890:	e7c5      	b.n	800681e <__lshift+0x4a>
 8006892:	3904      	subs	r1, #4
 8006894:	f853 2b04 	ldr.w	r2, [r3], #4
 8006898:	f841 2f04 	str.w	r2, [r1, #4]!
 800689c:	459c      	cmp	ip, r3
 800689e:	d8f9      	bhi.n	8006894 <__lshift+0xc0>
 80068a0:	e7ea      	b.n	8006878 <__lshift+0xa4>
 80068a2:	bf00      	nop
 80068a4:	0800778f 	.word	0x0800778f
 80068a8:	080077a0 	.word	0x080077a0

080068ac <__mcmp>:
 80068ac:	b530      	push	{r4, r5, lr}
 80068ae:	6902      	ldr	r2, [r0, #16]
 80068b0:	690c      	ldr	r4, [r1, #16]
 80068b2:	1b12      	subs	r2, r2, r4
 80068b4:	d10e      	bne.n	80068d4 <__mcmp+0x28>
 80068b6:	f100 0314 	add.w	r3, r0, #20
 80068ba:	3114      	adds	r1, #20
 80068bc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80068c0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80068c4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80068c8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80068cc:	42a5      	cmp	r5, r4
 80068ce:	d003      	beq.n	80068d8 <__mcmp+0x2c>
 80068d0:	d305      	bcc.n	80068de <__mcmp+0x32>
 80068d2:	2201      	movs	r2, #1
 80068d4:	4610      	mov	r0, r2
 80068d6:	bd30      	pop	{r4, r5, pc}
 80068d8:	4283      	cmp	r3, r0
 80068da:	d3f3      	bcc.n	80068c4 <__mcmp+0x18>
 80068dc:	e7fa      	b.n	80068d4 <__mcmp+0x28>
 80068de:	f04f 32ff 	mov.w	r2, #4294967295
 80068e2:	e7f7      	b.n	80068d4 <__mcmp+0x28>

080068e4 <__mdiff>:
 80068e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068e8:	460c      	mov	r4, r1
 80068ea:	4606      	mov	r6, r0
 80068ec:	4611      	mov	r1, r2
 80068ee:	4620      	mov	r0, r4
 80068f0:	4690      	mov	r8, r2
 80068f2:	f7ff ffdb 	bl	80068ac <__mcmp>
 80068f6:	1e05      	subs	r5, r0, #0
 80068f8:	d110      	bne.n	800691c <__mdiff+0x38>
 80068fa:	4629      	mov	r1, r5
 80068fc:	4630      	mov	r0, r6
 80068fe:	f7ff fd59 	bl	80063b4 <_Balloc>
 8006902:	b930      	cbnz	r0, 8006912 <__mdiff+0x2e>
 8006904:	4b3a      	ldr	r3, [pc, #232]	; (80069f0 <__mdiff+0x10c>)
 8006906:	4602      	mov	r2, r0
 8006908:	f240 2137 	movw	r1, #567	; 0x237
 800690c:	4839      	ldr	r0, [pc, #228]	; (80069f4 <__mdiff+0x110>)
 800690e:	f000 fa1d 	bl	8006d4c <__assert_func>
 8006912:	2301      	movs	r3, #1
 8006914:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006918:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800691c:	bfa4      	itt	ge
 800691e:	4643      	movge	r3, r8
 8006920:	46a0      	movge	r8, r4
 8006922:	4630      	mov	r0, r6
 8006924:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006928:	bfa6      	itte	ge
 800692a:	461c      	movge	r4, r3
 800692c:	2500      	movge	r5, #0
 800692e:	2501      	movlt	r5, #1
 8006930:	f7ff fd40 	bl	80063b4 <_Balloc>
 8006934:	b920      	cbnz	r0, 8006940 <__mdiff+0x5c>
 8006936:	4b2e      	ldr	r3, [pc, #184]	; (80069f0 <__mdiff+0x10c>)
 8006938:	4602      	mov	r2, r0
 800693a:	f240 2145 	movw	r1, #581	; 0x245
 800693e:	e7e5      	b.n	800690c <__mdiff+0x28>
 8006940:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006944:	6926      	ldr	r6, [r4, #16]
 8006946:	60c5      	str	r5, [r0, #12]
 8006948:	f104 0914 	add.w	r9, r4, #20
 800694c:	f108 0514 	add.w	r5, r8, #20
 8006950:	f100 0e14 	add.w	lr, r0, #20
 8006954:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006958:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800695c:	f108 0210 	add.w	r2, r8, #16
 8006960:	46f2      	mov	sl, lr
 8006962:	2100      	movs	r1, #0
 8006964:	f859 3b04 	ldr.w	r3, [r9], #4
 8006968:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800696c:	fa11 f88b 	uxtah	r8, r1, fp
 8006970:	b299      	uxth	r1, r3
 8006972:	0c1b      	lsrs	r3, r3, #16
 8006974:	eba8 0801 	sub.w	r8, r8, r1
 8006978:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800697c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006980:	fa1f f888 	uxth.w	r8, r8
 8006984:	1419      	asrs	r1, r3, #16
 8006986:	454e      	cmp	r6, r9
 8006988:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800698c:	f84a 3b04 	str.w	r3, [sl], #4
 8006990:	d8e8      	bhi.n	8006964 <__mdiff+0x80>
 8006992:	1b33      	subs	r3, r6, r4
 8006994:	3b15      	subs	r3, #21
 8006996:	f023 0303 	bic.w	r3, r3, #3
 800699a:	3304      	adds	r3, #4
 800699c:	3415      	adds	r4, #21
 800699e:	42a6      	cmp	r6, r4
 80069a0:	bf38      	it	cc
 80069a2:	2304      	movcc	r3, #4
 80069a4:	441d      	add	r5, r3
 80069a6:	4473      	add	r3, lr
 80069a8:	469e      	mov	lr, r3
 80069aa:	462e      	mov	r6, r5
 80069ac:	4566      	cmp	r6, ip
 80069ae:	d30e      	bcc.n	80069ce <__mdiff+0xea>
 80069b0:	f10c 0203 	add.w	r2, ip, #3
 80069b4:	1b52      	subs	r2, r2, r5
 80069b6:	f022 0203 	bic.w	r2, r2, #3
 80069ba:	3d03      	subs	r5, #3
 80069bc:	45ac      	cmp	ip, r5
 80069be:	bf38      	it	cc
 80069c0:	2200      	movcc	r2, #0
 80069c2:	4413      	add	r3, r2
 80069c4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80069c8:	b17a      	cbz	r2, 80069ea <__mdiff+0x106>
 80069ca:	6107      	str	r7, [r0, #16]
 80069cc:	e7a4      	b.n	8006918 <__mdiff+0x34>
 80069ce:	f856 8b04 	ldr.w	r8, [r6], #4
 80069d2:	fa11 f288 	uxtah	r2, r1, r8
 80069d6:	1414      	asrs	r4, r2, #16
 80069d8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80069dc:	b292      	uxth	r2, r2
 80069de:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80069e2:	f84e 2b04 	str.w	r2, [lr], #4
 80069e6:	1421      	asrs	r1, r4, #16
 80069e8:	e7e0      	b.n	80069ac <__mdiff+0xc8>
 80069ea:	3f01      	subs	r7, #1
 80069ec:	e7ea      	b.n	80069c4 <__mdiff+0xe0>
 80069ee:	bf00      	nop
 80069f0:	0800778f 	.word	0x0800778f
 80069f4:	080077a0 	.word	0x080077a0

080069f8 <__d2b>:
 80069f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80069fc:	460f      	mov	r7, r1
 80069fe:	2101      	movs	r1, #1
 8006a00:	ec59 8b10 	vmov	r8, r9, d0
 8006a04:	4616      	mov	r6, r2
 8006a06:	f7ff fcd5 	bl	80063b4 <_Balloc>
 8006a0a:	4604      	mov	r4, r0
 8006a0c:	b930      	cbnz	r0, 8006a1c <__d2b+0x24>
 8006a0e:	4602      	mov	r2, r0
 8006a10:	4b24      	ldr	r3, [pc, #144]	; (8006aa4 <__d2b+0xac>)
 8006a12:	4825      	ldr	r0, [pc, #148]	; (8006aa8 <__d2b+0xb0>)
 8006a14:	f240 310f 	movw	r1, #783	; 0x30f
 8006a18:	f000 f998 	bl	8006d4c <__assert_func>
 8006a1c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006a20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006a24:	bb2d      	cbnz	r5, 8006a72 <__d2b+0x7a>
 8006a26:	9301      	str	r3, [sp, #4]
 8006a28:	f1b8 0300 	subs.w	r3, r8, #0
 8006a2c:	d026      	beq.n	8006a7c <__d2b+0x84>
 8006a2e:	4668      	mov	r0, sp
 8006a30:	9300      	str	r3, [sp, #0]
 8006a32:	f7ff fd87 	bl	8006544 <__lo0bits>
 8006a36:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006a3a:	b1e8      	cbz	r0, 8006a78 <__d2b+0x80>
 8006a3c:	f1c0 0320 	rsb	r3, r0, #32
 8006a40:	fa02 f303 	lsl.w	r3, r2, r3
 8006a44:	430b      	orrs	r3, r1
 8006a46:	40c2      	lsrs	r2, r0
 8006a48:	6163      	str	r3, [r4, #20]
 8006a4a:	9201      	str	r2, [sp, #4]
 8006a4c:	9b01      	ldr	r3, [sp, #4]
 8006a4e:	61a3      	str	r3, [r4, #24]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	bf14      	ite	ne
 8006a54:	2202      	movne	r2, #2
 8006a56:	2201      	moveq	r2, #1
 8006a58:	6122      	str	r2, [r4, #16]
 8006a5a:	b1bd      	cbz	r5, 8006a8c <__d2b+0x94>
 8006a5c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006a60:	4405      	add	r5, r0
 8006a62:	603d      	str	r5, [r7, #0]
 8006a64:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006a68:	6030      	str	r0, [r6, #0]
 8006a6a:	4620      	mov	r0, r4
 8006a6c:	b003      	add	sp, #12
 8006a6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006a72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a76:	e7d6      	b.n	8006a26 <__d2b+0x2e>
 8006a78:	6161      	str	r1, [r4, #20]
 8006a7a:	e7e7      	b.n	8006a4c <__d2b+0x54>
 8006a7c:	a801      	add	r0, sp, #4
 8006a7e:	f7ff fd61 	bl	8006544 <__lo0bits>
 8006a82:	9b01      	ldr	r3, [sp, #4]
 8006a84:	6163      	str	r3, [r4, #20]
 8006a86:	3020      	adds	r0, #32
 8006a88:	2201      	movs	r2, #1
 8006a8a:	e7e5      	b.n	8006a58 <__d2b+0x60>
 8006a8c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006a90:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006a94:	6038      	str	r0, [r7, #0]
 8006a96:	6918      	ldr	r0, [r3, #16]
 8006a98:	f7ff fd34 	bl	8006504 <__hi0bits>
 8006a9c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006aa0:	e7e2      	b.n	8006a68 <__d2b+0x70>
 8006aa2:	bf00      	nop
 8006aa4:	0800778f 	.word	0x0800778f
 8006aa8:	080077a0 	.word	0x080077a0

08006aac <__sflush_r>:
 8006aac:	898a      	ldrh	r2, [r1, #12]
 8006aae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ab2:	4605      	mov	r5, r0
 8006ab4:	0710      	lsls	r0, r2, #28
 8006ab6:	460c      	mov	r4, r1
 8006ab8:	d458      	bmi.n	8006b6c <__sflush_r+0xc0>
 8006aba:	684b      	ldr	r3, [r1, #4]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	dc05      	bgt.n	8006acc <__sflush_r+0x20>
 8006ac0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	dc02      	bgt.n	8006acc <__sflush_r+0x20>
 8006ac6:	2000      	movs	r0, #0
 8006ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006acc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006ace:	2e00      	cmp	r6, #0
 8006ad0:	d0f9      	beq.n	8006ac6 <__sflush_r+0x1a>
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006ad8:	682f      	ldr	r7, [r5, #0]
 8006ada:	6a21      	ldr	r1, [r4, #32]
 8006adc:	602b      	str	r3, [r5, #0]
 8006ade:	d032      	beq.n	8006b46 <__sflush_r+0x9a>
 8006ae0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006ae2:	89a3      	ldrh	r3, [r4, #12]
 8006ae4:	075a      	lsls	r2, r3, #29
 8006ae6:	d505      	bpl.n	8006af4 <__sflush_r+0x48>
 8006ae8:	6863      	ldr	r3, [r4, #4]
 8006aea:	1ac0      	subs	r0, r0, r3
 8006aec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006aee:	b10b      	cbz	r3, 8006af4 <__sflush_r+0x48>
 8006af0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006af2:	1ac0      	subs	r0, r0, r3
 8006af4:	2300      	movs	r3, #0
 8006af6:	4602      	mov	r2, r0
 8006af8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006afa:	6a21      	ldr	r1, [r4, #32]
 8006afc:	4628      	mov	r0, r5
 8006afe:	47b0      	blx	r6
 8006b00:	1c43      	adds	r3, r0, #1
 8006b02:	89a3      	ldrh	r3, [r4, #12]
 8006b04:	d106      	bne.n	8006b14 <__sflush_r+0x68>
 8006b06:	6829      	ldr	r1, [r5, #0]
 8006b08:	291d      	cmp	r1, #29
 8006b0a:	d82b      	bhi.n	8006b64 <__sflush_r+0xb8>
 8006b0c:	4a29      	ldr	r2, [pc, #164]	; (8006bb4 <__sflush_r+0x108>)
 8006b0e:	410a      	asrs	r2, r1
 8006b10:	07d6      	lsls	r6, r2, #31
 8006b12:	d427      	bmi.n	8006b64 <__sflush_r+0xb8>
 8006b14:	2200      	movs	r2, #0
 8006b16:	6062      	str	r2, [r4, #4]
 8006b18:	04d9      	lsls	r1, r3, #19
 8006b1a:	6922      	ldr	r2, [r4, #16]
 8006b1c:	6022      	str	r2, [r4, #0]
 8006b1e:	d504      	bpl.n	8006b2a <__sflush_r+0x7e>
 8006b20:	1c42      	adds	r2, r0, #1
 8006b22:	d101      	bne.n	8006b28 <__sflush_r+0x7c>
 8006b24:	682b      	ldr	r3, [r5, #0]
 8006b26:	b903      	cbnz	r3, 8006b2a <__sflush_r+0x7e>
 8006b28:	6560      	str	r0, [r4, #84]	; 0x54
 8006b2a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b2c:	602f      	str	r7, [r5, #0]
 8006b2e:	2900      	cmp	r1, #0
 8006b30:	d0c9      	beq.n	8006ac6 <__sflush_r+0x1a>
 8006b32:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b36:	4299      	cmp	r1, r3
 8006b38:	d002      	beq.n	8006b40 <__sflush_r+0x94>
 8006b3a:	4628      	mov	r0, r5
 8006b3c:	f7ff fb3a 	bl	80061b4 <_free_r>
 8006b40:	2000      	movs	r0, #0
 8006b42:	6360      	str	r0, [r4, #52]	; 0x34
 8006b44:	e7c0      	b.n	8006ac8 <__sflush_r+0x1c>
 8006b46:	2301      	movs	r3, #1
 8006b48:	4628      	mov	r0, r5
 8006b4a:	47b0      	blx	r6
 8006b4c:	1c41      	adds	r1, r0, #1
 8006b4e:	d1c8      	bne.n	8006ae2 <__sflush_r+0x36>
 8006b50:	682b      	ldr	r3, [r5, #0]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d0c5      	beq.n	8006ae2 <__sflush_r+0x36>
 8006b56:	2b1d      	cmp	r3, #29
 8006b58:	d001      	beq.n	8006b5e <__sflush_r+0xb2>
 8006b5a:	2b16      	cmp	r3, #22
 8006b5c:	d101      	bne.n	8006b62 <__sflush_r+0xb6>
 8006b5e:	602f      	str	r7, [r5, #0]
 8006b60:	e7b1      	b.n	8006ac6 <__sflush_r+0x1a>
 8006b62:	89a3      	ldrh	r3, [r4, #12]
 8006b64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b68:	81a3      	strh	r3, [r4, #12]
 8006b6a:	e7ad      	b.n	8006ac8 <__sflush_r+0x1c>
 8006b6c:	690f      	ldr	r7, [r1, #16]
 8006b6e:	2f00      	cmp	r7, #0
 8006b70:	d0a9      	beq.n	8006ac6 <__sflush_r+0x1a>
 8006b72:	0793      	lsls	r3, r2, #30
 8006b74:	680e      	ldr	r6, [r1, #0]
 8006b76:	bf08      	it	eq
 8006b78:	694b      	ldreq	r3, [r1, #20]
 8006b7a:	600f      	str	r7, [r1, #0]
 8006b7c:	bf18      	it	ne
 8006b7e:	2300      	movne	r3, #0
 8006b80:	eba6 0807 	sub.w	r8, r6, r7
 8006b84:	608b      	str	r3, [r1, #8]
 8006b86:	f1b8 0f00 	cmp.w	r8, #0
 8006b8a:	dd9c      	ble.n	8006ac6 <__sflush_r+0x1a>
 8006b8c:	6a21      	ldr	r1, [r4, #32]
 8006b8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006b90:	4643      	mov	r3, r8
 8006b92:	463a      	mov	r2, r7
 8006b94:	4628      	mov	r0, r5
 8006b96:	47b0      	blx	r6
 8006b98:	2800      	cmp	r0, #0
 8006b9a:	dc06      	bgt.n	8006baa <__sflush_r+0xfe>
 8006b9c:	89a3      	ldrh	r3, [r4, #12]
 8006b9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ba2:	81a3      	strh	r3, [r4, #12]
 8006ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ba8:	e78e      	b.n	8006ac8 <__sflush_r+0x1c>
 8006baa:	4407      	add	r7, r0
 8006bac:	eba8 0800 	sub.w	r8, r8, r0
 8006bb0:	e7e9      	b.n	8006b86 <__sflush_r+0xda>
 8006bb2:	bf00      	nop
 8006bb4:	dfbffffe 	.word	0xdfbffffe

08006bb8 <_fflush_r>:
 8006bb8:	b538      	push	{r3, r4, r5, lr}
 8006bba:	690b      	ldr	r3, [r1, #16]
 8006bbc:	4605      	mov	r5, r0
 8006bbe:	460c      	mov	r4, r1
 8006bc0:	b913      	cbnz	r3, 8006bc8 <_fflush_r+0x10>
 8006bc2:	2500      	movs	r5, #0
 8006bc4:	4628      	mov	r0, r5
 8006bc6:	bd38      	pop	{r3, r4, r5, pc}
 8006bc8:	b118      	cbz	r0, 8006bd2 <_fflush_r+0x1a>
 8006bca:	6a03      	ldr	r3, [r0, #32]
 8006bcc:	b90b      	cbnz	r3, 8006bd2 <_fflush_r+0x1a>
 8006bce:	f7fe fa8f 	bl	80050f0 <__sinit>
 8006bd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d0f3      	beq.n	8006bc2 <_fflush_r+0xa>
 8006bda:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006bdc:	07d0      	lsls	r0, r2, #31
 8006bde:	d404      	bmi.n	8006bea <_fflush_r+0x32>
 8006be0:	0599      	lsls	r1, r3, #22
 8006be2:	d402      	bmi.n	8006bea <_fflush_r+0x32>
 8006be4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006be6:	f7fe fc69 	bl	80054bc <__retarget_lock_acquire_recursive>
 8006bea:	4628      	mov	r0, r5
 8006bec:	4621      	mov	r1, r4
 8006bee:	f7ff ff5d 	bl	8006aac <__sflush_r>
 8006bf2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006bf4:	07da      	lsls	r2, r3, #31
 8006bf6:	4605      	mov	r5, r0
 8006bf8:	d4e4      	bmi.n	8006bc4 <_fflush_r+0xc>
 8006bfa:	89a3      	ldrh	r3, [r4, #12]
 8006bfc:	059b      	lsls	r3, r3, #22
 8006bfe:	d4e1      	bmi.n	8006bc4 <_fflush_r+0xc>
 8006c00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c02:	f7fe fc5c 	bl	80054be <__retarget_lock_release_recursive>
 8006c06:	e7dd      	b.n	8006bc4 <_fflush_r+0xc>

08006c08 <__swhatbuf_r>:
 8006c08:	b570      	push	{r4, r5, r6, lr}
 8006c0a:	460c      	mov	r4, r1
 8006c0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c10:	2900      	cmp	r1, #0
 8006c12:	b096      	sub	sp, #88	; 0x58
 8006c14:	4615      	mov	r5, r2
 8006c16:	461e      	mov	r6, r3
 8006c18:	da0d      	bge.n	8006c36 <__swhatbuf_r+0x2e>
 8006c1a:	89a3      	ldrh	r3, [r4, #12]
 8006c1c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006c20:	f04f 0100 	mov.w	r1, #0
 8006c24:	bf0c      	ite	eq
 8006c26:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006c2a:	2340      	movne	r3, #64	; 0x40
 8006c2c:	2000      	movs	r0, #0
 8006c2e:	6031      	str	r1, [r6, #0]
 8006c30:	602b      	str	r3, [r5, #0]
 8006c32:	b016      	add	sp, #88	; 0x58
 8006c34:	bd70      	pop	{r4, r5, r6, pc}
 8006c36:	466a      	mov	r2, sp
 8006c38:	f000 f848 	bl	8006ccc <_fstat_r>
 8006c3c:	2800      	cmp	r0, #0
 8006c3e:	dbec      	blt.n	8006c1a <__swhatbuf_r+0x12>
 8006c40:	9901      	ldr	r1, [sp, #4]
 8006c42:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006c46:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006c4a:	4259      	negs	r1, r3
 8006c4c:	4159      	adcs	r1, r3
 8006c4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c52:	e7eb      	b.n	8006c2c <__swhatbuf_r+0x24>

08006c54 <__smakebuf_r>:
 8006c54:	898b      	ldrh	r3, [r1, #12]
 8006c56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006c58:	079d      	lsls	r5, r3, #30
 8006c5a:	4606      	mov	r6, r0
 8006c5c:	460c      	mov	r4, r1
 8006c5e:	d507      	bpl.n	8006c70 <__smakebuf_r+0x1c>
 8006c60:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006c64:	6023      	str	r3, [r4, #0]
 8006c66:	6123      	str	r3, [r4, #16]
 8006c68:	2301      	movs	r3, #1
 8006c6a:	6163      	str	r3, [r4, #20]
 8006c6c:	b002      	add	sp, #8
 8006c6e:	bd70      	pop	{r4, r5, r6, pc}
 8006c70:	ab01      	add	r3, sp, #4
 8006c72:	466a      	mov	r2, sp
 8006c74:	f7ff ffc8 	bl	8006c08 <__swhatbuf_r>
 8006c78:	9900      	ldr	r1, [sp, #0]
 8006c7a:	4605      	mov	r5, r0
 8006c7c:	4630      	mov	r0, r6
 8006c7e:	f7ff fb0d 	bl	800629c <_malloc_r>
 8006c82:	b948      	cbnz	r0, 8006c98 <__smakebuf_r+0x44>
 8006c84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c88:	059a      	lsls	r2, r3, #22
 8006c8a:	d4ef      	bmi.n	8006c6c <__smakebuf_r+0x18>
 8006c8c:	f023 0303 	bic.w	r3, r3, #3
 8006c90:	f043 0302 	orr.w	r3, r3, #2
 8006c94:	81a3      	strh	r3, [r4, #12]
 8006c96:	e7e3      	b.n	8006c60 <__smakebuf_r+0xc>
 8006c98:	89a3      	ldrh	r3, [r4, #12]
 8006c9a:	6020      	str	r0, [r4, #0]
 8006c9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ca0:	81a3      	strh	r3, [r4, #12]
 8006ca2:	9b00      	ldr	r3, [sp, #0]
 8006ca4:	6163      	str	r3, [r4, #20]
 8006ca6:	9b01      	ldr	r3, [sp, #4]
 8006ca8:	6120      	str	r0, [r4, #16]
 8006caa:	b15b      	cbz	r3, 8006cc4 <__smakebuf_r+0x70>
 8006cac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006cb0:	4630      	mov	r0, r6
 8006cb2:	f000 f81d 	bl	8006cf0 <_isatty_r>
 8006cb6:	b128      	cbz	r0, 8006cc4 <__smakebuf_r+0x70>
 8006cb8:	89a3      	ldrh	r3, [r4, #12]
 8006cba:	f023 0303 	bic.w	r3, r3, #3
 8006cbe:	f043 0301 	orr.w	r3, r3, #1
 8006cc2:	81a3      	strh	r3, [r4, #12]
 8006cc4:	89a3      	ldrh	r3, [r4, #12]
 8006cc6:	431d      	orrs	r5, r3
 8006cc8:	81a5      	strh	r5, [r4, #12]
 8006cca:	e7cf      	b.n	8006c6c <__smakebuf_r+0x18>

08006ccc <_fstat_r>:
 8006ccc:	b538      	push	{r3, r4, r5, lr}
 8006cce:	4d07      	ldr	r5, [pc, #28]	; (8006cec <_fstat_r+0x20>)
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	4604      	mov	r4, r0
 8006cd4:	4608      	mov	r0, r1
 8006cd6:	4611      	mov	r1, r2
 8006cd8:	602b      	str	r3, [r5, #0]
 8006cda:	f7fb fa02 	bl	80020e2 <_fstat>
 8006cde:	1c43      	adds	r3, r0, #1
 8006ce0:	d102      	bne.n	8006ce8 <_fstat_r+0x1c>
 8006ce2:	682b      	ldr	r3, [r5, #0]
 8006ce4:	b103      	cbz	r3, 8006ce8 <_fstat_r+0x1c>
 8006ce6:	6023      	str	r3, [r4, #0]
 8006ce8:	bd38      	pop	{r3, r4, r5, pc}
 8006cea:	bf00      	nop
 8006cec:	200003ec 	.word	0x200003ec

08006cf0 <_isatty_r>:
 8006cf0:	b538      	push	{r3, r4, r5, lr}
 8006cf2:	4d06      	ldr	r5, [pc, #24]	; (8006d0c <_isatty_r+0x1c>)
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	4604      	mov	r4, r0
 8006cf8:	4608      	mov	r0, r1
 8006cfa:	602b      	str	r3, [r5, #0]
 8006cfc:	f7fb fa01 	bl	8002102 <_isatty>
 8006d00:	1c43      	adds	r3, r0, #1
 8006d02:	d102      	bne.n	8006d0a <_isatty_r+0x1a>
 8006d04:	682b      	ldr	r3, [r5, #0]
 8006d06:	b103      	cbz	r3, 8006d0a <_isatty_r+0x1a>
 8006d08:	6023      	str	r3, [r4, #0]
 8006d0a:	bd38      	pop	{r3, r4, r5, pc}
 8006d0c:	200003ec 	.word	0x200003ec

08006d10 <_sbrk_r>:
 8006d10:	b538      	push	{r3, r4, r5, lr}
 8006d12:	4d06      	ldr	r5, [pc, #24]	; (8006d2c <_sbrk_r+0x1c>)
 8006d14:	2300      	movs	r3, #0
 8006d16:	4604      	mov	r4, r0
 8006d18:	4608      	mov	r0, r1
 8006d1a:	602b      	str	r3, [r5, #0]
 8006d1c:	f7fb fa0a 	bl	8002134 <_sbrk>
 8006d20:	1c43      	adds	r3, r0, #1
 8006d22:	d102      	bne.n	8006d2a <_sbrk_r+0x1a>
 8006d24:	682b      	ldr	r3, [r5, #0]
 8006d26:	b103      	cbz	r3, 8006d2a <_sbrk_r+0x1a>
 8006d28:	6023      	str	r3, [r4, #0]
 8006d2a:	bd38      	pop	{r3, r4, r5, pc}
 8006d2c:	200003ec 	.word	0x200003ec

08006d30 <memcpy>:
 8006d30:	440a      	add	r2, r1
 8006d32:	4291      	cmp	r1, r2
 8006d34:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d38:	d100      	bne.n	8006d3c <memcpy+0xc>
 8006d3a:	4770      	bx	lr
 8006d3c:	b510      	push	{r4, lr}
 8006d3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d46:	4291      	cmp	r1, r2
 8006d48:	d1f9      	bne.n	8006d3e <memcpy+0xe>
 8006d4a:	bd10      	pop	{r4, pc}

08006d4c <__assert_func>:
 8006d4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006d4e:	4614      	mov	r4, r2
 8006d50:	461a      	mov	r2, r3
 8006d52:	4b09      	ldr	r3, [pc, #36]	; (8006d78 <__assert_func+0x2c>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4605      	mov	r5, r0
 8006d58:	68d8      	ldr	r0, [r3, #12]
 8006d5a:	b14c      	cbz	r4, 8006d70 <__assert_func+0x24>
 8006d5c:	4b07      	ldr	r3, [pc, #28]	; (8006d7c <__assert_func+0x30>)
 8006d5e:	9100      	str	r1, [sp, #0]
 8006d60:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006d64:	4906      	ldr	r1, [pc, #24]	; (8006d80 <__assert_func+0x34>)
 8006d66:	462b      	mov	r3, r5
 8006d68:	f000 f844 	bl	8006df4 <fiprintf>
 8006d6c:	f000 f854 	bl	8006e18 <abort>
 8006d70:	4b04      	ldr	r3, [pc, #16]	; (8006d84 <__assert_func+0x38>)
 8006d72:	461c      	mov	r4, r3
 8006d74:	e7f3      	b.n	8006d5e <__assert_func+0x12>
 8006d76:	bf00      	nop
 8006d78:	2000006c 	.word	0x2000006c
 8006d7c:	08007906 	.word	0x08007906
 8006d80:	08007913 	.word	0x08007913
 8006d84:	08007941 	.word	0x08007941

08006d88 <_calloc_r>:
 8006d88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d8a:	fba1 2402 	umull	r2, r4, r1, r2
 8006d8e:	b94c      	cbnz	r4, 8006da4 <_calloc_r+0x1c>
 8006d90:	4611      	mov	r1, r2
 8006d92:	9201      	str	r2, [sp, #4]
 8006d94:	f7ff fa82 	bl	800629c <_malloc_r>
 8006d98:	9a01      	ldr	r2, [sp, #4]
 8006d9a:	4605      	mov	r5, r0
 8006d9c:	b930      	cbnz	r0, 8006dac <_calloc_r+0x24>
 8006d9e:	4628      	mov	r0, r5
 8006da0:	b003      	add	sp, #12
 8006da2:	bd30      	pop	{r4, r5, pc}
 8006da4:	220c      	movs	r2, #12
 8006da6:	6002      	str	r2, [r0, #0]
 8006da8:	2500      	movs	r5, #0
 8006daa:	e7f8      	b.n	8006d9e <_calloc_r+0x16>
 8006dac:	4621      	mov	r1, r4
 8006dae:	f7fe fb09 	bl	80053c4 <memset>
 8006db2:	e7f4      	b.n	8006d9e <_calloc_r+0x16>

08006db4 <__ascii_mbtowc>:
 8006db4:	b082      	sub	sp, #8
 8006db6:	b901      	cbnz	r1, 8006dba <__ascii_mbtowc+0x6>
 8006db8:	a901      	add	r1, sp, #4
 8006dba:	b142      	cbz	r2, 8006dce <__ascii_mbtowc+0x1a>
 8006dbc:	b14b      	cbz	r3, 8006dd2 <__ascii_mbtowc+0x1e>
 8006dbe:	7813      	ldrb	r3, [r2, #0]
 8006dc0:	600b      	str	r3, [r1, #0]
 8006dc2:	7812      	ldrb	r2, [r2, #0]
 8006dc4:	1e10      	subs	r0, r2, #0
 8006dc6:	bf18      	it	ne
 8006dc8:	2001      	movne	r0, #1
 8006dca:	b002      	add	sp, #8
 8006dcc:	4770      	bx	lr
 8006dce:	4610      	mov	r0, r2
 8006dd0:	e7fb      	b.n	8006dca <__ascii_mbtowc+0x16>
 8006dd2:	f06f 0001 	mvn.w	r0, #1
 8006dd6:	e7f8      	b.n	8006dca <__ascii_mbtowc+0x16>

08006dd8 <__ascii_wctomb>:
 8006dd8:	b149      	cbz	r1, 8006dee <__ascii_wctomb+0x16>
 8006dda:	2aff      	cmp	r2, #255	; 0xff
 8006ddc:	bf85      	ittet	hi
 8006dde:	238a      	movhi	r3, #138	; 0x8a
 8006de0:	6003      	strhi	r3, [r0, #0]
 8006de2:	700a      	strbls	r2, [r1, #0]
 8006de4:	f04f 30ff 	movhi.w	r0, #4294967295
 8006de8:	bf98      	it	ls
 8006dea:	2001      	movls	r0, #1
 8006dec:	4770      	bx	lr
 8006dee:	4608      	mov	r0, r1
 8006df0:	4770      	bx	lr
	...

08006df4 <fiprintf>:
 8006df4:	b40e      	push	{r1, r2, r3}
 8006df6:	b503      	push	{r0, r1, lr}
 8006df8:	4601      	mov	r1, r0
 8006dfa:	ab03      	add	r3, sp, #12
 8006dfc:	4805      	ldr	r0, [pc, #20]	; (8006e14 <fiprintf+0x20>)
 8006dfe:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e02:	6800      	ldr	r0, [r0, #0]
 8006e04:	9301      	str	r3, [sp, #4]
 8006e06:	f000 f837 	bl	8006e78 <_vfiprintf_r>
 8006e0a:	b002      	add	sp, #8
 8006e0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e10:	b003      	add	sp, #12
 8006e12:	4770      	bx	lr
 8006e14:	2000006c 	.word	0x2000006c

08006e18 <abort>:
 8006e18:	b508      	push	{r3, lr}
 8006e1a:	2006      	movs	r0, #6
 8006e1c:	f000 f96e 	bl	80070fc <raise>
 8006e20:	2001      	movs	r0, #1
 8006e22:	f7fb f92b 	bl	800207c <_exit>

08006e26 <__sfputc_r>:
 8006e26:	6893      	ldr	r3, [r2, #8]
 8006e28:	3b01      	subs	r3, #1
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	b410      	push	{r4}
 8006e2e:	6093      	str	r3, [r2, #8]
 8006e30:	da08      	bge.n	8006e44 <__sfputc_r+0x1e>
 8006e32:	6994      	ldr	r4, [r2, #24]
 8006e34:	42a3      	cmp	r3, r4
 8006e36:	db01      	blt.n	8006e3c <__sfputc_r+0x16>
 8006e38:	290a      	cmp	r1, #10
 8006e3a:	d103      	bne.n	8006e44 <__sfputc_r+0x1e>
 8006e3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e40:	f7fe ba2b 	b.w	800529a <__swbuf_r>
 8006e44:	6813      	ldr	r3, [r2, #0]
 8006e46:	1c58      	adds	r0, r3, #1
 8006e48:	6010      	str	r0, [r2, #0]
 8006e4a:	7019      	strb	r1, [r3, #0]
 8006e4c:	4608      	mov	r0, r1
 8006e4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e52:	4770      	bx	lr

08006e54 <__sfputs_r>:
 8006e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e56:	4606      	mov	r6, r0
 8006e58:	460f      	mov	r7, r1
 8006e5a:	4614      	mov	r4, r2
 8006e5c:	18d5      	adds	r5, r2, r3
 8006e5e:	42ac      	cmp	r4, r5
 8006e60:	d101      	bne.n	8006e66 <__sfputs_r+0x12>
 8006e62:	2000      	movs	r0, #0
 8006e64:	e007      	b.n	8006e76 <__sfputs_r+0x22>
 8006e66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e6a:	463a      	mov	r2, r7
 8006e6c:	4630      	mov	r0, r6
 8006e6e:	f7ff ffda 	bl	8006e26 <__sfputc_r>
 8006e72:	1c43      	adds	r3, r0, #1
 8006e74:	d1f3      	bne.n	8006e5e <__sfputs_r+0xa>
 8006e76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006e78 <_vfiprintf_r>:
 8006e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e7c:	460d      	mov	r5, r1
 8006e7e:	b09d      	sub	sp, #116	; 0x74
 8006e80:	4614      	mov	r4, r2
 8006e82:	4698      	mov	r8, r3
 8006e84:	4606      	mov	r6, r0
 8006e86:	b118      	cbz	r0, 8006e90 <_vfiprintf_r+0x18>
 8006e88:	6a03      	ldr	r3, [r0, #32]
 8006e8a:	b90b      	cbnz	r3, 8006e90 <_vfiprintf_r+0x18>
 8006e8c:	f7fe f930 	bl	80050f0 <__sinit>
 8006e90:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e92:	07d9      	lsls	r1, r3, #31
 8006e94:	d405      	bmi.n	8006ea2 <_vfiprintf_r+0x2a>
 8006e96:	89ab      	ldrh	r3, [r5, #12]
 8006e98:	059a      	lsls	r2, r3, #22
 8006e9a:	d402      	bmi.n	8006ea2 <_vfiprintf_r+0x2a>
 8006e9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e9e:	f7fe fb0d 	bl	80054bc <__retarget_lock_acquire_recursive>
 8006ea2:	89ab      	ldrh	r3, [r5, #12]
 8006ea4:	071b      	lsls	r3, r3, #28
 8006ea6:	d501      	bpl.n	8006eac <_vfiprintf_r+0x34>
 8006ea8:	692b      	ldr	r3, [r5, #16]
 8006eaa:	b99b      	cbnz	r3, 8006ed4 <_vfiprintf_r+0x5c>
 8006eac:	4629      	mov	r1, r5
 8006eae:	4630      	mov	r0, r6
 8006eb0:	f7fe fa30 	bl	8005314 <__swsetup_r>
 8006eb4:	b170      	cbz	r0, 8006ed4 <_vfiprintf_r+0x5c>
 8006eb6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006eb8:	07dc      	lsls	r4, r3, #31
 8006eba:	d504      	bpl.n	8006ec6 <_vfiprintf_r+0x4e>
 8006ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8006ec0:	b01d      	add	sp, #116	; 0x74
 8006ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ec6:	89ab      	ldrh	r3, [r5, #12]
 8006ec8:	0598      	lsls	r0, r3, #22
 8006eca:	d4f7      	bmi.n	8006ebc <_vfiprintf_r+0x44>
 8006ecc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ece:	f7fe faf6 	bl	80054be <__retarget_lock_release_recursive>
 8006ed2:	e7f3      	b.n	8006ebc <_vfiprintf_r+0x44>
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	9309      	str	r3, [sp, #36]	; 0x24
 8006ed8:	2320      	movs	r3, #32
 8006eda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006ede:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ee2:	2330      	movs	r3, #48	; 0x30
 8006ee4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007098 <_vfiprintf_r+0x220>
 8006ee8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006eec:	f04f 0901 	mov.w	r9, #1
 8006ef0:	4623      	mov	r3, r4
 8006ef2:	469a      	mov	sl, r3
 8006ef4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ef8:	b10a      	cbz	r2, 8006efe <_vfiprintf_r+0x86>
 8006efa:	2a25      	cmp	r2, #37	; 0x25
 8006efc:	d1f9      	bne.n	8006ef2 <_vfiprintf_r+0x7a>
 8006efe:	ebba 0b04 	subs.w	fp, sl, r4
 8006f02:	d00b      	beq.n	8006f1c <_vfiprintf_r+0xa4>
 8006f04:	465b      	mov	r3, fp
 8006f06:	4622      	mov	r2, r4
 8006f08:	4629      	mov	r1, r5
 8006f0a:	4630      	mov	r0, r6
 8006f0c:	f7ff ffa2 	bl	8006e54 <__sfputs_r>
 8006f10:	3001      	adds	r0, #1
 8006f12:	f000 80a9 	beq.w	8007068 <_vfiprintf_r+0x1f0>
 8006f16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f18:	445a      	add	r2, fp
 8006f1a:	9209      	str	r2, [sp, #36]	; 0x24
 8006f1c:	f89a 3000 	ldrb.w	r3, [sl]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	f000 80a1 	beq.w	8007068 <_vfiprintf_r+0x1f0>
 8006f26:	2300      	movs	r3, #0
 8006f28:	f04f 32ff 	mov.w	r2, #4294967295
 8006f2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f30:	f10a 0a01 	add.w	sl, sl, #1
 8006f34:	9304      	str	r3, [sp, #16]
 8006f36:	9307      	str	r3, [sp, #28]
 8006f38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006f3c:	931a      	str	r3, [sp, #104]	; 0x68
 8006f3e:	4654      	mov	r4, sl
 8006f40:	2205      	movs	r2, #5
 8006f42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f46:	4854      	ldr	r0, [pc, #336]	; (8007098 <_vfiprintf_r+0x220>)
 8006f48:	f7f9 f94a 	bl	80001e0 <memchr>
 8006f4c:	9a04      	ldr	r2, [sp, #16]
 8006f4e:	b9d8      	cbnz	r0, 8006f88 <_vfiprintf_r+0x110>
 8006f50:	06d1      	lsls	r1, r2, #27
 8006f52:	bf44      	itt	mi
 8006f54:	2320      	movmi	r3, #32
 8006f56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f5a:	0713      	lsls	r3, r2, #28
 8006f5c:	bf44      	itt	mi
 8006f5e:	232b      	movmi	r3, #43	; 0x2b
 8006f60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f64:	f89a 3000 	ldrb.w	r3, [sl]
 8006f68:	2b2a      	cmp	r3, #42	; 0x2a
 8006f6a:	d015      	beq.n	8006f98 <_vfiprintf_r+0x120>
 8006f6c:	9a07      	ldr	r2, [sp, #28]
 8006f6e:	4654      	mov	r4, sl
 8006f70:	2000      	movs	r0, #0
 8006f72:	f04f 0c0a 	mov.w	ip, #10
 8006f76:	4621      	mov	r1, r4
 8006f78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f7c:	3b30      	subs	r3, #48	; 0x30
 8006f7e:	2b09      	cmp	r3, #9
 8006f80:	d94d      	bls.n	800701e <_vfiprintf_r+0x1a6>
 8006f82:	b1b0      	cbz	r0, 8006fb2 <_vfiprintf_r+0x13a>
 8006f84:	9207      	str	r2, [sp, #28]
 8006f86:	e014      	b.n	8006fb2 <_vfiprintf_r+0x13a>
 8006f88:	eba0 0308 	sub.w	r3, r0, r8
 8006f8c:	fa09 f303 	lsl.w	r3, r9, r3
 8006f90:	4313      	orrs	r3, r2
 8006f92:	9304      	str	r3, [sp, #16]
 8006f94:	46a2      	mov	sl, r4
 8006f96:	e7d2      	b.n	8006f3e <_vfiprintf_r+0xc6>
 8006f98:	9b03      	ldr	r3, [sp, #12]
 8006f9a:	1d19      	adds	r1, r3, #4
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	9103      	str	r1, [sp, #12]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	bfbb      	ittet	lt
 8006fa4:	425b      	neglt	r3, r3
 8006fa6:	f042 0202 	orrlt.w	r2, r2, #2
 8006faa:	9307      	strge	r3, [sp, #28]
 8006fac:	9307      	strlt	r3, [sp, #28]
 8006fae:	bfb8      	it	lt
 8006fb0:	9204      	strlt	r2, [sp, #16]
 8006fb2:	7823      	ldrb	r3, [r4, #0]
 8006fb4:	2b2e      	cmp	r3, #46	; 0x2e
 8006fb6:	d10c      	bne.n	8006fd2 <_vfiprintf_r+0x15a>
 8006fb8:	7863      	ldrb	r3, [r4, #1]
 8006fba:	2b2a      	cmp	r3, #42	; 0x2a
 8006fbc:	d134      	bne.n	8007028 <_vfiprintf_r+0x1b0>
 8006fbe:	9b03      	ldr	r3, [sp, #12]
 8006fc0:	1d1a      	adds	r2, r3, #4
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	9203      	str	r2, [sp, #12]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	bfb8      	it	lt
 8006fca:	f04f 33ff 	movlt.w	r3, #4294967295
 8006fce:	3402      	adds	r4, #2
 8006fd0:	9305      	str	r3, [sp, #20]
 8006fd2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80070a8 <_vfiprintf_r+0x230>
 8006fd6:	7821      	ldrb	r1, [r4, #0]
 8006fd8:	2203      	movs	r2, #3
 8006fda:	4650      	mov	r0, sl
 8006fdc:	f7f9 f900 	bl	80001e0 <memchr>
 8006fe0:	b138      	cbz	r0, 8006ff2 <_vfiprintf_r+0x17a>
 8006fe2:	9b04      	ldr	r3, [sp, #16]
 8006fe4:	eba0 000a 	sub.w	r0, r0, sl
 8006fe8:	2240      	movs	r2, #64	; 0x40
 8006fea:	4082      	lsls	r2, r0
 8006fec:	4313      	orrs	r3, r2
 8006fee:	3401      	adds	r4, #1
 8006ff0:	9304      	str	r3, [sp, #16]
 8006ff2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ff6:	4829      	ldr	r0, [pc, #164]	; (800709c <_vfiprintf_r+0x224>)
 8006ff8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006ffc:	2206      	movs	r2, #6
 8006ffe:	f7f9 f8ef 	bl	80001e0 <memchr>
 8007002:	2800      	cmp	r0, #0
 8007004:	d03f      	beq.n	8007086 <_vfiprintf_r+0x20e>
 8007006:	4b26      	ldr	r3, [pc, #152]	; (80070a0 <_vfiprintf_r+0x228>)
 8007008:	bb1b      	cbnz	r3, 8007052 <_vfiprintf_r+0x1da>
 800700a:	9b03      	ldr	r3, [sp, #12]
 800700c:	3307      	adds	r3, #7
 800700e:	f023 0307 	bic.w	r3, r3, #7
 8007012:	3308      	adds	r3, #8
 8007014:	9303      	str	r3, [sp, #12]
 8007016:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007018:	443b      	add	r3, r7
 800701a:	9309      	str	r3, [sp, #36]	; 0x24
 800701c:	e768      	b.n	8006ef0 <_vfiprintf_r+0x78>
 800701e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007022:	460c      	mov	r4, r1
 8007024:	2001      	movs	r0, #1
 8007026:	e7a6      	b.n	8006f76 <_vfiprintf_r+0xfe>
 8007028:	2300      	movs	r3, #0
 800702a:	3401      	adds	r4, #1
 800702c:	9305      	str	r3, [sp, #20]
 800702e:	4619      	mov	r1, r3
 8007030:	f04f 0c0a 	mov.w	ip, #10
 8007034:	4620      	mov	r0, r4
 8007036:	f810 2b01 	ldrb.w	r2, [r0], #1
 800703a:	3a30      	subs	r2, #48	; 0x30
 800703c:	2a09      	cmp	r2, #9
 800703e:	d903      	bls.n	8007048 <_vfiprintf_r+0x1d0>
 8007040:	2b00      	cmp	r3, #0
 8007042:	d0c6      	beq.n	8006fd2 <_vfiprintf_r+0x15a>
 8007044:	9105      	str	r1, [sp, #20]
 8007046:	e7c4      	b.n	8006fd2 <_vfiprintf_r+0x15a>
 8007048:	fb0c 2101 	mla	r1, ip, r1, r2
 800704c:	4604      	mov	r4, r0
 800704e:	2301      	movs	r3, #1
 8007050:	e7f0      	b.n	8007034 <_vfiprintf_r+0x1bc>
 8007052:	ab03      	add	r3, sp, #12
 8007054:	9300      	str	r3, [sp, #0]
 8007056:	462a      	mov	r2, r5
 8007058:	4b12      	ldr	r3, [pc, #72]	; (80070a4 <_vfiprintf_r+0x22c>)
 800705a:	a904      	add	r1, sp, #16
 800705c:	4630      	mov	r0, r6
 800705e:	f7fd fc07 	bl	8004870 <_printf_float>
 8007062:	4607      	mov	r7, r0
 8007064:	1c78      	adds	r0, r7, #1
 8007066:	d1d6      	bne.n	8007016 <_vfiprintf_r+0x19e>
 8007068:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800706a:	07d9      	lsls	r1, r3, #31
 800706c:	d405      	bmi.n	800707a <_vfiprintf_r+0x202>
 800706e:	89ab      	ldrh	r3, [r5, #12]
 8007070:	059a      	lsls	r2, r3, #22
 8007072:	d402      	bmi.n	800707a <_vfiprintf_r+0x202>
 8007074:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007076:	f7fe fa22 	bl	80054be <__retarget_lock_release_recursive>
 800707a:	89ab      	ldrh	r3, [r5, #12]
 800707c:	065b      	lsls	r3, r3, #25
 800707e:	f53f af1d 	bmi.w	8006ebc <_vfiprintf_r+0x44>
 8007082:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007084:	e71c      	b.n	8006ec0 <_vfiprintf_r+0x48>
 8007086:	ab03      	add	r3, sp, #12
 8007088:	9300      	str	r3, [sp, #0]
 800708a:	462a      	mov	r2, r5
 800708c:	4b05      	ldr	r3, [pc, #20]	; (80070a4 <_vfiprintf_r+0x22c>)
 800708e:	a904      	add	r1, sp, #16
 8007090:	4630      	mov	r0, r6
 8007092:	f7fd fe91 	bl	8004db8 <_printf_i>
 8007096:	e7e4      	b.n	8007062 <_vfiprintf_r+0x1ea>
 8007098:	08007a43 	.word	0x08007a43
 800709c:	08007a4d 	.word	0x08007a4d
 80070a0:	08004871 	.word	0x08004871
 80070a4:	08006e55 	.word	0x08006e55
 80070a8:	08007a49 	.word	0x08007a49

080070ac <_raise_r>:
 80070ac:	291f      	cmp	r1, #31
 80070ae:	b538      	push	{r3, r4, r5, lr}
 80070b0:	4604      	mov	r4, r0
 80070b2:	460d      	mov	r5, r1
 80070b4:	d904      	bls.n	80070c0 <_raise_r+0x14>
 80070b6:	2316      	movs	r3, #22
 80070b8:	6003      	str	r3, [r0, #0]
 80070ba:	f04f 30ff 	mov.w	r0, #4294967295
 80070be:	bd38      	pop	{r3, r4, r5, pc}
 80070c0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80070c2:	b112      	cbz	r2, 80070ca <_raise_r+0x1e>
 80070c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80070c8:	b94b      	cbnz	r3, 80070de <_raise_r+0x32>
 80070ca:	4620      	mov	r0, r4
 80070cc:	f000 f830 	bl	8007130 <_getpid_r>
 80070d0:	462a      	mov	r2, r5
 80070d2:	4601      	mov	r1, r0
 80070d4:	4620      	mov	r0, r4
 80070d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80070da:	f000 b817 	b.w	800710c <_kill_r>
 80070de:	2b01      	cmp	r3, #1
 80070e0:	d00a      	beq.n	80070f8 <_raise_r+0x4c>
 80070e2:	1c59      	adds	r1, r3, #1
 80070e4:	d103      	bne.n	80070ee <_raise_r+0x42>
 80070e6:	2316      	movs	r3, #22
 80070e8:	6003      	str	r3, [r0, #0]
 80070ea:	2001      	movs	r0, #1
 80070ec:	e7e7      	b.n	80070be <_raise_r+0x12>
 80070ee:	2400      	movs	r4, #0
 80070f0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80070f4:	4628      	mov	r0, r5
 80070f6:	4798      	blx	r3
 80070f8:	2000      	movs	r0, #0
 80070fa:	e7e0      	b.n	80070be <_raise_r+0x12>

080070fc <raise>:
 80070fc:	4b02      	ldr	r3, [pc, #8]	; (8007108 <raise+0xc>)
 80070fe:	4601      	mov	r1, r0
 8007100:	6818      	ldr	r0, [r3, #0]
 8007102:	f7ff bfd3 	b.w	80070ac <_raise_r>
 8007106:	bf00      	nop
 8007108:	2000006c 	.word	0x2000006c

0800710c <_kill_r>:
 800710c:	b538      	push	{r3, r4, r5, lr}
 800710e:	4d07      	ldr	r5, [pc, #28]	; (800712c <_kill_r+0x20>)
 8007110:	2300      	movs	r3, #0
 8007112:	4604      	mov	r4, r0
 8007114:	4608      	mov	r0, r1
 8007116:	4611      	mov	r1, r2
 8007118:	602b      	str	r3, [r5, #0]
 800711a:	f7fa ff9f 	bl	800205c <_kill>
 800711e:	1c43      	adds	r3, r0, #1
 8007120:	d102      	bne.n	8007128 <_kill_r+0x1c>
 8007122:	682b      	ldr	r3, [r5, #0]
 8007124:	b103      	cbz	r3, 8007128 <_kill_r+0x1c>
 8007126:	6023      	str	r3, [r4, #0]
 8007128:	bd38      	pop	{r3, r4, r5, pc}
 800712a:	bf00      	nop
 800712c:	200003ec 	.word	0x200003ec

08007130 <_getpid_r>:
 8007130:	f7fa bf8c 	b.w	800204c <_getpid>

08007134 <sqrt>:
 8007134:	b538      	push	{r3, r4, r5, lr}
 8007136:	ed2d 8b02 	vpush	{d8}
 800713a:	ec55 4b10 	vmov	r4, r5, d0
 800713e:	f000 f9d1 	bl	80074e4 <__ieee754_sqrt>
 8007142:	4622      	mov	r2, r4
 8007144:	462b      	mov	r3, r5
 8007146:	4620      	mov	r0, r4
 8007148:	4629      	mov	r1, r5
 800714a:	eeb0 8a40 	vmov.f32	s16, s0
 800714e:	eef0 8a60 	vmov.f32	s17, s1
 8007152:	f7f9 fcf3 	bl	8000b3c <__aeabi_dcmpun>
 8007156:	b990      	cbnz	r0, 800717e <sqrt+0x4a>
 8007158:	2200      	movs	r2, #0
 800715a:	2300      	movs	r3, #0
 800715c:	4620      	mov	r0, r4
 800715e:	4629      	mov	r1, r5
 8007160:	f7f9 fcc4 	bl	8000aec <__aeabi_dcmplt>
 8007164:	b158      	cbz	r0, 800717e <sqrt+0x4a>
 8007166:	f7fe f97f 	bl	8005468 <__errno>
 800716a:	2321      	movs	r3, #33	; 0x21
 800716c:	6003      	str	r3, [r0, #0]
 800716e:	2200      	movs	r2, #0
 8007170:	2300      	movs	r3, #0
 8007172:	4610      	mov	r0, r2
 8007174:	4619      	mov	r1, r3
 8007176:	f7f9 fb71 	bl	800085c <__aeabi_ddiv>
 800717a:	ec41 0b18 	vmov	d8, r0, r1
 800717e:	eeb0 0a48 	vmov.f32	s0, s16
 8007182:	eef0 0a68 	vmov.f32	s1, s17
 8007186:	ecbd 8b02 	vpop	{d8}
 800718a:	bd38      	pop	{r3, r4, r5, pc}
 800718c:	0000      	movs	r0, r0
	...

08007190 <atan>:
 8007190:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007194:	ec55 4b10 	vmov	r4, r5, d0
 8007198:	4bc3      	ldr	r3, [pc, #780]	; (80074a8 <atan+0x318>)
 800719a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800719e:	429e      	cmp	r6, r3
 80071a0:	46ab      	mov	fp, r5
 80071a2:	dd18      	ble.n	80071d6 <atan+0x46>
 80071a4:	4bc1      	ldr	r3, [pc, #772]	; (80074ac <atan+0x31c>)
 80071a6:	429e      	cmp	r6, r3
 80071a8:	dc01      	bgt.n	80071ae <atan+0x1e>
 80071aa:	d109      	bne.n	80071c0 <atan+0x30>
 80071ac:	b144      	cbz	r4, 80071c0 <atan+0x30>
 80071ae:	4622      	mov	r2, r4
 80071b0:	462b      	mov	r3, r5
 80071b2:	4620      	mov	r0, r4
 80071b4:	4629      	mov	r1, r5
 80071b6:	f7f9 f871 	bl	800029c <__adddf3>
 80071ba:	4604      	mov	r4, r0
 80071bc:	460d      	mov	r5, r1
 80071be:	e006      	b.n	80071ce <atan+0x3e>
 80071c0:	f1bb 0f00 	cmp.w	fp, #0
 80071c4:	f300 8131 	bgt.w	800742a <atan+0x29a>
 80071c8:	a59b      	add	r5, pc, #620	; (adr r5, 8007438 <atan+0x2a8>)
 80071ca:	e9d5 4500 	ldrd	r4, r5, [r5]
 80071ce:	ec45 4b10 	vmov	d0, r4, r5
 80071d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071d6:	4bb6      	ldr	r3, [pc, #728]	; (80074b0 <atan+0x320>)
 80071d8:	429e      	cmp	r6, r3
 80071da:	dc14      	bgt.n	8007206 <atan+0x76>
 80071dc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80071e0:	429e      	cmp	r6, r3
 80071e2:	dc0d      	bgt.n	8007200 <atan+0x70>
 80071e4:	a396      	add	r3, pc, #600	; (adr r3, 8007440 <atan+0x2b0>)
 80071e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ea:	ee10 0a10 	vmov	r0, s0
 80071ee:	4629      	mov	r1, r5
 80071f0:	f7f9 f854 	bl	800029c <__adddf3>
 80071f4:	4baf      	ldr	r3, [pc, #700]	; (80074b4 <atan+0x324>)
 80071f6:	2200      	movs	r2, #0
 80071f8:	f7f9 fc96 	bl	8000b28 <__aeabi_dcmpgt>
 80071fc:	2800      	cmp	r0, #0
 80071fe:	d1e6      	bne.n	80071ce <atan+0x3e>
 8007200:	f04f 3aff 	mov.w	sl, #4294967295
 8007204:	e02b      	b.n	800725e <atan+0xce>
 8007206:	f000 f963 	bl	80074d0 <fabs>
 800720a:	4bab      	ldr	r3, [pc, #684]	; (80074b8 <atan+0x328>)
 800720c:	429e      	cmp	r6, r3
 800720e:	ec55 4b10 	vmov	r4, r5, d0
 8007212:	f300 80bf 	bgt.w	8007394 <atan+0x204>
 8007216:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800721a:	429e      	cmp	r6, r3
 800721c:	f300 80a0 	bgt.w	8007360 <atan+0x1d0>
 8007220:	ee10 2a10 	vmov	r2, s0
 8007224:	ee10 0a10 	vmov	r0, s0
 8007228:	462b      	mov	r3, r5
 800722a:	4629      	mov	r1, r5
 800722c:	f7f9 f836 	bl	800029c <__adddf3>
 8007230:	4ba0      	ldr	r3, [pc, #640]	; (80074b4 <atan+0x324>)
 8007232:	2200      	movs	r2, #0
 8007234:	f7f9 f830 	bl	8000298 <__aeabi_dsub>
 8007238:	2200      	movs	r2, #0
 800723a:	4606      	mov	r6, r0
 800723c:	460f      	mov	r7, r1
 800723e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007242:	4620      	mov	r0, r4
 8007244:	4629      	mov	r1, r5
 8007246:	f7f9 f829 	bl	800029c <__adddf3>
 800724a:	4602      	mov	r2, r0
 800724c:	460b      	mov	r3, r1
 800724e:	4630      	mov	r0, r6
 8007250:	4639      	mov	r1, r7
 8007252:	f7f9 fb03 	bl	800085c <__aeabi_ddiv>
 8007256:	f04f 0a00 	mov.w	sl, #0
 800725a:	4604      	mov	r4, r0
 800725c:	460d      	mov	r5, r1
 800725e:	4622      	mov	r2, r4
 8007260:	462b      	mov	r3, r5
 8007262:	4620      	mov	r0, r4
 8007264:	4629      	mov	r1, r5
 8007266:	f7f9 f9cf 	bl	8000608 <__aeabi_dmul>
 800726a:	4602      	mov	r2, r0
 800726c:	460b      	mov	r3, r1
 800726e:	4680      	mov	r8, r0
 8007270:	4689      	mov	r9, r1
 8007272:	f7f9 f9c9 	bl	8000608 <__aeabi_dmul>
 8007276:	a374      	add	r3, pc, #464	; (adr r3, 8007448 <atan+0x2b8>)
 8007278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800727c:	4606      	mov	r6, r0
 800727e:	460f      	mov	r7, r1
 8007280:	f7f9 f9c2 	bl	8000608 <__aeabi_dmul>
 8007284:	a372      	add	r3, pc, #456	; (adr r3, 8007450 <atan+0x2c0>)
 8007286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800728a:	f7f9 f807 	bl	800029c <__adddf3>
 800728e:	4632      	mov	r2, r6
 8007290:	463b      	mov	r3, r7
 8007292:	f7f9 f9b9 	bl	8000608 <__aeabi_dmul>
 8007296:	a370      	add	r3, pc, #448	; (adr r3, 8007458 <atan+0x2c8>)
 8007298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800729c:	f7f8 fffe 	bl	800029c <__adddf3>
 80072a0:	4632      	mov	r2, r6
 80072a2:	463b      	mov	r3, r7
 80072a4:	f7f9 f9b0 	bl	8000608 <__aeabi_dmul>
 80072a8:	a36d      	add	r3, pc, #436	; (adr r3, 8007460 <atan+0x2d0>)
 80072aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ae:	f7f8 fff5 	bl	800029c <__adddf3>
 80072b2:	4632      	mov	r2, r6
 80072b4:	463b      	mov	r3, r7
 80072b6:	f7f9 f9a7 	bl	8000608 <__aeabi_dmul>
 80072ba:	a36b      	add	r3, pc, #428	; (adr r3, 8007468 <atan+0x2d8>)
 80072bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072c0:	f7f8 ffec 	bl	800029c <__adddf3>
 80072c4:	4632      	mov	r2, r6
 80072c6:	463b      	mov	r3, r7
 80072c8:	f7f9 f99e 	bl	8000608 <__aeabi_dmul>
 80072cc:	a368      	add	r3, pc, #416	; (adr r3, 8007470 <atan+0x2e0>)
 80072ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d2:	f7f8 ffe3 	bl	800029c <__adddf3>
 80072d6:	4642      	mov	r2, r8
 80072d8:	464b      	mov	r3, r9
 80072da:	f7f9 f995 	bl	8000608 <__aeabi_dmul>
 80072de:	a366      	add	r3, pc, #408	; (adr r3, 8007478 <atan+0x2e8>)
 80072e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e4:	4680      	mov	r8, r0
 80072e6:	4689      	mov	r9, r1
 80072e8:	4630      	mov	r0, r6
 80072ea:	4639      	mov	r1, r7
 80072ec:	f7f9 f98c 	bl	8000608 <__aeabi_dmul>
 80072f0:	a363      	add	r3, pc, #396	; (adr r3, 8007480 <atan+0x2f0>)
 80072f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072f6:	f7f8 ffcf 	bl	8000298 <__aeabi_dsub>
 80072fa:	4632      	mov	r2, r6
 80072fc:	463b      	mov	r3, r7
 80072fe:	f7f9 f983 	bl	8000608 <__aeabi_dmul>
 8007302:	a361      	add	r3, pc, #388	; (adr r3, 8007488 <atan+0x2f8>)
 8007304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007308:	f7f8 ffc6 	bl	8000298 <__aeabi_dsub>
 800730c:	4632      	mov	r2, r6
 800730e:	463b      	mov	r3, r7
 8007310:	f7f9 f97a 	bl	8000608 <__aeabi_dmul>
 8007314:	a35e      	add	r3, pc, #376	; (adr r3, 8007490 <atan+0x300>)
 8007316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800731a:	f7f8 ffbd 	bl	8000298 <__aeabi_dsub>
 800731e:	4632      	mov	r2, r6
 8007320:	463b      	mov	r3, r7
 8007322:	f7f9 f971 	bl	8000608 <__aeabi_dmul>
 8007326:	a35c      	add	r3, pc, #368	; (adr r3, 8007498 <atan+0x308>)
 8007328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800732c:	f7f8 ffb4 	bl	8000298 <__aeabi_dsub>
 8007330:	4632      	mov	r2, r6
 8007332:	463b      	mov	r3, r7
 8007334:	f7f9 f968 	bl	8000608 <__aeabi_dmul>
 8007338:	4602      	mov	r2, r0
 800733a:	460b      	mov	r3, r1
 800733c:	4640      	mov	r0, r8
 800733e:	4649      	mov	r1, r9
 8007340:	f7f8 ffac 	bl	800029c <__adddf3>
 8007344:	4622      	mov	r2, r4
 8007346:	462b      	mov	r3, r5
 8007348:	f7f9 f95e 	bl	8000608 <__aeabi_dmul>
 800734c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8007350:	4602      	mov	r2, r0
 8007352:	460b      	mov	r3, r1
 8007354:	d14b      	bne.n	80073ee <atan+0x25e>
 8007356:	4620      	mov	r0, r4
 8007358:	4629      	mov	r1, r5
 800735a:	f7f8 ff9d 	bl	8000298 <__aeabi_dsub>
 800735e:	e72c      	b.n	80071ba <atan+0x2a>
 8007360:	ee10 0a10 	vmov	r0, s0
 8007364:	4b53      	ldr	r3, [pc, #332]	; (80074b4 <atan+0x324>)
 8007366:	2200      	movs	r2, #0
 8007368:	4629      	mov	r1, r5
 800736a:	f7f8 ff95 	bl	8000298 <__aeabi_dsub>
 800736e:	4b51      	ldr	r3, [pc, #324]	; (80074b4 <atan+0x324>)
 8007370:	4606      	mov	r6, r0
 8007372:	460f      	mov	r7, r1
 8007374:	2200      	movs	r2, #0
 8007376:	4620      	mov	r0, r4
 8007378:	4629      	mov	r1, r5
 800737a:	f7f8 ff8f 	bl	800029c <__adddf3>
 800737e:	4602      	mov	r2, r0
 8007380:	460b      	mov	r3, r1
 8007382:	4630      	mov	r0, r6
 8007384:	4639      	mov	r1, r7
 8007386:	f7f9 fa69 	bl	800085c <__aeabi_ddiv>
 800738a:	f04f 0a01 	mov.w	sl, #1
 800738e:	4604      	mov	r4, r0
 8007390:	460d      	mov	r5, r1
 8007392:	e764      	b.n	800725e <atan+0xce>
 8007394:	4b49      	ldr	r3, [pc, #292]	; (80074bc <atan+0x32c>)
 8007396:	429e      	cmp	r6, r3
 8007398:	da1d      	bge.n	80073d6 <atan+0x246>
 800739a:	ee10 0a10 	vmov	r0, s0
 800739e:	4b48      	ldr	r3, [pc, #288]	; (80074c0 <atan+0x330>)
 80073a0:	2200      	movs	r2, #0
 80073a2:	4629      	mov	r1, r5
 80073a4:	f7f8 ff78 	bl	8000298 <__aeabi_dsub>
 80073a8:	4b45      	ldr	r3, [pc, #276]	; (80074c0 <atan+0x330>)
 80073aa:	4606      	mov	r6, r0
 80073ac:	460f      	mov	r7, r1
 80073ae:	2200      	movs	r2, #0
 80073b0:	4620      	mov	r0, r4
 80073b2:	4629      	mov	r1, r5
 80073b4:	f7f9 f928 	bl	8000608 <__aeabi_dmul>
 80073b8:	4b3e      	ldr	r3, [pc, #248]	; (80074b4 <atan+0x324>)
 80073ba:	2200      	movs	r2, #0
 80073bc:	f7f8 ff6e 	bl	800029c <__adddf3>
 80073c0:	4602      	mov	r2, r0
 80073c2:	460b      	mov	r3, r1
 80073c4:	4630      	mov	r0, r6
 80073c6:	4639      	mov	r1, r7
 80073c8:	f7f9 fa48 	bl	800085c <__aeabi_ddiv>
 80073cc:	f04f 0a02 	mov.w	sl, #2
 80073d0:	4604      	mov	r4, r0
 80073d2:	460d      	mov	r5, r1
 80073d4:	e743      	b.n	800725e <atan+0xce>
 80073d6:	462b      	mov	r3, r5
 80073d8:	ee10 2a10 	vmov	r2, s0
 80073dc:	4939      	ldr	r1, [pc, #228]	; (80074c4 <atan+0x334>)
 80073de:	2000      	movs	r0, #0
 80073e0:	f7f9 fa3c 	bl	800085c <__aeabi_ddiv>
 80073e4:	f04f 0a03 	mov.w	sl, #3
 80073e8:	4604      	mov	r4, r0
 80073ea:	460d      	mov	r5, r1
 80073ec:	e737      	b.n	800725e <atan+0xce>
 80073ee:	4b36      	ldr	r3, [pc, #216]	; (80074c8 <atan+0x338>)
 80073f0:	4e36      	ldr	r6, [pc, #216]	; (80074cc <atan+0x33c>)
 80073f2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80073f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073fa:	f7f8 ff4d 	bl	8000298 <__aeabi_dsub>
 80073fe:	4622      	mov	r2, r4
 8007400:	462b      	mov	r3, r5
 8007402:	f7f8 ff49 	bl	8000298 <__aeabi_dsub>
 8007406:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800740a:	4602      	mov	r2, r0
 800740c:	460b      	mov	r3, r1
 800740e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8007412:	f7f8 ff41 	bl	8000298 <__aeabi_dsub>
 8007416:	f1bb 0f00 	cmp.w	fp, #0
 800741a:	4604      	mov	r4, r0
 800741c:	460d      	mov	r5, r1
 800741e:	f6bf aed6 	bge.w	80071ce <atan+0x3e>
 8007422:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007426:	461d      	mov	r5, r3
 8007428:	e6d1      	b.n	80071ce <atan+0x3e>
 800742a:	a51d      	add	r5, pc, #116	; (adr r5, 80074a0 <atan+0x310>)
 800742c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007430:	e6cd      	b.n	80071ce <atan+0x3e>
 8007432:	bf00      	nop
 8007434:	f3af 8000 	nop.w
 8007438:	54442d18 	.word	0x54442d18
 800743c:	bff921fb 	.word	0xbff921fb
 8007440:	8800759c 	.word	0x8800759c
 8007444:	7e37e43c 	.word	0x7e37e43c
 8007448:	e322da11 	.word	0xe322da11
 800744c:	3f90ad3a 	.word	0x3f90ad3a
 8007450:	24760deb 	.word	0x24760deb
 8007454:	3fa97b4b 	.word	0x3fa97b4b
 8007458:	a0d03d51 	.word	0xa0d03d51
 800745c:	3fb10d66 	.word	0x3fb10d66
 8007460:	c54c206e 	.word	0xc54c206e
 8007464:	3fb745cd 	.word	0x3fb745cd
 8007468:	920083ff 	.word	0x920083ff
 800746c:	3fc24924 	.word	0x3fc24924
 8007470:	5555550d 	.word	0x5555550d
 8007474:	3fd55555 	.word	0x3fd55555
 8007478:	2c6a6c2f 	.word	0x2c6a6c2f
 800747c:	bfa2b444 	.word	0xbfa2b444
 8007480:	52defd9a 	.word	0x52defd9a
 8007484:	3fadde2d 	.word	0x3fadde2d
 8007488:	af749a6d 	.word	0xaf749a6d
 800748c:	3fb3b0f2 	.word	0x3fb3b0f2
 8007490:	fe231671 	.word	0xfe231671
 8007494:	3fbc71c6 	.word	0x3fbc71c6
 8007498:	9998ebc4 	.word	0x9998ebc4
 800749c:	3fc99999 	.word	0x3fc99999
 80074a0:	54442d18 	.word	0x54442d18
 80074a4:	3ff921fb 	.word	0x3ff921fb
 80074a8:	440fffff 	.word	0x440fffff
 80074ac:	7ff00000 	.word	0x7ff00000
 80074b0:	3fdbffff 	.word	0x3fdbffff
 80074b4:	3ff00000 	.word	0x3ff00000
 80074b8:	3ff2ffff 	.word	0x3ff2ffff
 80074bc:	40038000 	.word	0x40038000
 80074c0:	3ff80000 	.word	0x3ff80000
 80074c4:	bff00000 	.word	0xbff00000
 80074c8:	08007a78 	.word	0x08007a78
 80074cc:	08007a58 	.word	0x08007a58

080074d0 <fabs>:
 80074d0:	ec51 0b10 	vmov	r0, r1, d0
 80074d4:	ee10 2a10 	vmov	r2, s0
 80074d8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80074dc:	ec43 2b10 	vmov	d0, r2, r3
 80074e0:	4770      	bx	lr
	...

080074e4 <__ieee754_sqrt>:
 80074e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074e8:	ec55 4b10 	vmov	r4, r5, d0
 80074ec:	4e67      	ldr	r6, [pc, #412]	; (800768c <__ieee754_sqrt+0x1a8>)
 80074ee:	43ae      	bics	r6, r5
 80074f0:	ee10 0a10 	vmov	r0, s0
 80074f4:	ee10 2a10 	vmov	r2, s0
 80074f8:	4629      	mov	r1, r5
 80074fa:	462b      	mov	r3, r5
 80074fc:	d10d      	bne.n	800751a <__ieee754_sqrt+0x36>
 80074fe:	f7f9 f883 	bl	8000608 <__aeabi_dmul>
 8007502:	4602      	mov	r2, r0
 8007504:	460b      	mov	r3, r1
 8007506:	4620      	mov	r0, r4
 8007508:	4629      	mov	r1, r5
 800750a:	f7f8 fec7 	bl	800029c <__adddf3>
 800750e:	4604      	mov	r4, r0
 8007510:	460d      	mov	r5, r1
 8007512:	ec45 4b10 	vmov	d0, r4, r5
 8007516:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800751a:	2d00      	cmp	r5, #0
 800751c:	dc0b      	bgt.n	8007536 <__ieee754_sqrt+0x52>
 800751e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007522:	4326      	orrs	r6, r4
 8007524:	d0f5      	beq.n	8007512 <__ieee754_sqrt+0x2e>
 8007526:	b135      	cbz	r5, 8007536 <__ieee754_sqrt+0x52>
 8007528:	f7f8 feb6 	bl	8000298 <__aeabi_dsub>
 800752c:	4602      	mov	r2, r0
 800752e:	460b      	mov	r3, r1
 8007530:	f7f9 f994 	bl	800085c <__aeabi_ddiv>
 8007534:	e7eb      	b.n	800750e <__ieee754_sqrt+0x2a>
 8007536:	1509      	asrs	r1, r1, #20
 8007538:	f000 808d 	beq.w	8007656 <__ieee754_sqrt+0x172>
 800753c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007540:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8007544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007548:	07c9      	lsls	r1, r1, #31
 800754a:	bf5c      	itt	pl
 800754c:	005b      	lslpl	r3, r3, #1
 800754e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8007552:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007556:	bf58      	it	pl
 8007558:	0052      	lslpl	r2, r2, #1
 800755a:	2500      	movs	r5, #0
 800755c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8007560:	1076      	asrs	r6, r6, #1
 8007562:	0052      	lsls	r2, r2, #1
 8007564:	f04f 0e16 	mov.w	lr, #22
 8007568:	46ac      	mov	ip, r5
 800756a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800756e:	eb0c 0001 	add.w	r0, ip, r1
 8007572:	4298      	cmp	r0, r3
 8007574:	bfde      	ittt	le
 8007576:	1a1b      	suble	r3, r3, r0
 8007578:	eb00 0c01 	addle.w	ip, r0, r1
 800757c:	186d      	addle	r5, r5, r1
 800757e:	005b      	lsls	r3, r3, #1
 8007580:	f1be 0e01 	subs.w	lr, lr, #1
 8007584:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8007588:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800758c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8007590:	d1ed      	bne.n	800756e <__ieee754_sqrt+0x8a>
 8007592:	4674      	mov	r4, lr
 8007594:	2720      	movs	r7, #32
 8007596:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800759a:	4563      	cmp	r3, ip
 800759c:	eb01 000e 	add.w	r0, r1, lr
 80075a0:	dc02      	bgt.n	80075a8 <__ieee754_sqrt+0xc4>
 80075a2:	d113      	bne.n	80075cc <__ieee754_sqrt+0xe8>
 80075a4:	4290      	cmp	r0, r2
 80075a6:	d811      	bhi.n	80075cc <__ieee754_sqrt+0xe8>
 80075a8:	2800      	cmp	r0, #0
 80075aa:	eb00 0e01 	add.w	lr, r0, r1
 80075ae:	da57      	bge.n	8007660 <__ieee754_sqrt+0x17c>
 80075b0:	f1be 0f00 	cmp.w	lr, #0
 80075b4:	db54      	blt.n	8007660 <__ieee754_sqrt+0x17c>
 80075b6:	f10c 0801 	add.w	r8, ip, #1
 80075ba:	eba3 030c 	sub.w	r3, r3, ip
 80075be:	4290      	cmp	r0, r2
 80075c0:	bf88      	it	hi
 80075c2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80075c6:	1a12      	subs	r2, r2, r0
 80075c8:	440c      	add	r4, r1
 80075ca:	46c4      	mov	ip, r8
 80075cc:	005b      	lsls	r3, r3, #1
 80075ce:	3f01      	subs	r7, #1
 80075d0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80075d4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80075d8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80075dc:	d1dd      	bne.n	800759a <__ieee754_sqrt+0xb6>
 80075de:	4313      	orrs	r3, r2
 80075e0:	d01b      	beq.n	800761a <__ieee754_sqrt+0x136>
 80075e2:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8007690 <__ieee754_sqrt+0x1ac>
 80075e6:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8007694 <__ieee754_sqrt+0x1b0>
 80075ea:	e9da 0100 	ldrd	r0, r1, [sl]
 80075ee:	e9db 2300 	ldrd	r2, r3, [fp]
 80075f2:	f7f8 fe51 	bl	8000298 <__aeabi_dsub>
 80075f6:	e9da 8900 	ldrd	r8, r9, [sl]
 80075fa:	4602      	mov	r2, r0
 80075fc:	460b      	mov	r3, r1
 80075fe:	4640      	mov	r0, r8
 8007600:	4649      	mov	r1, r9
 8007602:	f7f9 fa7d 	bl	8000b00 <__aeabi_dcmple>
 8007606:	b140      	cbz	r0, 800761a <__ieee754_sqrt+0x136>
 8007608:	f1b4 3fff 	cmp.w	r4, #4294967295
 800760c:	e9da 0100 	ldrd	r0, r1, [sl]
 8007610:	e9db 2300 	ldrd	r2, r3, [fp]
 8007614:	d126      	bne.n	8007664 <__ieee754_sqrt+0x180>
 8007616:	3501      	adds	r5, #1
 8007618:	463c      	mov	r4, r7
 800761a:	106a      	asrs	r2, r5, #1
 800761c:	0863      	lsrs	r3, r4, #1
 800761e:	07e9      	lsls	r1, r5, #31
 8007620:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8007624:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8007628:	bf48      	it	mi
 800762a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800762e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8007632:	461c      	mov	r4, r3
 8007634:	e76d      	b.n	8007512 <__ieee754_sqrt+0x2e>
 8007636:	0ad3      	lsrs	r3, r2, #11
 8007638:	3815      	subs	r0, #21
 800763a:	0552      	lsls	r2, r2, #21
 800763c:	2b00      	cmp	r3, #0
 800763e:	d0fa      	beq.n	8007636 <__ieee754_sqrt+0x152>
 8007640:	02dc      	lsls	r4, r3, #11
 8007642:	d50a      	bpl.n	800765a <__ieee754_sqrt+0x176>
 8007644:	f1c1 0420 	rsb	r4, r1, #32
 8007648:	fa22 f404 	lsr.w	r4, r2, r4
 800764c:	1e4d      	subs	r5, r1, #1
 800764e:	408a      	lsls	r2, r1
 8007650:	4323      	orrs	r3, r4
 8007652:	1b41      	subs	r1, r0, r5
 8007654:	e772      	b.n	800753c <__ieee754_sqrt+0x58>
 8007656:	4608      	mov	r0, r1
 8007658:	e7f0      	b.n	800763c <__ieee754_sqrt+0x158>
 800765a:	005b      	lsls	r3, r3, #1
 800765c:	3101      	adds	r1, #1
 800765e:	e7ef      	b.n	8007640 <__ieee754_sqrt+0x15c>
 8007660:	46e0      	mov	r8, ip
 8007662:	e7aa      	b.n	80075ba <__ieee754_sqrt+0xd6>
 8007664:	f7f8 fe1a 	bl	800029c <__adddf3>
 8007668:	e9da 8900 	ldrd	r8, r9, [sl]
 800766c:	4602      	mov	r2, r0
 800766e:	460b      	mov	r3, r1
 8007670:	4640      	mov	r0, r8
 8007672:	4649      	mov	r1, r9
 8007674:	f7f9 fa3a 	bl	8000aec <__aeabi_dcmplt>
 8007678:	b120      	cbz	r0, 8007684 <__ieee754_sqrt+0x1a0>
 800767a:	1ca0      	adds	r0, r4, #2
 800767c:	bf08      	it	eq
 800767e:	3501      	addeq	r5, #1
 8007680:	3402      	adds	r4, #2
 8007682:	e7ca      	b.n	800761a <__ieee754_sqrt+0x136>
 8007684:	3401      	adds	r4, #1
 8007686:	f024 0401 	bic.w	r4, r4, #1
 800768a:	e7c6      	b.n	800761a <__ieee754_sqrt+0x136>
 800768c:	7ff00000 	.word	0x7ff00000
 8007690:	200001e0 	.word	0x200001e0
 8007694:	200001e8 	.word	0x200001e8

08007698 <_init>:
 8007698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800769a:	bf00      	nop
 800769c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800769e:	bc08      	pop	{r3}
 80076a0:	469e      	mov	lr, r3
 80076a2:	4770      	bx	lr

080076a4 <_fini>:
 80076a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076a6:	bf00      	nop
 80076a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076aa:	bc08      	pop	{r3}
 80076ac:	469e      	mov	lr, r3
 80076ae:	4770      	bx	lr
