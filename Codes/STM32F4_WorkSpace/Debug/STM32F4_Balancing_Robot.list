
STM32F4_Balancing_Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007330  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e8  080074d0  080074d0  000174d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078b8  080078b8  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  080078b8  080078b8  000178b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080078c0  080078c0  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078c0  080078c0  000178c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080078c4  080078c4  000178c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  080078c8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  200001e8  08007ab0  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200003b0  08007ab0  000203b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000993e  00000000  00000000  0002025b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002545  00000000  00000000  00029b99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000af0  00000000  00000000  0002c0e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007f3  00000000  00000000  0002cbd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a12e  00000000  00000000  0002d3c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c7e3  00000000  00000000  000474f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009487e  00000000  00000000  00053cd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003bf0  00000000  00000000  000e8554  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000ec144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080074b8 	.word	0x080074b8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	080074b8 	.word	0x080074b8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_ldivmod>:
 8000bb8:	b97b      	cbnz	r3, 8000bda <__aeabi_ldivmod+0x22>
 8000bba:	b972      	cbnz	r2, 8000bda <__aeabi_ldivmod+0x22>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bfbe      	ittt	lt
 8000bc0:	2000      	movlt	r0, #0
 8000bc2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000bc6:	e006      	blt.n	8000bd6 <__aeabi_ldivmod+0x1e>
 8000bc8:	bf08      	it	eq
 8000bca:	2800      	cmpeq	r0, #0
 8000bcc:	bf1c      	itt	ne
 8000bce:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000bd2:	f04f 30ff 	movne.w	r0, #4294967295
 8000bd6:	f000 b9bb 	b.w	8000f50 <__aeabi_idiv0>
 8000bda:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be2:	2900      	cmp	r1, #0
 8000be4:	db09      	blt.n	8000bfa <__aeabi_ldivmod+0x42>
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	db1a      	blt.n	8000c20 <__aeabi_ldivmod+0x68>
 8000bea:	f000 f84d 	bl	8000c88 <__udivmoddi4>
 8000bee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf6:	b004      	add	sp, #16
 8000bf8:	4770      	bx	lr
 8000bfa:	4240      	negs	r0, r0
 8000bfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	db1b      	blt.n	8000c3c <__aeabi_ldivmod+0x84>
 8000c04:	f000 f840 	bl	8000c88 <__udivmoddi4>
 8000c08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c10:	b004      	add	sp, #16
 8000c12:	4240      	negs	r0, r0
 8000c14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c18:	4252      	negs	r2, r2
 8000c1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c1e:	4770      	bx	lr
 8000c20:	4252      	negs	r2, r2
 8000c22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c26:	f000 f82f 	bl	8000c88 <__udivmoddi4>
 8000c2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c32:	b004      	add	sp, #16
 8000c34:	4240      	negs	r0, r0
 8000c36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3a:	4770      	bx	lr
 8000c3c:	4252      	negs	r2, r2
 8000c3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c42:	f000 f821 	bl	8000c88 <__udivmoddi4>
 8000c46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c4e:	b004      	add	sp, #16
 8000c50:	4252      	negs	r2, r2
 8000c52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b970 	b.w	8000f50 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	460d      	mov	r5, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	460f      	mov	r7, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4694      	mov	ip, r2
 8000c9c:	d965      	bls.n	8000d6a <__udivmoddi4+0xe2>
 8000c9e:	fab2 f382 	clz	r3, r2
 8000ca2:	b143      	cbz	r3, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ca8:	f1c3 0220 	rsb	r2, r3, #32
 8000cac:	409f      	lsls	r7, r3
 8000cae:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb2:	4317      	orrs	r7, r2
 8000cb4:	409c      	lsls	r4, r3
 8000cb6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cba:	fa1f f58c 	uxth.w	r5, ip
 8000cbe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cc2:	0c22      	lsrs	r2, r4, #16
 8000cc4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cc8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ccc:	fb01 f005 	mul.w	r0, r1, r5
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	d90a      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cd8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cdc:	f080 811c 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000ce0:	4290      	cmp	r0, r2
 8000ce2:	f240 8119 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	4462      	add	r2, ip
 8000cea:	1a12      	subs	r2, r2, r0
 8000cec:	b2a4      	uxth	r4, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cfa:	fb00 f505 	mul.w	r5, r0, r5
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	d90a      	bls.n	8000d18 <__udivmoddi4+0x90>
 8000d02:	eb1c 0404 	adds.w	r4, ip, r4
 8000d06:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d0a:	f080 8107 	bcs.w	8000f1c <__udivmoddi4+0x294>
 8000d0e:	42a5      	cmp	r5, r4
 8000d10:	f240 8104 	bls.w	8000f1c <__udivmoddi4+0x294>
 8000d14:	4464      	add	r4, ip
 8000d16:	3802      	subs	r0, #2
 8000d18:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1c:	1b64      	subs	r4, r4, r5
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11e      	cbz	r6, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40dc      	lsrs	r4, r3
 8000d24:	2300      	movs	r3, #0
 8000d26:	e9c6 4300 	strd	r4, r3, [r6]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0xbc>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80ed 	beq.w	8000f12 <__udivmoddi4+0x28a>
 8000d38:	2100      	movs	r1, #0
 8000d3a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d44:	fab3 f183 	clz	r1, r3
 8000d48:	2900      	cmp	r1, #0
 8000d4a:	d149      	bne.n	8000de0 <__udivmoddi4+0x158>
 8000d4c:	42ab      	cmp	r3, r5
 8000d4e:	d302      	bcc.n	8000d56 <__udivmoddi4+0xce>
 8000d50:	4282      	cmp	r2, r0
 8000d52:	f200 80f8 	bhi.w	8000f46 <__udivmoddi4+0x2be>
 8000d56:	1a84      	subs	r4, r0, r2
 8000d58:	eb65 0203 	sbc.w	r2, r5, r3
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	4617      	mov	r7, r2
 8000d60:	2e00      	cmp	r6, #0
 8000d62:	d0e2      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	e9c6 4700 	strd	r4, r7, [r6]
 8000d68:	e7df      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d6a:	b902      	cbnz	r2, 8000d6e <__udivmoddi4+0xe6>
 8000d6c:	deff      	udf	#255	; 0xff
 8000d6e:	fab2 f382 	clz	r3, r2
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f040 8090 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d78:	1a8a      	subs	r2, r1, r2
 8000d7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d7e:	fa1f fe8c 	uxth.w	lr, ip
 8000d82:	2101      	movs	r1, #1
 8000d84:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d88:	fb07 2015 	mls	r0, r7, r5, r2
 8000d8c:	0c22      	lsrs	r2, r4, #16
 8000d8e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d92:	fb0e f005 	mul.w	r0, lr, r5
 8000d96:	4290      	cmp	r0, r2
 8000d98:	d908      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d9e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4290      	cmp	r0, r2
 8000da6:	f200 80cb 	bhi.w	8000f40 <__udivmoddi4+0x2b8>
 8000daa:	4645      	mov	r5, r8
 8000dac:	1a12      	subs	r2, r2, r0
 8000dae:	b2a4      	uxth	r4, r4
 8000db0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000db4:	fb07 2210 	mls	r2, r7, r0, r2
 8000db8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dbc:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc0:	45a6      	cmp	lr, r4
 8000dc2:	d908      	bls.n	8000dd6 <__udivmoddi4+0x14e>
 8000dc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x14c>
 8000dce:	45a6      	cmp	lr, r4
 8000dd0:	f200 80bb 	bhi.w	8000f4a <__udivmoddi4+0x2c2>
 8000dd4:	4610      	mov	r0, r2
 8000dd6:	eba4 040e 	sub.w	r4, r4, lr
 8000dda:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dde:	e79f      	b.n	8000d20 <__udivmoddi4+0x98>
 8000de0:	f1c1 0720 	rsb	r7, r1, #32
 8000de4:	408b      	lsls	r3, r1
 8000de6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dea:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dee:	fa05 f401 	lsl.w	r4, r5, r1
 8000df2:	fa20 f307 	lsr.w	r3, r0, r7
 8000df6:	40fd      	lsrs	r5, r7
 8000df8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dfc:	4323      	orrs	r3, r4
 8000dfe:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e02:	fa1f fe8c 	uxth.w	lr, ip
 8000e06:	fb09 5518 	mls	r5, r9, r8, r5
 8000e0a:	0c1c      	lsrs	r4, r3, #16
 8000e0c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e10:	fb08 f50e 	mul.w	r5, r8, lr
 8000e14:	42a5      	cmp	r5, r4
 8000e16:	fa02 f201 	lsl.w	r2, r2, r1
 8000e1a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1c 0404 	adds.w	r4, ip, r4
 8000e24:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e28:	f080 8088 	bcs.w	8000f3c <__udivmoddi4+0x2b4>
 8000e2c:	42a5      	cmp	r5, r4
 8000e2e:	f240 8085 	bls.w	8000f3c <__udivmoddi4+0x2b4>
 8000e32:	f1a8 0802 	sub.w	r8, r8, #2
 8000e36:	4464      	add	r4, ip
 8000e38:	1b64      	subs	r4, r4, r5
 8000e3a:	b29d      	uxth	r5, r3
 8000e3c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e40:	fb09 4413 	mls	r4, r9, r3, r4
 8000e44:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e48:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e4c:	45a6      	cmp	lr, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e58:	d26c      	bcs.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5a:	45a6      	cmp	lr, r4
 8000e5c:	d96a      	bls.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5e:	3b02      	subs	r3, #2
 8000e60:	4464      	add	r4, ip
 8000e62:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e66:	fba3 9502 	umull	r9, r5, r3, r2
 8000e6a:	eba4 040e 	sub.w	r4, r4, lr
 8000e6e:	42ac      	cmp	r4, r5
 8000e70:	46c8      	mov	r8, r9
 8000e72:	46ae      	mov	lr, r5
 8000e74:	d356      	bcc.n	8000f24 <__udivmoddi4+0x29c>
 8000e76:	d053      	beq.n	8000f20 <__udivmoddi4+0x298>
 8000e78:	b156      	cbz	r6, 8000e90 <__udivmoddi4+0x208>
 8000e7a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e7e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e82:	fa04 f707 	lsl.w	r7, r4, r7
 8000e86:	40ca      	lsrs	r2, r1
 8000e88:	40cc      	lsrs	r4, r1
 8000e8a:	4317      	orrs	r7, r2
 8000e8c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e90:	4618      	mov	r0, r3
 8000e92:	2100      	movs	r1, #0
 8000e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e98:	f1c3 0120 	rsb	r1, r3, #32
 8000e9c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ea0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ea4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ea8:	409d      	lsls	r5, r3
 8000eaa:	432a      	orrs	r2, r5
 8000eac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb0:	fa1f fe8c 	uxth.w	lr, ip
 8000eb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb8:	fb07 1510 	mls	r5, r7, r0, r1
 8000ebc:	0c11      	lsrs	r1, r2, #16
 8000ebe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ec2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ec6:	428d      	cmp	r5, r1
 8000ec8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ecc:	d908      	bls.n	8000ee0 <__udivmoddi4+0x258>
 8000ece:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ed6:	d22f      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000ed8:	428d      	cmp	r5, r1
 8000eda:	d92d      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000edc:	3802      	subs	r0, #2
 8000ede:	4461      	add	r1, ip
 8000ee0:	1b49      	subs	r1, r1, r5
 8000ee2:	b292      	uxth	r2, r2
 8000ee4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ee8:	fb07 1115 	mls	r1, r7, r5, r1
 8000eec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ef0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ef4:	4291      	cmp	r1, r2
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x282>
 8000ef8:	eb1c 0202 	adds.w	r2, ip, r2
 8000efc:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f00:	d216      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000f02:	4291      	cmp	r1, r2
 8000f04:	d914      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000f06:	3d02      	subs	r5, #2
 8000f08:	4462      	add	r2, ip
 8000f0a:	1a52      	subs	r2, r2, r1
 8000f0c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f10:	e738      	b.n	8000d84 <__udivmoddi4+0xfc>
 8000f12:	4631      	mov	r1, r6
 8000f14:	4630      	mov	r0, r6
 8000f16:	e708      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000f18:	4639      	mov	r1, r7
 8000f1a:	e6e6      	b.n	8000cea <__udivmoddi4+0x62>
 8000f1c:	4610      	mov	r0, r2
 8000f1e:	e6fb      	b.n	8000d18 <__udivmoddi4+0x90>
 8000f20:	4548      	cmp	r0, r9
 8000f22:	d2a9      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f24:	ebb9 0802 	subs.w	r8, r9, r2
 8000f28:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	e7a3      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f30:	4645      	mov	r5, r8
 8000f32:	e7ea      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f34:	462b      	mov	r3, r5
 8000f36:	e794      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f38:	4640      	mov	r0, r8
 8000f3a:	e7d1      	b.n	8000ee0 <__udivmoddi4+0x258>
 8000f3c:	46d0      	mov	r8, sl
 8000f3e:	e77b      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f40:	3d02      	subs	r5, #2
 8000f42:	4462      	add	r2, ip
 8000f44:	e732      	b.n	8000dac <__udivmoddi4+0x124>
 8000f46:	4608      	mov	r0, r1
 8000f48:	e70a      	b.n	8000d60 <__udivmoddi4+0xd8>
 8000f4a:	4464      	add	r4, ip
 8000f4c:	3802      	subs	r0, #2
 8000f4e:	e742      	b.n	8000dd6 <__udivmoddi4+0x14e>

08000f50 <__aeabi_idiv0>:
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop

08000f54 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f043 0201 	orr.w	r2, r3, #1
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	601a      	str	r2, [r3, #0]
}
 8000f68:	bf00      	nop
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr

08000f74 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6a1a      	ldr	r2, [r3, #32]
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	431a      	orrs	r2, r3
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	621a      	str	r2, [r3, #32]
}
 8000f8a:	bf00      	nop
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr

08000f96 <DCmotor_Init>:

#include "DCmotor.h"
#include "stm32f4xx_ll_tim.h"


void DCmotor_Init(void){
 8000f96:	b580      	push	{r7, lr}
 8000f98:	af00      	add	r7, sp, #0
	LL_TIM_EnableCounter(TIM2);
 8000f9a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000f9e:	f7ff ffd9 	bl	8000f54 <LL_TIM_EnableCounter>
	LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH1);
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000fa8:	f7ff ffe4 	bl	8000f74 <LL_TIM_CC_EnableChannel>
	LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH2);
 8000fac:	2110      	movs	r1, #16
 8000fae:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000fb2:	f7ff ffdf 	bl	8000f74 <LL_TIM_CC_EnableChannel>
}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	b083      	sub	sp, #12
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f043 0201 	orr.w	r2, r3, #1
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	601a      	str	r2, [r3, #0]
}
 8000fce:	bf00      	nop
 8000fd0:	370c      	adds	r7, #12
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr

08000fda <LL_I2C_IsActiveFlag_TXE>:
  * @rmtoll SR1          TXE           LL_I2C_IsActiveFlag_TXE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXE(I2C_TypeDef *I2Cx)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	b083      	sub	sp, #12
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_TXE) == (I2C_SR1_TXE));
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	695b      	ldr	r3, [r3, #20]
 8000fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fea:	2b80      	cmp	r3, #128	; 0x80
 8000fec:	bf0c      	ite	eq
 8000fee:	2301      	moveq	r3, #1
 8000ff0:	2300      	movne	r3, #0
 8000ff2:	b2db      	uxtb	r3, r3
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <LL_I2C_IsActiveFlag_BTF>:
  * @rmtoll SR1          BTF           LL_I2C_IsActiveFlag_BTF
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_BTF(I2C_TypeDef *I2Cx)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_BTF) == (I2C_SR1_BTF));
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	695b      	ldr	r3, [r3, #20]
 800100c:	f003 0304 	and.w	r3, r3, #4
 8001010:	2b04      	cmp	r3, #4
 8001012:	bf0c      	ite	eq
 8001014:	2301      	moveq	r3, #1
 8001016:	2300      	movne	r3, #0
 8001018:	b2db      	uxtb	r3, r3
}
 800101a:	4618      	mov	r0, r3
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr

08001026 <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll SR1          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(I2C_TypeDef *I2Cx)
{
 8001026:	b480      	push	{r7}
 8001028:	b083      	sub	sp, #12
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_RXNE) == (I2C_SR1_RXNE));
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	695b      	ldr	r3, [r3, #20]
 8001032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001036:	2b40      	cmp	r3, #64	; 0x40
 8001038:	bf0c      	ite	eq
 800103a:	2301      	moveq	r3, #1
 800103c:	2300      	movne	r3, #0
 800103e:	b2db      	uxtb	r3, r3
}
 8001040:	4618      	mov	r0, r3
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <LL_I2C_IsActiveFlag_SB>:
  * @rmtoll SR1          SB            LL_I2C_IsActiveFlag_SB
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_SB(I2C_TypeDef *I2Cx)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_SB) == (I2C_SR1_SB));
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	695b      	ldr	r3, [r3, #20]
 8001058:	f003 0301 	and.w	r3, r3, #1
 800105c:	2b01      	cmp	r3, #1
 800105e:	bf0c      	ite	eq
 8001060:	2301      	moveq	r3, #1
 8001062:	2300      	movne	r3, #0
 8001064:	b2db      	uxtb	r3, r3
}
 8001066:	4618      	mov	r0, r3
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr

08001072 <LL_I2C_IsActiveFlag_ADDR>:
  * @rmtoll SR1          ADDR          LL_I2C_IsActiveFlag_ADDR
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_ADDR(I2C_TypeDef *I2Cx)
{
 8001072:	b480      	push	{r7}
 8001074:	b083      	sub	sp, #12
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_ADDR) == (I2C_SR1_ADDR));
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	695b      	ldr	r3, [r3, #20]
 800107e:	f003 0302 	and.w	r3, r3, #2
 8001082:	2b02      	cmp	r3, #2
 8001084:	bf0c      	ite	eq
 8001086:	2301      	moveq	r3, #1
 8001088:	2300      	movne	r3, #0
 800108a:	b2db      	uxtb	r3, r3
}
 800108c:	4618      	mov	r0, r3
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <LL_I2C_ClearFlag_ADDR>:
  * @rmtoll SR1          ADDR          LL_I2C_ClearFlag_ADDR
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_ADDR(I2C_TypeDef *I2Cx)
{
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = I2Cx->SR1;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	695b      	ldr	r3, [r3, #20]
 80010a4:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80010a6:	68fb      	ldr	r3, [r7, #12]
  tmpreg = I2Cx->SR2;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	699b      	ldr	r3, [r3, #24]
 80010ac:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80010ae:	68fb      	ldr	r3, [r7, #12]
}
 80010b0:	bf00      	nop
 80010b2:	3714      	adds	r7, #20
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	431a      	orrs	r2, r3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	601a      	str	r2, [r3, #0]
}
 80010d6:	bf00      	nop
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr

080010e2 <LL_I2C_GenerateStartCondition>:
  * @rmtoll CR1          START         LL_I2C_GenerateStartCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStartCondition(I2C_TypeDef *I2Cx)
{
 80010e2:	b480      	push	{r7}
 80010e4:	b083      	sub	sp, #12
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_START);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	601a      	str	r2, [r3, #0]
}
 80010f6:	bf00      	nop
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr

08001102 <LL_I2C_GenerateStopCondition>:
  * @rmtoll CR1          STOP          LL_I2C_GenerateStopCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStopCondition(I2C_TypeDef *I2Cx)
{
 8001102:	b480      	push	{r7}
 8001104:	b083      	sub	sp, #12
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_STOP);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	601a      	str	r2, [r3, #0]
}
 8001116:	bf00      	nop
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr

08001122 <LL_I2C_ReceiveData8>:
  * @rmtoll DR           DR            LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x0 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 8001122:	b480      	push	{r7}
 8001124:	b083      	sub	sp, #12
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->DR, I2C_DR_DR));
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	691b      	ldr	r3, [r3, #16]
 800112e:	b2db      	uxtb	r3, r3
}
 8001130:	4618      	mov	r0, r3
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x0 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	460b      	mov	r3, r1
 8001146:	70fb      	strb	r3, [r7, #3]
  MODIFY_REG(I2Cx->DR, I2C_DR_DR, Data);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	691b      	ldr	r3, [r3, #16]
 800114c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8001150:	78fb      	ldrb	r3, [r7, #3]
 8001152:	431a      	orrs	r2, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	611a      	str	r2, [r3, #16]
}
 8001158:	bf00      	nop
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <MPU6050_Init>:
MPU6050 IMU;

unsigned int curTime, prevTime, dt;


void MPU6050_Init(void){
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0

	LL_I2C_Enable(I2C1);
 8001168:	4821      	ldr	r0, [pc, #132]	; (80011f0 <MPU6050_Init+0x8c>)
 800116a:	f7ff ff26 	bl	8000fba <LL_I2C_Enable>

	LL_I2C_GenerateStartCondition(I2C1);
 800116e:	4820      	ldr	r0, [pc, #128]	; (80011f0 <MPU6050_Init+0x8c>)
 8001170:	f7ff ffb7 	bl	80010e2 <LL_I2C_GenerateStartCondition>
	while(!LL_I2C_IsActiveFlag_SB(I2C1));
 8001174:	bf00      	nop
 8001176:	481e      	ldr	r0, [pc, #120]	; (80011f0 <MPU6050_Init+0x8c>)
 8001178:	f7ff ff68 	bl	800104c <LL_I2C_IsActiveFlag_SB>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d0f9      	beq.n	8001176 <MPU6050_Init+0x12>

	LL_I2C_TransmitData8(I2C1, 0x68 << 1);	// MPU6050 Address(Write Mode)
 8001182:	21d0      	movs	r1, #208	; 0xd0
 8001184:	481a      	ldr	r0, [pc, #104]	; (80011f0 <MPU6050_Init+0x8c>)
 8001186:	f7ff ffd9 	bl	800113c <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_ADDR(I2C1));
 800118a:	bf00      	nop
 800118c:	4818      	ldr	r0, [pc, #96]	; (80011f0 <MPU6050_Init+0x8c>)
 800118e:	f7ff ff70 	bl	8001072 <LL_I2C_IsActiveFlag_ADDR>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d0f9      	beq.n	800118c <MPU6050_Init+0x28>
	while(!LL_I2C_IsActiveFlag_TXE(I2C1));
 8001198:	bf00      	nop
 800119a:	4815      	ldr	r0, [pc, #84]	; (80011f0 <MPU6050_Init+0x8c>)
 800119c:	f7ff ff1d 	bl	8000fda <LL_I2C_IsActiveFlag_TXE>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d0f9      	beq.n	800119a <MPU6050_Init+0x36>
	LL_I2C_ClearFlag_ADDR(I2C1);
 80011a6:	4812      	ldr	r0, [pc, #72]	; (80011f0 <MPU6050_Init+0x8c>)
 80011a8:	f7ff ff76 	bl	8001098 <LL_I2C_ClearFlag_ADDR>

	LL_I2C_TransmitData8(I2C1, 0x6B);		// PWR_MGMT_1 Register
 80011ac:	216b      	movs	r1, #107	; 0x6b
 80011ae:	4810      	ldr	r0, [pc, #64]	; (80011f0 <MPU6050_Init+0x8c>)
 80011b0:	f7ff ffc4 	bl	800113c <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_TXE(I2C1));
 80011b4:	bf00      	nop
 80011b6:	480e      	ldr	r0, [pc, #56]	; (80011f0 <MPU6050_Init+0x8c>)
 80011b8:	f7ff ff0f 	bl	8000fda <LL_I2C_IsActiveFlag_TXE>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d0f9      	beq.n	80011b6 <MPU6050_Init+0x52>

	LL_I2C_TransmitData8(I2C1, 0x00);		// Write 0x00(SLEEP 0)
 80011c2:	2100      	movs	r1, #0
 80011c4:	480a      	ldr	r0, [pc, #40]	; (80011f0 <MPU6050_Init+0x8c>)
 80011c6:	f7ff ffb9 	bl	800113c <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_TXE(I2C1));
 80011ca:	bf00      	nop
 80011cc:	4808      	ldr	r0, [pc, #32]	; (80011f0 <MPU6050_Init+0x8c>)
 80011ce:	f7ff ff04 	bl	8000fda <LL_I2C_IsActiveFlag_TXE>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d0f9      	beq.n	80011cc <MPU6050_Init+0x68>
	while(!LL_I2C_IsActiveFlag_BTF(I2C1));
 80011d8:	bf00      	nop
 80011da:	4805      	ldr	r0, [pc, #20]	; (80011f0 <MPU6050_Init+0x8c>)
 80011dc:	f7ff ff10 	bl	8001000 <LL_I2C_IsActiveFlag_BTF>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d0f9      	beq.n	80011da <MPU6050_Init+0x76>

	LL_I2C_GenerateStopCondition(I2C1);
 80011e6:	4802      	ldr	r0, [pc, #8]	; (80011f0 <MPU6050_Init+0x8c>)
 80011e8:	f7ff ff8b 	bl	8001102 <LL_I2C_GenerateStopCondition>
}
 80011ec:	bf00      	nop
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40005400 	.word	0x40005400

080011f4 <MPU6050_Calibration>:

void MPU6050_Calibration(void){
 80011f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80011f8:	b0a0      	sub	sp, #128	; 0x80
 80011fa:	af00      	add	r7, sp, #0
	IMU.ax_offset = 0;
 80011fc:	4a82      	ldr	r2, [pc, #520]	; (8001408 <MPU6050_Calibration+0x214>)
 80011fe:	2300      	movs	r3, #0
 8001200:	8193      	strh	r3, [r2, #12]
	IMU.ay_offset = 0;
 8001202:	4a81      	ldr	r2, [pc, #516]	; (8001408 <MPU6050_Calibration+0x214>)
 8001204:	2300      	movs	r3, #0
 8001206:	81d3      	strh	r3, [r2, #14]
	IMU.az_offset = 0;
 8001208:	4a7f      	ldr	r2, [pc, #508]	; (8001408 <MPU6050_Calibration+0x214>)
 800120a:	2300      	movs	r3, #0
 800120c:	8213      	strh	r3, [r2, #16]
	IMU.gx_offset = 0;
 800120e:	4a7e      	ldr	r2, [pc, #504]	; (8001408 <MPU6050_Calibration+0x214>)
 8001210:	2300      	movs	r3, #0
 8001212:	8253      	strh	r3, [r2, #18]
	IMU.gy_offset = 0;
 8001214:	4a7c      	ldr	r2, [pc, #496]	; (8001408 <MPU6050_Calibration+0x214>)
 8001216:	2300      	movs	r3, #0
 8001218:	8293      	strh	r3, [r2, #20]
	IMU.gz_offset = 0;
 800121a:	4a7b      	ldr	r2, [pc, #492]	; (8001408 <MPU6050_Calibration+0x214>)
 800121c:	2300      	movs	r3, #0
 800121e:	82d3      	strh	r3, [r2, #22]

	long long ax_offset_sum = 0;
 8001220:	f04f 0200 	mov.w	r2, #0
 8001224:	f04f 0300 	mov.w	r3, #0
 8001228:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	long long ay_offset_sum = 0;
 800122c:	f04f 0200 	mov.w	r2, #0
 8001230:	f04f 0300 	mov.w	r3, #0
 8001234:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	long long az_offset_sum = 0;
 8001238:	f04f 0200 	mov.w	r2, #0
 800123c:	f04f 0300 	mov.w	r3, #0
 8001240:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	long long gx_offset_sum = 0;
 8001244:	f04f 0200 	mov.w	r2, #0
 8001248:	f04f 0300 	mov.w	r3, #0
 800124c:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	long long gy_offset_sum = 0;
 8001250:	f04f 0200 	mov.w	r2, #0
 8001254:	f04f 0300 	mov.w	r3, #0
 8001258:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	long long gz_offset_sum = 0;
 800125c:	f04f 0200 	mov.w	r2, #0
 8001260:	f04f 0300 	mov.w	r3, #0
 8001264:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	for (int i = 0; i < 1000; i++){
 8001268:	2300      	movs	r3, #0
 800126a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800126c:	e075      	b.n	800135a <MPU6050_Calibration+0x166>
		MPU6050_GetAccel();
 800126e:	f000 f937 	bl	80014e0 <MPU6050_GetAccel>
		MPU6050_GetGyro();
 8001272:	f000 f98f 	bl	8001594 <MPU6050_GetGyro>

		ax_offset_sum += IMU.ax;
 8001276:	4b64      	ldr	r3, [pc, #400]	; (8001408 <MPU6050_Calibration+0x214>)
 8001278:	f9b3 3000 	ldrsh.w	r3, [r3]
 800127c:	b21b      	sxth	r3, r3
 800127e:	17da      	asrs	r2, r3, #31
 8001280:	643b      	str	r3, [r7, #64]	; 0x40
 8001282:	647a      	str	r2, [r7, #68]	; 0x44
 8001284:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8001288:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800128a:	1851      	adds	r1, r2, r1
 800128c:	6239      	str	r1, [r7, #32]
 800128e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001290:	414b      	adcs	r3, r1
 8001292:	627b      	str	r3, [r7, #36]	; 0x24
 8001294:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001298:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		ay_offset_sum += IMU.ay;
 800129c:	4b5a      	ldr	r3, [pc, #360]	; (8001408 <MPU6050_Calibration+0x214>)
 800129e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80012a2:	b21b      	sxth	r3, r3
 80012a4:	17da      	asrs	r2, r3, #31
 80012a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80012a8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80012aa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80012ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80012b0:	1851      	adds	r1, r2, r1
 80012b2:	61b9      	str	r1, [r7, #24]
 80012b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80012b6:	414b      	adcs	r3, r1
 80012b8:	61fb      	str	r3, [r7, #28]
 80012ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80012be:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
		az_offset_sum += IMU.az + 16384;
 80012c2:	4b51      	ldr	r3, [pc, #324]	; (8001408 <MPU6050_Calibration+0x214>)
 80012c4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80012c8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80012cc:	17da      	asrs	r2, r3, #31
 80012ce:	633b      	str	r3, [r7, #48]	; 0x30
 80012d0:	637a      	str	r2, [r7, #52]	; 0x34
 80012d2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80012d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80012d8:	1851      	adds	r1, r2, r1
 80012da:	6139      	str	r1, [r7, #16]
 80012dc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80012de:	414b      	adcs	r3, r1
 80012e0:	617b      	str	r3, [r7, #20]
 80012e2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80012e6:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
		gx_offset_sum += IMU.gx;
 80012ea:	4b47      	ldr	r3, [pc, #284]	; (8001408 <MPU6050_Calibration+0x214>)
 80012ec:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80012f0:	b21b      	sxth	r3, r3
 80012f2:	17da      	asrs	r2, r3, #31
 80012f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80012f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80012f8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80012fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80012fe:	1851      	adds	r1, r2, r1
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001304:	414b      	adcs	r3, r1
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800130c:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
		gy_offset_sum += IMU.gy;
 8001310:	4b3d      	ldr	r3, [pc, #244]	; (8001408 <MPU6050_Calibration+0x214>)
 8001312:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001316:	b21b      	sxth	r3, r3
 8001318:	17da      	asrs	r2, r3, #31
 800131a:	469a      	mov	sl, r3
 800131c:	4693      	mov	fp, r2
 800131e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001322:	eb12 010a 	adds.w	r1, r2, sl
 8001326:	6039      	str	r1, [r7, #0]
 8001328:	eb43 030b 	adc.w	r3, r3, fp
 800132c:	607b      	str	r3, [r7, #4]
 800132e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001332:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
		gz_offset_sum += IMU.gz;
 8001336:	4b34      	ldr	r3, [pc, #208]	; (8001408 <MPU6050_Calibration+0x214>)
 8001338:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800133c:	b21b      	sxth	r3, r3
 800133e:	17da      	asrs	r2, r3, #31
 8001340:	461c      	mov	r4, r3
 8001342:	4615      	mov	r5, r2
 8001344:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001348:	eb12 0804 	adds.w	r8, r2, r4
 800134c:	eb43 0905 	adc.w	r9, r3, r5
 8001350:	e9c7 8914 	strd	r8, r9, [r7, #80]	; 0x50
	for (int i = 0; i < 1000; i++){
 8001354:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001356:	3301      	adds	r3, #1
 8001358:	64fb      	str	r3, [r7, #76]	; 0x4c
 800135a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800135c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001360:	db85      	blt.n	800126e <MPU6050_Calibration+0x7a>
	}

	IMU.ax_offset = ax_offset_sum / 1000;
 8001362:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001366:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800136a:	f04f 0300 	mov.w	r3, #0
 800136e:	f7ff fc23 	bl	8000bb8 <__aeabi_ldivmod>
 8001372:	4602      	mov	r2, r0
 8001374:	460b      	mov	r3, r1
 8001376:	b212      	sxth	r2, r2
 8001378:	4b23      	ldr	r3, [pc, #140]	; (8001408 <MPU6050_Calibration+0x214>)
 800137a:	819a      	strh	r2, [r3, #12]
	IMU.ay_offset = ay_offset_sum / 1000;
 800137c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001380:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001384:	f04f 0300 	mov.w	r3, #0
 8001388:	f7ff fc16 	bl	8000bb8 <__aeabi_ldivmod>
 800138c:	4602      	mov	r2, r0
 800138e:	460b      	mov	r3, r1
 8001390:	b212      	sxth	r2, r2
 8001392:	4b1d      	ldr	r3, [pc, #116]	; (8001408 <MPU6050_Calibration+0x214>)
 8001394:	81da      	strh	r2, [r3, #14]
	IMU.az_offset = az_offset_sum / 1000;
 8001396:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800139a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800139e:	f04f 0300 	mov.w	r3, #0
 80013a2:	f7ff fc09 	bl	8000bb8 <__aeabi_ldivmod>
 80013a6:	4602      	mov	r2, r0
 80013a8:	460b      	mov	r3, r1
 80013aa:	b212      	sxth	r2, r2
 80013ac:	4b16      	ldr	r3, [pc, #88]	; (8001408 <MPU6050_Calibration+0x214>)
 80013ae:	821a      	strh	r2, [r3, #16]
	IMU.gx_offset = gx_offset_sum / 1000;
 80013b0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80013b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013b8:	f04f 0300 	mov.w	r3, #0
 80013bc:	f7ff fbfc 	bl	8000bb8 <__aeabi_ldivmod>
 80013c0:	4602      	mov	r2, r0
 80013c2:	460b      	mov	r3, r1
 80013c4:	b212      	sxth	r2, r2
 80013c6:	4b10      	ldr	r3, [pc, #64]	; (8001408 <MPU6050_Calibration+0x214>)
 80013c8:	825a      	strh	r2, [r3, #18]
	IMU.gy_offset = gy_offset_sum / 1000;
 80013ca:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80013ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013d2:	f04f 0300 	mov.w	r3, #0
 80013d6:	f7ff fbef 	bl	8000bb8 <__aeabi_ldivmod>
 80013da:	4602      	mov	r2, r0
 80013dc:	460b      	mov	r3, r1
 80013de:	b212      	sxth	r2, r2
 80013e0:	4b09      	ldr	r3, [pc, #36]	; (8001408 <MPU6050_Calibration+0x214>)
 80013e2:	829a      	strh	r2, [r3, #20]
	IMU.gz_offset = gz_offset_sum / 1000;
 80013e4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80013e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013ec:	f04f 0300 	mov.w	r3, #0
 80013f0:	f7ff fbe2 	bl	8000bb8 <__aeabi_ldivmod>
 80013f4:	4602      	mov	r2, r0
 80013f6:	460b      	mov	r3, r1
 80013f8:	b212      	sxth	r2, r2
 80013fa:	4b03      	ldr	r3, [pc, #12]	; (8001408 <MPU6050_Calibration+0x214>)
 80013fc:	82da      	strh	r2, [r3, #22]
}
 80013fe:	bf00      	nop
 8001400:	3780      	adds	r7, #128	; 0x80
 8001402:	46bd      	mov	sp, r7
 8001404:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001408:	20000208 	.word	0x20000208

0800140c <MPU6050_ReceiveData>:
	while(!LL_I2C_IsActiveFlag_BTF(I2C1));

	LL_I2C_GenerateStopCondition(I2C1);
}

unsigned char MPU6050_ReceiveData(unsigned char Address){
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	71fb      	strb	r3, [r7, #7]

	LL_I2C_GenerateStartCondition(I2C1);
 8001416:	4831      	ldr	r0, [pc, #196]	; (80014dc <MPU6050_ReceiveData+0xd0>)
 8001418:	f7ff fe63 	bl	80010e2 <LL_I2C_GenerateStartCondition>
	while(!LL_I2C_IsActiveFlag_SB(I2C1));
 800141c:	bf00      	nop
 800141e:	482f      	ldr	r0, [pc, #188]	; (80014dc <MPU6050_ReceiveData+0xd0>)
 8001420:	f7ff fe14 	bl	800104c <LL_I2C_IsActiveFlag_SB>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d0f9      	beq.n	800141e <MPU6050_ReceiveData+0x12>

	LL_I2C_TransmitData8(I2C1, 0x68 << 1);
 800142a:	21d0      	movs	r1, #208	; 0xd0
 800142c:	482b      	ldr	r0, [pc, #172]	; (80014dc <MPU6050_ReceiveData+0xd0>)
 800142e:	f7ff fe85 	bl	800113c <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_ADDR(I2C1));
 8001432:	bf00      	nop
 8001434:	4829      	ldr	r0, [pc, #164]	; (80014dc <MPU6050_ReceiveData+0xd0>)
 8001436:	f7ff fe1c 	bl	8001072 <LL_I2C_IsActiveFlag_ADDR>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d0f9      	beq.n	8001434 <MPU6050_ReceiveData+0x28>
	while(!LL_I2C_IsActiveFlag_TXE(I2C1));
 8001440:	bf00      	nop
 8001442:	4826      	ldr	r0, [pc, #152]	; (80014dc <MPU6050_ReceiveData+0xd0>)
 8001444:	f7ff fdc9 	bl	8000fda <LL_I2C_IsActiveFlag_TXE>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d0f9      	beq.n	8001442 <MPU6050_ReceiveData+0x36>
	LL_I2C_ClearFlag_ADDR(I2C1);
 800144e:	4823      	ldr	r0, [pc, #140]	; (80014dc <MPU6050_ReceiveData+0xd0>)
 8001450:	f7ff fe22 	bl	8001098 <LL_I2C_ClearFlag_ADDR>

	LL_I2C_TransmitData8(I2C1, Address);
 8001454:	79fb      	ldrb	r3, [r7, #7]
 8001456:	4619      	mov	r1, r3
 8001458:	4820      	ldr	r0, [pc, #128]	; (80014dc <MPU6050_ReceiveData+0xd0>)
 800145a:	f7ff fe6f 	bl	800113c <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_TXE(I2C1));
 800145e:	bf00      	nop
 8001460:	481e      	ldr	r0, [pc, #120]	; (80014dc <MPU6050_ReceiveData+0xd0>)
 8001462:	f7ff fdba 	bl	8000fda <LL_I2C_IsActiveFlag_TXE>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d0f9      	beq.n	8001460 <MPU6050_ReceiveData+0x54>
	while(!LL_I2C_IsActiveFlag_BTF(I2C1));
 800146c:	bf00      	nop
 800146e:	481b      	ldr	r0, [pc, #108]	; (80014dc <MPU6050_ReceiveData+0xd0>)
 8001470:	f7ff fdc6 	bl	8001000 <LL_I2C_IsActiveFlag_BTF>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d0f9      	beq.n	800146e <MPU6050_ReceiveData+0x62>

	LL_I2C_GenerateStartCondition(I2C1);
 800147a:	4818      	ldr	r0, [pc, #96]	; (80014dc <MPU6050_ReceiveData+0xd0>)
 800147c:	f7ff fe31 	bl	80010e2 <LL_I2C_GenerateStartCondition>
	while(!LL_I2C_IsActiveFlag_SB(I2C1));
 8001480:	bf00      	nop
 8001482:	4816      	ldr	r0, [pc, #88]	; (80014dc <MPU6050_ReceiveData+0xd0>)
 8001484:	f7ff fde2 	bl	800104c <LL_I2C_IsActiveFlag_SB>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d0f9      	beq.n	8001482 <MPU6050_ReceiveData+0x76>

	LL_I2C_TransmitData8(I2C1, (0x68 << 1 | 0x01));
 800148e:	21d1      	movs	r1, #209	; 0xd1
 8001490:	4812      	ldr	r0, [pc, #72]	; (80014dc <MPU6050_ReceiveData+0xd0>)
 8001492:	f7ff fe53 	bl	800113c <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_ADDR(I2C1));
 8001496:	bf00      	nop
 8001498:	4810      	ldr	r0, [pc, #64]	; (80014dc <MPU6050_ReceiveData+0xd0>)
 800149a:	f7ff fdea 	bl	8001072 <LL_I2C_IsActiveFlag_ADDR>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d0f9      	beq.n	8001498 <MPU6050_ReceiveData+0x8c>
	LL_I2C_ClearFlag_ADDR(I2C1);
 80014a4:	480d      	ldr	r0, [pc, #52]	; (80014dc <MPU6050_ReceiveData+0xd0>)
 80014a6:	f7ff fdf7 	bl	8001098 <LL_I2C_ClearFlag_ADDR>

	while(!LL_I2C_IsActiveFlag_RXNE(I2C1));
 80014aa:	bf00      	nop
 80014ac:	480b      	ldr	r0, [pc, #44]	; (80014dc <MPU6050_ReceiveData+0xd0>)
 80014ae:	f7ff fdba 	bl	8001026 <LL_I2C_IsActiveFlag_RXNE>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d0f9      	beq.n	80014ac <MPU6050_ReceiveData+0xa0>
	unsigned char Data = LL_I2C_ReceiveData8(I2C1);
 80014b8:	4808      	ldr	r0, [pc, #32]	; (80014dc <MPU6050_ReceiveData+0xd0>)
 80014ba:	f7ff fe32 	bl	8001122 <LL_I2C_ReceiveData8>
 80014be:	4603      	mov	r3, r0
 80014c0:	73fb      	strb	r3, [r7, #15]
	LL_I2C_AcknowledgeNextData(I2C1, LL_I2C_NACK);
 80014c2:	2100      	movs	r1, #0
 80014c4:	4805      	ldr	r0, [pc, #20]	; (80014dc <MPU6050_ReceiveData+0xd0>)
 80014c6:	f7ff fdf9 	bl	80010bc <LL_I2C_AcknowledgeNextData>

	LL_I2C_GenerateStopCondition(I2C1);
 80014ca:	4804      	ldr	r0, [pc, #16]	; (80014dc <MPU6050_ReceiveData+0xd0>)
 80014cc:	f7ff fe19 	bl	8001102 <LL_I2C_GenerateStopCondition>

	return Data;
 80014d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3710      	adds	r7, #16
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	40005400 	.word	0x40005400

080014e0 <MPU6050_GetAccel>:

void MPU6050_GetAccel(void){
 80014e0:	b598      	push	{r3, r4, r7, lr}
 80014e2:	af00      	add	r7, sp, #0
	IMU.ax = MPU6050_ReceiveData(0x3B) << 8 | MPU6050_ReceiveData(0x3C);
 80014e4:	203b      	movs	r0, #59	; 0x3b
 80014e6:	f7ff ff91 	bl	800140c <MPU6050_ReceiveData>
 80014ea:	4603      	mov	r3, r0
 80014ec:	021b      	lsls	r3, r3, #8
 80014ee:	b21c      	sxth	r4, r3
 80014f0:	203c      	movs	r0, #60	; 0x3c
 80014f2:	f7ff ff8b 	bl	800140c <MPU6050_ReceiveData>
 80014f6:	4603      	mov	r3, r0
 80014f8:	b21b      	sxth	r3, r3
 80014fa:	4323      	orrs	r3, r4
 80014fc:	b21a      	sxth	r2, r3
 80014fe:	4b24      	ldr	r3, [pc, #144]	; (8001590 <MPU6050_GetAccel+0xb0>)
 8001500:	801a      	strh	r2, [r3, #0]
	IMU.ay = MPU6050_ReceiveData(0x3D) << 8 | MPU6050_ReceiveData(0x3E);
 8001502:	203d      	movs	r0, #61	; 0x3d
 8001504:	f7ff ff82 	bl	800140c <MPU6050_ReceiveData>
 8001508:	4603      	mov	r3, r0
 800150a:	021b      	lsls	r3, r3, #8
 800150c:	b21c      	sxth	r4, r3
 800150e:	203e      	movs	r0, #62	; 0x3e
 8001510:	f7ff ff7c 	bl	800140c <MPU6050_ReceiveData>
 8001514:	4603      	mov	r3, r0
 8001516:	b21b      	sxth	r3, r3
 8001518:	4323      	orrs	r3, r4
 800151a:	b21a      	sxth	r2, r3
 800151c:	4b1c      	ldr	r3, [pc, #112]	; (8001590 <MPU6050_GetAccel+0xb0>)
 800151e:	805a      	strh	r2, [r3, #2]
	IMU.az = MPU6050_ReceiveData(0x3F) << 8 | MPU6050_ReceiveData(0x40);
 8001520:	203f      	movs	r0, #63	; 0x3f
 8001522:	f7ff ff73 	bl	800140c <MPU6050_ReceiveData>
 8001526:	4603      	mov	r3, r0
 8001528:	021b      	lsls	r3, r3, #8
 800152a:	b21c      	sxth	r4, r3
 800152c:	2040      	movs	r0, #64	; 0x40
 800152e:	f7ff ff6d 	bl	800140c <MPU6050_ReceiveData>
 8001532:	4603      	mov	r3, r0
 8001534:	b21b      	sxth	r3, r3
 8001536:	4323      	orrs	r3, r4
 8001538:	b21a      	sxth	r2, r3
 800153a:	4b15      	ldr	r3, [pc, #84]	; (8001590 <MPU6050_GetAccel+0xb0>)
 800153c:	809a      	strh	r2, [r3, #4]

	IMU.ax -= IMU.ax_offset;
 800153e:	4b14      	ldr	r3, [pc, #80]	; (8001590 <MPU6050_GetAccel+0xb0>)
 8001540:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001544:	b29a      	uxth	r2, r3
 8001546:	4b12      	ldr	r3, [pc, #72]	; (8001590 <MPU6050_GetAccel+0xb0>)
 8001548:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800154c:	b29b      	uxth	r3, r3
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	b29b      	uxth	r3, r3
 8001552:	b21a      	sxth	r2, r3
 8001554:	4b0e      	ldr	r3, [pc, #56]	; (8001590 <MPU6050_GetAccel+0xb0>)
 8001556:	801a      	strh	r2, [r3, #0]
	IMU.ay -= IMU.ay_offset;
 8001558:	4b0d      	ldr	r3, [pc, #52]	; (8001590 <MPU6050_GetAccel+0xb0>)
 800155a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800155e:	b29a      	uxth	r2, r3
 8001560:	4b0b      	ldr	r3, [pc, #44]	; (8001590 <MPU6050_GetAccel+0xb0>)
 8001562:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001566:	b29b      	uxth	r3, r3
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	b29b      	uxth	r3, r3
 800156c:	b21a      	sxth	r2, r3
 800156e:	4b08      	ldr	r3, [pc, #32]	; (8001590 <MPU6050_GetAccel+0xb0>)
 8001570:	805a      	strh	r2, [r3, #2]
	IMU.az -= IMU.az_offset;
 8001572:	4b07      	ldr	r3, [pc, #28]	; (8001590 <MPU6050_GetAccel+0xb0>)
 8001574:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001578:	b29a      	uxth	r2, r3
 800157a:	4b05      	ldr	r3, [pc, #20]	; (8001590 <MPU6050_GetAccel+0xb0>)
 800157c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001580:	b29b      	uxth	r3, r3
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	b29b      	uxth	r3, r3
 8001586:	b21a      	sxth	r2, r3
 8001588:	4b01      	ldr	r3, [pc, #4]	; (8001590 <MPU6050_GetAccel+0xb0>)
 800158a:	809a      	strh	r2, [r3, #4]
}
 800158c:	bf00      	nop
 800158e:	bd98      	pop	{r3, r4, r7, pc}
 8001590:	20000208 	.word	0x20000208

08001594 <MPU6050_GetGyro>:

void MPU6050_GetGyro(void){
 8001594:	b598      	push	{r3, r4, r7, lr}
 8001596:	af00      	add	r7, sp, #0
	IMU.gx = MPU6050_ReceiveData(0x43) << 8 | MPU6050_ReceiveData(0x44);
 8001598:	2043      	movs	r0, #67	; 0x43
 800159a:	f7ff ff37 	bl	800140c <MPU6050_ReceiveData>
 800159e:	4603      	mov	r3, r0
 80015a0:	021b      	lsls	r3, r3, #8
 80015a2:	b21c      	sxth	r4, r3
 80015a4:	2044      	movs	r0, #68	; 0x44
 80015a6:	f7ff ff31 	bl	800140c <MPU6050_ReceiveData>
 80015aa:	4603      	mov	r3, r0
 80015ac:	b21b      	sxth	r3, r3
 80015ae:	4323      	orrs	r3, r4
 80015b0:	b21a      	sxth	r2, r3
 80015b2:	4b24      	ldr	r3, [pc, #144]	; (8001644 <MPU6050_GetGyro+0xb0>)
 80015b4:	80da      	strh	r2, [r3, #6]
	IMU.gy = MPU6050_ReceiveData(0x45) << 8 | MPU6050_ReceiveData(0x46);
 80015b6:	2045      	movs	r0, #69	; 0x45
 80015b8:	f7ff ff28 	bl	800140c <MPU6050_ReceiveData>
 80015bc:	4603      	mov	r3, r0
 80015be:	021b      	lsls	r3, r3, #8
 80015c0:	b21c      	sxth	r4, r3
 80015c2:	2046      	movs	r0, #70	; 0x46
 80015c4:	f7ff ff22 	bl	800140c <MPU6050_ReceiveData>
 80015c8:	4603      	mov	r3, r0
 80015ca:	b21b      	sxth	r3, r3
 80015cc:	4323      	orrs	r3, r4
 80015ce:	b21a      	sxth	r2, r3
 80015d0:	4b1c      	ldr	r3, [pc, #112]	; (8001644 <MPU6050_GetGyro+0xb0>)
 80015d2:	811a      	strh	r2, [r3, #8]
	IMU.gz = MPU6050_ReceiveData(0x47) << 8 | MPU6050_ReceiveData(0x48);
 80015d4:	2047      	movs	r0, #71	; 0x47
 80015d6:	f7ff ff19 	bl	800140c <MPU6050_ReceiveData>
 80015da:	4603      	mov	r3, r0
 80015dc:	021b      	lsls	r3, r3, #8
 80015de:	b21c      	sxth	r4, r3
 80015e0:	2048      	movs	r0, #72	; 0x48
 80015e2:	f7ff ff13 	bl	800140c <MPU6050_ReceiveData>
 80015e6:	4603      	mov	r3, r0
 80015e8:	b21b      	sxth	r3, r3
 80015ea:	4323      	orrs	r3, r4
 80015ec:	b21a      	sxth	r2, r3
 80015ee:	4b15      	ldr	r3, [pc, #84]	; (8001644 <MPU6050_GetGyro+0xb0>)
 80015f0:	815a      	strh	r2, [r3, #10]

	IMU.gx -= IMU.gx_offset;
 80015f2:	4b14      	ldr	r3, [pc, #80]	; (8001644 <MPU6050_GetGyro+0xb0>)
 80015f4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80015f8:	b29a      	uxth	r2, r3
 80015fa:	4b12      	ldr	r3, [pc, #72]	; (8001644 <MPU6050_GetGyro+0xb0>)
 80015fc:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001600:	b29b      	uxth	r3, r3
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	b29b      	uxth	r3, r3
 8001606:	b21a      	sxth	r2, r3
 8001608:	4b0e      	ldr	r3, [pc, #56]	; (8001644 <MPU6050_GetGyro+0xb0>)
 800160a:	80da      	strh	r2, [r3, #6]
	IMU.gy -= IMU.gy_offset;
 800160c:	4b0d      	ldr	r3, [pc, #52]	; (8001644 <MPU6050_GetGyro+0xb0>)
 800160e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001612:	b29a      	uxth	r2, r3
 8001614:	4b0b      	ldr	r3, [pc, #44]	; (8001644 <MPU6050_GetGyro+0xb0>)
 8001616:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800161a:	b29b      	uxth	r3, r3
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	b29b      	uxth	r3, r3
 8001620:	b21a      	sxth	r2, r3
 8001622:	4b08      	ldr	r3, [pc, #32]	; (8001644 <MPU6050_GetGyro+0xb0>)
 8001624:	811a      	strh	r2, [r3, #8]
	IMU.gz -= IMU.gz_offset;
 8001626:	4b07      	ldr	r3, [pc, #28]	; (8001644 <MPU6050_GetGyro+0xb0>)
 8001628:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800162c:	b29a      	uxth	r2, r3
 800162e:	4b05      	ldr	r3, [pc, #20]	; (8001644 <MPU6050_GetGyro+0xb0>)
 8001630:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001634:	b29b      	uxth	r3, r3
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	b29b      	uxth	r3, r3
 800163a:	b21a      	sxth	r2, r3
 800163c:	4b01      	ldr	r3, [pc, #4]	; (8001644 <MPU6050_GetGyro+0xb0>)
 800163e:	815a      	strh	r2, [r3, #10]
}
 8001640:	bf00      	nop
 8001642:	bd98      	pop	{r3, r4, r7, pc}
 8001644:	20000208 	.word	0x20000208

08001648 <MPU6050_GetRoll_Acc>:

void MPU6050_GetRoll_Acc(void){
 8001648:	b5b0      	push	{r4, r5, r7, lr}
 800164a:	af00      	add	r7, sp, #0
	IMU.roll_acc = atan(IMU.ay / (sqrt(-IMU.ax * IMU.ax + IMU.az * IMU.az))) * 180 / M_PI;
 800164c:	4b28      	ldr	r3, [pc, #160]	; (80016f0 <MPU6050_GetRoll_Acc+0xa8>)
 800164e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001652:	4618      	mov	r0, r3
 8001654:	f7fe ff6e 	bl	8000534 <__aeabi_i2d>
 8001658:	4604      	mov	r4, r0
 800165a:	460d      	mov	r5, r1
 800165c:	4b24      	ldr	r3, [pc, #144]	; (80016f0 <MPU6050_GetRoll_Acc+0xa8>)
 800165e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001662:	425b      	negs	r3, r3
 8001664:	4a22      	ldr	r2, [pc, #136]	; (80016f0 <MPU6050_GetRoll_Acc+0xa8>)
 8001666:	f9b2 2000 	ldrsh.w	r2, [r2]
 800166a:	fb03 f202 	mul.w	r2, r3, r2
 800166e:	4b20      	ldr	r3, [pc, #128]	; (80016f0 <MPU6050_GetRoll_Acc+0xa8>)
 8001670:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001674:	4619      	mov	r1, r3
 8001676:	4b1e      	ldr	r3, [pc, #120]	; (80016f0 <MPU6050_GetRoll_Acc+0xa8>)
 8001678:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800167c:	fb01 f303 	mul.w	r3, r1, r3
 8001680:	4413      	add	r3, r2
 8001682:	4618      	mov	r0, r3
 8001684:	f7fe ff56 	bl	8000534 <__aeabi_i2d>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	ec43 2b10 	vmov	d0, r2, r3
 8001690:	f005 fc60 	bl	8006f54 <sqrt>
 8001694:	ec53 2b10 	vmov	r2, r3, d0
 8001698:	4620      	mov	r0, r4
 800169a:	4629      	mov	r1, r5
 800169c:	f7ff f8de 	bl	800085c <__aeabi_ddiv>
 80016a0:	4602      	mov	r2, r0
 80016a2:	460b      	mov	r3, r1
 80016a4:	ec43 2b17 	vmov	d7, r2, r3
 80016a8:	eeb0 0a47 	vmov.f32	s0, s14
 80016ac:	eef0 0a67 	vmov.f32	s1, s15
 80016b0:	f005 fc7e 	bl	8006fb0 <atan>
 80016b4:	ec51 0b10 	vmov	r0, r1, d0
 80016b8:	f04f 0200 	mov.w	r2, #0
 80016bc:	4b0d      	ldr	r3, [pc, #52]	; (80016f4 <MPU6050_GetRoll_Acc+0xac>)
 80016be:	f7fe ffa3 	bl	8000608 <__aeabi_dmul>
 80016c2:	4602      	mov	r2, r0
 80016c4:	460b      	mov	r3, r1
 80016c6:	4610      	mov	r0, r2
 80016c8:	4619      	mov	r1, r3
 80016ca:	a307      	add	r3, pc, #28	; (adr r3, 80016e8 <MPU6050_GetRoll_Acc+0xa0>)
 80016cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d0:	f7ff f8c4 	bl	800085c <__aeabi_ddiv>
 80016d4:	4602      	mov	r2, r0
 80016d6:	460b      	mov	r3, r1
 80016d8:	4905      	ldr	r1, [pc, #20]	; (80016f0 <MPU6050_GetRoll_Acc+0xa8>)
 80016da:	e9c1 2306 	strd	r2, r3, [r1, #24]
//	IMU.roll_acc = atan2(IMU.ay, IMU.az) * 180 / M_PI;
}
 80016de:	bf00      	nop
 80016e0:	bdb0      	pop	{r4, r5, r7, pc}
 80016e2:	bf00      	nop
 80016e4:	f3af 8000 	nop.w
 80016e8:	54442d18 	.word	0x54442d18
 80016ec:	400921fb 	.word	0x400921fb
 80016f0:	20000208 	.word	0x20000208
 80016f4:	40668000 	.word	0x40668000

080016f8 <MPU6050_GetPitch_Acc>:

void MPU6050_GetPitch_Acc(void){
 80016f8:	b5b0      	push	{r4, r5, r7, lr}
 80016fa:	af00      	add	r7, sp, #0
	IMU.pitch_acc = atan(IMU.ax / (sqrt(-IMU.ay * IMU.ay + IMU.az * IMU.az))) * 180 / M_PI;
 80016fc:	4b28      	ldr	r3, [pc, #160]	; (80017a0 <MPU6050_GetPitch_Acc+0xa8>)
 80016fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001702:	4618      	mov	r0, r3
 8001704:	f7fe ff16 	bl	8000534 <__aeabi_i2d>
 8001708:	4604      	mov	r4, r0
 800170a:	460d      	mov	r5, r1
 800170c:	4b24      	ldr	r3, [pc, #144]	; (80017a0 <MPU6050_GetPitch_Acc+0xa8>)
 800170e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001712:	425b      	negs	r3, r3
 8001714:	4a22      	ldr	r2, [pc, #136]	; (80017a0 <MPU6050_GetPitch_Acc+0xa8>)
 8001716:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800171a:	fb03 f202 	mul.w	r2, r3, r2
 800171e:	4b20      	ldr	r3, [pc, #128]	; (80017a0 <MPU6050_GetPitch_Acc+0xa8>)
 8001720:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001724:	4619      	mov	r1, r3
 8001726:	4b1e      	ldr	r3, [pc, #120]	; (80017a0 <MPU6050_GetPitch_Acc+0xa8>)
 8001728:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800172c:	fb01 f303 	mul.w	r3, r1, r3
 8001730:	4413      	add	r3, r2
 8001732:	4618      	mov	r0, r3
 8001734:	f7fe fefe 	bl	8000534 <__aeabi_i2d>
 8001738:	4602      	mov	r2, r0
 800173a:	460b      	mov	r3, r1
 800173c:	ec43 2b10 	vmov	d0, r2, r3
 8001740:	f005 fc08 	bl	8006f54 <sqrt>
 8001744:	ec53 2b10 	vmov	r2, r3, d0
 8001748:	4620      	mov	r0, r4
 800174a:	4629      	mov	r1, r5
 800174c:	f7ff f886 	bl	800085c <__aeabi_ddiv>
 8001750:	4602      	mov	r2, r0
 8001752:	460b      	mov	r3, r1
 8001754:	ec43 2b17 	vmov	d7, r2, r3
 8001758:	eeb0 0a47 	vmov.f32	s0, s14
 800175c:	eef0 0a67 	vmov.f32	s1, s15
 8001760:	f005 fc26 	bl	8006fb0 <atan>
 8001764:	ec51 0b10 	vmov	r0, r1, d0
 8001768:	f04f 0200 	mov.w	r2, #0
 800176c:	4b0d      	ldr	r3, [pc, #52]	; (80017a4 <MPU6050_GetPitch_Acc+0xac>)
 800176e:	f7fe ff4b 	bl	8000608 <__aeabi_dmul>
 8001772:	4602      	mov	r2, r0
 8001774:	460b      	mov	r3, r1
 8001776:	4610      	mov	r0, r2
 8001778:	4619      	mov	r1, r3
 800177a:	a307      	add	r3, pc, #28	; (adr r3, 8001798 <MPU6050_GetPitch_Acc+0xa0>)
 800177c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001780:	f7ff f86c 	bl	800085c <__aeabi_ddiv>
 8001784:	4602      	mov	r2, r0
 8001786:	460b      	mov	r3, r1
 8001788:	4905      	ldr	r1, [pc, #20]	; (80017a0 <MPU6050_GetPitch_Acc+0xa8>)
 800178a:	e9c1 2308 	strd	r2, r3, [r1, #32]
//	IMU.pitch_acc = atan2(IMU.ax, IMU.az) * 180 / M_PI;
}
 800178e:	bf00      	nop
 8001790:	bdb0      	pop	{r4, r5, r7, pc}
 8001792:	bf00      	nop
 8001794:	f3af 8000 	nop.w
 8001798:	54442d18 	.word	0x54442d18
 800179c:	400921fb 	.word	0x400921fb
 80017a0:	20000208 	.word	0x20000208
 80017a4:	40668000 	.word	0x40668000

080017a8 <MPU6050_GetRoll_Gyr>:

void MPU6050_GetRoll_Gyr(void){
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
	IMU.roll_gyr = IMU.gx * dt / 1000.f;
 80017ac:	4b0d      	ldr	r3, [pc, #52]	; (80017e4 <MPU6050_GetRoll_Gyr+0x3c>)
 80017ae:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80017b2:	461a      	mov	r2, r3
 80017b4:	4b0c      	ldr	r3, [pc, #48]	; (80017e8 <MPU6050_GetRoll_Gyr+0x40>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	fb02 f303 	mul.w	r3, r2, r3
 80017bc:	ee07 3a90 	vmov	s15, r3
 80017c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017c4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80017ec <MPU6050_GetRoll_Gyr+0x44>
 80017c8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80017cc:	ee16 0a90 	vmov	r0, s13
 80017d0:	f7fe fec2 	bl	8000558 <__aeabi_f2d>
 80017d4:	4602      	mov	r2, r0
 80017d6:	460b      	mov	r3, r1
 80017d8:	4902      	ldr	r1, [pc, #8]	; (80017e4 <MPU6050_GetRoll_Gyr+0x3c>)
 80017da:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	20000208 	.word	0x20000208
 80017e8:	20000250 	.word	0x20000250
 80017ec:	447a0000 	.word	0x447a0000

080017f0 <MPU6050_GetPitch_Gyr>:

void MPU6050_GetPitch_Gyr(void){
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
	IMU.pitch_gyr = IMU.gy * dt / 1000.f;
 80017f4:	4b0d      	ldr	r3, [pc, #52]	; (800182c <MPU6050_GetPitch_Gyr+0x3c>)
 80017f6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80017fa:	461a      	mov	r2, r3
 80017fc:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <MPU6050_GetPitch_Gyr+0x40>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	fb02 f303 	mul.w	r3, r2, r3
 8001804:	ee07 3a90 	vmov	s15, r3
 8001808:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800180c:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001834 <MPU6050_GetPitch_Gyr+0x44>
 8001810:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001814:	ee16 0a90 	vmov	r0, s13
 8001818:	f7fe fe9e 	bl	8000558 <__aeabi_f2d>
 800181c:	4602      	mov	r2, r0
 800181e:	460b      	mov	r3, r1
 8001820:	4902      	ldr	r1, [pc, #8]	; (800182c <MPU6050_GetPitch_Gyr+0x3c>)
 8001822:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	20000208 	.word	0x20000208
 8001830:	20000250 	.word	0x20000250
 8001834:	447a0000 	.word	0x447a0000

08001838 <MPU6050_getRoll_Filtered>:

void MPU6050_getRoll_Filtered(void){
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
	IMU.roll_filtered = complementaryFilter_double(IMU.roll_acc, IMU.roll_gyr);
 800183c:	4b0c      	ldr	r3, [pc, #48]	; (8001870 <MPU6050_getRoll_Filtered+0x38>)
 800183e:	ed93 7b06 	vldr	d7, [r3, #24]
 8001842:	4b0b      	ldr	r3, [pc, #44]	; (8001870 <MPU6050_getRoll_Filtered+0x38>)
 8001844:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 8001848:	eeb0 1a46 	vmov.f32	s2, s12
 800184c:	eef0 1a66 	vmov.f32	s3, s13
 8001850:	eeb0 0a47 	vmov.f32	s0, s14
 8001854:	eef0 0a67 	vmov.f32	s1, s15
 8001858:	f000 f82a 	bl	80018b0 <complementaryFilter_double>
 800185c:	eeb0 7a40 	vmov.f32	s14, s0
 8001860:	eef0 7a60 	vmov.f32	s15, s1
 8001864:	4b02      	ldr	r3, [pc, #8]	; (8001870 <MPU6050_getRoll_Filtered+0x38>)
 8001866:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
}
 800186a:	bf00      	nop
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	20000208 	.word	0x20000208

08001874 <MPU6050_getPitch_Filtered>:

void MPU6050_getPitch_Filtered(void){
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
	IMU.pitch_filtered = complementaryFilter_double(IMU.pitch_acc, IMU.pitch_gyr);
 8001878:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <MPU6050_getPitch_Filtered+0x38>)
 800187a:	ed93 7b08 	vldr	d7, [r3, #32]
 800187e:	4b0b      	ldr	r3, [pc, #44]	; (80018ac <MPU6050_getPitch_Filtered+0x38>)
 8001880:	ed93 6b0c 	vldr	d6, [r3, #48]	; 0x30
 8001884:	eeb0 1a46 	vmov.f32	s2, s12
 8001888:	eef0 1a66 	vmov.f32	s3, s13
 800188c:	eeb0 0a47 	vmov.f32	s0, s14
 8001890:	eef0 0a67 	vmov.f32	s1, s15
 8001894:	f000 f80c 	bl	80018b0 <complementaryFilter_double>
 8001898:	eeb0 7a40 	vmov.f32	s14, s0
 800189c:	eef0 7a60 	vmov.f32	s15, s1
 80018a0:	4b02      	ldr	r3, [pc, #8]	; (80018ac <MPU6050_getPitch_Filtered+0x38>)
 80018a2:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40
}
 80018a6:	bf00      	nop
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	20000208 	.word	0x20000208

080018b0 <complementaryFilter_double>:
	curTime = count_ms;
	dt = curTime - prevTime;
	curTime = count_ms;
}

double complementaryFilter_double(double val1, double val2){
 80018b0:	b5b0      	push	{r4, r5, r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	ed87 0b02 	vstr	d0, [r7, #8]
 80018ba:	ed87 1b00 	vstr	d1, [r7]
	return ALPHA * val1 + (1 - ALPHA) * val2;
 80018be:	a312      	add	r3, pc, #72	; (adr r3, 8001908 <complementaryFilter_double+0x58>)
 80018c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80018c8:	f7fe fe9e 	bl	8000608 <__aeabi_dmul>
 80018cc:	4602      	mov	r2, r0
 80018ce:	460b      	mov	r3, r1
 80018d0:	4614      	mov	r4, r2
 80018d2:	461d      	mov	r5, r3
 80018d4:	a30e      	add	r3, pc, #56	; (adr r3, 8001910 <complementaryFilter_double+0x60>)
 80018d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018da:	e9d7 0100 	ldrd	r0, r1, [r7]
 80018de:	f7fe fe93 	bl	8000608 <__aeabi_dmul>
 80018e2:	4602      	mov	r2, r0
 80018e4:	460b      	mov	r3, r1
 80018e6:	4620      	mov	r0, r4
 80018e8:	4629      	mov	r1, r5
 80018ea:	f7fe fcd7 	bl	800029c <__adddf3>
 80018ee:	4602      	mov	r2, r0
 80018f0:	460b      	mov	r3, r1
 80018f2:	ec43 2b17 	vmov	d7, r2, r3
}
 80018f6:	eeb0 0a47 	vmov.f32	s0, s14
 80018fa:	eef0 0a67 	vmov.f32	s1, s15
 80018fe:	3710      	adds	r7, #16
 8001900:	46bd      	mov	sp, r7
 8001902:	bdb0      	pop	{r4, r5, r7, pc}
 8001904:	f3af 8000 	nop.w
 8001908:	cccccccd 	.word	0xcccccccd
 800190c:	3feccccc 	.word	0x3feccccc
 8001910:	99999998 	.word	0x99999998
 8001914:	3fb99999 	.word	0x3fb99999

08001918 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	041a      	lsls	r2, r3, #16
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	619a      	str	r2, [r3, #24]
}
 800192a:	bf00      	nop
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
	...

08001938 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001940:	4b08      	ldr	r3, [pc, #32]	; (8001964 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001942:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001944:	4907      	ldr	r1, [pc, #28]	; (8001964 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4313      	orrs	r3, r2
 800194a:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800194c:	4b05      	ldr	r3, [pc, #20]	; (8001964 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800194e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	4013      	ands	r3, r2
 8001954:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001956:	68fb      	ldr	r3, [r7, #12]
}
 8001958:	bf00      	nop
 800195a:	3714      	adds	r7, #20
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr
 8001964:	40023800 	.word	0x40023800

08001968 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b086      	sub	sp, #24
 800196c:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800196e:	463b      	mov	r3, r7
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	605a      	str	r2, [r3, #4]
 8001976:	609a      	str	r2, [r3, #8]
 8001978:	60da      	str	r2, [r3, #12]
 800197a:	611a      	str	r2, [r3, #16]
 800197c:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800197e:	2004      	movs	r0, #4
 8001980:	f7ff ffda 	bl	8001938 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001984:	2001      	movs	r0, #1
 8001986:	f7ff ffd7 	bl	8001938 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800198a:	2002      	movs	r0, #2
 800198c:	f7ff ffd4 	bl	8001938 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_13);
 8001990:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001994:	480b      	ldr	r0, [pc, #44]	; (80019c4 <MX_GPIO_Init+0x5c>)
 8001996:	f7ff ffbf 	bl	8001918 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 800199a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800199e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80019a0:	2301      	movs	r3, #1
 80019a2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80019a4:	2300      	movs	r3, #0
 80019a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80019a8:	2300      	movs	r3, #0
 80019aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80019ac:	2300      	movs	r3, #0
 80019ae:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019b0:	463b      	mov	r3, r7
 80019b2:	4619      	mov	r1, r3
 80019b4:	4803      	ldr	r0, [pc, #12]	; (80019c4 <MX_GPIO_Init+0x5c>)
 80019b6:	f001 fd96 	bl	80034e6 <LL_GPIO_Init>

}
 80019ba:	bf00      	nop
 80019bc:	3718      	adds	r7, #24
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	40020800 	.word	0x40020800

080019c8 <LL_I2C_EnableClockStretching>:
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	601a      	str	r2, [r3, #0]
}
 80019dc:	bf00      	nop
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <LL_I2C_DisableGeneralCall>:
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	601a      	str	r2, [r3, #0]
}
 80019fc:	bf00      	nop
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <LL_I2C_SetOwnAddress2>:
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	f023 02fe 	bic.w	r2, r3, #254	; 0xfe
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	431a      	orrs	r2, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	60da      	str	r2, [r3, #12]
}
 8001a22:	bf00      	nop
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr

08001a2e <LL_I2C_DisableOwnAddress2>:
{
 8001a2e:	b480      	push	{r7}
 8001a30:	b083      	sub	sp, #12
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	f023 0201 	bic.w	r2, r3, #1
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	60da      	str	r2, [r3, #12]
}
 8001a42:	bf00      	nop
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
	...

08001a50 <LL_AHB1_GRP1_EnableClock>:
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001a58:	4b08      	ldr	r3, [pc, #32]	; (8001a7c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001a5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a5c:	4907      	ldr	r1, [pc, #28]	; (8001a7c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001a64:	4b05      	ldr	r3, [pc, #20]	; (8001a7c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001a66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
}
 8001a70:	bf00      	nop
 8001a72:	3714      	adds	r7, #20
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr
 8001a7c:	40023800 	.word	0x40023800

08001a80 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b085      	sub	sp, #20
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001a88:	4b08      	ldr	r3, [pc, #32]	; (8001aac <LL_APB1_GRP1_EnableClock+0x2c>)
 8001a8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a8c:	4907      	ldr	r1, [pc, #28]	; (8001aac <LL_APB1_GRP1_EnableClock+0x2c>)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001a94:	4b05      	ldr	r3, [pc, #20]	; (8001aac <LL_APB1_GRP1_EnableClock+0x2c>)
 8001a96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
}
 8001aa0:	bf00      	nop
 8001aa2:	3714      	adds	r7, #20
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	40023800 	.word	0x40023800

08001ab0 <MX_I2C1_Init>:

/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b08e      	sub	sp, #56	; 0x38
 8001ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8001ab6:	f107 0318 	add.w	r3, r7, #24
 8001aba:	2220      	movs	r2, #32
 8001abc:	2100      	movs	r1, #0
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f003 faf5 	bl	80050ae <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac4:	463b      	mov	r3, r7
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	605a      	str	r2, [r3, #4]
 8001acc:	609a      	str	r2, [r3, #8]
 8001ace:	60da      	str	r2, [r3, #12]
 8001ad0:	611a      	str	r2, [r3, #16]
 8001ad2:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001ad4:	2002      	movs	r0, #2
 8001ad6:	f7ff ffbb 	bl	8001a50 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001ada:	23c0      	movs	r3, #192	; 0xc0
 8001adc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001ade:	2302      	movs	r3, #2
 8001ae0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001aea:	2300      	movs	r3, #0
 8001aec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8001aee:	2304      	movs	r3, #4
 8001af0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001af2:	463b      	mov	r3, r7
 8001af4:	4619      	mov	r1, r3
 8001af6:	4816      	ldr	r0, [pc, #88]	; (8001b50 <MX_I2C1_Init+0xa0>)
 8001af8:	f001 fcf5 	bl	80034e6 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8001afc:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001b00:	f7ff ffbe 	bl	8001a80 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C1_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C1);
 8001b04:	4813      	ldr	r0, [pc, #76]	; (8001b54 <MX_I2C1_Init+0xa4>)
 8001b06:	f7ff ff92 	bl	8001a2e <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8001b0a:	4812      	ldr	r0, [pc, #72]	; (8001b54 <MX_I2C1_Init+0xa4>)
 8001b0c:	f7ff ff6c 	bl	80019e8 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8001b10:	4810      	ldr	r0, [pc, #64]	; (8001b54 <MX_I2C1_Init+0xa4>)
 8001b12:	f7ff ff59 	bl	80019c8 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8001b16:	2300      	movs	r3, #0
 8001b18:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 400000;
 8001b1a:	4b0f      	ldr	r3, [pc, #60]	; (8001b58 <MX_I2C1_Init+0xa8>)
 8001b1c:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.OwnAddress1 = 0;
 8001b22:	2300      	movs	r3, #0
 8001b24:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8001b26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b2a:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8001b2c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b30:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8001b32:	f107 0318 	add.w	r3, r7, #24
 8001b36:	4619      	mov	r1, r3
 8001b38:	4806      	ldr	r0, [pc, #24]	; (8001b54 <MX_I2C1_Init+0xa4>)
 8001b3a:	f001 fe53 	bl	80037e4 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0);
 8001b3e:	2100      	movs	r1, #0
 8001b40:	4804      	ldr	r0, [pc, #16]	; (8001b54 <MX_I2C1_Init+0xa4>)
 8001b42:	f7ff ff61 	bl	8001a08 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b46:	bf00      	nop
 8001b48:	3738      	adds	r7, #56	; 0x38
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	40020400 	.word	0x40020400
 8001b54:	40005400 	.word	0x40005400
 8001b58:	00061a80 	.word	0x00061a80

08001b5c <LL_TIM_EnableCounter>:
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f043 0201 	orr.w	r2, r3, #1
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	601a      	str	r2, [r3, #0]
}
 8001b70:	bf00      	nop
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	f043 0201 	orr.w	r2, r3, #1
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	60da      	str	r2, [r3, #12]
}
 8001b90:	bf00      	nop
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bac:	2b80      	cmp	r3, #128	; 0x80
 8001bae:	bf0c      	ite	eq
 8001bb0:	2301      	moveq	r3, #1
 8001bb2:	2300      	movne	r3, #0
 8001bb4:	b2db      	uxtb	r3, r3
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr

08001bc2 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	b083      	sub	sp, #12
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
 8001bca:	460b      	mov	r3, r1
 8001bcc:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8001bce:	78fa      	ldrb	r2, [r7, #3]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	605a      	str	r2, [r3, #4]
}
 8001bd4:	bf00      	nop
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <_write>:
#include "DCmotor.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
int _write(int file, char *p, int len){		// printf�??????????? USART6?�� ?���??????????? ?��?�� ?��?��
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < len ; i++){
 8001bec:	2300      	movs	r3, #0
 8001bee:	617b      	str	r3, [r7, #20]
 8001bf0:	e011      	b.n	8001c16 <_write+0x36>
		while(!LL_USART_IsActiveFlag_TXE(USART6));
 8001bf2:	bf00      	nop
 8001bf4:	480c      	ldr	r0, [pc, #48]	; (8001c28 <_write+0x48>)
 8001bf6:	f7ff ffd1 	bl	8001b9c <LL_USART_IsActiveFlag_TXE>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d0f9      	beq.n	8001bf4 <_write+0x14>
		LL_USART_TransmitData8(USART6, *(p+i));
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	68ba      	ldr	r2, [r7, #8]
 8001c04:	4413      	add	r3, r2
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4807      	ldr	r0, [pc, #28]	; (8001c28 <_write+0x48>)
 8001c0c:	f7ff ffd9 	bl	8001bc2 <LL_USART_TransmitData8>
	for (int i = 0; i < len ; i++){
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	3301      	adds	r3, #1
 8001c14:	617b      	str	r3, [r7, #20]
 8001c16:	697a      	ldr	r2, [r7, #20]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	dbe9      	blt.n	8001bf2 <_write+0x12>
	}
	return len;
 8001c1e:	687b      	ldr	r3, [r7, #4]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3718      	adds	r7, #24
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40011400 	.word	0x40011400

08001c2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c32:	f000 fdd7 	bl	80027e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c36:	f000 f83b 	bl	8001cb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c3a:	f7ff fe95 	bl	8001968 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 8001c3e:	f000 fd47 	bl	80026d0 <MX_USART6_UART_Init>
  MX_I2C1_Init();
 8001c42:	f7ff ff35 	bl	8001ab0 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001c46:	f000 fb9b 	bl	8002380 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001c4a:	f000 fc21 	bl	8002490 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  MPU6050_Init();
 8001c4e:	f7ff fa89 	bl	8001164 <MPU6050_Init>
  MPU6050_Calibration();
 8001c52:	f7ff facf 	bl	80011f4 <MPU6050_Calibration>
  DCmotor_Init();
 8001c56:	f7ff f99e 	bl	8000f96 <DCmotor_Init>
  LL_TIM_EnableIT_UPDATE(TIM3);
 8001c5a:	4812      	ldr	r0, [pc, #72]	; (8001ca4 <main+0x78>)
 8001c5c:	f7ff ff8e 	bl	8001b7c <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM3);
 8001c60:	4810      	ldr	r0, [pc, #64]	; (8001ca4 <main+0x78>)
 8001c62:	f7ff ff7b 	bl	8001b5c <LL_TIM_EnableCounter>
//	  HAL_Delay(2000);
//
//	  DCmotor_Stop();
//	  HAL_Delay(1000);

	  MPU6050_GetAccel();
 8001c66:	f7ff fc3b 	bl	80014e0 <MPU6050_GetAccel>
	  MPU6050_GetGyro();
 8001c6a:	f7ff fc93 	bl	8001594 <MPU6050_GetGyro>
	  MPU6050_GetRoll_Acc();
 8001c6e:	f7ff fceb 	bl	8001648 <MPU6050_GetRoll_Acc>
	  MPU6050_GetPitch_Acc();
 8001c72:	f7ff fd41 	bl	80016f8 <MPU6050_GetPitch_Acc>
	  MPU6050_GetRoll_Gyr();
 8001c76:	f7ff fd97 	bl	80017a8 <MPU6050_GetRoll_Gyr>
	  MPU6050_GetPitch_Gyr();
 8001c7a:	f7ff fdb9 	bl	80017f0 <MPU6050_GetPitch_Gyr>
	  MPU6050_getRoll_Filtered();
 8001c7e:	f7ff fddb 	bl	8001838 <MPU6050_getRoll_Filtered>
	  MPU6050_getPitch_Filtered();
 8001c82:	f7ff fdf7 	bl	8001874 <MPU6050_getPitch_Filtered>

	  printf("%.1f	%.1f\n", IMU.roll_filtered, IMU.pitch_filtered);
 8001c86:	4b08      	ldr	r3, [pc, #32]	; (8001ca8 <main+0x7c>)
 8001c88:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001c8c:	4b06      	ldr	r3, [pc, #24]	; (8001ca8 <main+0x7c>)
 8001c8e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8001c92:	e9cd 2300 	strd	r2, r3, [sp]
 8001c96:	4602      	mov	r2, r0
 8001c98:	460b      	mov	r3, r1
 8001c9a:	4804      	ldr	r0, [pc, #16]	; (8001cac <main+0x80>)
 8001c9c:	f003 f9b2 	bl	8005004 <iprintf>
	  MPU6050_GetAccel();
 8001ca0:	e7e1      	b.n	8001c66 <main+0x3a>
 8001ca2:	bf00      	nop
 8001ca4:	40000400 	.word	0x40000400
 8001ca8:	20000208 	.word	0x20000208
 8001cac:	080074d0 	.word	0x080074d0

08001cb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b094      	sub	sp, #80	; 0x50
 8001cb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cb6:	f107 0320 	add.w	r3, r7, #32
 8001cba:	2230      	movs	r2, #48	; 0x30
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f003 f9f5 	bl	80050ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cc4:	f107 030c 	add.w	r3, r7, #12
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	605a      	str	r2, [r3, #4]
 8001cce:	609a      	str	r2, [r3, #8]
 8001cd0:	60da      	str	r2, [r3, #12]
 8001cd2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	60bb      	str	r3, [r7, #8]
 8001cd8:	4b23      	ldr	r3, [pc, #140]	; (8001d68 <SystemClock_Config+0xb8>)
 8001cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cdc:	4a22      	ldr	r2, [pc, #136]	; (8001d68 <SystemClock_Config+0xb8>)
 8001cde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ce2:	6413      	str	r3, [r2, #64]	; 0x40
 8001ce4:	4b20      	ldr	r3, [pc, #128]	; (8001d68 <SystemClock_Config+0xb8>)
 8001ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cec:	60bb      	str	r3, [r7, #8]
 8001cee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	607b      	str	r3, [r7, #4]
 8001cf4:	4b1d      	ldr	r3, [pc, #116]	; (8001d6c <SystemClock_Config+0xbc>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001cfc:	4a1b      	ldr	r2, [pc, #108]	; (8001d6c <SystemClock_Config+0xbc>)
 8001cfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d02:	6013      	str	r3, [r2, #0]
 8001d04:	4b19      	ldr	r3, [pc, #100]	; (8001d6c <SystemClock_Config+0xbc>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d0c:	607b      	str	r3, [r7, #4]
 8001d0e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d10:	2302      	movs	r3, #2
 8001d12:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d14:	2301      	movs	r3, #1
 8001d16:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d18:	2310      	movs	r3, #16
 8001d1a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d20:	f107 0320 	add.w	r3, r7, #32
 8001d24:	4618      	mov	r0, r3
 8001d26:	f000 feb5 	bl	8002a94 <HAL_RCC_OscConfig>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001d30:	f000 f81e 	bl	8001d70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d34:	230f      	movs	r3, #15
 8001d36:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d40:	2300      	movs	r3, #0
 8001d42:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d44:	2300      	movs	r3, #0
 8001d46:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001d48:	f107 030c 	add.w	r3, r7, #12
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f001 f918 	bl	8002f84 <HAL_RCC_ClockConfig>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001d5a:	f000 f809 	bl	8001d70 <Error_Handler>
  }
}
 8001d5e:	bf00      	nop
 8001d60:	3750      	adds	r7, #80	; 0x50
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	40023800 	.word	0x40023800
 8001d6c:	40007000 	.word	0x40007000

08001d70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d74:	b672      	cpsid	i
}
 8001d76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d78:	e7fe      	b.n	8001d78 <Error_Handler+0x8>
	...

08001d7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d82:	2300      	movs	r3, #0
 8001d84:	607b      	str	r3, [r7, #4]
 8001d86:	4b10      	ldr	r3, [pc, #64]	; (8001dc8 <HAL_MspInit+0x4c>)
 8001d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8a:	4a0f      	ldr	r2, [pc, #60]	; (8001dc8 <HAL_MspInit+0x4c>)
 8001d8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d90:	6453      	str	r3, [r2, #68]	; 0x44
 8001d92:	4b0d      	ldr	r3, [pc, #52]	; (8001dc8 <HAL_MspInit+0x4c>)
 8001d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d9a:	607b      	str	r3, [r7, #4]
 8001d9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d9e:	2300      	movs	r3, #0
 8001da0:	603b      	str	r3, [r7, #0]
 8001da2:	4b09      	ldr	r3, [pc, #36]	; (8001dc8 <HAL_MspInit+0x4c>)
 8001da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da6:	4a08      	ldr	r2, [pc, #32]	; (8001dc8 <HAL_MspInit+0x4c>)
 8001da8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dac:	6413      	str	r3, [r2, #64]	; 0x40
 8001dae:	4b06      	ldr	r3, [pc, #24]	; (8001dc8 <HAL_MspInit+0x4c>)
 8001db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db6:	603b      	str	r3, [r7, #0]
 8001db8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	40023800 	.word	0x40023800

08001dcc <LL_TIM_ClearFlag_UPDATE>:
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f06f 0201 	mvn.w	r2, #1
 8001dda:	611a      	str	r2, [r3, #16]
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <LL_USART_IsActiveFlag_RXNE>:
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0320 	and.w	r3, r3, #32
 8001df8:	2b20      	cmp	r3, #32
 8001dfa:	bf0c      	ite	eq
 8001dfc:	2301      	moveq	r3, #1
 8001dfe:	2300      	movne	r3, #0
 8001e00:	b2db      	uxtb	r3, r3
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr

08001e0e <LL_USART_ClearFlag_RXNE>:
{
 8001e0e:	b480      	push	{r7}
 8001e10:	b083      	sub	sp, #12
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f06f 0220 	mvn.w	r2, #32
 8001e1c:	601a      	str	r2, [r3, #0]
}
 8001e1e:	bf00      	nop
 8001e20:	370c      	adds	r7, #12
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr

08001e2a <LL_USART_ReceiveData8>:
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	b083      	sub	sp, #12
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	b2db      	uxtb	r3, r3
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e48:	e7fe      	b.n	8001e48 <NMI_Handler+0x4>

08001e4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e4e:	e7fe      	b.n	8001e4e <HardFault_Handler+0x4>

08001e50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e54:	e7fe      	b.n	8001e54 <MemManage_Handler+0x4>

08001e56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e56:	b480      	push	{r7}
 8001e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e5a:	e7fe      	b.n	8001e5a <BusFault_Handler+0x4>

08001e5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e60:	e7fe      	b.n	8001e60 <UsageFault_Handler+0x4>

08001e62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e62:	b480      	push	{r7}
 8001e64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e66:	bf00      	nop
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e74:	bf00      	nop
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr

08001e7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e82:	bf00      	nop
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e90:	f000 fcfa 	bl	8002888 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e94:	bf00      	nop
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  /* USER CODE BEGIN TIM3_IRQn 1 */
	count_ms++;
 8001e9c:	4b04      	ldr	r3, [pc, #16]	; (8001eb0 <TIM3_IRQHandler+0x18>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	4a03      	ldr	r2, [pc, #12]	; (8001eb0 <TIM3_IRQHandler+0x18>)
 8001ea4:	6013      	str	r3, [r2, #0]
	LL_TIM_ClearFlag_UPDATE(TIM3);
 8001ea6:	4803      	ldr	r0, [pc, #12]	; (8001eb4 <TIM3_IRQHandler+0x1c>)
 8001ea8:	f7ff ff90 	bl	8001dcc <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM3_IRQn 1 */
}
 8001eac:	bf00      	nop
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	20000258 	.word	0x20000258
 8001eb4:	40000400 	.word	0x40000400

08001eb8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	if (LL_USART_IsActiveFlag_RXNE(USART6)){
 8001ebc:	480a      	ldr	r0, [pc, #40]	; (8001ee8 <USART6_IRQHandler+0x30>)
 8001ebe:	f7ff ff93 	bl	8001de8 <LL_USART_IsActiveFlag_RXNE>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d00c      	beq.n	8001ee2 <USART6_IRQHandler+0x2a>
	  LL_USART_ClearFlag_RXNE(USART6);
 8001ec8:	4807      	ldr	r0, [pc, #28]	; (8001ee8 <USART6_IRQHandler+0x30>)
 8001eca:	f7ff ffa0 	bl	8001e0e <LL_USART_ClearFlag_RXNE>
	  uart_rx_data = LL_USART_ReceiveData8(USART6);
 8001ece:	4806      	ldr	r0, [pc, #24]	; (8001ee8 <USART6_IRQHandler+0x30>)
 8001ed0:	f7ff ffab 	bl	8001e2a <LL_USART_ReceiveData8>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	4b04      	ldr	r3, [pc, #16]	; (8001eec <USART6_IRQHandler+0x34>)
 8001eda:	701a      	strb	r2, [r3, #0]
	  uart_rx_flag = 1;
 8001edc:	4b04      	ldr	r3, [pc, #16]	; (8001ef0 <USART6_IRQHandler+0x38>)
 8001ede:	2201      	movs	r2, #1
 8001ee0:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001ee2:	bf00      	nop
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	40011400 	.word	0x40011400
 8001eec:	20000255 	.word	0x20000255
 8001ef0:	20000254 	.word	0x20000254

08001ef4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  return 1;
 8001ef8:	2301      	movs	r3, #1
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <_kill>:

int _kill(int pid, int sig)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f0e:	f003 f921 	bl	8005154 <__errno>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2216      	movs	r2, #22
 8001f16:	601a      	str	r2, [r3, #0]
  return -1;
 8001f18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3708      	adds	r7, #8
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <_exit>:

void _exit (int status)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f7ff ffe7 	bl	8001f04 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f36:	e7fe      	b.n	8001f36 <_exit+0x12>

08001f38 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b086      	sub	sp, #24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f44:	2300      	movs	r3, #0
 8001f46:	617b      	str	r3, [r7, #20]
 8001f48:	e00a      	b.n	8001f60 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f4a:	f3af 8000 	nop.w
 8001f4e:	4601      	mov	r1, r0
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	1c5a      	adds	r2, r3, #1
 8001f54:	60ba      	str	r2, [r7, #8]
 8001f56:	b2ca      	uxtb	r2, r1
 8001f58:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	617b      	str	r3, [r7, #20]
 8001f60:	697a      	ldr	r2, [r7, #20]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	dbf0      	blt.n	8001f4a <_read+0x12>
  }

  return len;
 8001f68:	687b      	ldr	r3, [r7, #4]
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3718      	adds	r7, #24
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001f72:	b480      	push	{r7}
 8001f74:	b083      	sub	sp, #12
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr

08001f8a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	b083      	sub	sp, #12
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
 8001f92:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f9a:	605a      	str	r2, [r3, #4]
  return 0;
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr

08001faa <_isatty>:

int _isatty(int file)
{
 8001faa:	b480      	push	{r7}
 8001fac:	b083      	sub	sp, #12
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001fb2:	2301      	movs	r3, #1
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3714      	adds	r7, #20
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
	...

08001fdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b086      	sub	sp, #24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fe4:	4a14      	ldr	r2, [pc, #80]	; (8002038 <_sbrk+0x5c>)
 8001fe6:	4b15      	ldr	r3, [pc, #84]	; (800203c <_sbrk+0x60>)
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ff0:	4b13      	ldr	r3, [pc, #76]	; (8002040 <_sbrk+0x64>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d102      	bne.n	8001ffe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ff8:	4b11      	ldr	r3, [pc, #68]	; (8002040 <_sbrk+0x64>)
 8001ffa:	4a12      	ldr	r2, [pc, #72]	; (8002044 <_sbrk+0x68>)
 8001ffc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ffe:	4b10      	ldr	r3, [pc, #64]	; (8002040 <_sbrk+0x64>)
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4413      	add	r3, r2
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	429a      	cmp	r2, r3
 800200a:	d207      	bcs.n	800201c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800200c:	f003 f8a2 	bl	8005154 <__errno>
 8002010:	4603      	mov	r3, r0
 8002012:	220c      	movs	r2, #12
 8002014:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002016:	f04f 33ff 	mov.w	r3, #4294967295
 800201a:	e009      	b.n	8002030 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800201c:	4b08      	ldr	r3, [pc, #32]	; (8002040 <_sbrk+0x64>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002022:	4b07      	ldr	r3, [pc, #28]	; (8002040 <_sbrk+0x64>)
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4413      	add	r3, r2
 800202a:	4a05      	ldr	r2, [pc, #20]	; (8002040 <_sbrk+0x64>)
 800202c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800202e:	68fb      	ldr	r3, [r7, #12]
}
 8002030:	4618      	mov	r0, r3
 8002032:	3718      	adds	r7, #24
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	20010000 	.word	0x20010000
 800203c:	00000400 	.word	0x00000400
 8002040:	2000025c 	.word	0x2000025c
 8002044:	200003b0 	.word	0x200003b0

08002048 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800204c:	4b06      	ldr	r3, [pc, #24]	; (8002068 <SystemInit+0x20>)
 800204e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002052:	4a05      	ldr	r2, [pc, #20]	; (8002068 <SystemInit+0x20>)
 8002054:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002058:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800205c:	bf00      	nop
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	e000ed00 	.word	0xe000ed00

0800206c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002070:	4b04      	ldr	r3, [pc, #16]	; (8002084 <__NVIC_GetPriorityGrouping+0x18>)
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	0a1b      	lsrs	r3, r3, #8
 8002076:	f003 0307 	and.w	r3, r3, #7
}
 800207a:	4618      	mov	r0, r3
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr
 8002084:	e000ed00 	.word	0xe000ed00

08002088 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	4603      	mov	r3, r0
 8002090:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002096:	2b00      	cmp	r3, #0
 8002098:	db0b      	blt.n	80020b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800209a:	79fb      	ldrb	r3, [r7, #7]
 800209c:	f003 021f 	and.w	r2, r3, #31
 80020a0:	4907      	ldr	r1, [pc, #28]	; (80020c0 <__NVIC_EnableIRQ+0x38>)
 80020a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a6:	095b      	lsrs	r3, r3, #5
 80020a8:	2001      	movs	r0, #1
 80020aa:	fa00 f202 	lsl.w	r2, r0, r2
 80020ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020b2:	bf00      	nop
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	e000e100 	.word	0xe000e100

080020c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	4603      	mov	r3, r0
 80020cc:	6039      	str	r1, [r7, #0]
 80020ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	db0a      	blt.n	80020ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	b2da      	uxtb	r2, r3
 80020dc:	490c      	ldr	r1, [pc, #48]	; (8002110 <__NVIC_SetPriority+0x4c>)
 80020de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e2:	0112      	lsls	r2, r2, #4
 80020e4:	b2d2      	uxtb	r2, r2
 80020e6:	440b      	add	r3, r1
 80020e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020ec:	e00a      	b.n	8002104 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	b2da      	uxtb	r2, r3
 80020f2:	4908      	ldr	r1, [pc, #32]	; (8002114 <__NVIC_SetPriority+0x50>)
 80020f4:	79fb      	ldrb	r3, [r7, #7]
 80020f6:	f003 030f 	and.w	r3, r3, #15
 80020fa:	3b04      	subs	r3, #4
 80020fc:	0112      	lsls	r2, r2, #4
 80020fe:	b2d2      	uxtb	r2, r2
 8002100:	440b      	add	r3, r1
 8002102:	761a      	strb	r2, [r3, #24]
}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	e000e100 	.word	0xe000e100
 8002114:	e000ed00 	.word	0xe000ed00

08002118 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002118:	b480      	push	{r7}
 800211a:	b089      	sub	sp, #36	; 0x24
 800211c:	af00      	add	r7, sp, #0
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	60b9      	str	r1, [r7, #8]
 8002122:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f003 0307 	and.w	r3, r3, #7
 800212a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	f1c3 0307 	rsb	r3, r3, #7
 8002132:	2b04      	cmp	r3, #4
 8002134:	bf28      	it	cs
 8002136:	2304      	movcs	r3, #4
 8002138:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	3304      	adds	r3, #4
 800213e:	2b06      	cmp	r3, #6
 8002140:	d902      	bls.n	8002148 <NVIC_EncodePriority+0x30>
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	3b03      	subs	r3, #3
 8002146:	e000      	b.n	800214a <NVIC_EncodePriority+0x32>
 8002148:	2300      	movs	r3, #0
 800214a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800214c:	f04f 32ff 	mov.w	r2, #4294967295
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	fa02 f303 	lsl.w	r3, r2, r3
 8002156:	43da      	mvns	r2, r3
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	401a      	ands	r2, r3
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002160:	f04f 31ff 	mov.w	r1, #4294967295
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	fa01 f303 	lsl.w	r3, r1, r3
 800216a:	43d9      	mvns	r1, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002170:	4313      	orrs	r3, r2
         );
}
 8002172:	4618      	mov	r0, r3
 8002174:	3724      	adds	r7, #36	; 0x24
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <LL_TIM_EnableARRPreload>:
{
 800217e:	b480      	push	{r7}
 8002180:	b083      	sub	sp, #12
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	601a      	str	r2, [r3, #0]
}
 8002192:	bf00      	nop
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
	...

080021a0 <LL_TIM_OC_EnableFast>:
{
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d01c      	beq.n	80021ea <LL_TIM_OC_EnableFast+0x4a>
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	2b04      	cmp	r3, #4
 80021b4:	d017      	beq.n	80021e6 <LL_TIM_OC_EnableFast+0x46>
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	2b10      	cmp	r3, #16
 80021ba:	d012      	beq.n	80021e2 <LL_TIM_OC_EnableFast+0x42>
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	2b40      	cmp	r3, #64	; 0x40
 80021c0:	d00d      	beq.n	80021de <LL_TIM_OC_EnableFast+0x3e>
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021c8:	d007      	beq.n	80021da <LL_TIM_OC_EnableFast+0x3a>
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021d0:	d101      	bne.n	80021d6 <LL_TIM_OC_EnableFast+0x36>
 80021d2:	2305      	movs	r3, #5
 80021d4:	e00a      	b.n	80021ec <LL_TIM_OC_EnableFast+0x4c>
 80021d6:	2306      	movs	r3, #6
 80021d8:	e008      	b.n	80021ec <LL_TIM_OC_EnableFast+0x4c>
 80021da:	2304      	movs	r3, #4
 80021dc:	e006      	b.n	80021ec <LL_TIM_OC_EnableFast+0x4c>
 80021de:	2303      	movs	r3, #3
 80021e0:	e004      	b.n	80021ec <LL_TIM_OC_EnableFast+0x4c>
 80021e2:	2302      	movs	r3, #2
 80021e4:	e002      	b.n	80021ec <LL_TIM_OC_EnableFast+0x4c>
 80021e6:	2301      	movs	r3, #1
 80021e8:	e000      	b.n	80021ec <LL_TIM_OC_EnableFast+0x4c>
 80021ea:	2300      	movs	r3, #0
 80021ec:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	3318      	adds	r3, #24
 80021f2:	4619      	mov	r1, r3
 80021f4:	7bfb      	ldrb	r3, [r7, #15]
 80021f6:	4a0a      	ldr	r2, [pc, #40]	; (8002220 <LL_TIM_OC_EnableFast+0x80>)
 80021f8:	5cd3      	ldrb	r3, [r2, r3]
 80021fa:	440b      	add	r3, r1
 80021fc:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	7bfb      	ldrb	r3, [r7, #15]
 8002204:	4907      	ldr	r1, [pc, #28]	; (8002224 <LL_TIM_OC_EnableFast+0x84>)
 8002206:	5ccb      	ldrb	r3, [r1, r3]
 8002208:	4619      	mov	r1, r3
 800220a:	2304      	movs	r3, #4
 800220c:	408b      	lsls	r3, r1
 800220e:	431a      	orrs	r2, r3
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	601a      	str	r2, [r3, #0]
}
 8002214:	bf00      	nop
 8002216:	3714      	adds	r7, #20
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr
 8002220:	080074f4 	.word	0x080074f4
 8002224:	080074fc 	.word	0x080074fc

08002228 <LL_TIM_OC_EnablePreload>:
{
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	2b01      	cmp	r3, #1
 8002236:	d01c      	beq.n	8002272 <LL_TIM_OC_EnablePreload+0x4a>
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	2b04      	cmp	r3, #4
 800223c:	d017      	beq.n	800226e <LL_TIM_OC_EnablePreload+0x46>
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	2b10      	cmp	r3, #16
 8002242:	d012      	beq.n	800226a <LL_TIM_OC_EnablePreload+0x42>
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	2b40      	cmp	r3, #64	; 0x40
 8002248:	d00d      	beq.n	8002266 <LL_TIM_OC_EnablePreload+0x3e>
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002250:	d007      	beq.n	8002262 <LL_TIM_OC_EnablePreload+0x3a>
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002258:	d101      	bne.n	800225e <LL_TIM_OC_EnablePreload+0x36>
 800225a:	2305      	movs	r3, #5
 800225c:	e00a      	b.n	8002274 <LL_TIM_OC_EnablePreload+0x4c>
 800225e:	2306      	movs	r3, #6
 8002260:	e008      	b.n	8002274 <LL_TIM_OC_EnablePreload+0x4c>
 8002262:	2304      	movs	r3, #4
 8002264:	e006      	b.n	8002274 <LL_TIM_OC_EnablePreload+0x4c>
 8002266:	2303      	movs	r3, #3
 8002268:	e004      	b.n	8002274 <LL_TIM_OC_EnablePreload+0x4c>
 800226a:	2302      	movs	r3, #2
 800226c:	e002      	b.n	8002274 <LL_TIM_OC_EnablePreload+0x4c>
 800226e:	2301      	movs	r3, #1
 8002270:	e000      	b.n	8002274 <LL_TIM_OC_EnablePreload+0x4c>
 8002272:	2300      	movs	r3, #0
 8002274:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	3318      	adds	r3, #24
 800227a:	4619      	mov	r1, r3
 800227c:	7bfb      	ldrb	r3, [r7, #15]
 800227e:	4a0a      	ldr	r2, [pc, #40]	; (80022a8 <LL_TIM_OC_EnablePreload+0x80>)
 8002280:	5cd3      	ldrb	r3, [r2, r3]
 8002282:	440b      	add	r3, r1
 8002284:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	7bfb      	ldrb	r3, [r7, #15]
 800228c:	4907      	ldr	r1, [pc, #28]	; (80022ac <LL_TIM_OC_EnablePreload+0x84>)
 800228e:	5ccb      	ldrb	r3, [r1, r3]
 8002290:	4619      	mov	r1, r3
 8002292:	2308      	movs	r3, #8
 8002294:	408b      	lsls	r3, r1
 8002296:	431a      	orrs	r2, r3
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	601a      	str	r2, [r3, #0]
}
 800229c:	bf00      	nop
 800229e:	3714      	adds	r7, #20
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr
 80022a8:	080074f4 	.word	0x080074f4
 80022ac:	080074fc 	.word	0x080074fc

080022b0 <LL_TIM_SetClockSource>:
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022c2:	f023 0307 	bic.w	r3, r3, #7
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	431a      	orrs	r2, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	609a      	str	r2, [r3, #8]
}
 80022ce:	bf00      	nop
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr

080022da <LL_TIM_SetTriggerOutput>:
{
 80022da:	b480      	push	{r7}
 80022dc:	b083      	sub	sp, #12
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
 80022e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	431a      	orrs	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	605a      	str	r2, [r3, #4]
}
 80022f4:	bf00      	nop
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <LL_TIM_DisableMasterSlaveMode>:
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	609a      	str	r2, [r3, #8]
}
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <LL_AHB1_GRP1_EnableClock>:
{
 8002320:	b480      	push	{r7}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002328:	4b08      	ldr	r3, [pc, #32]	; (800234c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800232a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800232c:	4907      	ldr	r1, [pc, #28]	; (800234c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4313      	orrs	r3, r2
 8002332:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002334:	4b05      	ldr	r3, [pc, #20]	; (800234c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002336:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4013      	ands	r3, r2
 800233c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800233e:	68fb      	ldr	r3, [r7, #12]
}
 8002340:	bf00      	nop
 8002342:	3714      	adds	r7, #20
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr
 800234c:	40023800 	.word	0x40023800

08002350 <LL_APB1_GRP1_EnableClock>:
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002358:	4b08      	ldr	r3, [pc, #32]	; (800237c <LL_APB1_GRP1_EnableClock+0x2c>)
 800235a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800235c:	4907      	ldr	r1, [pc, #28]	; (800237c <LL_APB1_GRP1_EnableClock+0x2c>)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4313      	orrs	r3, r2
 8002362:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002364:	4b05      	ldr	r3, [pc, #20]	; (800237c <LL_APB1_GRP1_EnableClock+0x2c>)
 8002366:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	4013      	ands	r3, r2
 800236c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800236e:	68fb      	ldr	r3, [r7, #12]
}
 8002370:	bf00      	nop
 8002372:	3714      	adds	r7, #20
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr
 800237c:	40023800 	.word	0x40023800

08002380 <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b094      	sub	sp, #80	; 0x50
 8002384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002386:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800238a:	2200      	movs	r2, #0
 800238c:	601a      	str	r2, [r3, #0]
 800238e:	605a      	str	r2, [r3, #4]
 8002390:	609a      	str	r2, [r3, #8]
 8002392:	60da      	str	r2, [r3, #12]
 8002394:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8002396:	f107 031c 	add.w	r3, r7, #28
 800239a:	2220      	movs	r2, #32
 800239c:	2100      	movs	r1, #0
 800239e:	4618      	mov	r0, r3
 80023a0:	f002 fe85 	bl	80050ae <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a4:	1d3b      	adds	r3, r7, #4
 80023a6:	2200      	movs	r2, #0
 80023a8:	601a      	str	r2, [r3, #0]
 80023aa:	605a      	str	r2, [r3, #4]
 80023ac:	609a      	str	r2, [r3, #8]
 80023ae:	60da      	str	r2, [r3, #12]
 80023b0:	611a      	str	r2, [r3, #16]
 80023b2:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 80023b4:	2001      	movs	r0, #1
 80023b6:	f7ff ffcb 	bl	8002350 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 80023ba:	2300      	movs	r3, #0
 80023bc:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80023be:	2300      	movs	r3, #0
 80023c0:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 15999;
 80023c2:	f643 637f 	movw	r3, #15999	; 0x3e7f
 80023c6:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80023c8:	2300      	movs	r3, #0
 80023ca:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 80023cc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80023d0:	4619      	mov	r1, r3
 80023d2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80023d6:	f001 fbeb 	bl	8003bb0 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM2);
 80023da:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80023de:	f7ff fece 	bl	800217e <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 80023e2:	2100      	movs	r1, #0
 80023e4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80023e8:	f7ff ff62 	bl	80022b0 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH1);
 80023ec:	2101      	movs	r1, #1
 80023ee:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80023f2:	f7ff ff19 	bl	8002228 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80023f6:	2360      	movs	r3, #96	; 0x60
 80023f8:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80023fa:	2300      	movs	r3, #0
 80023fc:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80023fe:	2300      	movs	r3, #0
 8002400:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8002402:	2300      	movs	r3, #0
 8002404:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002406:	2300      	movs	r3, #0
 8002408:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 800240a:	f107 031c 	add.w	r3, r7, #28
 800240e:	461a      	mov	r2, r3
 8002410:	2101      	movs	r1, #1
 8002412:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002416:	f001 fc45 	bl	8003ca4 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM2, LL_TIM_CHANNEL_CH1);
 800241a:	2101      	movs	r1, #1
 800241c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002420:	f7ff febe 	bl	80021a0 <LL_TIM_OC_EnableFast>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH2);
 8002424:	2110      	movs	r1, #16
 8002426:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800242a:	f7ff fefd 	bl	8002228 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 800242e:	f107 031c 	add.w	r3, r7, #28
 8002432:	461a      	mov	r2, r3
 8002434:	2110      	movs	r1, #16
 8002436:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800243a:	f001 fc33 	bl	8003ca4 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM2, LL_TIM_CHANNEL_CH2);
 800243e:	2110      	movs	r1, #16
 8002440:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002444:	f7ff feac 	bl	80021a0 <LL_TIM_OC_EnableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8002448:	2100      	movs	r1, #0
 800244a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800244e:	f7ff ff44 	bl	80022da <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8002452:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002456:	f7ff ff53 	bl	8002300 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800245a:	2001      	movs	r0, #1
 800245c:	f7ff ff60 	bl	8002320 <LL_AHB1_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 8002460:	2303      	movs	r3, #3
 8002462:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002464:	2302      	movs	r3, #2
 8002466:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002468:	2300      	movs	r3, #0
 800246a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800246c:	2300      	movs	r3, #0
 800246e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002470:	2300      	movs	r3, #0
 8002472:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8002474:	2301      	movs	r3, #1
 8002476:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002478:	1d3b      	adds	r3, r7, #4
 800247a:	4619      	mov	r1, r3
 800247c:	4803      	ldr	r0, [pc, #12]	; (800248c <MX_TIM2_Init+0x10c>)
 800247e:	f001 f832 	bl	80034e6 <LL_GPIO_Init>

}
 8002482:	bf00      	nop
 8002484:	3750      	adds	r7, #80	; 0x50
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	40020000 	.word	0x40020000

08002490 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002496:	1d3b      	adds	r3, r7, #4
 8002498:	2200      	movs	r2, #0
 800249a:	601a      	str	r2, [r3, #0]
 800249c:	605a      	str	r2, [r3, #4]
 800249e:	609a      	str	r2, [r3, #8]
 80024a0:	60da      	str	r2, [r3, #12]
 80024a2:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 80024a4:	2002      	movs	r0, #2
 80024a6:	f7ff ff53 	bl	8002350 <LL_APB1_GRP1_EnableClock>

  /* TIM3 interrupt Init */
  NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80024aa:	f7ff fddf 	bl	800206c <__NVIC_GetPriorityGrouping>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2200      	movs	r2, #0
 80024b2:	2100      	movs	r1, #0
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7ff fe2f 	bl	8002118 <NVIC_EncodePriority>
 80024ba:	4603      	mov	r3, r0
 80024bc:	4619      	mov	r1, r3
 80024be:	201d      	movs	r0, #29
 80024c0:	f7ff fe00 	bl	80020c4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 80024c4:	201d      	movs	r0, #29
 80024c6:	f7ff fddf 	bl	8002088 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 80024ca:	2300      	movs	r3, #0
 80024cc:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80024ce:	2300      	movs	r3, #0
 80024d0:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 15999;
 80024d2:	f643 637f 	movw	r3, #15999	; 0x3e7f
 80024d6:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80024d8:	2300      	movs	r3, #0
 80024da:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 80024dc:	1d3b      	adds	r3, r7, #4
 80024de:	4619      	mov	r1, r3
 80024e0:	480a      	ldr	r0, [pc, #40]	; (800250c <MX_TIM3_Init+0x7c>)
 80024e2:	f001 fb65 	bl	8003bb0 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM3);
 80024e6:	4809      	ldr	r0, [pc, #36]	; (800250c <MX_TIM3_Init+0x7c>)
 80024e8:	f7ff fe49 	bl	800217e <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 80024ec:	2100      	movs	r1, #0
 80024ee:	4807      	ldr	r0, [pc, #28]	; (800250c <MX_TIM3_Init+0x7c>)
 80024f0:	f7ff fede 	bl	80022b0 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 80024f4:	2100      	movs	r1, #0
 80024f6:	4805      	ldr	r0, [pc, #20]	; (800250c <MX_TIM3_Init+0x7c>)
 80024f8:	f7ff feef 	bl	80022da <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 80024fc:	4803      	ldr	r0, [pc, #12]	; (800250c <MX_TIM3_Init+0x7c>)
 80024fe:	f7ff feff 	bl	8002300 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002502:	bf00      	nop
 8002504:	3718      	adds	r7, #24
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	40000400 	.word	0x40000400

08002510 <__NVIC_GetPriorityGrouping>:
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002514:	4b04      	ldr	r3, [pc, #16]	; (8002528 <__NVIC_GetPriorityGrouping+0x18>)
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	0a1b      	lsrs	r3, r3, #8
 800251a:	f003 0307 	and.w	r3, r3, #7
}
 800251e:	4618      	mov	r0, r3
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr
 8002528:	e000ed00 	.word	0xe000ed00

0800252c <__NVIC_EnableIRQ>:
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	4603      	mov	r3, r0
 8002534:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253a:	2b00      	cmp	r3, #0
 800253c:	db0b      	blt.n	8002556 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800253e:	79fb      	ldrb	r3, [r7, #7]
 8002540:	f003 021f 	and.w	r2, r3, #31
 8002544:	4907      	ldr	r1, [pc, #28]	; (8002564 <__NVIC_EnableIRQ+0x38>)
 8002546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254a:	095b      	lsrs	r3, r3, #5
 800254c:	2001      	movs	r0, #1
 800254e:	fa00 f202 	lsl.w	r2, r0, r2
 8002552:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002556:	bf00      	nop
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	e000e100 	.word	0xe000e100

08002568 <__NVIC_SetPriority>:
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	4603      	mov	r3, r0
 8002570:	6039      	str	r1, [r7, #0]
 8002572:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002574:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002578:	2b00      	cmp	r3, #0
 800257a:	db0a      	blt.n	8002592 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	b2da      	uxtb	r2, r3
 8002580:	490c      	ldr	r1, [pc, #48]	; (80025b4 <__NVIC_SetPriority+0x4c>)
 8002582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002586:	0112      	lsls	r2, r2, #4
 8002588:	b2d2      	uxtb	r2, r2
 800258a:	440b      	add	r3, r1
 800258c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002590:	e00a      	b.n	80025a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	b2da      	uxtb	r2, r3
 8002596:	4908      	ldr	r1, [pc, #32]	; (80025b8 <__NVIC_SetPriority+0x50>)
 8002598:	79fb      	ldrb	r3, [r7, #7]
 800259a:	f003 030f 	and.w	r3, r3, #15
 800259e:	3b04      	subs	r3, #4
 80025a0:	0112      	lsls	r2, r2, #4
 80025a2:	b2d2      	uxtb	r2, r2
 80025a4:	440b      	add	r3, r1
 80025a6:	761a      	strb	r2, [r3, #24]
}
 80025a8:	bf00      	nop
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	e000e100 	.word	0xe000e100
 80025b8:	e000ed00 	.word	0xe000ed00

080025bc <NVIC_EncodePriority>:
{
 80025bc:	b480      	push	{r7}
 80025be:	b089      	sub	sp, #36	; 0x24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f003 0307 	and.w	r3, r3, #7
 80025ce:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	f1c3 0307 	rsb	r3, r3, #7
 80025d6:	2b04      	cmp	r3, #4
 80025d8:	bf28      	it	cs
 80025da:	2304      	movcs	r3, #4
 80025dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	3304      	adds	r3, #4
 80025e2:	2b06      	cmp	r3, #6
 80025e4:	d902      	bls.n	80025ec <NVIC_EncodePriority+0x30>
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	3b03      	subs	r3, #3
 80025ea:	e000      	b.n	80025ee <NVIC_EncodePriority+0x32>
 80025ec:	2300      	movs	r3, #0
 80025ee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025f0:	f04f 32ff 	mov.w	r2, #4294967295
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	fa02 f303 	lsl.w	r3, r2, r3
 80025fa:	43da      	mvns	r2, r3
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	401a      	ands	r2, r3
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002604:	f04f 31ff 	mov.w	r1, #4294967295
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	fa01 f303 	lsl.w	r3, r1, r3
 800260e:	43d9      	mvns	r1, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002614:	4313      	orrs	r3, r2
}
 8002616:	4618      	mov	r0, r3
 8002618:	3724      	adds	r7, #36	; 0x24
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr

08002622 <LL_USART_Enable>:
{
 8002622:	b480      	push	{r7}
 8002624:	b083      	sub	sp, #12
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	60da      	str	r2, [r3, #12]
}
 8002636:	bf00      	nop
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr

08002642 <LL_USART_ConfigAsyncMode>:
{
 8002642:	b480      	push	{r7}
 8002644:	b083      	sub	sp, #12
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	695b      	ldr	r3, [r3, #20]
 800265a:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	615a      	str	r2, [r3, #20]
}
 8002662:	bf00      	nop
 8002664:	370c      	adds	r7, #12
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
	...

08002670 <LL_AHB1_GRP1_EnableClock>:
{
 8002670:	b480      	push	{r7}
 8002672:	b085      	sub	sp, #20
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002678:	4b08      	ldr	r3, [pc, #32]	; (800269c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800267a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800267c:	4907      	ldr	r1, [pc, #28]	; (800269c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4313      	orrs	r3, r2
 8002682:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002684:	4b05      	ldr	r3, [pc, #20]	; (800269c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002686:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4013      	ands	r3, r2
 800268c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800268e:	68fb      	ldr	r3, [r7, #12]
}
 8002690:	bf00      	nop
 8002692:	3714      	adds	r7, #20
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr
 800269c:	40023800 	.word	0x40023800

080026a0 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b085      	sub	sp, #20
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80026a8:	4b08      	ldr	r3, [pc, #32]	; (80026cc <LL_APB2_GRP1_EnableClock+0x2c>)
 80026aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026ac:	4907      	ldr	r1, [pc, #28]	; (80026cc <LL_APB2_GRP1_EnableClock+0x2c>)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80026b4:	4b05      	ldr	r3, [pc, #20]	; (80026cc <LL_APB2_GRP1_EnableClock+0x2c>)
 80026b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	4013      	ands	r3, r2
 80026bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80026be:	68fb      	ldr	r3, [r7, #12]
}
 80026c0:	bf00      	nop
 80026c2:	3714      	adds	r7, #20
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr
 80026cc:	40023800 	.word	0x40023800

080026d0 <MX_USART6_UART_Init>:
/* USER CODE END 0 */

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b08e      	sub	sp, #56	; 0x38
 80026d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80026d6:	f107 031c 	add.w	r3, r7, #28
 80026da:	2200      	movs	r2, #0
 80026dc:	601a      	str	r2, [r3, #0]
 80026de:	605a      	str	r2, [r3, #4]
 80026e0:	609a      	str	r2, [r3, #8]
 80026e2:	60da      	str	r2, [r3, #12]
 80026e4:	611a      	str	r2, [r3, #16]
 80026e6:	615a      	str	r2, [r3, #20]
 80026e8:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ea:	1d3b      	adds	r3, r7, #4
 80026ec:	2200      	movs	r2, #0
 80026ee:	601a      	str	r2, [r3, #0]
 80026f0:	605a      	str	r2, [r3, #4]
 80026f2:	609a      	str	r2, [r3, #8]
 80026f4:	60da      	str	r2, [r3, #12]
 80026f6:	611a      	str	r2, [r3, #16]
 80026f8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 80026fa:	2020      	movs	r0, #32
 80026fc:	f7ff ffd0 	bl	80026a0 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002700:	2001      	movs	r0, #1
 8002702:	f7ff ffb5 	bl	8002670 <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PA11   ------> USART6_TX
  PA12   ------> USART6_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 8002706:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800270a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800270c:	2302      	movs	r3, #2
 800270e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002710:	2303      	movs	r3, #3
 8002712:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002714:	2300      	movs	r3, #0
 8002716:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002718:	2300      	movs	r3, #0
 800271a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800271c:	2308      	movs	r3, #8
 800271e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002720:	1d3b      	adds	r3, r7, #4
 8002722:	4619      	mov	r1, r3
 8002724:	4818      	ldr	r0, [pc, #96]	; (8002788 <MX_USART6_UART_Init+0xb8>)
 8002726:	f000 fede 	bl	80034e6 <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800272a:	f7ff fef1 	bl	8002510 <__NVIC_GetPriorityGrouping>
 800272e:	4603      	mov	r3, r0
 8002730:	2200      	movs	r2, #0
 8002732:	2100      	movs	r1, #0
 8002734:	4618      	mov	r0, r3
 8002736:	f7ff ff41 	bl	80025bc <NVIC_EncodePriority>
 800273a:	4603      	mov	r3, r0
 800273c:	4619      	mov	r1, r3
 800273e:	2047      	movs	r0, #71	; 0x47
 8002740:	f7ff ff12 	bl	8002568 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 8002744:	2047      	movs	r0, #71	; 0x47
 8002746:	f7ff fef1 	bl	800252c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800274a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800274e:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002750:	2300      	movs	r3, #0
 8002752:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002754:	2300      	movs	r3, #0
 8002756:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002758:	2300      	movs	r3, #0
 800275a:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800275c:	230c      	movs	r3, #12
 800275e:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002760:	2300      	movs	r3, #0
 8002762:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002764:	2300      	movs	r3, #0
 8002766:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART6, &USART_InitStruct);
 8002768:	f107 031c 	add.w	r3, r7, #28
 800276c:	4619      	mov	r1, r3
 800276e:	4807      	ldr	r0, [pc, #28]	; (800278c <MX_USART6_UART_Init+0xbc>)
 8002770:	f001 fece 	bl	8004510 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 8002774:	4805      	ldr	r0, [pc, #20]	; (800278c <MX_USART6_UART_Init+0xbc>)
 8002776:	f7ff ff64 	bl	8002642 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 800277a:	4804      	ldr	r0, [pc, #16]	; (800278c <MX_USART6_UART_Init+0xbc>)
 800277c:	f7ff ff51 	bl	8002622 <LL_USART_Enable>
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002780:	bf00      	nop
 8002782:	3738      	adds	r7, #56	; 0x38
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	40020000 	.word	0x40020000
 800278c:	40011400 	.word	0x40011400

08002790 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002790:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027c8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002794:	480d      	ldr	r0, [pc, #52]	; (80027cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002796:	490e      	ldr	r1, [pc, #56]	; (80027d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002798:	4a0e      	ldr	r2, [pc, #56]	; (80027d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800279a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800279c:	e002      	b.n	80027a4 <LoopCopyDataInit>

0800279e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800279e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027a2:	3304      	adds	r3, #4

080027a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027a8:	d3f9      	bcc.n	800279e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027aa:	4a0b      	ldr	r2, [pc, #44]	; (80027d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80027ac:	4c0b      	ldr	r4, [pc, #44]	; (80027dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80027ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027b0:	e001      	b.n	80027b6 <LoopFillZerobss>

080027b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027b4:	3204      	adds	r2, #4

080027b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027b8:	d3fb      	bcc.n	80027b2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80027ba:	f7ff fc45 	bl	8002048 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027be:	f002 fccf 	bl	8005160 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027c2:	f7ff fa33 	bl	8001c2c <main>
  bx  lr    
 80027c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80027c8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80027cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027d0:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80027d4:	080078c8 	.word	0x080078c8
  ldr r2, =_sbss
 80027d8:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80027dc:	200003b0 	.word	0x200003b0

080027e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027e0:	e7fe      	b.n	80027e0 <ADC_IRQHandler>
	...

080027e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027e8:	4b0e      	ldr	r3, [pc, #56]	; (8002824 <HAL_Init+0x40>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a0d      	ldr	r2, [pc, #52]	; (8002824 <HAL_Init+0x40>)
 80027ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027f4:	4b0b      	ldr	r3, [pc, #44]	; (8002824 <HAL_Init+0x40>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a0a      	ldr	r2, [pc, #40]	; (8002824 <HAL_Init+0x40>)
 80027fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002800:	4b08      	ldr	r3, [pc, #32]	; (8002824 <HAL_Init+0x40>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a07      	ldr	r2, [pc, #28]	; (8002824 <HAL_Init+0x40>)
 8002806:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800280a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800280c:	2003      	movs	r0, #3
 800280e:	f000 f90d 	bl	8002a2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002812:	200f      	movs	r0, #15
 8002814:	f000 f808 	bl	8002828 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002818:	f7ff fab0 	bl	8001d7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800281c:	2300      	movs	r3, #0
}
 800281e:	4618      	mov	r0, r3
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	40023c00 	.word	0x40023c00

08002828 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002830:	4b12      	ldr	r3, [pc, #72]	; (800287c <HAL_InitTick+0x54>)
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	4b12      	ldr	r3, [pc, #72]	; (8002880 <HAL_InitTick+0x58>)
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	4619      	mov	r1, r3
 800283a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800283e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002842:	fbb2 f3f3 	udiv	r3, r2, r3
 8002846:	4618      	mov	r0, r3
 8002848:	f000 f917 	bl	8002a7a <HAL_SYSTICK_Config>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e00e      	b.n	8002874 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2b0f      	cmp	r3, #15
 800285a:	d80a      	bhi.n	8002872 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800285c:	2200      	movs	r2, #0
 800285e:	6879      	ldr	r1, [r7, #4]
 8002860:	f04f 30ff 	mov.w	r0, #4294967295
 8002864:	f000 f8ed 	bl	8002a42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002868:	4a06      	ldr	r2, [pc, #24]	; (8002884 <HAL_InitTick+0x5c>)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800286e:	2300      	movs	r3, #0
 8002870:	e000      	b.n	8002874 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
}
 8002874:	4618      	mov	r0, r3
 8002876:	3708      	adds	r7, #8
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	20000000 	.word	0x20000000
 8002880:	20000008 	.word	0x20000008
 8002884:	20000004 	.word	0x20000004

08002888 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800288c:	4b06      	ldr	r3, [pc, #24]	; (80028a8 <HAL_IncTick+0x20>)
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	461a      	mov	r2, r3
 8002892:	4b06      	ldr	r3, [pc, #24]	; (80028ac <HAL_IncTick+0x24>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4413      	add	r3, r2
 8002898:	4a04      	ldr	r2, [pc, #16]	; (80028ac <HAL_IncTick+0x24>)
 800289a:	6013      	str	r3, [r2, #0]
}
 800289c:	bf00      	nop
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	20000008 	.word	0x20000008
 80028ac:	20000260 	.word	0x20000260

080028b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0
  return uwTick;
 80028b4:	4b03      	ldr	r3, [pc, #12]	; (80028c4 <HAL_GetTick+0x14>)
 80028b6:	681b      	ldr	r3, [r3, #0]
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	20000260 	.word	0x20000260

080028c8 <__NVIC_SetPriorityGrouping>:
{
 80028c8:	b480      	push	{r7}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f003 0307 	and.w	r3, r3, #7
 80028d6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028d8:	4b0c      	ldr	r3, [pc, #48]	; (800290c <__NVIC_SetPriorityGrouping+0x44>)
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028de:	68ba      	ldr	r2, [r7, #8]
 80028e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028e4:	4013      	ands	r3, r2
 80028e6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028fa:	4a04      	ldr	r2, [pc, #16]	; (800290c <__NVIC_SetPriorityGrouping+0x44>)
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	60d3      	str	r3, [r2, #12]
}
 8002900:	bf00      	nop
 8002902:	3714      	adds	r7, #20
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr
 800290c:	e000ed00 	.word	0xe000ed00

08002910 <__NVIC_GetPriorityGrouping>:
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002914:	4b04      	ldr	r3, [pc, #16]	; (8002928 <__NVIC_GetPriorityGrouping+0x18>)
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	0a1b      	lsrs	r3, r3, #8
 800291a:	f003 0307 	and.w	r3, r3, #7
}
 800291e:	4618      	mov	r0, r3
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr
 8002928:	e000ed00 	.word	0xe000ed00

0800292c <__NVIC_SetPriority>:
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	4603      	mov	r3, r0
 8002934:	6039      	str	r1, [r7, #0]
 8002936:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800293c:	2b00      	cmp	r3, #0
 800293e:	db0a      	blt.n	8002956 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	b2da      	uxtb	r2, r3
 8002944:	490c      	ldr	r1, [pc, #48]	; (8002978 <__NVIC_SetPriority+0x4c>)
 8002946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294a:	0112      	lsls	r2, r2, #4
 800294c:	b2d2      	uxtb	r2, r2
 800294e:	440b      	add	r3, r1
 8002950:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002954:	e00a      	b.n	800296c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	b2da      	uxtb	r2, r3
 800295a:	4908      	ldr	r1, [pc, #32]	; (800297c <__NVIC_SetPriority+0x50>)
 800295c:	79fb      	ldrb	r3, [r7, #7]
 800295e:	f003 030f 	and.w	r3, r3, #15
 8002962:	3b04      	subs	r3, #4
 8002964:	0112      	lsls	r2, r2, #4
 8002966:	b2d2      	uxtb	r2, r2
 8002968:	440b      	add	r3, r1
 800296a:	761a      	strb	r2, [r3, #24]
}
 800296c:	bf00      	nop
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr
 8002978:	e000e100 	.word	0xe000e100
 800297c:	e000ed00 	.word	0xe000ed00

08002980 <NVIC_EncodePriority>:
{
 8002980:	b480      	push	{r7}
 8002982:	b089      	sub	sp, #36	; 0x24
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f003 0307 	and.w	r3, r3, #7
 8002992:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	f1c3 0307 	rsb	r3, r3, #7
 800299a:	2b04      	cmp	r3, #4
 800299c:	bf28      	it	cs
 800299e:	2304      	movcs	r3, #4
 80029a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	3304      	adds	r3, #4
 80029a6:	2b06      	cmp	r3, #6
 80029a8:	d902      	bls.n	80029b0 <NVIC_EncodePriority+0x30>
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	3b03      	subs	r3, #3
 80029ae:	e000      	b.n	80029b2 <NVIC_EncodePriority+0x32>
 80029b0:	2300      	movs	r3, #0
 80029b2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029b4:	f04f 32ff 	mov.w	r2, #4294967295
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	fa02 f303 	lsl.w	r3, r2, r3
 80029be:	43da      	mvns	r2, r3
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	401a      	ands	r2, r3
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029c8:	f04f 31ff 	mov.w	r1, #4294967295
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	fa01 f303 	lsl.w	r3, r1, r3
 80029d2:	43d9      	mvns	r1, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029d8:	4313      	orrs	r3, r2
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3724      	adds	r7, #36	; 0x24
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
	...

080029e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	3b01      	subs	r3, #1
 80029f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029f8:	d301      	bcc.n	80029fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029fa:	2301      	movs	r3, #1
 80029fc:	e00f      	b.n	8002a1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029fe:	4a0a      	ldr	r2, [pc, #40]	; (8002a28 <SysTick_Config+0x40>)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	3b01      	subs	r3, #1
 8002a04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a06:	210f      	movs	r1, #15
 8002a08:	f04f 30ff 	mov.w	r0, #4294967295
 8002a0c:	f7ff ff8e 	bl	800292c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a10:	4b05      	ldr	r3, [pc, #20]	; (8002a28 <SysTick_Config+0x40>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a16:	4b04      	ldr	r3, [pc, #16]	; (8002a28 <SysTick_Config+0x40>)
 8002a18:	2207      	movs	r2, #7
 8002a1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3708      	adds	r7, #8
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	e000e010 	.word	0xe000e010

08002a2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f7ff ff47 	bl	80028c8 <__NVIC_SetPriorityGrouping>
}
 8002a3a:	bf00      	nop
 8002a3c:	3708      	adds	r7, #8
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b086      	sub	sp, #24
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	4603      	mov	r3, r0
 8002a4a:	60b9      	str	r1, [r7, #8]
 8002a4c:	607a      	str	r2, [r7, #4]
 8002a4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a50:	2300      	movs	r3, #0
 8002a52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a54:	f7ff ff5c 	bl	8002910 <__NVIC_GetPriorityGrouping>
 8002a58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	68b9      	ldr	r1, [r7, #8]
 8002a5e:	6978      	ldr	r0, [r7, #20]
 8002a60:	f7ff ff8e 	bl	8002980 <NVIC_EncodePriority>
 8002a64:	4602      	mov	r2, r0
 8002a66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a6a:	4611      	mov	r1, r2
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7ff ff5d 	bl	800292c <__NVIC_SetPriority>
}
 8002a72:	bf00      	nop
 8002a74:	3718      	adds	r7, #24
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	b082      	sub	sp, #8
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f7ff ffb0 	bl	80029e8 <SysTick_Config>
 8002a88:	4603      	mov	r3, r0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
	...

08002a94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b086      	sub	sp, #24
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e267      	b.n	8002f76 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d075      	beq.n	8002b9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ab2:	4b88      	ldr	r3, [pc, #544]	; (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f003 030c 	and.w	r3, r3, #12
 8002aba:	2b04      	cmp	r3, #4
 8002abc:	d00c      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002abe:	4b85      	ldr	r3, [pc, #532]	; (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ac6:	2b08      	cmp	r3, #8
 8002ac8:	d112      	bne.n	8002af0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002aca:	4b82      	ldr	r3, [pc, #520]	; (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ad2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ad6:	d10b      	bne.n	8002af0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ad8:	4b7e      	ldr	r3, [pc, #504]	; (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d05b      	beq.n	8002b9c <HAL_RCC_OscConfig+0x108>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d157      	bne.n	8002b9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e242      	b.n	8002f76 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002af8:	d106      	bne.n	8002b08 <HAL_RCC_OscConfig+0x74>
 8002afa:	4b76      	ldr	r3, [pc, #472]	; (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a75      	ldr	r2, [pc, #468]	; (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002b00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b04:	6013      	str	r3, [r2, #0]
 8002b06:	e01d      	b.n	8002b44 <HAL_RCC_OscConfig+0xb0>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b10:	d10c      	bne.n	8002b2c <HAL_RCC_OscConfig+0x98>
 8002b12:	4b70      	ldr	r3, [pc, #448]	; (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a6f      	ldr	r2, [pc, #444]	; (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002b18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b1c:	6013      	str	r3, [r2, #0]
 8002b1e:	4b6d      	ldr	r3, [pc, #436]	; (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a6c      	ldr	r2, [pc, #432]	; (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002b24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b28:	6013      	str	r3, [r2, #0]
 8002b2a:	e00b      	b.n	8002b44 <HAL_RCC_OscConfig+0xb0>
 8002b2c:	4b69      	ldr	r3, [pc, #420]	; (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a68      	ldr	r2, [pc, #416]	; (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002b32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b36:	6013      	str	r3, [r2, #0]
 8002b38:	4b66      	ldr	r3, [pc, #408]	; (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a65      	ldr	r2, [pc, #404]	; (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002b3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d013      	beq.n	8002b74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b4c:	f7ff feb0 	bl	80028b0 <HAL_GetTick>
 8002b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b52:	e008      	b.n	8002b66 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b54:	f7ff feac 	bl	80028b0 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b64      	cmp	r3, #100	; 0x64
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e207      	b.n	8002f76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b66:	4b5b      	ldr	r3, [pc, #364]	; (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d0f0      	beq.n	8002b54 <HAL_RCC_OscConfig+0xc0>
 8002b72:	e014      	b.n	8002b9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b74:	f7ff fe9c 	bl	80028b0 <HAL_GetTick>
 8002b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b7a:	e008      	b.n	8002b8e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b7c:	f7ff fe98 	bl	80028b0 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b64      	cmp	r3, #100	; 0x64
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e1f3      	b.n	8002f76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b8e:	4b51      	ldr	r3, [pc, #324]	; (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d1f0      	bne.n	8002b7c <HAL_RCC_OscConfig+0xe8>
 8002b9a:	e000      	b.n	8002b9e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d063      	beq.n	8002c72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002baa:	4b4a      	ldr	r3, [pc, #296]	; (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f003 030c 	and.w	r3, r3, #12
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00b      	beq.n	8002bce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bb6:	4b47      	ldr	r3, [pc, #284]	; (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bbe:	2b08      	cmp	r3, #8
 8002bc0:	d11c      	bne.n	8002bfc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bc2:	4b44      	ldr	r3, [pc, #272]	; (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d116      	bne.n	8002bfc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bce:	4b41      	ldr	r3, [pc, #260]	; (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d005      	beq.n	8002be6 <HAL_RCC_OscConfig+0x152>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d001      	beq.n	8002be6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e1c7      	b.n	8002f76 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002be6:	4b3b      	ldr	r3, [pc, #236]	; (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	4937      	ldr	r1, [pc, #220]	; (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bfa:	e03a      	b.n	8002c72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d020      	beq.n	8002c46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c04:	4b34      	ldr	r3, [pc, #208]	; (8002cd8 <HAL_RCC_OscConfig+0x244>)
 8002c06:	2201      	movs	r2, #1
 8002c08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c0a:	f7ff fe51 	bl	80028b0 <HAL_GetTick>
 8002c0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c10:	e008      	b.n	8002c24 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c12:	f7ff fe4d 	bl	80028b0 <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d901      	bls.n	8002c24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e1a8      	b.n	8002f76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c24:	4b2b      	ldr	r3, [pc, #172]	; (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0302 	and.w	r3, r3, #2
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d0f0      	beq.n	8002c12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c30:	4b28      	ldr	r3, [pc, #160]	; (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	00db      	lsls	r3, r3, #3
 8002c3e:	4925      	ldr	r1, [pc, #148]	; (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	600b      	str	r3, [r1, #0]
 8002c44:	e015      	b.n	8002c72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c46:	4b24      	ldr	r3, [pc, #144]	; (8002cd8 <HAL_RCC_OscConfig+0x244>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c4c:	f7ff fe30 	bl	80028b0 <HAL_GetTick>
 8002c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c52:	e008      	b.n	8002c66 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c54:	f7ff fe2c 	bl	80028b0 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e187      	b.n	8002f76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c66:	4b1b      	ldr	r3, [pc, #108]	; (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d1f0      	bne.n	8002c54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0308 	and.w	r3, r3, #8
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d036      	beq.n	8002cec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d016      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c86:	4b15      	ldr	r3, [pc, #84]	; (8002cdc <HAL_RCC_OscConfig+0x248>)
 8002c88:	2201      	movs	r2, #1
 8002c8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c8c:	f7ff fe10 	bl	80028b0 <HAL_GetTick>
 8002c90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c92:	e008      	b.n	8002ca6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c94:	f7ff fe0c 	bl	80028b0 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e167      	b.n	8002f76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ca6:	4b0b      	ldr	r3, [pc, #44]	; (8002cd4 <HAL_RCC_OscConfig+0x240>)
 8002ca8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d0f0      	beq.n	8002c94 <HAL_RCC_OscConfig+0x200>
 8002cb2:	e01b      	b.n	8002cec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cb4:	4b09      	ldr	r3, [pc, #36]	; (8002cdc <HAL_RCC_OscConfig+0x248>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cba:	f7ff fdf9 	bl	80028b0 <HAL_GetTick>
 8002cbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cc0:	e00e      	b.n	8002ce0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cc2:	f7ff fdf5 	bl	80028b0 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d907      	bls.n	8002ce0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e150      	b.n	8002f76 <HAL_RCC_OscConfig+0x4e2>
 8002cd4:	40023800 	.word	0x40023800
 8002cd8:	42470000 	.word	0x42470000
 8002cdc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ce0:	4b88      	ldr	r3, [pc, #544]	; (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002ce2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ce4:	f003 0302 	and.w	r3, r3, #2
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d1ea      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0304 	and.w	r3, r3, #4
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	f000 8097 	beq.w	8002e28 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cfe:	4b81      	ldr	r3, [pc, #516]	; (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d10f      	bne.n	8002d2a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	60bb      	str	r3, [r7, #8]
 8002d0e:	4b7d      	ldr	r3, [pc, #500]	; (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d12:	4a7c      	ldr	r2, [pc, #496]	; (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002d14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d18:	6413      	str	r3, [r2, #64]	; 0x40
 8002d1a:	4b7a      	ldr	r3, [pc, #488]	; (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d22:	60bb      	str	r3, [r7, #8]
 8002d24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d26:	2301      	movs	r3, #1
 8002d28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d2a:	4b77      	ldr	r3, [pc, #476]	; (8002f08 <HAL_RCC_OscConfig+0x474>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d118      	bne.n	8002d68 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d36:	4b74      	ldr	r3, [pc, #464]	; (8002f08 <HAL_RCC_OscConfig+0x474>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a73      	ldr	r2, [pc, #460]	; (8002f08 <HAL_RCC_OscConfig+0x474>)
 8002d3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d42:	f7ff fdb5 	bl	80028b0 <HAL_GetTick>
 8002d46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d48:	e008      	b.n	8002d5c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d4a:	f7ff fdb1 	bl	80028b0 <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d901      	bls.n	8002d5c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e10c      	b.n	8002f76 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d5c:	4b6a      	ldr	r3, [pc, #424]	; (8002f08 <HAL_RCC_OscConfig+0x474>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d0f0      	beq.n	8002d4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d106      	bne.n	8002d7e <HAL_RCC_OscConfig+0x2ea>
 8002d70:	4b64      	ldr	r3, [pc, #400]	; (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d74:	4a63      	ldr	r2, [pc, #396]	; (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002d76:	f043 0301 	orr.w	r3, r3, #1
 8002d7a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d7c:	e01c      	b.n	8002db8 <HAL_RCC_OscConfig+0x324>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	2b05      	cmp	r3, #5
 8002d84:	d10c      	bne.n	8002da0 <HAL_RCC_OscConfig+0x30c>
 8002d86:	4b5f      	ldr	r3, [pc, #380]	; (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d8a:	4a5e      	ldr	r2, [pc, #376]	; (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002d8c:	f043 0304 	orr.w	r3, r3, #4
 8002d90:	6713      	str	r3, [r2, #112]	; 0x70
 8002d92:	4b5c      	ldr	r3, [pc, #368]	; (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d96:	4a5b      	ldr	r2, [pc, #364]	; (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002d98:	f043 0301 	orr.w	r3, r3, #1
 8002d9c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d9e:	e00b      	b.n	8002db8 <HAL_RCC_OscConfig+0x324>
 8002da0:	4b58      	ldr	r3, [pc, #352]	; (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da4:	4a57      	ldr	r2, [pc, #348]	; (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002da6:	f023 0301 	bic.w	r3, r3, #1
 8002daa:	6713      	str	r3, [r2, #112]	; 0x70
 8002dac:	4b55      	ldr	r3, [pc, #340]	; (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db0:	4a54      	ldr	r2, [pc, #336]	; (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002db2:	f023 0304 	bic.w	r3, r3, #4
 8002db6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d015      	beq.n	8002dec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc0:	f7ff fd76 	bl	80028b0 <HAL_GetTick>
 8002dc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dc6:	e00a      	b.n	8002dde <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dc8:	f7ff fd72 	bl	80028b0 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d901      	bls.n	8002dde <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e0cb      	b.n	8002f76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dde:	4b49      	ldr	r3, [pc, #292]	; (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d0ee      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x334>
 8002dea:	e014      	b.n	8002e16 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dec:	f7ff fd60 	bl	80028b0 <HAL_GetTick>
 8002df0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002df2:	e00a      	b.n	8002e0a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002df4:	f7ff fd5c 	bl	80028b0 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e0b5      	b.n	8002f76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e0a:	4b3e      	ldr	r3, [pc, #248]	; (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e0e:	f003 0302 	and.w	r3, r3, #2
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1ee      	bne.n	8002df4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e16:	7dfb      	ldrb	r3, [r7, #23]
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d105      	bne.n	8002e28 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e1c:	4b39      	ldr	r3, [pc, #228]	; (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e20:	4a38      	ldr	r2, [pc, #224]	; (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002e22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e26:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	f000 80a1 	beq.w	8002f74 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e32:	4b34      	ldr	r3, [pc, #208]	; (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f003 030c 	and.w	r3, r3, #12
 8002e3a:	2b08      	cmp	r3, #8
 8002e3c:	d05c      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d141      	bne.n	8002eca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e46:	4b31      	ldr	r3, [pc, #196]	; (8002f0c <HAL_RCC_OscConfig+0x478>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e4c:	f7ff fd30 	bl	80028b0 <HAL_GetTick>
 8002e50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e52:	e008      	b.n	8002e66 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e54:	f7ff fd2c 	bl	80028b0 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e087      	b.n	8002f76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e66:	4b27      	ldr	r3, [pc, #156]	; (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d1f0      	bne.n	8002e54 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	69da      	ldr	r2, [r3, #28]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a1b      	ldr	r3, [r3, #32]
 8002e7a:	431a      	orrs	r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e80:	019b      	lsls	r3, r3, #6
 8002e82:	431a      	orrs	r2, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e88:	085b      	lsrs	r3, r3, #1
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	041b      	lsls	r3, r3, #16
 8002e8e:	431a      	orrs	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e94:	061b      	lsls	r3, r3, #24
 8002e96:	491b      	ldr	r1, [pc, #108]	; (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e9c:	4b1b      	ldr	r3, [pc, #108]	; (8002f0c <HAL_RCC_OscConfig+0x478>)
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea2:	f7ff fd05 	bl	80028b0 <HAL_GetTick>
 8002ea6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ea8:	e008      	b.n	8002ebc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eaa:	f7ff fd01 	bl	80028b0 <HAL_GetTick>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d901      	bls.n	8002ebc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	e05c      	b.n	8002f76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ebc:	4b11      	ldr	r3, [pc, #68]	; (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d0f0      	beq.n	8002eaa <HAL_RCC_OscConfig+0x416>
 8002ec8:	e054      	b.n	8002f74 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eca:	4b10      	ldr	r3, [pc, #64]	; (8002f0c <HAL_RCC_OscConfig+0x478>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed0:	f7ff fcee 	bl	80028b0 <HAL_GetTick>
 8002ed4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ed6:	e008      	b.n	8002eea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ed8:	f7ff fcea 	bl	80028b0 <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d901      	bls.n	8002eea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e045      	b.n	8002f76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eea:	4b06      	ldr	r3, [pc, #24]	; (8002f04 <HAL_RCC_OscConfig+0x470>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d1f0      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x444>
 8002ef6:	e03d      	b.n	8002f74 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d107      	bne.n	8002f10 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e038      	b.n	8002f76 <HAL_RCC_OscConfig+0x4e2>
 8002f04:	40023800 	.word	0x40023800
 8002f08:	40007000 	.word	0x40007000
 8002f0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f10:	4b1b      	ldr	r3, [pc, #108]	; (8002f80 <HAL_RCC_OscConfig+0x4ec>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	699b      	ldr	r3, [r3, #24]
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d028      	beq.n	8002f70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d121      	bne.n	8002f70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d11a      	bne.n	8002f70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f3a:	68fa      	ldr	r2, [r7, #12]
 8002f3c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f40:	4013      	ands	r3, r2
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d111      	bne.n	8002f70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f56:	085b      	lsrs	r3, r3, #1
 8002f58:	3b01      	subs	r3, #1
 8002f5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d107      	bne.n	8002f70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d001      	beq.n	8002f74 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e000      	b.n	8002f76 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3718      	adds	r7, #24
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	40023800 	.word	0x40023800

08002f84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d101      	bne.n	8002f98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e0cc      	b.n	8003132 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f98:	4b68      	ldr	r3, [pc, #416]	; (800313c <HAL_RCC_ClockConfig+0x1b8>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0307 	and.w	r3, r3, #7
 8002fa0:	683a      	ldr	r2, [r7, #0]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d90c      	bls.n	8002fc0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fa6:	4b65      	ldr	r3, [pc, #404]	; (800313c <HAL_RCC_ClockConfig+0x1b8>)
 8002fa8:	683a      	ldr	r2, [r7, #0]
 8002faa:	b2d2      	uxtb	r2, r2
 8002fac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fae:	4b63      	ldr	r3, [pc, #396]	; (800313c <HAL_RCC_ClockConfig+0x1b8>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0307 	and.w	r3, r3, #7
 8002fb6:	683a      	ldr	r2, [r7, #0]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d001      	beq.n	8002fc0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e0b8      	b.n	8003132 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0302 	and.w	r3, r3, #2
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d020      	beq.n	800300e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0304 	and.w	r3, r3, #4
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d005      	beq.n	8002fe4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fd8:	4b59      	ldr	r3, [pc, #356]	; (8003140 <HAL_RCC_ClockConfig+0x1bc>)
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	4a58      	ldr	r2, [pc, #352]	; (8003140 <HAL_RCC_ClockConfig+0x1bc>)
 8002fde:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002fe2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0308 	and.w	r3, r3, #8
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d005      	beq.n	8002ffc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ff0:	4b53      	ldr	r3, [pc, #332]	; (8003140 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	4a52      	ldr	r2, [pc, #328]	; (8003140 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ffa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ffc:	4b50      	ldr	r3, [pc, #320]	; (8003140 <HAL_RCC_ClockConfig+0x1bc>)
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	494d      	ldr	r1, [pc, #308]	; (8003140 <HAL_RCC_ClockConfig+0x1bc>)
 800300a:	4313      	orrs	r3, r2
 800300c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	2b00      	cmp	r3, #0
 8003018:	d044      	beq.n	80030a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	2b01      	cmp	r3, #1
 8003020:	d107      	bne.n	8003032 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003022:	4b47      	ldr	r3, [pc, #284]	; (8003140 <HAL_RCC_ClockConfig+0x1bc>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d119      	bne.n	8003062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e07f      	b.n	8003132 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	2b02      	cmp	r3, #2
 8003038:	d003      	beq.n	8003042 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800303e:	2b03      	cmp	r3, #3
 8003040:	d107      	bne.n	8003052 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003042:	4b3f      	ldr	r3, [pc, #252]	; (8003140 <HAL_RCC_ClockConfig+0x1bc>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d109      	bne.n	8003062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e06f      	b.n	8003132 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003052:	4b3b      	ldr	r3, [pc, #236]	; (8003140 <HAL_RCC_ClockConfig+0x1bc>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0302 	and.w	r3, r3, #2
 800305a:	2b00      	cmp	r3, #0
 800305c:	d101      	bne.n	8003062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e067      	b.n	8003132 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003062:	4b37      	ldr	r3, [pc, #220]	; (8003140 <HAL_RCC_ClockConfig+0x1bc>)
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f023 0203 	bic.w	r2, r3, #3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	4934      	ldr	r1, [pc, #208]	; (8003140 <HAL_RCC_ClockConfig+0x1bc>)
 8003070:	4313      	orrs	r3, r2
 8003072:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003074:	f7ff fc1c 	bl	80028b0 <HAL_GetTick>
 8003078:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800307a:	e00a      	b.n	8003092 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800307c:	f7ff fc18 	bl	80028b0 <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	f241 3288 	movw	r2, #5000	; 0x1388
 800308a:	4293      	cmp	r3, r2
 800308c:	d901      	bls.n	8003092 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e04f      	b.n	8003132 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003092:	4b2b      	ldr	r3, [pc, #172]	; (8003140 <HAL_RCC_ClockConfig+0x1bc>)
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	f003 020c 	and.w	r2, r3, #12
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d1eb      	bne.n	800307c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030a4:	4b25      	ldr	r3, [pc, #148]	; (800313c <HAL_RCC_ClockConfig+0x1b8>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0307 	and.w	r3, r3, #7
 80030ac:	683a      	ldr	r2, [r7, #0]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d20c      	bcs.n	80030cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030b2:	4b22      	ldr	r3, [pc, #136]	; (800313c <HAL_RCC_ClockConfig+0x1b8>)
 80030b4:	683a      	ldr	r2, [r7, #0]
 80030b6:	b2d2      	uxtb	r2, r2
 80030b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ba:	4b20      	ldr	r3, [pc, #128]	; (800313c <HAL_RCC_ClockConfig+0x1b8>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0307 	and.w	r3, r3, #7
 80030c2:	683a      	ldr	r2, [r7, #0]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d001      	beq.n	80030cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e032      	b.n	8003132 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0304 	and.w	r3, r3, #4
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d008      	beq.n	80030ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030d8:	4b19      	ldr	r3, [pc, #100]	; (8003140 <HAL_RCC_ClockConfig+0x1bc>)
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	4916      	ldr	r1, [pc, #88]	; (8003140 <HAL_RCC_ClockConfig+0x1bc>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0308 	and.w	r3, r3, #8
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d009      	beq.n	800310a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030f6:	4b12      	ldr	r3, [pc, #72]	; (8003140 <HAL_RCC_ClockConfig+0x1bc>)
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	490e      	ldr	r1, [pc, #56]	; (8003140 <HAL_RCC_ClockConfig+0x1bc>)
 8003106:	4313      	orrs	r3, r2
 8003108:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800310a:	f000 f821 	bl	8003150 <HAL_RCC_GetSysClockFreq>
 800310e:	4602      	mov	r2, r0
 8003110:	4b0b      	ldr	r3, [pc, #44]	; (8003140 <HAL_RCC_ClockConfig+0x1bc>)
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	091b      	lsrs	r3, r3, #4
 8003116:	f003 030f 	and.w	r3, r3, #15
 800311a:	490a      	ldr	r1, [pc, #40]	; (8003144 <HAL_RCC_ClockConfig+0x1c0>)
 800311c:	5ccb      	ldrb	r3, [r1, r3]
 800311e:	fa22 f303 	lsr.w	r3, r2, r3
 8003122:	4a09      	ldr	r2, [pc, #36]	; (8003148 <HAL_RCC_ClockConfig+0x1c4>)
 8003124:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003126:	4b09      	ldr	r3, [pc, #36]	; (800314c <HAL_RCC_ClockConfig+0x1c8>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4618      	mov	r0, r3
 800312c:	f7ff fb7c 	bl	8002828 <HAL_InitTick>

  return HAL_OK;
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	3710      	adds	r7, #16
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	40023c00 	.word	0x40023c00
 8003140:	40023800 	.word	0x40023800
 8003144:	080074dc 	.word	0x080074dc
 8003148:	20000000 	.word	0x20000000
 800314c:	20000004 	.word	0x20000004

08003150 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003150:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003154:	b090      	sub	sp, #64	; 0x40
 8003156:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003158:	2300      	movs	r3, #0
 800315a:	637b      	str	r3, [r7, #52]	; 0x34
 800315c:	2300      	movs	r3, #0
 800315e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003160:	2300      	movs	r3, #0
 8003162:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003164:	2300      	movs	r3, #0
 8003166:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003168:	4b59      	ldr	r3, [pc, #356]	; (80032d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f003 030c 	and.w	r3, r3, #12
 8003170:	2b08      	cmp	r3, #8
 8003172:	d00d      	beq.n	8003190 <HAL_RCC_GetSysClockFreq+0x40>
 8003174:	2b08      	cmp	r3, #8
 8003176:	f200 80a1 	bhi.w	80032bc <HAL_RCC_GetSysClockFreq+0x16c>
 800317a:	2b00      	cmp	r3, #0
 800317c:	d002      	beq.n	8003184 <HAL_RCC_GetSysClockFreq+0x34>
 800317e:	2b04      	cmp	r3, #4
 8003180:	d003      	beq.n	800318a <HAL_RCC_GetSysClockFreq+0x3a>
 8003182:	e09b      	b.n	80032bc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003184:	4b53      	ldr	r3, [pc, #332]	; (80032d4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003186:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003188:	e09b      	b.n	80032c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800318a:	4b53      	ldr	r3, [pc, #332]	; (80032d8 <HAL_RCC_GetSysClockFreq+0x188>)
 800318c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800318e:	e098      	b.n	80032c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003190:	4b4f      	ldr	r3, [pc, #316]	; (80032d0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003198:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800319a:	4b4d      	ldr	r3, [pc, #308]	; (80032d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d028      	beq.n	80031f8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031a6:	4b4a      	ldr	r3, [pc, #296]	; (80032d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	099b      	lsrs	r3, r3, #6
 80031ac:	2200      	movs	r2, #0
 80031ae:	623b      	str	r3, [r7, #32]
 80031b0:	627a      	str	r2, [r7, #36]	; 0x24
 80031b2:	6a3b      	ldr	r3, [r7, #32]
 80031b4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80031b8:	2100      	movs	r1, #0
 80031ba:	4b47      	ldr	r3, [pc, #284]	; (80032d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80031bc:	fb03 f201 	mul.w	r2, r3, r1
 80031c0:	2300      	movs	r3, #0
 80031c2:	fb00 f303 	mul.w	r3, r0, r3
 80031c6:	4413      	add	r3, r2
 80031c8:	4a43      	ldr	r2, [pc, #268]	; (80032d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80031ca:	fba0 1202 	umull	r1, r2, r0, r2
 80031ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80031d0:	460a      	mov	r2, r1
 80031d2:	62ba      	str	r2, [r7, #40]	; 0x28
 80031d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031d6:	4413      	add	r3, r2
 80031d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031dc:	2200      	movs	r2, #0
 80031de:	61bb      	str	r3, [r7, #24]
 80031e0:	61fa      	str	r2, [r7, #28]
 80031e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031e6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80031ea:	f7fd fd35 	bl	8000c58 <__aeabi_uldivmod>
 80031ee:	4602      	mov	r2, r0
 80031f0:	460b      	mov	r3, r1
 80031f2:	4613      	mov	r3, r2
 80031f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031f6:	e053      	b.n	80032a0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031f8:	4b35      	ldr	r3, [pc, #212]	; (80032d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	099b      	lsrs	r3, r3, #6
 80031fe:	2200      	movs	r2, #0
 8003200:	613b      	str	r3, [r7, #16]
 8003202:	617a      	str	r2, [r7, #20]
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800320a:	f04f 0b00 	mov.w	fp, #0
 800320e:	4652      	mov	r2, sl
 8003210:	465b      	mov	r3, fp
 8003212:	f04f 0000 	mov.w	r0, #0
 8003216:	f04f 0100 	mov.w	r1, #0
 800321a:	0159      	lsls	r1, r3, #5
 800321c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003220:	0150      	lsls	r0, r2, #5
 8003222:	4602      	mov	r2, r0
 8003224:	460b      	mov	r3, r1
 8003226:	ebb2 080a 	subs.w	r8, r2, sl
 800322a:	eb63 090b 	sbc.w	r9, r3, fp
 800322e:	f04f 0200 	mov.w	r2, #0
 8003232:	f04f 0300 	mov.w	r3, #0
 8003236:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800323a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800323e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003242:	ebb2 0408 	subs.w	r4, r2, r8
 8003246:	eb63 0509 	sbc.w	r5, r3, r9
 800324a:	f04f 0200 	mov.w	r2, #0
 800324e:	f04f 0300 	mov.w	r3, #0
 8003252:	00eb      	lsls	r3, r5, #3
 8003254:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003258:	00e2      	lsls	r2, r4, #3
 800325a:	4614      	mov	r4, r2
 800325c:	461d      	mov	r5, r3
 800325e:	eb14 030a 	adds.w	r3, r4, sl
 8003262:	603b      	str	r3, [r7, #0]
 8003264:	eb45 030b 	adc.w	r3, r5, fp
 8003268:	607b      	str	r3, [r7, #4]
 800326a:	f04f 0200 	mov.w	r2, #0
 800326e:	f04f 0300 	mov.w	r3, #0
 8003272:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003276:	4629      	mov	r1, r5
 8003278:	028b      	lsls	r3, r1, #10
 800327a:	4621      	mov	r1, r4
 800327c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003280:	4621      	mov	r1, r4
 8003282:	028a      	lsls	r2, r1, #10
 8003284:	4610      	mov	r0, r2
 8003286:	4619      	mov	r1, r3
 8003288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800328a:	2200      	movs	r2, #0
 800328c:	60bb      	str	r3, [r7, #8]
 800328e:	60fa      	str	r2, [r7, #12]
 8003290:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003294:	f7fd fce0 	bl	8000c58 <__aeabi_uldivmod>
 8003298:	4602      	mov	r2, r0
 800329a:	460b      	mov	r3, r1
 800329c:	4613      	mov	r3, r2
 800329e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80032a0:	4b0b      	ldr	r3, [pc, #44]	; (80032d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	0c1b      	lsrs	r3, r3, #16
 80032a6:	f003 0303 	and.w	r3, r3, #3
 80032aa:	3301      	adds	r3, #1
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80032b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80032b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032b8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80032ba:	e002      	b.n	80032c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032bc:	4b05      	ldr	r3, [pc, #20]	; (80032d4 <HAL_RCC_GetSysClockFreq+0x184>)
 80032be:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80032c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3740      	adds	r7, #64	; 0x40
 80032c8:	46bd      	mov	sp, r7
 80032ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032ce:	bf00      	nop
 80032d0:	40023800 	.word	0x40023800
 80032d4:	00f42400 	.word	0x00f42400
 80032d8:	017d7840 	.word	0x017d7840

080032dc <LL_GPIO_SetPinMode>:
{
 80032dc:	b480      	push	{r7}
 80032de:	b089      	sub	sp, #36	; 0x24
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	fa93 f3a3 	rbit	r3, r3
 80032f6:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	fab3 f383 	clz	r3, r3
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	005b      	lsls	r3, r3, #1
 8003302:	2103      	movs	r1, #3
 8003304:	fa01 f303 	lsl.w	r3, r1, r3
 8003308:	43db      	mvns	r3, r3
 800330a:	401a      	ands	r2, r3
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	fa93 f3a3 	rbit	r3, r3
 8003316:	61bb      	str	r3, [r7, #24]
  return result;
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	fab3 f383 	clz	r3, r3
 800331e:	b2db      	uxtb	r3, r3
 8003320:	005b      	lsls	r3, r3, #1
 8003322:	6879      	ldr	r1, [r7, #4]
 8003324:	fa01 f303 	lsl.w	r3, r1, r3
 8003328:	431a      	orrs	r2, r3
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	601a      	str	r2, [r3, #0]
}
 800332e:	bf00      	nop
 8003330:	3724      	adds	r7, #36	; 0x24
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr

0800333a <LL_GPIO_SetPinOutputType>:
{
 800333a:	b480      	push	{r7}
 800333c:	b085      	sub	sp, #20
 800333e:	af00      	add	r7, sp, #0
 8003340:	60f8      	str	r0, [r7, #12]
 8003342:	60b9      	str	r1, [r7, #8]
 8003344:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	685a      	ldr	r2, [r3, #4]
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	43db      	mvns	r3, r3
 800334e:	401a      	ands	r2, r3
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	6879      	ldr	r1, [r7, #4]
 8003354:	fb01 f303 	mul.w	r3, r1, r3
 8003358:	431a      	orrs	r2, r3
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	605a      	str	r2, [r3, #4]
}
 800335e:	bf00      	nop
 8003360:	3714      	adds	r7, #20
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr

0800336a <LL_GPIO_SetPinSpeed>:
{
 800336a:	b480      	push	{r7}
 800336c:	b089      	sub	sp, #36	; 0x24
 800336e:	af00      	add	r7, sp, #0
 8003370:	60f8      	str	r0, [r7, #12]
 8003372:	60b9      	str	r1, [r7, #8]
 8003374:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	689a      	ldr	r2, [r3, #8]
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	fa93 f3a3 	rbit	r3, r3
 8003384:	613b      	str	r3, [r7, #16]
  return result;
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	fab3 f383 	clz	r3, r3
 800338c:	b2db      	uxtb	r3, r3
 800338e:	005b      	lsls	r3, r3, #1
 8003390:	2103      	movs	r1, #3
 8003392:	fa01 f303 	lsl.w	r3, r1, r3
 8003396:	43db      	mvns	r3, r3
 8003398:	401a      	ands	r2, r3
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	fa93 f3a3 	rbit	r3, r3
 80033a4:	61bb      	str	r3, [r7, #24]
  return result;
 80033a6:	69bb      	ldr	r3, [r7, #24]
 80033a8:	fab3 f383 	clz	r3, r3
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	005b      	lsls	r3, r3, #1
 80033b0:	6879      	ldr	r1, [r7, #4]
 80033b2:	fa01 f303 	lsl.w	r3, r1, r3
 80033b6:	431a      	orrs	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	609a      	str	r2, [r3, #8]
}
 80033bc:	bf00      	nop
 80033be:	3724      	adds	r7, #36	; 0x24
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <LL_GPIO_SetPinPull>:
{
 80033c8:	b480      	push	{r7}
 80033ca:	b089      	sub	sp, #36	; 0x24
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	68da      	ldr	r2, [r3, #12]
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	fa93 f3a3 	rbit	r3, r3
 80033e2:	613b      	str	r3, [r7, #16]
  return result;
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	fab3 f383 	clz	r3, r3
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	005b      	lsls	r3, r3, #1
 80033ee:	2103      	movs	r1, #3
 80033f0:	fa01 f303 	lsl.w	r3, r1, r3
 80033f4:	43db      	mvns	r3, r3
 80033f6:	401a      	ands	r2, r3
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	fa93 f3a3 	rbit	r3, r3
 8003402:	61bb      	str	r3, [r7, #24]
  return result;
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	fab3 f383 	clz	r3, r3
 800340a:	b2db      	uxtb	r3, r3
 800340c:	005b      	lsls	r3, r3, #1
 800340e:	6879      	ldr	r1, [r7, #4]
 8003410:	fa01 f303 	lsl.w	r3, r1, r3
 8003414:	431a      	orrs	r2, r3
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	60da      	str	r2, [r3, #12]
}
 800341a:	bf00      	nop
 800341c:	3724      	adds	r7, #36	; 0x24
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr

08003426 <LL_GPIO_SetAFPin_0_7>:
{
 8003426:	b480      	push	{r7}
 8003428:	b089      	sub	sp, #36	; 0x24
 800342a:	af00      	add	r7, sp, #0
 800342c:	60f8      	str	r0, [r7, #12]
 800342e:	60b9      	str	r1, [r7, #8]
 8003430:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6a1a      	ldr	r2, [r3, #32]
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	fa93 f3a3 	rbit	r3, r3
 8003440:	613b      	str	r3, [r7, #16]
  return result;
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	fab3 f383 	clz	r3, r3
 8003448:	b2db      	uxtb	r3, r3
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	210f      	movs	r1, #15
 800344e:	fa01 f303 	lsl.w	r3, r1, r3
 8003452:	43db      	mvns	r3, r3
 8003454:	401a      	ands	r2, r3
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	fa93 f3a3 	rbit	r3, r3
 8003460:	61bb      	str	r3, [r7, #24]
  return result;
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	fab3 f383 	clz	r3, r3
 8003468:	b2db      	uxtb	r3, r3
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	6879      	ldr	r1, [r7, #4]
 800346e:	fa01 f303 	lsl.w	r3, r1, r3
 8003472:	431a      	orrs	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	621a      	str	r2, [r3, #32]
}
 8003478:	bf00      	nop
 800347a:	3724      	adds	r7, #36	; 0x24
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <LL_GPIO_SetAFPin_8_15>:
{
 8003484:	b480      	push	{r7}
 8003486:	b089      	sub	sp, #36	; 0x24
 8003488:	af00      	add	r7, sp, #0
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	0a1b      	lsrs	r3, r3, #8
 8003498:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	fa93 f3a3 	rbit	r3, r3
 80034a0:	613b      	str	r3, [r7, #16]
  return result;
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	fab3 f383 	clz	r3, r3
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	210f      	movs	r1, #15
 80034ae:	fa01 f303 	lsl.w	r3, r1, r3
 80034b2:	43db      	mvns	r3, r3
 80034b4:	401a      	ands	r2, r3
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	0a1b      	lsrs	r3, r3, #8
 80034ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	fa93 f3a3 	rbit	r3, r3
 80034c2:	61bb      	str	r3, [r7, #24]
  return result;
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	fab3 f383 	clz	r3, r3
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	6879      	ldr	r1, [r7, #4]
 80034d0:	fa01 f303 	lsl.w	r3, r1, r3
 80034d4:	431a      	orrs	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80034da:	bf00      	nop
 80034dc:	3724      	adds	r7, #36	; 0x24
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr

080034e6 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80034e6:	b580      	push	{r7, lr}
 80034e8:	b088      	sub	sp, #32
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
 80034ee:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80034f0:	2300      	movs	r3, #0
 80034f2:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 80034f4:	2300      	movs	r3, #0
 80034f6:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	fa93 f3a3 	rbit	r3, r3
 8003504:	613b      	str	r3, [r7, #16]
  return result;
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	fab3 f383 	clz	r3, r3
 800350c:	b2db      	uxtb	r3, r3
 800350e:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003510:	e050      	b.n	80035b4 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	2101      	movs	r1, #1
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	fa01 f303 	lsl.w	r3, r1, r3
 800351e:	4013      	ands	r3, r2
 8003520:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d042      	beq.n	80035ae <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	2b01      	cmp	r3, #1
 800352e:	d003      	beq.n	8003538 <LL_GPIO_Init+0x52>
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	2b02      	cmp	r3, #2
 8003536:	d10d      	bne.n	8003554 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	461a      	mov	r2, r3
 800353e:	69b9      	ldr	r1, [r7, #24]
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f7ff ff12 	bl	800336a <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	461a      	mov	r2, r3
 800354c:	69b9      	ldr	r1, [r7, #24]
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f7ff fef3 	bl	800333a <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	691b      	ldr	r3, [r3, #16]
 8003558:	461a      	mov	r2, r3
 800355a:	69b9      	ldr	r1, [r7, #24]
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f7ff ff33 	bl	80033c8 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	2b02      	cmp	r3, #2
 8003568:	d11a      	bne.n	80035a0 <LL_GPIO_Init+0xba>
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	fa93 f3a3 	rbit	r3, r3
 8003574:	60bb      	str	r3, [r7, #8]
  return result;
 8003576:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8003578:	fab3 f383 	clz	r3, r3
 800357c:	b2db      	uxtb	r3, r3
 800357e:	2b07      	cmp	r3, #7
 8003580:	d807      	bhi.n	8003592 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	695b      	ldr	r3, [r3, #20]
 8003586:	461a      	mov	r2, r3
 8003588:	69b9      	ldr	r1, [r7, #24]
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f7ff ff4b 	bl	8003426 <LL_GPIO_SetAFPin_0_7>
 8003590:	e006      	b.n	80035a0 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	695b      	ldr	r3, [r3, #20]
 8003596:	461a      	mov	r2, r3
 8003598:	69b9      	ldr	r1, [r7, #24]
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f7ff ff72 	bl	8003484 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	461a      	mov	r2, r3
 80035a6:	69b9      	ldr	r1, [r7, #24]
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f7ff fe97 	bl	80032dc <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	3301      	adds	r3, #1
 80035b2:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	fa22 f303 	lsr.w	r3, r2, r3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d1a7      	bne.n	8003512 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 80035c2:	2300      	movs	r3, #0
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3720      	adds	r7, #32
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <LL_I2C_Enable>:
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f043 0201 	orr.w	r2, r3, #1
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	601a      	str	r2, [r3, #0]
}
 80035e0:	bf00      	nop
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <LL_I2C_Disable>:
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f023 0201 	bic.w	r2, r3, #1
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	601a      	str	r2, [r3, #0]
}
 8003600:	bf00      	nop
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <LL_I2C_ConfigFilters>:
{
 800360c:	b480      	push	{r7}
 800360e:	b085      	sub	sp, #20
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->FLTR, I2C_FLTR_ANOFF | I2C_FLTR_DNF, AnalogFilter | DigitalFilter);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361c:	f023 021f 	bic.w	r2, r3, #31
 8003620:	68b9      	ldr	r1, [r7, #8]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	430b      	orrs	r3, r1
 8003626:	431a      	orrs	r2, r3
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800362c:	bf00      	nop
 800362e:	3714      	adds	r7, #20
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <LL_I2C_SetOwnAddress1>:
{
 8003638:	b480      	push	{r7}
 800363a:	b085      	sub	sp, #20
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800364c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003650:	68b9      	ldr	r1, [r7, #8]
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	430a      	orrs	r2, r1
 8003656:	431a      	orrs	r2, r3
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	609a      	str	r2, [r3, #8]
}
 800365c:	bf00      	nop
 800365e:	3714      	adds	r7, #20
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <LL_I2C_ConfigSpeed>:
{
 8003668:	b480      	push	{r7}
 800366a:	b087      	sub	sp, #28
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]
 8003674:	603b      	str	r3, [r7, #0]
  uint32_t freqrange = 0x0U;
 8003676:	2300      	movs	r3, #0
 8003678:	613b      	str	r3, [r7, #16]
  uint32_t clockconfig = 0x0U;
 800367a:	2300      	movs	r3, #0
 800367c:	617b      	str	r3, [r7, #20]
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	4a42      	ldr	r2, [pc, #264]	; (800378c <LL_I2C_ConfigSpeed+0x124>)
 8003682:	fba2 2303 	umull	r2, r3, r2, r3
 8003686:	0c9b      	lsrs	r3, r3, #18
 8003688:	613b      	str	r3, [r7, #16]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	431a      	orrs	r2, r3
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	605a      	str	r2, [r3, #4]
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6a1b      	ldr	r3, [r3, #32]
 800369e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	493a      	ldr	r1, [pc, #232]	; (8003790 <LL_I2C_ConfigSpeed+0x128>)
 80036a6:	428b      	cmp	r3, r1
 80036a8:	d802      	bhi.n	80036b0 <LL_I2C_ConfigSpeed+0x48>
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	3301      	adds	r3, #1
 80036ae:	e009      	b.n	80036c4 <LL_I2C_ConfigSpeed+0x5c>
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80036b6:	fb01 f303 	mul.w	r3, r1, r3
 80036ba:	4936      	ldr	r1, [pc, #216]	; (8003794 <LL_I2C_ConfigSpeed+0x12c>)
 80036bc:	fba1 1303 	umull	r1, r3, r1, r3
 80036c0:	099b      	lsrs	r3, r3, #6
 80036c2:	3301      	adds	r3, #1
 80036c4:	431a      	orrs	r2, r3
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	621a      	str	r2, [r3, #32]
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a30      	ldr	r2, [pc, #192]	; (8003790 <LL_I2C_ConfigSpeed+0x128>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d939      	bls.n	8003746 <LL_I2C_ConfigSpeed+0xde>
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d117      	bne.n	8003708 <LL_I2C_ConfigSpeed+0xa0>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	4613      	mov	r3, r2
 80036dc:	005b      	lsls	r3, r3, #1
 80036de:	4413      	add	r3, r2
 80036e0:	68ba      	ldr	r2, [r7, #8]
 80036e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d009      	beq.n	8003702 <LL_I2C_ConfigSpeed+0x9a>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	4613      	mov	r3, r2
 80036f2:	005b      	lsls	r3, r3, #1
 80036f4:	4413      	add	r3, r2
 80036f6:	68ba      	ldr	r2, [r7, #8]
 80036f8:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80036fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003700:	e01d      	b.n	800373e <LL_I2C_ConfigSpeed+0xd6>
 8003702:	f248 0301 	movw	r3, #32769	; 0x8001
 8003706:	e01a      	b.n	800373e <LL_I2C_ConfigSpeed+0xd6>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	4613      	mov	r3, r2
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	4413      	add	r3, r2
 8003710:	009a      	lsls	r2, r3, #2
 8003712:	4413      	add	r3, r2
 8003714:	68ba      	ldr	r2, [r7, #8]
 8003716:	fbb2 f3f3 	udiv	r3, r2, r3
 800371a:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800371e:	2b00      	cmp	r3, #0
 8003720:	d00b      	beq.n	800373a <LL_I2C_ConfigSpeed+0xd2>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	4613      	mov	r3, r2
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	4413      	add	r3, r2
 800372a:	009a      	lsls	r2, r3, #2
 800372c:	4413      	add	r3, r2
 800372e:	68ba      	ldr	r2, [r7, #8]
 8003730:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003734:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003738:	e001      	b.n	800373e <LL_I2C_ConfigSpeed+0xd6>
 800373a:	f248 0301 	movw	r3, #32769	; 0x8001
 800373e:	683a      	ldr	r2, [r7, #0]
 8003740:	4313      	orrs	r3, r2
 8003742:	617b      	str	r3, [r7, #20]
 8003744:	e011      	b.n	800376a <LL_I2C_ConfigSpeed+0x102>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	005b      	lsls	r3, r3, #1
 800374a:	68ba      	ldr	r2, [r7, #8]
 800374c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003750:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003754:	4013      	ands	r3, r2
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8003756:	2b00      	cmp	r3, #0
 8003758:	d005      	beq.n	8003766 <LL_I2C_ConfigSpeed+0xfe>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 800375e:	68ba      	ldr	r2, [r7, #8]
 8003760:	fbb2 f3f3 	udiv	r3, r2, r3
 8003764:	e000      	b.n	8003768 <LL_I2C_ConfigSpeed+0x100>
 8003766:	2304      	movs	r3, #4
 8003768:	617b      	str	r3, [r7, #20]
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	69db      	ldr	r3, [r3, #28]
 800376e:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 8003772:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003776:	697a      	ldr	r2, [r7, #20]
 8003778:	431a      	orrs	r2, r3
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	61da      	str	r2, [r3, #28]
}
 800377e:	bf00      	nop
 8003780:	371c      	adds	r7, #28
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	431bde83 	.word	0x431bde83
 8003790:	000186a0 	.word	0x000186a0
 8003794:	10624dd3 	.word	0x10624dd3

08003798 <LL_I2C_SetMode>:
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f023 021a 	bic.w	r2, r3, #26
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	431a      	orrs	r2, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	601a      	str	r2, [r3, #0]
}
 80037b2:	bf00      	nop
 80037b4:	370c      	adds	r7, #12
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr

080037be <LL_I2C_AcknowledgeNextData>:
{
 80037be:	b480      	push	{r7}
 80037c0:	b083      	sub	sp, #12
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
 80037c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	431a      	orrs	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	601a      	str	r2, [r3, #0]
}
 80037d8:	bf00      	nop
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b086      	sub	sp, #24
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f7ff fefc 	bl	80035ec <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80037f4:	f107 0308 	add.w	r3, r7, #8
 80037f8:	4618      	mov	r0, r3
 80037fa:	f000 f89d 	bl	8003938 <LL_RCC_GetSystemClocksFreq>
  /*---------------------------- I2Cx FLTR Configuration -----------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_FLTR_ANFOFF bit
   * - DigitalFilter: I2C_FLTR_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	68d9      	ldr	r1, [r3, #12]
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	461a      	mov	r2, r3
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f7ff feff 	bl	800360c <LL_I2C_ConfigFilters>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 800380e:	6939      	ldr	r1, [r7, #16]
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	685a      	ldr	r2, [r3, #4]
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f7ff ff25 	bl	8003668 <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	6959      	ldr	r1, [r3, #20]
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	69db      	ldr	r3, [r3, #28]
 8003826:	461a      	mov	r2, r3
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f7ff ff05 	bl	8003638 <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4619      	mov	r1, r3
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f7ff ffaf 	bl	8003798 <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f7ff fec6 	bl	80035cc <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	4619      	mov	r1, r3
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f7ff ffb9 	bl	80037be <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 800384c:	2300      	movs	r3, #0
}
 800384e:	4618      	mov	r0, r3
 8003850:	3718      	adds	r7, #24
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
	...

08003858 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8003858:	b480      	push	{r7}
 800385a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800385c:	4b04      	ldr	r3, [pc, #16]	; (8003870 <LL_RCC_GetSysClkSource+0x18>)
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f003 030c 	and.w	r3, r3, #12
}
 8003864:	4618      	mov	r0, r3
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	40023800 	.word	0x40023800

08003874 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8003874:	b480      	push	{r7}
 8003876:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003878:	4b04      	ldr	r3, [pc, #16]	; (800388c <LL_RCC_GetAHBPrescaler+0x18>)
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003880:	4618      	mov	r0, r3
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	40023800 	.word	0x40023800

08003890 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003890:	b480      	push	{r7}
 8003892:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003894:	4b04      	ldr	r3, [pc, #16]	; (80038a8 <LL_RCC_GetAPB1Prescaler+0x18>)
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 800389c:	4618      	mov	r0, r3
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop
 80038a8:	40023800 	.word	0x40023800

080038ac <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80038ac:	b480      	push	{r7}
 80038ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80038b0:	4b04      	ldr	r3, [pc, #16]	; (80038c4 <LL_RCC_GetAPB2Prescaler+0x18>)
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	40023800 	.word	0x40023800

080038c8 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80038c8:	b480      	push	{r7}
 80038ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80038cc:	4b04      	ldr	r3, [pc, #16]	; (80038e0 <LL_RCC_PLL_GetMainSource+0x18>)
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	40023800 	.word	0x40023800

080038e4 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80038e4:	b480      	push	{r7}
 80038e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80038e8:	4b04      	ldr	r3, [pc, #16]	; (80038fc <LL_RCC_PLL_GetN+0x18>)
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	099b      	lsrs	r3, r3, #6
 80038ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr
 80038fc:	40023800 	.word	0x40023800

08003900 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8003900:	b480      	push	{r7}
 8003902:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8003904:	4b04      	ldr	r3, [pc, #16]	; (8003918 <LL_RCC_PLL_GetP+0x18>)
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 800390c:	4618      	mov	r0, r3
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop
 8003918:	40023800 	.word	0x40023800

0800391c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800391c:	b480      	push	{r7}
 800391e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003920:	4b04      	ldr	r3, [pc, #16]	; (8003934 <LL_RCC_PLL_GetDivider+0x18>)
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8003928:	4618      	mov	r0, r3
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	40023800 	.word	0x40023800

08003938 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8003940:	f000 f820 	bl	8003984 <RCC_GetSystemClockFreq>
 8003944:	4602      	mov	r2, r0
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4618      	mov	r0, r3
 8003950:	f000 f840 	bl	80039d4 <RCC_GetHCLKClockFreq>
 8003954:	4602      	mov	r2, r0
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	4618      	mov	r0, r3
 8003960:	f000 f84e 	bl	8003a00 <RCC_GetPCLK1ClockFreq>
 8003964:	4602      	mov	r2, r0
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	4618      	mov	r0, r3
 8003970:	f000 f85a 	bl	8003a28 <RCC_GetPCLK2ClockFreq>
 8003974:	4602      	mov	r2, r0
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	60da      	str	r2, [r3, #12]
}
 800397a:	bf00      	nop
 800397c:	3708      	adds	r7, #8
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
	...

08003984 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800398a:	2300      	movs	r3, #0
 800398c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800398e:	f7ff ff63 	bl	8003858 <LL_RCC_GetSysClkSource>
 8003992:	4603      	mov	r3, r0
 8003994:	2b08      	cmp	r3, #8
 8003996:	d00c      	beq.n	80039b2 <RCC_GetSystemClockFreq+0x2e>
 8003998:	2b08      	cmp	r3, #8
 800399a:	d80f      	bhi.n	80039bc <RCC_GetSystemClockFreq+0x38>
 800399c:	2b00      	cmp	r3, #0
 800399e:	d002      	beq.n	80039a6 <RCC_GetSystemClockFreq+0x22>
 80039a0:	2b04      	cmp	r3, #4
 80039a2:	d003      	beq.n	80039ac <RCC_GetSystemClockFreq+0x28>
 80039a4:	e00a      	b.n	80039bc <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80039a6:	4b09      	ldr	r3, [pc, #36]	; (80039cc <RCC_GetSystemClockFreq+0x48>)
 80039a8:	607b      	str	r3, [r7, #4]
      break;
 80039aa:	e00a      	b.n	80039c2 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80039ac:	4b08      	ldr	r3, [pc, #32]	; (80039d0 <RCC_GetSystemClockFreq+0x4c>)
 80039ae:	607b      	str	r3, [r7, #4]
      break;
 80039b0:	e007      	b.n	80039c2 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 80039b2:	2008      	movs	r0, #8
 80039b4:	f000 f84c 	bl	8003a50 <RCC_PLL_GetFreqDomain_SYS>
 80039b8:	6078      	str	r0, [r7, #4]
      break;
 80039ba:	e002      	b.n	80039c2 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80039bc:	4b03      	ldr	r3, [pc, #12]	; (80039cc <RCC_GetSystemClockFreq+0x48>)
 80039be:	607b      	str	r3, [r7, #4]
      break;
 80039c0:	bf00      	nop
  }

  return frequency;
 80039c2:	687b      	ldr	r3, [r7, #4]
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3708      	adds	r7, #8
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	00f42400 	.word	0x00f42400
 80039d0:	017d7840 	.word	0x017d7840

080039d4 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80039dc:	f7ff ff4a 	bl	8003874 <LL_RCC_GetAHBPrescaler>
 80039e0:	4603      	mov	r3, r0
 80039e2:	091b      	lsrs	r3, r3, #4
 80039e4:	f003 030f 	and.w	r3, r3, #15
 80039e8:	4a04      	ldr	r2, [pc, #16]	; (80039fc <RCC_GetHCLKClockFreq+0x28>)
 80039ea:	5cd3      	ldrb	r3, [r2, r3]
 80039ec:	461a      	mov	r2, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	40d3      	lsrs	r3, r2
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3708      	adds	r7, #8
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	080074dc 	.word	0x080074dc

08003a00 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8003a08:	f7ff ff42 	bl	8003890 <LL_RCC_GetAPB1Prescaler>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	0a9b      	lsrs	r3, r3, #10
 8003a10:	4a04      	ldr	r2, [pc, #16]	; (8003a24 <RCC_GetPCLK1ClockFreq+0x24>)
 8003a12:	5cd3      	ldrb	r3, [r2, r3]
 8003a14:	461a      	mov	r2, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	40d3      	lsrs	r3, r2
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3708      	adds	r7, #8
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	080074ec 	.word	0x080074ec

08003a28 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8003a30:	f7ff ff3c 	bl	80038ac <LL_RCC_GetAPB2Prescaler>
 8003a34:	4603      	mov	r3, r0
 8003a36:	0b5b      	lsrs	r3, r3, #13
 8003a38:	4a04      	ldr	r2, [pc, #16]	; (8003a4c <RCC_GetPCLK2ClockFreq+0x24>)
 8003a3a:	5cd3      	ldrb	r3, [r2, r3]
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	40d3      	lsrs	r3, r2
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3708      	adds	r7, #8
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	080074ec 	.word	0x080074ec

08003a50 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8003a50:	b590      	push	{r4, r7, lr}
 8003a52:	b087      	sub	sp, #28
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	617b      	str	r3, [r7, #20]
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	60fb      	str	r3, [r7, #12]
 8003a60:	2300      	movs	r3, #0
 8003a62:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8003a64:	f7ff ff30 	bl	80038c8 <LL_RCC_PLL_GetMainSource>
 8003a68:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d004      	beq.n	8003a7a <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a76:	d003      	beq.n	8003a80 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8003a78:	e005      	b.n	8003a86 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8003a7a:	4b12      	ldr	r3, [pc, #72]	; (8003ac4 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003a7c:	617b      	str	r3, [r7, #20]
      break;
 8003a7e:	e005      	b.n	8003a8c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8003a80:	4b11      	ldr	r3, [pc, #68]	; (8003ac8 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8003a82:	617b      	str	r3, [r7, #20]
      break;
 8003a84:	e002      	b.n	8003a8c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8003a86:	4b0f      	ldr	r3, [pc, #60]	; (8003ac4 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003a88:	617b      	str	r3, [r7, #20]
      break;
 8003a8a:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2b08      	cmp	r3, #8
 8003a90:	d113      	bne.n	8003aba <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003a92:	f7ff ff43 	bl	800391c <LL_RCC_PLL_GetDivider>
 8003a96:	4602      	mov	r2, r0
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	fbb3 f4f2 	udiv	r4, r3, r2
 8003a9e:	f7ff ff21 	bl	80038e4 <LL_RCC_PLL_GetN>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	fb03 f404 	mul.w	r4, r3, r4
 8003aa8:	f7ff ff2a 	bl	8003900 <LL_RCC_PLL_GetP>
 8003aac:	4603      	mov	r3, r0
 8003aae:	0c1b      	lsrs	r3, r3, #16
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	005b      	lsls	r3, r3, #1
 8003ab4:	fbb4 f3f3 	udiv	r3, r4, r3
 8003ab8:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8003aba:	693b      	ldr	r3, [r7, #16]
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	371c      	adds	r7, #28
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd90      	pop	{r4, r7, pc}
 8003ac4:	00f42400 	.word	0x00f42400
 8003ac8:	017d7840 	.word	0x017d7840

08003acc <LL_TIM_SetPrescaler>:
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	683a      	ldr	r2, [r7, #0]
 8003ada:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003adc:	bf00      	nop
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <LL_TIM_SetAutoReload>:
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	683a      	ldr	r2, [r7, #0]
 8003af6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003af8:	bf00      	nop
 8003afa:	370c      	adds	r7, #12
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <LL_TIM_SetRepetitionCounter>:
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	683a      	ldr	r2, [r7, #0]
 8003b12:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003b14:	bf00      	nop
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <LL_TIM_OC_SetCompareCH1>:
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	683a      	ldr	r2, [r7, #0]
 8003b2e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003b30:	bf00      	nop
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <LL_TIM_OC_SetCompareCH2>:
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	683a      	ldr	r2, [r7, #0]
 8003b4a:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003b4c:	bf00      	nop
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <LL_TIM_OC_SetCompareCH3>:
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	683a      	ldr	r2, [r7, #0]
 8003b66:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003b68:	bf00      	nop
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <LL_TIM_OC_SetCompareCH4>:
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	683a      	ldr	r2, [r7, #0]
 8003b82:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003b84:	bf00      	nop
 8003b86:	370c      	adds	r7, #12
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	695b      	ldr	r3, [r3, #20]
 8003b9c:	f043 0201 	orr.w	r2, r3, #1
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	615a      	str	r2, [r3, #20]
}
 8003ba4:	bf00      	nop
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a31      	ldr	r2, [pc, #196]	; (8003c88 <LL_TIM_Init+0xd8>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d00f      	beq.n	8003be8 <LL_TIM_Init+0x38>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bce:	d00b      	beq.n	8003be8 <LL_TIM_Init+0x38>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a2e      	ldr	r2, [pc, #184]	; (8003c8c <LL_TIM_Init+0xdc>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d007      	beq.n	8003be8 <LL_TIM_Init+0x38>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4a2d      	ldr	r2, [pc, #180]	; (8003c90 <LL_TIM_Init+0xe0>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d003      	beq.n	8003be8 <LL_TIM_Init+0x38>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4a2c      	ldr	r2, [pc, #176]	; (8003c94 <LL_TIM_Init+0xe4>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d106      	bne.n	8003bf6 <LL_TIM_Init+0x46>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a23      	ldr	r2, [pc, #140]	; (8003c88 <LL_TIM_Init+0xd8>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d01b      	beq.n	8003c36 <LL_TIM_Init+0x86>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c04:	d017      	beq.n	8003c36 <LL_TIM_Init+0x86>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a20      	ldr	r2, [pc, #128]	; (8003c8c <LL_TIM_Init+0xdc>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d013      	beq.n	8003c36 <LL_TIM_Init+0x86>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a1f      	ldr	r2, [pc, #124]	; (8003c90 <LL_TIM_Init+0xe0>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d00f      	beq.n	8003c36 <LL_TIM_Init+0x86>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a1e      	ldr	r2, [pc, #120]	; (8003c94 <LL_TIM_Init+0xe4>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d00b      	beq.n	8003c36 <LL_TIM_Init+0x86>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a1d      	ldr	r2, [pc, #116]	; (8003c98 <LL_TIM_Init+0xe8>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d007      	beq.n	8003c36 <LL_TIM_Init+0x86>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a1c      	ldr	r2, [pc, #112]	; (8003c9c <LL_TIM_Init+0xec>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d003      	beq.n	8003c36 <LL_TIM_Init+0x86>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a1b      	ldr	r2, [pc, #108]	; (8003ca0 <LL_TIM_Init+0xf0>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d106      	bne.n	8003c44 <LL_TIM_Init+0x94>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	4619      	mov	r1, r3
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f7ff ff49 	bl	8003ae8 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	881b      	ldrh	r3, [r3, #0]
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f7ff ff35 	bl	8003acc <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a08      	ldr	r2, [pc, #32]	; (8003c88 <LL_TIM_Init+0xd8>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d105      	bne.n	8003c76 <LL_TIM_Init+0xc6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	4619      	mov	r1, r3
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f7ff ff47 	bl	8003b04 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f7ff ff8a 	bl	8003b90 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8003c7c:	2300      	movs	r3, #0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3710      	adds	r7, #16
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	40010000 	.word	0x40010000
 8003c8c:	40000400 	.word	0x40000400
 8003c90:	40000800 	.word	0x40000800
 8003c94:	40000c00 	.word	0x40000c00
 8003c98:	40014000 	.word	0x40014000
 8003c9c:	40014400 	.word	0x40014400
 8003ca0:	40014800 	.word	0x40014800

08003ca4 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b086      	sub	sp, #24
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	60b9      	str	r1, [r7, #8]
 8003cae:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cba:	d027      	beq.n	8003d0c <LL_TIM_OC_Init+0x68>
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cc2:	d82a      	bhi.n	8003d1a <LL_TIM_OC_Init+0x76>
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cca:	d018      	beq.n	8003cfe <LL_TIM_OC_Init+0x5a>
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cd2:	d822      	bhi.n	8003d1a <LL_TIM_OC_Init+0x76>
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d003      	beq.n	8003ce2 <LL_TIM_OC_Init+0x3e>
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	2b10      	cmp	r3, #16
 8003cde:	d007      	beq.n	8003cf0 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8003ce0:	e01b      	b.n	8003d1a <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8003ce2:	6879      	ldr	r1, [r7, #4]
 8003ce4:	68f8      	ldr	r0, [r7, #12]
 8003ce6:	f000 f81f 	bl	8003d28 <OC1Config>
 8003cea:	4603      	mov	r3, r0
 8003cec:	75fb      	strb	r3, [r7, #23]
      break;
 8003cee:	e015      	b.n	8003d1c <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8003cf0:	6879      	ldr	r1, [r7, #4]
 8003cf2:	68f8      	ldr	r0, [r7, #12]
 8003cf4:	f000 f87e 	bl	8003df4 <OC2Config>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	75fb      	strb	r3, [r7, #23]
      break;
 8003cfc:	e00e      	b.n	8003d1c <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8003cfe:	6879      	ldr	r1, [r7, #4]
 8003d00:	68f8      	ldr	r0, [r7, #12]
 8003d02:	f000 f8e1 	bl	8003ec8 <OC3Config>
 8003d06:	4603      	mov	r3, r0
 8003d08:	75fb      	strb	r3, [r7, #23]
      break;
 8003d0a:	e007      	b.n	8003d1c <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8003d0c:	6879      	ldr	r1, [r7, #4]
 8003d0e:	68f8      	ldr	r0, [r7, #12]
 8003d10:	f000 f944 	bl	8003f9c <OC4Config>
 8003d14:	4603      	mov	r3, r0
 8003d16:	75fb      	strb	r3, [r7, #23]
      break;
 8003d18:	e000      	b.n	8003d1c <LL_TIM_OC_Init+0x78>
      break;
 8003d1a:	bf00      	nop
  }

  return result;
 8003d1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3718      	adds	r7, #24
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
	...

08003d28 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b086      	sub	sp, #24
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a1b      	ldr	r3, [r3, #32]
 8003d36:	f023 0201 	bic.w	r2, r3, #1
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a1b      	ldr	r3, [r3, #32]
 8003d42:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	699b      	ldr	r3, [r3, #24]
 8003d4e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f023 0303 	bic.w	r3, r3, #3
 8003d56:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	f023 0202 	bic.w	r2, r3, #2
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	691b      	ldr	r3, [r3, #16]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	f023 0201 	bic.w	r2, r3, #1
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a1a      	ldr	r2, [pc, #104]	; (8003df0 <OC1Config+0xc8>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d11e      	bne.n	8003dc8 <OC1Config+0xa0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	f023 0208 	bic.w	r2, r3, #8
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	695b      	ldr	r3, [r3, #20]
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	4313      	orrs	r3, r2
 8003d98:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	f023 0204 	bic.w	r2, r3, #4
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	4313      	orrs	r3, r2
 8003da8:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	699b      	ldr	r3, [r3, #24]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	69db      	ldr	r3, [r3, #28]
 8003dc2:	005b      	lsls	r3, r3, #1
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	693a      	ldr	r2, [r7, #16]
 8003dcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	68fa      	ldr	r2, [r7, #12]
 8003dd2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	4619      	mov	r1, r3
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f7ff fea0 	bl	8003b20 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	697a      	ldr	r2, [r7, #20]
 8003de4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003de6:	2300      	movs	r3, #0
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3718      	adds	r7, #24
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	40010000 	.word	0x40010000

08003df4 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b086      	sub	sp, #24
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a1b      	ldr	r3, [r3, #32]
 8003e02:	f023 0210 	bic.w	r2, r3, #16
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a1b      	ldr	r3, [r3, #32]
 8003e0e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	699b      	ldr	r3, [r3, #24]
 8003e1a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	021b      	lsls	r3, r3, #8
 8003e30:	4313      	orrs	r3, r2
 8003e32:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	f023 0220 	bic.w	r2, r3, #32
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	691b      	ldr	r3, [r3, #16]
 8003e3e:	011b      	lsls	r3, r3, #4
 8003e40:	4313      	orrs	r3, r2
 8003e42:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	f023 0210 	bic.w	r2, r3, #16
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	011b      	lsls	r3, r3, #4
 8003e50:	4313      	orrs	r3, r2
 8003e52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4a1b      	ldr	r2, [pc, #108]	; (8003ec4 <OC2Config+0xd0>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d11f      	bne.n	8003e9c <OC2Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	695b      	ldr	r3, [r3, #20]
 8003e66:	019b      	lsls	r3, r3, #6
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	019b      	lsls	r3, r3, #6
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	699b      	ldr	r3, [r3, #24]
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	69db      	ldr	r3, [r3, #28]
 8003e96:	00db      	lsls	r3, r3, #3
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	693a      	ldr	r2, [r7, #16]
 8003ea0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	68fa      	ldr	r2, [r7, #12]
 8003ea6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	4619      	mov	r1, r3
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f7ff fe44 	bl	8003b3c <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	697a      	ldr	r2, [r7, #20]
 8003eb8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003eba:	2300      	movs	r3, #0
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3718      	adds	r7, #24
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	40010000 	.word	0x40010000

08003ec8 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b086      	sub	sp, #24
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a1b      	ldr	r3, [r3, #32]
 8003ed6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a1b      	ldr	r3, [r3, #32]
 8003ee2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	69db      	ldr	r3, [r3, #28]
 8003eee:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f023 0303 	bic.w	r3, r3, #3
 8003ef6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	691b      	ldr	r3, [r3, #16]
 8003f10:	021b      	lsls	r3, r3, #8
 8003f12:	4313      	orrs	r3, r2
 8003f14:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	021b      	lsls	r3, r3, #8
 8003f22:	4313      	orrs	r3, r2
 8003f24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a1b      	ldr	r2, [pc, #108]	; (8003f98 <OC3Config+0xd0>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d11f      	bne.n	8003f6e <OC3Config+0xa6>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	695b      	ldr	r3, [r3, #20]
 8003f38:	029b      	lsls	r3, r3, #10
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	029b      	lsls	r3, r3, #10
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	011b      	lsls	r3, r3, #4
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	69db      	ldr	r3, [r3, #28]
 8003f68:	015b      	lsls	r3, r3, #5
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	693a      	ldr	r2, [r7, #16]
 8003f72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	4619      	mov	r1, r3
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f7ff fde9 	bl	8003b58 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	697a      	ldr	r2, [r7, #20]
 8003f8a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003f8c:	2300      	movs	r3, #0
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3718      	adds	r7, #24
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	40010000 	.word	0x40010000

08003f9c <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b086      	sub	sp, #24
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a1b      	ldr	r3, [r3, #32]
 8003faa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a1b      	ldr	r3, [r3, #32]
 8003fb6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	69db      	ldr	r3, [r3, #28]
 8003fc2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	021b      	lsls	r3, r3, #8
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	031b      	lsls	r3, r3, #12
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	031b      	lsls	r3, r3, #12
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	4a0f      	ldr	r2, [pc, #60]	; (800403c <OC4Config+0xa0>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d107      	bne.n	8004014 <OC4Config+0x78>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	699b      	ldr	r3, [r3, #24]
 800400e:	019b      	lsls	r3, r3, #6
 8004010:	4313      	orrs	r3, r2
 8004012:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	697a      	ldr	r2, [r7, #20]
 8004018:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	4619      	mov	r1, r3
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f7ff fda4 	bl	8003b74 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	693a      	ldr	r2, [r7, #16]
 8004030:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004032:	2300      	movs	r3, #0
}
 8004034:	4618      	mov	r0, r3
 8004036:	3718      	adds	r7, #24
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}
 800403c:	40010000 	.word	0x40010000

08004040 <LL_USART_IsEnabled>:
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004050:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004054:	bf0c      	ite	eq
 8004056:	2301      	moveq	r3, #1
 8004058:	2300      	movne	r3, #0
 800405a:	b2db      	uxtb	r3, r3
}
 800405c:	4618      	mov	r0, r3
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <LL_USART_SetStopBitsLength>:
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	431a      	orrs	r2, r3
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	611a      	str	r2, [r3, #16]
}
 8004082:	bf00      	nop
 8004084:	370c      	adds	r7, #12
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr

0800408e <LL_USART_SetHWFlowCtrl>:
{
 800408e:	b480      	push	{r7}
 8004090:	b083      	sub	sp, #12
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
 8004096:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	695b      	ldr	r3, [r3, #20]
 800409c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	431a      	orrs	r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	615a      	str	r2, [r3, #20]
}
 80040a8:	bf00      	nop
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <LL_USART_SetBaudRate>:
{
 80040b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040b8:	b0c0      	sub	sp, #256	; 0x100
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80040c0:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 80040c4:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80040c8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80040cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040d4:	f040 810c 	bne.w	80042f0 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80040d8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80040dc:	2200      	movs	r2, #0
 80040de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80040e2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80040e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80040ea:	4622      	mov	r2, r4
 80040ec:	462b      	mov	r3, r5
 80040ee:	1891      	adds	r1, r2, r2
 80040f0:	6639      	str	r1, [r7, #96]	; 0x60
 80040f2:	415b      	adcs	r3, r3
 80040f4:	667b      	str	r3, [r7, #100]	; 0x64
 80040f6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80040fa:	4621      	mov	r1, r4
 80040fc:	eb12 0801 	adds.w	r8, r2, r1
 8004100:	4629      	mov	r1, r5
 8004102:	eb43 0901 	adc.w	r9, r3, r1
 8004106:	f04f 0200 	mov.w	r2, #0
 800410a:	f04f 0300 	mov.w	r3, #0
 800410e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004112:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004116:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800411a:	4690      	mov	r8, r2
 800411c:	4699      	mov	r9, r3
 800411e:	4623      	mov	r3, r4
 8004120:	eb18 0303 	adds.w	r3, r8, r3
 8004124:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004128:	462b      	mov	r3, r5
 800412a:	eb49 0303 	adc.w	r3, r9, r3
 800412e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004132:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004136:	2200      	movs	r2, #0
 8004138:	469a      	mov	sl, r3
 800413a:	4693      	mov	fp, r2
 800413c:	eb1a 030a 	adds.w	r3, sl, sl
 8004140:	65bb      	str	r3, [r7, #88]	; 0x58
 8004142:	eb4b 030b 	adc.w	r3, fp, fp
 8004146:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004148:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800414c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004150:	f7fc fd82 	bl	8000c58 <__aeabi_uldivmod>
 8004154:	4602      	mov	r2, r0
 8004156:	460b      	mov	r3, r1
 8004158:	4b64      	ldr	r3, [pc, #400]	; (80042ec <LL_USART_SetBaudRate+0x238>)
 800415a:	fba3 2302 	umull	r2, r3, r3, r2
 800415e:	095b      	lsrs	r3, r3, #5
 8004160:	b29b      	uxth	r3, r3
 8004162:	011b      	lsls	r3, r3, #4
 8004164:	b29c      	uxth	r4, r3
 8004166:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800416a:	2200      	movs	r2, #0
 800416c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004170:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004174:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8004178:	4642      	mov	r2, r8
 800417a:	464b      	mov	r3, r9
 800417c:	1891      	adds	r1, r2, r2
 800417e:	6539      	str	r1, [r7, #80]	; 0x50
 8004180:	415b      	adcs	r3, r3
 8004182:	657b      	str	r3, [r7, #84]	; 0x54
 8004184:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004188:	4641      	mov	r1, r8
 800418a:	1851      	adds	r1, r2, r1
 800418c:	64b9      	str	r1, [r7, #72]	; 0x48
 800418e:	4649      	mov	r1, r9
 8004190:	414b      	adcs	r3, r1
 8004192:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004194:	f04f 0200 	mov.w	r2, #0
 8004198:	f04f 0300 	mov.w	r3, #0
 800419c:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 80041a0:	4659      	mov	r1, fp
 80041a2:	00cb      	lsls	r3, r1, #3
 80041a4:	4651      	mov	r1, sl
 80041a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041aa:	4651      	mov	r1, sl
 80041ac:	00ca      	lsls	r2, r1, #3
 80041ae:	4610      	mov	r0, r2
 80041b0:	4619      	mov	r1, r3
 80041b2:	4603      	mov	r3, r0
 80041b4:	4642      	mov	r2, r8
 80041b6:	189b      	adds	r3, r3, r2
 80041b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80041bc:	464b      	mov	r3, r9
 80041be:	460a      	mov	r2, r1
 80041c0:	eb42 0303 	adc.w	r3, r2, r3
 80041c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80041c8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80041cc:	2200      	movs	r2, #0
 80041ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80041d2:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80041d6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80041da:	460b      	mov	r3, r1
 80041dc:	18db      	adds	r3, r3, r3
 80041de:	643b      	str	r3, [r7, #64]	; 0x40
 80041e0:	4613      	mov	r3, r2
 80041e2:	eb42 0303 	adc.w	r3, r2, r3
 80041e6:	647b      	str	r3, [r7, #68]	; 0x44
 80041e8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80041ec:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80041f0:	f7fc fd32 	bl	8000c58 <__aeabi_uldivmod>
 80041f4:	4602      	mov	r2, r0
 80041f6:	460b      	mov	r3, r1
 80041f8:	4611      	mov	r1, r2
 80041fa:	4b3c      	ldr	r3, [pc, #240]	; (80042ec <LL_USART_SetBaudRate+0x238>)
 80041fc:	fba3 2301 	umull	r2, r3, r3, r1
 8004200:	095b      	lsrs	r3, r3, #5
 8004202:	2264      	movs	r2, #100	; 0x64
 8004204:	fb02 f303 	mul.w	r3, r2, r3
 8004208:	1acb      	subs	r3, r1, r3
 800420a:	00db      	lsls	r3, r3, #3
 800420c:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004210:	4b36      	ldr	r3, [pc, #216]	; (80042ec <LL_USART_SetBaudRate+0x238>)
 8004212:	fba3 2302 	umull	r2, r3, r3, r2
 8004216:	095b      	lsrs	r3, r3, #5
 8004218:	b29b      	uxth	r3, r3
 800421a:	005b      	lsls	r3, r3, #1
 800421c:	b29b      	uxth	r3, r3
 800421e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004222:	b29b      	uxth	r3, r3
 8004224:	4423      	add	r3, r4
 8004226:	b29c      	uxth	r4, r3
 8004228:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800422c:	2200      	movs	r2, #0
 800422e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004232:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004236:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 800423a:	4642      	mov	r2, r8
 800423c:	464b      	mov	r3, r9
 800423e:	1891      	adds	r1, r2, r2
 8004240:	63b9      	str	r1, [r7, #56]	; 0x38
 8004242:	415b      	adcs	r3, r3
 8004244:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004246:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800424a:	4641      	mov	r1, r8
 800424c:	1851      	adds	r1, r2, r1
 800424e:	6339      	str	r1, [r7, #48]	; 0x30
 8004250:	4649      	mov	r1, r9
 8004252:	414b      	adcs	r3, r1
 8004254:	637b      	str	r3, [r7, #52]	; 0x34
 8004256:	f04f 0200 	mov.w	r2, #0
 800425a:	f04f 0300 	mov.w	r3, #0
 800425e:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004262:	4659      	mov	r1, fp
 8004264:	00cb      	lsls	r3, r1, #3
 8004266:	4651      	mov	r1, sl
 8004268:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800426c:	4651      	mov	r1, sl
 800426e:	00ca      	lsls	r2, r1, #3
 8004270:	4610      	mov	r0, r2
 8004272:	4619      	mov	r1, r3
 8004274:	4603      	mov	r3, r0
 8004276:	4642      	mov	r2, r8
 8004278:	189b      	adds	r3, r3, r2
 800427a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800427e:	464b      	mov	r3, r9
 8004280:	460a      	mov	r2, r1
 8004282:	eb42 0303 	adc.w	r3, r2, r3
 8004286:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800428a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800428e:	2200      	movs	r2, #0
 8004290:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004294:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8004298:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800429c:	460b      	mov	r3, r1
 800429e:	18db      	adds	r3, r3, r3
 80042a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80042a2:	4613      	mov	r3, r2
 80042a4:	eb42 0303 	adc.w	r3, r2, r3
 80042a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80042ae:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80042b2:	f7fc fcd1 	bl	8000c58 <__aeabi_uldivmod>
 80042b6:	4602      	mov	r2, r0
 80042b8:	460b      	mov	r3, r1
 80042ba:	4b0c      	ldr	r3, [pc, #48]	; (80042ec <LL_USART_SetBaudRate+0x238>)
 80042bc:	fba3 1302 	umull	r1, r3, r3, r2
 80042c0:	095b      	lsrs	r3, r3, #5
 80042c2:	2164      	movs	r1, #100	; 0x64
 80042c4:	fb01 f303 	mul.w	r3, r1, r3
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	00db      	lsls	r3, r3, #3
 80042cc:	3332      	adds	r3, #50	; 0x32
 80042ce:	4a07      	ldr	r2, [pc, #28]	; (80042ec <LL_USART_SetBaudRate+0x238>)
 80042d0:	fba2 2303 	umull	r2, r3, r2, r3
 80042d4:	095b      	lsrs	r3, r3, #5
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	f003 0307 	and.w	r3, r3, #7
 80042dc:	b29b      	uxth	r3, r3
 80042de:	4423      	add	r3, r4
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	461a      	mov	r2, r3
 80042e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042e8:	609a      	str	r2, [r3, #8]
}
 80042ea:	e108      	b.n	80044fe <LL_USART_SetBaudRate+0x44a>
 80042ec:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80042f0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80042f4:	2200      	movs	r2, #0
 80042f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80042fa:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80042fe:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8004302:	4642      	mov	r2, r8
 8004304:	464b      	mov	r3, r9
 8004306:	1891      	adds	r1, r2, r2
 8004308:	6239      	str	r1, [r7, #32]
 800430a:	415b      	adcs	r3, r3
 800430c:	627b      	str	r3, [r7, #36]	; 0x24
 800430e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004312:	4641      	mov	r1, r8
 8004314:	1854      	adds	r4, r2, r1
 8004316:	4649      	mov	r1, r9
 8004318:	eb43 0501 	adc.w	r5, r3, r1
 800431c:	f04f 0200 	mov.w	r2, #0
 8004320:	f04f 0300 	mov.w	r3, #0
 8004324:	00eb      	lsls	r3, r5, #3
 8004326:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800432a:	00e2      	lsls	r2, r4, #3
 800432c:	4614      	mov	r4, r2
 800432e:	461d      	mov	r5, r3
 8004330:	4643      	mov	r3, r8
 8004332:	18e3      	adds	r3, r4, r3
 8004334:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004338:	464b      	mov	r3, r9
 800433a:	eb45 0303 	adc.w	r3, r5, r3
 800433e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004342:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004346:	2200      	movs	r2, #0
 8004348:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800434c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004350:	f04f 0200 	mov.w	r2, #0
 8004354:	f04f 0300 	mov.w	r3, #0
 8004358:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 800435c:	4629      	mov	r1, r5
 800435e:	008b      	lsls	r3, r1, #2
 8004360:	4621      	mov	r1, r4
 8004362:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004366:	4621      	mov	r1, r4
 8004368:	008a      	lsls	r2, r1, #2
 800436a:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800436e:	f7fc fc73 	bl	8000c58 <__aeabi_uldivmod>
 8004372:	4602      	mov	r2, r0
 8004374:	460b      	mov	r3, r1
 8004376:	4b65      	ldr	r3, [pc, #404]	; (800450c <LL_USART_SetBaudRate+0x458>)
 8004378:	fba3 2302 	umull	r2, r3, r3, r2
 800437c:	095b      	lsrs	r3, r3, #5
 800437e:	b29b      	uxth	r3, r3
 8004380:	011b      	lsls	r3, r3, #4
 8004382:	b29c      	uxth	r4, r3
 8004384:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004388:	2200      	movs	r2, #0
 800438a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800438e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004392:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8004396:	4642      	mov	r2, r8
 8004398:	464b      	mov	r3, r9
 800439a:	1891      	adds	r1, r2, r2
 800439c:	61b9      	str	r1, [r7, #24]
 800439e:	415b      	adcs	r3, r3
 80043a0:	61fb      	str	r3, [r7, #28]
 80043a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043a6:	4641      	mov	r1, r8
 80043a8:	1851      	adds	r1, r2, r1
 80043aa:	6139      	str	r1, [r7, #16]
 80043ac:	4649      	mov	r1, r9
 80043ae:	414b      	adcs	r3, r1
 80043b0:	617b      	str	r3, [r7, #20]
 80043b2:	f04f 0200 	mov.w	r2, #0
 80043b6:	f04f 0300 	mov.w	r3, #0
 80043ba:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043be:	4659      	mov	r1, fp
 80043c0:	00cb      	lsls	r3, r1, #3
 80043c2:	4651      	mov	r1, sl
 80043c4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043c8:	4651      	mov	r1, sl
 80043ca:	00ca      	lsls	r2, r1, #3
 80043cc:	4610      	mov	r0, r2
 80043ce:	4619      	mov	r1, r3
 80043d0:	4603      	mov	r3, r0
 80043d2:	4642      	mov	r2, r8
 80043d4:	189b      	adds	r3, r3, r2
 80043d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80043da:	464b      	mov	r3, r9
 80043dc:	460a      	mov	r2, r1
 80043de:	eb42 0303 	adc.w	r3, r2, r3
 80043e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80043e6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80043ea:	2200      	movs	r2, #0
 80043ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80043f0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80043f4:	f04f 0200 	mov.w	r2, #0
 80043f8:	f04f 0300 	mov.w	r3, #0
 80043fc:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8004400:	4649      	mov	r1, r9
 8004402:	008b      	lsls	r3, r1, #2
 8004404:	4641      	mov	r1, r8
 8004406:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800440a:	4641      	mov	r1, r8
 800440c:	008a      	lsls	r2, r1, #2
 800440e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8004412:	f7fc fc21 	bl	8000c58 <__aeabi_uldivmod>
 8004416:	4602      	mov	r2, r0
 8004418:	460b      	mov	r3, r1
 800441a:	4611      	mov	r1, r2
 800441c:	4b3b      	ldr	r3, [pc, #236]	; (800450c <LL_USART_SetBaudRate+0x458>)
 800441e:	fba3 2301 	umull	r2, r3, r3, r1
 8004422:	095b      	lsrs	r3, r3, #5
 8004424:	2264      	movs	r2, #100	; 0x64
 8004426:	fb02 f303 	mul.w	r3, r2, r3
 800442a:	1acb      	subs	r3, r1, r3
 800442c:	011b      	lsls	r3, r3, #4
 800442e:	3332      	adds	r3, #50	; 0x32
 8004430:	4a36      	ldr	r2, [pc, #216]	; (800450c <LL_USART_SetBaudRate+0x458>)
 8004432:	fba2 2303 	umull	r2, r3, r2, r3
 8004436:	095b      	lsrs	r3, r3, #5
 8004438:	b29b      	uxth	r3, r3
 800443a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800443e:	b29b      	uxth	r3, r3
 8004440:	4423      	add	r3, r4
 8004442:	b29c      	uxth	r4, r3
 8004444:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004448:	2200      	movs	r2, #0
 800444a:	67bb      	str	r3, [r7, #120]	; 0x78
 800444c:	67fa      	str	r2, [r7, #124]	; 0x7c
 800444e:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004452:	4642      	mov	r2, r8
 8004454:	464b      	mov	r3, r9
 8004456:	1891      	adds	r1, r2, r2
 8004458:	60b9      	str	r1, [r7, #8]
 800445a:	415b      	adcs	r3, r3
 800445c:	60fb      	str	r3, [r7, #12]
 800445e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004462:	4641      	mov	r1, r8
 8004464:	1851      	adds	r1, r2, r1
 8004466:	6039      	str	r1, [r7, #0]
 8004468:	4649      	mov	r1, r9
 800446a:	414b      	adcs	r3, r1
 800446c:	607b      	str	r3, [r7, #4]
 800446e:	f04f 0200 	mov.w	r2, #0
 8004472:	f04f 0300 	mov.w	r3, #0
 8004476:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800447a:	4659      	mov	r1, fp
 800447c:	00cb      	lsls	r3, r1, #3
 800447e:	4651      	mov	r1, sl
 8004480:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004484:	4651      	mov	r1, sl
 8004486:	00ca      	lsls	r2, r1, #3
 8004488:	4610      	mov	r0, r2
 800448a:	4619      	mov	r1, r3
 800448c:	4603      	mov	r3, r0
 800448e:	4642      	mov	r2, r8
 8004490:	189b      	adds	r3, r3, r2
 8004492:	673b      	str	r3, [r7, #112]	; 0x70
 8004494:	464b      	mov	r3, r9
 8004496:	460a      	mov	r2, r1
 8004498:	eb42 0303 	adc.w	r3, r2, r3
 800449c:	677b      	str	r3, [r7, #116]	; 0x74
 800449e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80044a2:	2200      	movs	r2, #0
 80044a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80044a6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80044a8:	f04f 0200 	mov.w	r2, #0
 80044ac:	f04f 0300 	mov.w	r3, #0
 80044b0:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 80044b4:	4649      	mov	r1, r9
 80044b6:	008b      	lsls	r3, r1, #2
 80044b8:	4641      	mov	r1, r8
 80044ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044be:	4641      	mov	r1, r8
 80044c0:	008a      	lsls	r2, r1, #2
 80044c2:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80044c6:	f7fc fbc7 	bl	8000c58 <__aeabi_uldivmod>
 80044ca:	4602      	mov	r2, r0
 80044cc:	460b      	mov	r3, r1
 80044ce:	4b0f      	ldr	r3, [pc, #60]	; (800450c <LL_USART_SetBaudRate+0x458>)
 80044d0:	fba3 1302 	umull	r1, r3, r3, r2
 80044d4:	095b      	lsrs	r3, r3, #5
 80044d6:	2164      	movs	r1, #100	; 0x64
 80044d8:	fb01 f303 	mul.w	r3, r1, r3
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	011b      	lsls	r3, r3, #4
 80044e0:	3332      	adds	r3, #50	; 0x32
 80044e2:	4a0a      	ldr	r2, [pc, #40]	; (800450c <LL_USART_SetBaudRate+0x458>)
 80044e4:	fba2 2303 	umull	r2, r3, r2, r3
 80044e8:	095b      	lsrs	r3, r3, #5
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	f003 030f 	and.w	r3, r3, #15
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	4423      	add	r3, r4
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	461a      	mov	r2, r3
 80044f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044fc:	609a      	str	r2, [r3, #8]
}
 80044fe:	bf00      	nop
 8004500:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004504:	46bd      	mov	sp, r7
 8004506:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800450a:	bf00      	nop
 800450c:	51eb851f 	.word	0x51eb851f

08004510 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b088      	sub	sp, #32
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800451e:	2300      	movs	r3, #0
 8004520:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f7ff fd8c 	bl	8004040 <LL_USART_IsEnabled>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d149      	bne.n	80045c2 <LL_USART_Init+0xb2>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004536:	f023 030c 	bic.w	r3, r3, #12
 800453a:	683a      	ldr	r2, [r7, #0]
 800453c:	6851      	ldr	r1, [r2, #4]
 800453e:	683a      	ldr	r2, [r7, #0]
 8004540:	68d2      	ldr	r2, [r2, #12]
 8004542:	4311      	orrs	r1, r2
 8004544:	683a      	ldr	r2, [r7, #0]
 8004546:	6912      	ldr	r2, [r2, #16]
 8004548:	4311      	orrs	r1, r2
 800454a:	683a      	ldr	r2, [r7, #0]
 800454c:	6992      	ldr	r2, [r2, #24]
 800454e:	430a      	orrs	r2, r1
 8004550:	431a      	orrs	r2, r3
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	4619      	mov	r1, r3
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f7ff fd83 	bl	8004068 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	695b      	ldr	r3, [r3, #20]
 8004566:	4619      	mov	r1, r3
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f7ff fd90 	bl	800408e <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800456e:	f107 0308 	add.w	r3, r7, #8
 8004572:	4618      	mov	r0, r3
 8004574:	f7ff f9e0 	bl	8003938 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	4a14      	ldr	r2, [pc, #80]	; (80045cc <LL_USART_Init+0xbc>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d102      	bne.n	8004586 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	61bb      	str	r3, [r7, #24]
 8004584:	e00c      	b.n	80045a0 <LL_USART_Init+0x90>
    }
    else if (USARTx == USART2)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a11      	ldr	r2, [pc, #68]	; (80045d0 <LL_USART_Init+0xc0>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d102      	bne.n	8004594 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	61bb      	str	r3, [r7, #24]
 8004592:	e005      	b.n	80045a0 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4a0f      	ldr	r2, [pc, #60]	; (80045d4 <LL_USART_Init+0xc4>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d101      	bne.n	80045a0 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d00d      	beq.n	80045c2 <LL_USART_Init+0xb2>
        && (USART_InitStruct->BaudRate != 0U))
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d009      	beq.n	80045c2 <LL_USART_Init+0xb2>
    {
      status = SUCCESS;
 80045ae:	2300      	movs	r3, #0
 80045b0:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	699a      	ldr	r2, [r3, #24]
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	69b9      	ldr	r1, [r7, #24]
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f7ff fd79 	bl	80040b4 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80045c2:	7ffb      	ldrb	r3, [r7, #31]
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3720      	adds	r7, #32
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	40011000 	.word	0x40011000
 80045d0:	40004400 	.word	0x40004400
 80045d4:	40011400 	.word	0x40011400

080045d8 <__cvt>:
 80045d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80045dc:	ec55 4b10 	vmov	r4, r5, d0
 80045e0:	2d00      	cmp	r5, #0
 80045e2:	460e      	mov	r6, r1
 80045e4:	4619      	mov	r1, r3
 80045e6:	462b      	mov	r3, r5
 80045e8:	bfbb      	ittet	lt
 80045ea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80045ee:	461d      	movlt	r5, r3
 80045f0:	2300      	movge	r3, #0
 80045f2:	232d      	movlt	r3, #45	; 0x2d
 80045f4:	700b      	strb	r3, [r1, #0]
 80045f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80045f8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80045fc:	4691      	mov	r9, r2
 80045fe:	f023 0820 	bic.w	r8, r3, #32
 8004602:	bfbc      	itt	lt
 8004604:	4622      	movlt	r2, r4
 8004606:	4614      	movlt	r4, r2
 8004608:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800460c:	d005      	beq.n	800461a <__cvt+0x42>
 800460e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004612:	d100      	bne.n	8004616 <__cvt+0x3e>
 8004614:	3601      	adds	r6, #1
 8004616:	2102      	movs	r1, #2
 8004618:	e000      	b.n	800461c <__cvt+0x44>
 800461a:	2103      	movs	r1, #3
 800461c:	ab03      	add	r3, sp, #12
 800461e:	9301      	str	r3, [sp, #4]
 8004620:	ab02      	add	r3, sp, #8
 8004622:	9300      	str	r3, [sp, #0]
 8004624:	ec45 4b10 	vmov	d0, r4, r5
 8004628:	4653      	mov	r3, sl
 800462a:	4632      	mov	r2, r6
 800462c:	f000 fe48 	bl	80052c0 <_dtoa_r>
 8004630:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004634:	4607      	mov	r7, r0
 8004636:	d102      	bne.n	800463e <__cvt+0x66>
 8004638:	f019 0f01 	tst.w	r9, #1
 800463c:	d022      	beq.n	8004684 <__cvt+0xac>
 800463e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004642:	eb07 0906 	add.w	r9, r7, r6
 8004646:	d110      	bne.n	800466a <__cvt+0x92>
 8004648:	783b      	ldrb	r3, [r7, #0]
 800464a:	2b30      	cmp	r3, #48	; 0x30
 800464c:	d10a      	bne.n	8004664 <__cvt+0x8c>
 800464e:	2200      	movs	r2, #0
 8004650:	2300      	movs	r3, #0
 8004652:	4620      	mov	r0, r4
 8004654:	4629      	mov	r1, r5
 8004656:	f7fc fa3f 	bl	8000ad8 <__aeabi_dcmpeq>
 800465a:	b918      	cbnz	r0, 8004664 <__cvt+0x8c>
 800465c:	f1c6 0601 	rsb	r6, r6, #1
 8004660:	f8ca 6000 	str.w	r6, [sl]
 8004664:	f8da 3000 	ldr.w	r3, [sl]
 8004668:	4499      	add	r9, r3
 800466a:	2200      	movs	r2, #0
 800466c:	2300      	movs	r3, #0
 800466e:	4620      	mov	r0, r4
 8004670:	4629      	mov	r1, r5
 8004672:	f7fc fa31 	bl	8000ad8 <__aeabi_dcmpeq>
 8004676:	b108      	cbz	r0, 800467c <__cvt+0xa4>
 8004678:	f8cd 900c 	str.w	r9, [sp, #12]
 800467c:	2230      	movs	r2, #48	; 0x30
 800467e:	9b03      	ldr	r3, [sp, #12]
 8004680:	454b      	cmp	r3, r9
 8004682:	d307      	bcc.n	8004694 <__cvt+0xbc>
 8004684:	9b03      	ldr	r3, [sp, #12]
 8004686:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004688:	1bdb      	subs	r3, r3, r7
 800468a:	4638      	mov	r0, r7
 800468c:	6013      	str	r3, [r2, #0]
 800468e:	b004      	add	sp, #16
 8004690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004694:	1c59      	adds	r1, r3, #1
 8004696:	9103      	str	r1, [sp, #12]
 8004698:	701a      	strb	r2, [r3, #0]
 800469a:	e7f0      	b.n	800467e <__cvt+0xa6>

0800469c <__exponent>:
 800469c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800469e:	4603      	mov	r3, r0
 80046a0:	2900      	cmp	r1, #0
 80046a2:	bfb8      	it	lt
 80046a4:	4249      	neglt	r1, r1
 80046a6:	f803 2b02 	strb.w	r2, [r3], #2
 80046aa:	bfb4      	ite	lt
 80046ac:	222d      	movlt	r2, #45	; 0x2d
 80046ae:	222b      	movge	r2, #43	; 0x2b
 80046b0:	2909      	cmp	r1, #9
 80046b2:	7042      	strb	r2, [r0, #1]
 80046b4:	dd2a      	ble.n	800470c <__exponent+0x70>
 80046b6:	f10d 0207 	add.w	r2, sp, #7
 80046ba:	4617      	mov	r7, r2
 80046bc:	260a      	movs	r6, #10
 80046be:	4694      	mov	ip, r2
 80046c0:	fb91 f5f6 	sdiv	r5, r1, r6
 80046c4:	fb06 1415 	mls	r4, r6, r5, r1
 80046c8:	3430      	adds	r4, #48	; 0x30
 80046ca:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80046ce:	460c      	mov	r4, r1
 80046d0:	2c63      	cmp	r4, #99	; 0x63
 80046d2:	f102 32ff 	add.w	r2, r2, #4294967295
 80046d6:	4629      	mov	r1, r5
 80046d8:	dcf1      	bgt.n	80046be <__exponent+0x22>
 80046da:	3130      	adds	r1, #48	; 0x30
 80046dc:	f1ac 0402 	sub.w	r4, ip, #2
 80046e0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80046e4:	1c41      	adds	r1, r0, #1
 80046e6:	4622      	mov	r2, r4
 80046e8:	42ba      	cmp	r2, r7
 80046ea:	d30a      	bcc.n	8004702 <__exponent+0x66>
 80046ec:	f10d 0209 	add.w	r2, sp, #9
 80046f0:	eba2 020c 	sub.w	r2, r2, ip
 80046f4:	42bc      	cmp	r4, r7
 80046f6:	bf88      	it	hi
 80046f8:	2200      	movhi	r2, #0
 80046fa:	4413      	add	r3, r2
 80046fc:	1a18      	subs	r0, r3, r0
 80046fe:	b003      	add	sp, #12
 8004700:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004702:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004706:	f801 5f01 	strb.w	r5, [r1, #1]!
 800470a:	e7ed      	b.n	80046e8 <__exponent+0x4c>
 800470c:	2330      	movs	r3, #48	; 0x30
 800470e:	3130      	adds	r1, #48	; 0x30
 8004710:	7083      	strb	r3, [r0, #2]
 8004712:	70c1      	strb	r1, [r0, #3]
 8004714:	1d03      	adds	r3, r0, #4
 8004716:	e7f1      	b.n	80046fc <__exponent+0x60>

08004718 <_printf_float>:
 8004718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800471c:	ed2d 8b02 	vpush	{d8}
 8004720:	b08d      	sub	sp, #52	; 0x34
 8004722:	460c      	mov	r4, r1
 8004724:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004728:	4616      	mov	r6, r2
 800472a:	461f      	mov	r7, r3
 800472c:	4605      	mov	r5, r0
 800472e:	f000 fcc7 	bl	80050c0 <_localeconv_r>
 8004732:	f8d0 a000 	ldr.w	sl, [r0]
 8004736:	4650      	mov	r0, sl
 8004738:	f7fb fda2 	bl	8000280 <strlen>
 800473c:	2300      	movs	r3, #0
 800473e:	930a      	str	r3, [sp, #40]	; 0x28
 8004740:	6823      	ldr	r3, [r4, #0]
 8004742:	9305      	str	r3, [sp, #20]
 8004744:	f8d8 3000 	ldr.w	r3, [r8]
 8004748:	f894 b018 	ldrb.w	fp, [r4, #24]
 800474c:	3307      	adds	r3, #7
 800474e:	f023 0307 	bic.w	r3, r3, #7
 8004752:	f103 0208 	add.w	r2, r3, #8
 8004756:	f8c8 2000 	str.w	r2, [r8]
 800475a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800475e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004762:	9307      	str	r3, [sp, #28]
 8004764:	f8cd 8018 	str.w	r8, [sp, #24]
 8004768:	ee08 0a10 	vmov	s16, r0
 800476c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8004770:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004774:	4b9e      	ldr	r3, [pc, #632]	; (80049f0 <_printf_float+0x2d8>)
 8004776:	f04f 32ff 	mov.w	r2, #4294967295
 800477a:	f7fc f9df 	bl	8000b3c <__aeabi_dcmpun>
 800477e:	bb88      	cbnz	r0, 80047e4 <_printf_float+0xcc>
 8004780:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004784:	4b9a      	ldr	r3, [pc, #616]	; (80049f0 <_printf_float+0x2d8>)
 8004786:	f04f 32ff 	mov.w	r2, #4294967295
 800478a:	f7fc f9b9 	bl	8000b00 <__aeabi_dcmple>
 800478e:	bb48      	cbnz	r0, 80047e4 <_printf_float+0xcc>
 8004790:	2200      	movs	r2, #0
 8004792:	2300      	movs	r3, #0
 8004794:	4640      	mov	r0, r8
 8004796:	4649      	mov	r1, r9
 8004798:	f7fc f9a8 	bl	8000aec <__aeabi_dcmplt>
 800479c:	b110      	cbz	r0, 80047a4 <_printf_float+0x8c>
 800479e:	232d      	movs	r3, #45	; 0x2d
 80047a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047a4:	4a93      	ldr	r2, [pc, #588]	; (80049f4 <_printf_float+0x2dc>)
 80047a6:	4b94      	ldr	r3, [pc, #592]	; (80049f8 <_printf_float+0x2e0>)
 80047a8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80047ac:	bf94      	ite	ls
 80047ae:	4690      	movls	r8, r2
 80047b0:	4698      	movhi	r8, r3
 80047b2:	2303      	movs	r3, #3
 80047b4:	6123      	str	r3, [r4, #16]
 80047b6:	9b05      	ldr	r3, [sp, #20]
 80047b8:	f023 0304 	bic.w	r3, r3, #4
 80047bc:	6023      	str	r3, [r4, #0]
 80047be:	f04f 0900 	mov.w	r9, #0
 80047c2:	9700      	str	r7, [sp, #0]
 80047c4:	4633      	mov	r3, r6
 80047c6:	aa0b      	add	r2, sp, #44	; 0x2c
 80047c8:	4621      	mov	r1, r4
 80047ca:	4628      	mov	r0, r5
 80047cc:	f000 f9da 	bl	8004b84 <_printf_common>
 80047d0:	3001      	adds	r0, #1
 80047d2:	f040 8090 	bne.w	80048f6 <_printf_float+0x1de>
 80047d6:	f04f 30ff 	mov.w	r0, #4294967295
 80047da:	b00d      	add	sp, #52	; 0x34
 80047dc:	ecbd 8b02 	vpop	{d8}
 80047e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047e4:	4642      	mov	r2, r8
 80047e6:	464b      	mov	r3, r9
 80047e8:	4640      	mov	r0, r8
 80047ea:	4649      	mov	r1, r9
 80047ec:	f7fc f9a6 	bl	8000b3c <__aeabi_dcmpun>
 80047f0:	b140      	cbz	r0, 8004804 <_printf_float+0xec>
 80047f2:	464b      	mov	r3, r9
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	bfbc      	itt	lt
 80047f8:	232d      	movlt	r3, #45	; 0x2d
 80047fa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80047fe:	4a7f      	ldr	r2, [pc, #508]	; (80049fc <_printf_float+0x2e4>)
 8004800:	4b7f      	ldr	r3, [pc, #508]	; (8004a00 <_printf_float+0x2e8>)
 8004802:	e7d1      	b.n	80047a8 <_printf_float+0x90>
 8004804:	6863      	ldr	r3, [r4, #4]
 8004806:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800480a:	9206      	str	r2, [sp, #24]
 800480c:	1c5a      	adds	r2, r3, #1
 800480e:	d13f      	bne.n	8004890 <_printf_float+0x178>
 8004810:	2306      	movs	r3, #6
 8004812:	6063      	str	r3, [r4, #4]
 8004814:	9b05      	ldr	r3, [sp, #20]
 8004816:	6861      	ldr	r1, [r4, #4]
 8004818:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800481c:	2300      	movs	r3, #0
 800481e:	9303      	str	r3, [sp, #12]
 8004820:	ab0a      	add	r3, sp, #40	; 0x28
 8004822:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004826:	ab09      	add	r3, sp, #36	; 0x24
 8004828:	ec49 8b10 	vmov	d0, r8, r9
 800482c:	9300      	str	r3, [sp, #0]
 800482e:	6022      	str	r2, [r4, #0]
 8004830:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004834:	4628      	mov	r0, r5
 8004836:	f7ff fecf 	bl	80045d8 <__cvt>
 800483a:	9b06      	ldr	r3, [sp, #24]
 800483c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800483e:	2b47      	cmp	r3, #71	; 0x47
 8004840:	4680      	mov	r8, r0
 8004842:	d108      	bne.n	8004856 <_printf_float+0x13e>
 8004844:	1cc8      	adds	r0, r1, #3
 8004846:	db02      	blt.n	800484e <_printf_float+0x136>
 8004848:	6863      	ldr	r3, [r4, #4]
 800484a:	4299      	cmp	r1, r3
 800484c:	dd41      	ble.n	80048d2 <_printf_float+0x1ba>
 800484e:	f1ab 0302 	sub.w	r3, fp, #2
 8004852:	fa5f fb83 	uxtb.w	fp, r3
 8004856:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800485a:	d820      	bhi.n	800489e <_printf_float+0x186>
 800485c:	3901      	subs	r1, #1
 800485e:	465a      	mov	r2, fp
 8004860:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004864:	9109      	str	r1, [sp, #36]	; 0x24
 8004866:	f7ff ff19 	bl	800469c <__exponent>
 800486a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800486c:	1813      	adds	r3, r2, r0
 800486e:	2a01      	cmp	r2, #1
 8004870:	4681      	mov	r9, r0
 8004872:	6123      	str	r3, [r4, #16]
 8004874:	dc02      	bgt.n	800487c <_printf_float+0x164>
 8004876:	6822      	ldr	r2, [r4, #0]
 8004878:	07d2      	lsls	r2, r2, #31
 800487a:	d501      	bpl.n	8004880 <_printf_float+0x168>
 800487c:	3301      	adds	r3, #1
 800487e:	6123      	str	r3, [r4, #16]
 8004880:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004884:	2b00      	cmp	r3, #0
 8004886:	d09c      	beq.n	80047c2 <_printf_float+0xaa>
 8004888:	232d      	movs	r3, #45	; 0x2d
 800488a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800488e:	e798      	b.n	80047c2 <_printf_float+0xaa>
 8004890:	9a06      	ldr	r2, [sp, #24]
 8004892:	2a47      	cmp	r2, #71	; 0x47
 8004894:	d1be      	bne.n	8004814 <_printf_float+0xfc>
 8004896:	2b00      	cmp	r3, #0
 8004898:	d1bc      	bne.n	8004814 <_printf_float+0xfc>
 800489a:	2301      	movs	r3, #1
 800489c:	e7b9      	b.n	8004812 <_printf_float+0xfa>
 800489e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80048a2:	d118      	bne.n	80048d6 <_printf_float+0x1be>
 80048a4:	2900      	cmp	r1, #0
 80048a6:	6863      	ldr	r3, [r4, #4]
 80048a8:	dd0b      	ble.n	80048c2 <_printf_float+0x1aa>
 80048aa:	6121      	str	r1, [r4, #16]
 80048ac:	b913      	cbnz	r3, 80048b4 <_printf_float+0x19c>
 80048ae:	6822      	ldr	r2, [r4, #0]
 80048b0:	07d0      	lsls	r0, r2, #31
 80048b2:	d502      	bpl.n	80048ba <_printf_float+0x1a2>
 80048b4:	3301      	adds	r3, #1
 80048b6:	440b      	add	r3, r1
 80048b8:	6123      	str	r3, [r4, #16]
 80048ba:	65a1      	str	r1, [r4, #88]	; 0x58
 80048bc:	f04f 0900 	mov.w	r9, #0
 80048c0:	e7de      	b.n	8004880 <_printf_float+0x168>
 80048c2:	b913      	cbnz	r3, 80048ca <_printf_float+0x1b2>
 80048c4:	6822      	ldr	r2, [r4, #0]
 80048c6:	07d2      	lsls	r2, r2, #31
 80048c8:	d501      	bpl.n	80048ce <_printf_float+0x1b6>
 80048ca:	3302      	adds	r3, #2
 80048cc:	e7f4      	b.n	80048b8 <_printf_float+0x1a0>
 80048ce:	2301      	movs	r3, #1
 80048d0:	e7f2      	b.n	80048b8 <_printf_float+0x1a0>
 80048d2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80048d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048d8:	4299      	cmp	r1, r3
 80048da:	db05      	blt.n	80048e8 <_printf_float+0x1d0>
 80048dc:	6823      	ldr	r3, [r4, #0]
 80048de:	6121      	str	r1, [r4, #16]
 80048e0:	07d8      	lsls	r0, r3, #31
 80048e2:	d5ea      	bpl.n	80048ba <_printf_float+0x1a2>
 80048e4:	1c4b      	adds	r3, r1, #1
 80048e6:	e7e7      	b.n	80048b8 <_printf_float+0x1a0>
 80048e8:	2900      	cmp	r1, #0
 80048ea:	bfd4      	ite	le
 80048ec:	f1c1 0202 	rsble	r2, r1, #2
 80048f0:	2201      	movgt	r2, #1
 80048f2:	4413      	add	r3, r2
 80048f4:	e7e0      	b.n	80048b8 <_printf_float+0x1a0>
 80048f6:	6823      	ldr	r3, [r4, #0]
 80048f8:	055a      	lsls	r2, r3, #21
 80048fa:	d407      	bmi.n	800490c <_printf_float+0x1f4>
 80048fc:	6923      	ldr	r3, [r4, #16]
 80048fe:	4642      	mov	r2, r8
 8004900:	4631      	mov	r1, r6
 8004902:	4628      	mov	r0, r5
 8004904:	47b8      	blx	r7
 8004906:	3001      	adds	r0, #1
 8004908:	d12c      	bne.n	8004964 <_printf_float+0x24c>
 800490a:	e764      	b.n	80047d6 <_printf_float+0xbe>
 800490c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004910:	f240 80e0 	bls.w	8004ad4 <_printf_float+0x3bc>
 8004914:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004918:	2200      	movs	r2, #0
 800491a:	2300      	movs	r3, #0
 800491c:	f7fc f8dc 	bl	8000ad8 <__aeabi_dcmpeq>
 8004920:	2800      	cmp	r0, #0
 8004922:	d034      	beq.n	800498e <_printf_float+0x276>
 8004924:	4a37      	ldr	r2, [pc, #220]	; (8004a04 <_printf_float+0x2ec>)
 8004926:	2301      	movs	r3, #1
 8004928:	4631      	mov	r1, r6
 800492a:	4628      	mov	r0, r5
 800492c:	47b8      	blx	r7
 800492e:	3001      	adds	r0, #1
 8004930:	f43f af51 	beq.w	80047d6 <_printf_float+0xbe>
 8004934:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004938:	429a      	cmp	r2, r3
 800493a:	db02      	blt.n	8004942 <_printf_float+0x22a>
 800493c:	6823      	ldr	r3, [r4, #0]
 800493e:	07d8      	lsls	r0, r3, #31
 8004940:	d510      	bpl.n	8004964 <_printf_float+0x24c>
 8004942:	ee18 3a10 	vmov	r3, s16
 8004946:	4652      	mov	r2, sl
 8004948:	4631      	mov	r1, r6
 800494a:	4628      	mov	r0, r5
 800494c:	47b8      	blx	r7
 800494e:	3001      	adds	r0, #1
 8004950:	f43f af41 	beq.w	80047d6 <_printf_float+0xbe>
 8004954:	f04f 0800 	mov.w	r8, #0
 8004958:	f104 091a 	add.w	r9, r4, #26
 800495c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800495e:	3b01      	subs	r3, #1
 8004960:	4543      	cmp	r3, r8
 8004962:	dc09      	bgt.n	8004978 <_printf_float+0x260>
 8004964:	6823      	ldr	r3, [r4, #0]
 8004966:	079b      	lsls	r3, r3, #30
 8004968:	f100 8107 	bmi.w	8004b7a <_printf_float+0x462>
 800496c:	68e0      	ldr	r0, [r4, #12]
 800496e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004970:	4298      	cmp	r0, r3
 8004972:	bfb8      	it	lt
 8004974:	4618      	movlt	r0, r3
 8004976:	e730      	b.n	80047da <_printf_float+0xc2>
 8004978:	2301      	movs	r3, #1
 800497a:	464a      	mov	r2, r9
 800497c:	4631      	mov	r1, r6
 800497e:	4628      	mov	r0, r5
 8004980:	47b8      	blx	r7
 8004982:	3001      	adds	r0, #1
 8004984:	f43f af27 	beq.w	80047d6 <_printf_float+0xbe>
 8004988:	f108 0801 	add.w	r8, r8, #1
 800498c:	e7e6      	b.n	800495c <_printf_float+0x244>
 800498e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004990:	2b00      	cmp	r3, #0
 8004992:	dc39      	bgt.n	8004a08 <_printf_float+0x2f0>
 8004994:	4a1b      	ldr	r2, [pc, #108]	; (8004a04 <_printf_float+0x2ec>)
 8004996:	2301      	movs	r3, #1
 8004998:	4631      	mov	r1, r6
 800499a:	4628      	mov	r0, r5
 800499c:	47b8      	blx	r7
 800499e:	3001      	adds	r0, #1
 80049a0:	f43f af19 	beq.w	80047d6 <_printf_float+0xbe>
 80049a4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80049a8:	4313      	orrs	r3, r2
 80049aa:	d102      	bne.n	80049b2 <_printf_float+0x29a>
 80049ac:	6823      	ldr	r3, [r4, #0]
 80049ae:	07d9      	lsls	r1, r3, #31
 80049b0:	d5d8      	bpl.n	8004964 <_printf_float+0x24c>
 80049b2:	ee18 3a10 	vmov	r3, s16
 80049b6:	4652      	mov	r2, sl
 80049b8:	4631      	mov	r1, r6
 80049ba:	4628      	mov	r0, r5
 80049bc:	47b8      	blx	r7
 80049be:	3001      	adds	r0, #1
 80049c0:	f43f af09 	beq.w	80047d6 <_printf_float+0xbe>
 80049c4:	f04f 0900 	mov.w	r9, #0
 80049c8:	f104 0a1a 	add.w	sl, r4, #26
 80049cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049ce:	425b      	negs	r3, r3
 80049d0:	454b      	cmp	r3, r9
 80049d2:	dc01      	bgt.n	80049d8 <_printf_float+0x2c0>
 80049d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049d6:	e792      	b.n	80048fe <_printf_float+0x1e6>
 80049d8:	2301      	movs	r3, #1
 80049da:	4652      	mov	r2, sl
 80049dc:	4631      	mov	r1, r6
 80049de:	4628      	mov	r0, r5
 80049e0:	47b8      	blx	r7
 80049e2:	3001      	adds	r0, #1
 80049e4:	f43f aef7 	beq.w	80047d6 <_printf_float+0xbe>
 80049e8:	f109 0901 	add.w	r9, r9, #1
 80049ec:	e7ee      	b.n	80049cc <_printf_float+0x2b4>
 80049ee:	bf00      	nop
 80049f0:	7fefffff 	.word	0x7fefffff
 80049f4:	08007503 	.word	0x08007503
 80049f8:	08007507 	.word	0x08007507
 80049fc:	0800750b 	.word	0x0800750b
 8004a00:	0800750f 	.word	0x0800750f
 8004a04:	08007513 	.word	0x08007513
 8004a08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004a0a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	bfa8      	it	ge
 8004a10:	461a      	movge	r2, r3
 8004a12:	2a00      	cmp	r2, #0
 8004a14:	4691      	mov	r9, r2
 8004a16:	dc37      	bgt.n	8004a88 <_printf_float+0x370>
 8004a18:	f04f 0b00 	mov.w	fp, #0
 8004a1c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004a20:	f104 021a 	add.w	r2, r4, #26
 8004a24:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004a26:	9305      	str	r3, [sp, #20]
 8004a28:	eba3 0309 	sub.w	r3, r3, r9
 8004a2c:	455b      	cmp	r3, fp
 8004a2e:	dc33      	bgt.n	8004a98 <_printf_float+0x380>
 8004a30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a34:	429a      	cmp	r2, r3
 8004a36:	db3b      	blt.n	8004ab0 <_printf_float+0x398>
 8004a38:	6823      	ldr	r3, [r4, #0]
 8004a3a:	07da      	lsls	r2, r3, #31
 8004a3c:	d438      	bmi.n	8004ab0 <_printf_float+0x398>
 8004a3e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004a42:	eba2 0903 	sub.w	r9, r2, r3
 8004a46:	9b05      	ldr	r3, [sp, #20]
 8004a48:	1ad2      	subs	r2, r2, r3
 8004a4a:	4591      	cmp	r9, r2
 8004a4c:	bfa8      	it	ge
 8004a4e:	4691      	movge	r9, r2
 8004a50:	f1b9 0f00 	cmp.w	r9, #0
 8004a54:	dc35      	bgt.n	8004ac2 <_printf_float+0x3aa>
 8004a56:	f04f 0800 	mov.w	r8, #0
 8004a5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004a5e:	f104 0a1a 	add.w	sl, r4, #26
 8004a62:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a66:	1a9b      	subs	r3, r3, r2
 8004a68:	eba3 0309 	sub.w	r3, r3, r9
 8004a6c:	4543      	cmp	r3, r8
 8004a6e:	f77f af79 	ble.w	8004964 <_printf_float+0x24c>
 8004a72:	2301      	movs	r3, #1
 8004a74:	4652      	mov	r2, sl
 8004a76:	4631      	mov	r1, r6
 8004a78:	4628      	mov	r0, r5
 8004a7a:	47b8      	blx	r7
 8004a7c:	3001      	adds	r0, #1
 8004a7e:	f43f aeaa 	beq.w	80047d6 <_printf_float+0xbe>
 8004a82:	f108 0801 	add.w	r8, r8, #1
 8004a86:	e7ec      	b.n	8004a62 <_printf_float+0x34a>
 8004a88:	4613      	mov	r3, r2
 8004a8a:	4631      	mov	r1, r6
 8004a8c:	4642      	mov	r2, r8
 8004a8e:	4628      	mov	r0, r5
 8004a90:	47b8      	blx	r7
 8004a92:	3001      	adds	r0, #1
 8004a94:	d1c0      	bne.n	8004a18 <_printf_float+0x300>
 8004a96:	e69e      	b.n	80047d6 <_printf_float+0xbe>
 8004a98:	2301      	movs	r3, #1
 8004a9a:	4631      	mov	r1, r6
 8004a9c:	4628      	mov	r0, r5
 8004a9e:	9205      	str	r2, [sp, #20]
 8004aa0:	47b8      	blx	r7
 8004aa2:	3001      	adds	r0, #1
 8004aa4:	f43f ae97 	beq.w	80047d6 <_printf_float+0xbe>
 8004aa8:	9a05      	ldr	r2, [sp, #20]
 8004aaa:	f10b 0b01 	add.w	fp, fp, #1
 8004aae:	e7b9      	b.n	8004a24 <_printf_float+0x30c>
 8004ab0:	ee18 3a10 	vmov	r3, s16
 8004ab4:	4652      	mov	r2, sl
 8004ab6:	4631      	mov	r1, r6
 8004ab8:	4628      	mov	r0, r5
 8004aba:	47b8      	blx	r7
 8004abc:	3001      	adds	r0, #1
 8004abe:	d1be      	bne.n	8004a3e <_printf_float+0x326>
 8004ac0:	e689      	b.n	80047d6 <_printf_float+0xbe>
 8004ac2:	9a05      	ldr	r2, [sp, #20]
 8004ac4:	464b      	mov	r3, r9
 8004ac6:	4442      	add	r2, r8
 8004ac8:	4631      	mov	r1, r6
 8004aca:	4628      	mov	r0, r5
 8004acc:	47b8      	blx	r7
 8004ace:	3001      	adds	r0, #1
 8004ad0:	d1c1      	bne.n	8004a56 <_printf_float+0x33e>
 8004ad2:	e680      	b.n	80047d6 <_printf_float+0xbe>
 8004ad4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004ad6:	2a01      	cmp	r2, #1
 8004ad8:	dc01      	bgt.n	8004ade <_printf_float+0x3c6>
 8004ada:	07db      	lsls	r3, r3, #31
 8004adc:	d53a      	bpl.n	8004b54 <_printf_float+0x43c>
 8004ade:	2301      	movs	r3, #1
 8004ae0:	4642      	mov	r2, r8
 8004ae2:	4631      	mov	r1, r6
 8004ae4:	4628      	mov	r0, r5
 8004ae6:	47b8      	blx	r7
 8004ae8:	3001      	adds	r0, #1
 8004aea:	f43f ae74 	beq.w	80047d6 <_printf_float+0xbe>
 8004aee:	ee18 3a10 	vmov	r3, s16
 8004af2:	4652      	mov	r2, sl
 8004af4:	4631      	mov	r1, r6
 8004af6:	4628      	mov	r0, r5
 8004af8:	47b8      	blx	r7
 8004afa:	3001      	adds	r0, #1
 8004afc:	f43f ae6b 	beq.w	80047d6 <_printf_float+0xbe>
 8004b00:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004b04:	2200      	movs	r2, #0
 8004b06:	2300      	movs	r3, #0
 8004b08:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8004b0c:	f7fb ffe4 	bl	8000ad8 <__aeabi_dcmpeq>
 8004b10:	b9d8      	cbnz	r0, 8004b4a <_printf_float+0x432>
 8004b12:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004b16:	f108 0201 	add.w	r2, r8, #1
 8004b1a:	4631      	mov	r1, r6
 8004b1c:	4628      	mov	r0, r5
 8004b1e:	47b8      	blx	r7
 8004b20:	3001      	adds	r0, #1
 8004b22:	d10e      	bne.n	8004b42 <_printf_float+0x42a>
 8004b24:	e657      	b.n	80047d6 <_printf_float+0xbe>
 8004b26:	2301      	movs	r3, #1
 8004b28:	4652      	mov	r2, sl
 8004b2a:	4631      	mov	r1, r6
 8004b2c:	4628      	mov	r0, r5
 8004b2e:	47b8      	blx	r7
 8004b30:	3001      	adds	r0, #1
 8004b32:	f43f ae50 	beq.w	80047d6 <_printf_float+0xbe>
 8004b36:	f108 0801 	add.w	r8, r8, #1
 8004b3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b3c:	3b01      	subs	r3, #1
 8004b3e:	4543      	cmp	r3, r8
 8004b40:	dcf1      	bgt.n	8004b26 <_printf_float+0x40e>
 8004b42:	464b      	mov	r3, r9
 8004b44:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004b48:	e6da      	b.n	8004900 <_printf_float+0x1e8>
 8004b4a:	f04f 0800 	mov.w	r8, #0
 8004b4e:	f104 0a1a 	add.w	sl, r4, #26
 8004b52:	e7f2      	b.n	8004b3a <_printf_float+0x422>
 8004b54:	2301      	movs	r3, #1
 8004b56:	4642      	mov	r2, r8
 8004b58:	e7df      	b.n	8004b1a <_printf_float+0x402>
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	464a      	mov	r2, r9
 8004b5e:	4631      	mov	r1, r6
 8004b60:	4628      	mov	r0, r5
 8004b62:	47b8      	blx	r7
 8004b64:	3001      	adds	r0, #1
 8004b66:	f43f ae36 	beq.w	80047d6 <_printf_float+0xbe>
 8004b6a:	f108 0801 	add.w	r8, r8, #1
 8004b6e:	68e3      	ldr	r3, [r4, #12]
 8004b70:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004b72:	1a5b      	subs	r3, r3, r1
 8004b74:	4543      	cmp	r3, r8
 8004b76:	dcf0      	bgt.n	8004b5a <_printf_float+0x442>
 8004b78:	e6f8      	b.n	800496c <_printf_float+0x254>
 8004b7a:	f04f 0800 	mov.w	r8, #0
 8004b7e:	f104 0919 	add.w	r9, r4, #25
 8004b82:	e7f4      	b.n	8004b6e <_printf_float+0x456>

08004b84 <_printf_common>:
 8004b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b88:	4616      	mov	r6, r2
 8004b8a:	4699      	mov	r9, r3
 8004b8c:	688a      	ldr	r2, [r1, #8]
 8004b8e:	690b      	ldr	r3, [r1, #16]
 8004b90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b94:	4293      	cmp	r3, r2
 8004b96:	bfb8      	it	lt
 8004b98:	4613      	movlt	r3, r2
 8004b9a:	6033      	str	r3, [r6, #0]
 8004b9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ba0:	4607      	mov	r7, r0
 8004ba2:	460c      	mov	r4, r1
 8004ba4:	b10a      	cbz	r2, 8004baa <_printf_common+0x26>
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	6033      	str	r3, [r6, #0]
 8004baa:	6823      	ldr	r3, [r4, #0]
 8004bac:	0699      	lsls	r1, r3, #26
 8004bae:	bf42      	ittt	mi
 8004bb0:	6833      	ldrmi	r3, [r6, #0]
 8004bb2:	3302      	addmi	r3, #2
 8004bb4:	6033      	strmi	r3, [r6, #0]
 8004bb6:	6825      	ldr	r5, [r4, #0]
 8004bb8:	f015 0506 	ands.w	r5, r5, #6
 8004bbc:	d106      	bne.n	8004bcc <_printf_common+0x48>
 8004bbe:	f104 0a19 	add.w	sl, r4, #25
 8004bc2:	68e3      	ldr	r3, [r4, #12]
 8004bc4:	6832      	ldr	r2, [r6, #0]
 8004bc6:	1a9b      	subs	r3, r3, r2
 8004bc8:	42ab      	cmp	r3, r5
 8004bca:	dc26      	bgt.n	8004c1a <_printf_common+0x96>
 8004bcc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004bd0:	1e13      	subs	r3, r2, #0
 8004bd2:	6822      	ldr	r2, [r4, #0]
 8004bd4:	bf18      	it	ne
 8004bd6:	2301      	movne	r3, #1
 8004bd8:	0692      	lsls	r2, r2, #26
 8004bda:	d42b      	bmi.n	8004c34 <_printf_common+0xb0>
 8004bdc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004be0:	4649      	mov	r1, r9
 8004be2:	4638      	mov	r0, r7
 8004be4:	47c0      	blx	r8
 8004be6:	3001      	adds	r0, #1
 8004be8:	d01e      	beq.n	8004c28 <_printf_common+0xa4>
 8004bea:	6823      	ldr	r3, [r4, #0]
 8004bec:	6922      	ldr	r2, [r4, #16]
 8004bee:	f003 0306 	and.w	r3, r3, #6
 8004bf2:	2b04      	cmp	r3, #4
 8004bf4:	bf02      	ittt	eq
 8004bf6:	68e5      	ldreq	r5, [r4, #12]
 8004bf8:	6833      	ldreq	r3, [r6, #0]
 8004bfa:	1aed      	subeq	r5, r5, r3
 8004bfc:	68a3      	ldr	r3, [r4, #8]
 8004bfe:	bf0c      	ite	eq
 8004c00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c04:	2500      	movne	r5, #0
 8004c06:	4293      	cmp	r3, r2
 8004c08:	bfc4      	itt	gt
 8004c0a:	1a9b      	subgt	r3, r3, r2
 8004c0c:	18ed      	addgt	r5, r5, r3
 8004c0e:	2600      	movs	r6, #0
 8004c10:	341a      	adds	r4, #26
 8004c12:	42b5      	cmp	r5, r6
 8004c14:	d11a      	bne.n	8004c4c <_printf_common+0xc8>
 8004c16:	2000      	movs	r0, #0
 8004c18:	e008      	b.n	8004c2c <_printf_common+0xa8>
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	4652      	mov	r2, sl
 8004c1e:	4649      	mov	r1, r9
 8004c20:	4638      	mov	r0, r7
 8004c22:	47c0      	blx	r8
 8004c24:	3001      	adds	r0, #1
 8004c26:	d103      	bne.n	8004c30 <_printf_common+0xac>
 8004c28:	f04f 30ff 	mov.w	r0, #4294967295
 8004c2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c30:	3501      	adds	r5, #1
 8004c32:	e7c6      	b.n	8004bc2 <_printf_common+0x3e>
 8004c34:	18e1      	adds	r1, r4, r3
 8004c36:	1c5a      	adds	r2, r3, #1
 8004c38:	2030      	movs	r0, #48	; 0x30
 8004c3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c3e:	4422      	add	r2, r4
 8004c40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c48:	3302      	adds	r3, #2
 8004c4a:	e7c7      	b.n	8004bdc <_printf_common+0x58>
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	4622      	mov	r2, r4
 8004c50:	4649      	mov	r1, r9
 8004c52:	4638      	mov	r0, r7
 8004c54:	47c0      	blx	r8
 8004c56:	3001      	adds	r0, #1
 8004c58:	d0e6      	beq.n	8004c28 <_printf_common+0xa4>
 8004c5a:	3601      	adds	r6, #1
 8004c5c:	e7d9      	b.n	8004c12 <_printf_common+0x8e>
	...

08004c60 <_printf_i>:
 8004c60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c64:	7e0f      	ldrb	r7, [r1, #24]
 8004c66:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004c68:	2f78      	cmp	r7, #120	; 0x78
 8004c6a:	4691      	mov	r9, r2
 8004c6c:	4680      	mov	r8, r0
 8004c6e:	460c      	mov	r4, r1
 8004c70:	469a      	mov	sl, r3
 8004c72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004c76:	d807      	bhi.n	8004c88 <_printf_i+0x28>
 8004c78:	2f62      	cmp	r7, #98	; 0x62
 8004c7a:	d80a      	bhi.n	8004c92 <_printf_i+0x32>
 8004c7c:	2f00      	cmp	r7, #0
 8004c7e:	f000 80d4 	beq.w	8004e2a <_printf_i+0x1ca>
 8004c82:	2f58      	cmp	r7, #88	; 0x58
 8004c84:	f000 80c0 	beq.w	8004e08 <_printf_i+0x1a8>
 8004c88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004c90:	e03a      	b.n	8004d08 <_printf_i+0xa8>
 8004c92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004c96:	2b15      	cmp	r3, #21
 8004c98:	d8f6      	bhi.n	8004c88 <_printf_i+0x28>
 8004c9a:	a101      	add	r1, pc, #4	; (adr r1, 8004ca0 <_printf_i+0x40>)
 8004c9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ca0:	08004cf9 	.word	0x08004cf9
 8004ca4:	08004d0d 	.word	0x08004d0d
 8004ca8:	08004c89 	.word	0x08004c89
 8004cac:	08004c89 	.word	0x08004c89
 8004cb0:	08004c89 	.word	0x08004c89
 8004cb4:	08004c89 	.word	0x08004c89
 8004cb8:	08004d0d 	.word	0x08004d0d
 8004cbc:	08004c89 	.word	0x08004c89
 8004cc0:	08004c89 	.word	0x08004c89
 8004cc4:	08004c89 	.word	0x08004c89
 8004cc8:	08004c89 	.word	0x08004c89
 8004ccc:	08004e11 	.word	0x08004e11
 8004cd0:	08004d39 	.word	0x08004d39
 8004cd4:	08004dcb 	.word	0x08004dcb
 8004cd8:	08004c89 	.word	0x08004c89
 8004cdc:	08004c89 	.word	0x08004c89
 8004ce0:	08004e33 	.word	0x08004e33
 8004ce4:	08004c89 	.word	0x08004c89
 8004ce8:	08004d39 	.word	0x08004d39
 8004cec:	08004c89 	.word	0x08004c89
 8004cf0:	08004c89 	.word	0x08004c89
 8004cf4:	08004dd3 	.word	0x08004dd3
 8004cf8:	682b      	ldr	r3, [r5, #0]
 8004cfa:	1d1a      	adds	r2, r3, #4
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	602a      	str	r2, [r5, #0]
 8004d00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e09f      	b.n	8004e4c <_printf_i+0x1ec>
 8004d0c:	6820      	ldr	r0, [r4, #0]
 8004d0e:	682b      	ldr	r3, [r5, #0]
 8004d10:	0607      	lsls	r7, r0, #24
 8004d12:	f103 0104 	add.w	r1, r3, #4
 8004d16:	6029      	str	r1, [r5, #0]
 8004d18:	d501      	bpl.n	8004d1e <_printf_i+0xbe>
 8004d1a:	681e      	ldr	r6, [r3, #0]
 8004d1c:	e003      	b.n	8004d26 <_printf_i+0xc6>
 8004d1e:	0646      	lsls	r6, r0, #25
 8004d20:	d5fb      	bpl.n	8004d1a <_printf_i+0xba>
 8004d22:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004d26:	2e00      	cmp	r6, #0
 8004d28:	da03      	bge.n	8004d32 <_printf_i+0xd2>
 8004d2a:	232d      	movs	r3, #45	; 0x2d
 8004d2c:	4276      	negs	r6, r6
 8004d2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d32:	485a      	ldr	r0, [pc, #360]	; (8004e9c <_printf_i+0x23c>)
 8004d34:	230a      	movs	r3, #10
 8004d36:	e012      	b.n	8004d5e <_printf_i+0xfe>
 8004d38:	682b      	ldr	r3, [r5, #0]
 8004d3a:	6820      	ldr	r0, [r4, #0]
 8004d3c:	1d19      	adds	r1, r3, #4
 8004d3e:	6029      	str	r1, [r5, #0]
 8004d40:	0605      	lsls	r5, r0, #24
 8004d42:	d501      	bpl.n	8004d48 <_printf_i+0xe8>
 8004d44:	681e      	ldr	r6, [r3, #0]
 8004d46:	e002      	b.n	8004d4e <_printf_i+0xee>
 8004d48:	0641      	lsls	r1, r0, #25
 8004d4a:	d5fb      	bpl.n	8004d44 <_printf_i+0xe4>
 8004d4c:	881e      	ldrh	r6, [r3, #0]
 8004d4e:	4853      	ldr	r0, [pc, #332]	; (8004e9c <_printf_i+0x23c>)
 8004d50:	2f6f      	cmp	r7, #111	; 0x6f
 8004d52:	bf0c      	ite	eq
 8004d54:	2308      	moveq	r3, #8
 8004d56:	230a      	movne	r3, #10
 8004d58:	2100      	movs	r1, #0
 8004d5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d5e:	6865      	ldr	r5, [r4, #4]
 8004d60:	60a5      	str	r5, [r4, #8]
 8004d62:	2d00      	cmp	r5, #0
 8004d64:	bfa2      	ittt	ge
 8004d66:	6821      	ldrge	r1, [r4, #0]
 8004d68:	f021 0104 	bicge.w	r1, r1, #4
 8004d6c:	6021      	strge	r1, [r4, #0]
 8004d6e:	b90e      	cbnz	r6, 8004d74 <_printf_i+0x114>
 8004d70:	2d00      	cmp	r5, #0
 8004d72:	d04b      	beq.n	8004e0c <_printf_i+0x1ac>
 8004d74:	4615      	mov	r5, r2
 8004d76:	fbb6 f1f3 	udiv	r1, r6, r3
 8004d7a:	fb03 6711 	mls	r7, r3, r1, r6
 8004d7e:	5dc7      	ldrb	r7, [r0, r7]
 8004d80:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004d84:	4637      	mov	r7, r6
 8004d86:	42bb      	cmp	r3, r7
 8004d88:	460e      	mov	r6, r1
 8004d8a:	d9f4      	bls.n	8004d76 <_printf_i+0x116>
 8004d8c:	2b08      	cmp	r3, #8
 8004d8e:	d10b      	bne.n	8004da8 <_printf_i+0x148>
 8004d90:	6823      	ldr	r3, [r4, #0]
 8004d92:	07de      	lsls	r6, r3, #31
 8004d94:	d508      	bpl.n	8004da8 <_printf_i+0x148>
 8004d96:	6923      	ldr	r3, [r4, #16]
 8004d98:	6861      	ldr	r1, [r4, #4]
 8004d9a:	4299      	cmp	r1, r3
 8004d9c:	bfde      	ittt	le
 8004d9e:	2330      	movle	r3, #48	; 0x30
 8004da0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004da4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004da8:	1b52      	subs	r2, r2, r5
 8004daa:	6122      	str	r2, [r4, #16]
 8004dac:	f8cd a000 	str.w	sl, [sp]
 8004db0:	464b      	mov	r3, r9
 8004db2:	aa03      	add	r2, sp, #12
 8004db4:	4621      	mov	r1, r4
 8004db6:	4640      	mov	r0, r8
 8004db8:	f7ff fee4 	bl	8004b84 <_printf_common>
 8004dbc:	3001      	adds	r0, #1
 8004dbe:	d14a      	bne.n	8004e56 <_printf_i+0x1f6>
 8004dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8004dc4:	b004      	add	sp, #16
 8004dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dca:	6823      	ldr	r3, [r4, #0]
 8004dcc:	f043 0320 	orr.w	r3, r3, #32
 8004dd0:	6023      	str	r3, [r4, #0]
 8004dd2:	4833      	ldr	r0, [pc, #204]	; (8004ea0 <_printf_i+0x240>)
 8004dd4:	2778      	movs	r7, #120	; 0x78
 8004dd6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004dda:	6823      	ldr	r3, [r4, #0]
 8004ddc:	6829      	ldr	r1, [r5, #0]
 8004dde:	061f      	lsls	r7, r3, #24
 8004de0:	f851 6b04 	ldr.w	r6, [r1], #4
 8004de4:	d402      	bmi.n	8004dec <_printf_i+0x18c>
 8004de6:	065f      	lsls	r7, r3, #25
 8004de8:	bf48      	it	mi
 8004dea:	b2b6      	uxthmi	r6, r6
 8004dec:	07df      	lsls	r7, r3, #31
 8004dee:	bf48      	it	mi
 8004df0:	f043 0320 	orrmi.w	r3, r3, #32
 8004df4:	6029      	str	r1, [r5, #0]
 8004df6:	bf48      	it	mi
 8004df8:	6023      	strmi	r3, [r4, #0]
 8004dfa:	b91e      	cbnz	r6, 8004e04 <_printf_i+0x1a4>
 8004dfc:	6823      	ldr	r3, [r4, #0]
 8004dfe:	f023 0320 	bic.w	r3, r3, #32
 8004e02:	6023      	str	r3, [r4, #0]
 8004e04:	2310      	movs	r3, #16
 8004e06:	e7a7      	b.n	8004d58 <_printf_i+0xf8>
 8004e08:	4824      	ldr	r0, [pc, #144]	; (8004e9c <_printf_i+0x23c>)
 8004e0a:	e7e4      	b.n	8004dd6 <_printf_i+0x176>
 8004e0c:	4615      	mov	r5, r2
 8004e0e:	e7bd      	b.n	8004d8c <_printf_i+0x12c>
 8004e10:	682b      	ldr	r3, [r5, #0]
 8004e12:	6826      	ldr	r6, [r4, #0]
 8004e14:	6961      	ldr	r1, [r4, #20]
 8004e16:	1d18      	adds	r0, r3, #4
 8004e18:	6028      	str	r0, [r5, #0]
 8004e1a:	0635      	lsls	r5, r6, #24
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	d501      	bpl.n	8004e24 <_printf_i+0x1c4>
 8004e20:	6019      	str	r1, [r3, #0]
 8004e22:	e002      	b.n	8004e2a <_printf_i+0x1ca>
 8004e24:	0670      	lsls	r0, r6, #25
 8004e26:	d5fb      	bpl.n	8004e20 <_printf_i+0x1c0>
 8004e28:	8019      	strh	r1, [r3, #0]
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	6123      	str	r3, [r4, #16]
 8004e2e:	4615      	mov	r5, r2
 8004e30:	e7bc      	b.n	8004dac <_printf_i+0x14c>
 8004e32:	682b      	ldr	r3, [r5, #0]
 8004e34:	1d1a      	adds	r2, r3, #4
 8004e36:	602a      	str	r2, [r5, #0]
 8004e38:	681d      	ldr	r5, [r3, #0]
 8004e3a:	6862      	ldr	r2, [r4, #4]
 8004e3c:	2100      	movs	r1, #0
 8004e3e:	4628      	mov	r0, r5
 8004e40:	f7fb f9ce 	bl	80001e0 <memchr>
 8004e44:	b108      	cbz	r0, 8004e4a <_printf_i+0x1ea>
 8004e46:	1b40      	subs	r0, r0, r5
 8004e48:	6060      	str	r0, [r4, #4]
 8004e4a:	6863      	ldr	r3, [r4, #4]
 8004e4c:	6123      	str	r3, [r4, #16]
 8004e4e:	2300      	movs	r3, #0
 8004e50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e54:	e7aa      	b.n	8004dac <_printf_i+0x14c>
 8004e56:	6923      	ldr	r3, [r4, #16]
 8004e58:	462a      	mov	r2, r5
 8004e5a:	4649      	mov	r1, r9
 8004e5c:	4640      	mov	r0, r8
 8004e5e:	47d0      	blx	sl
 8004e60:	3001      	adds	r0, #1
 8004e62:	d0ad      	beq.n	8004dc0 <_printf_i+0x160>
 8004e64:	6823      	ldr	r3, [r4, #0]
 8004e66:	079b      	lsls	r3, r3, #30
 8004e68:	d413      	bmi.n	8004e92 <_printf_i+0x232>
 8004e6a:	68e0      	ldr	r0, [r4, #12]
 8004e6c:	9b03      	ldr	r3, [sp, #12]
 8004e6e:	4298      	cmp	r0, r3
 8004e70:	bfb8      	it	lt
 8004e72:	4618      	movlt	r0, r3
 8004e74:	e7a6      	b.n	8004dc4 <_printf_i+0x164>
 8004e76:	2301      	movs	r3, #1
 8004e78:	4632      	mov	r2, r6
 8004e7a:	4649      	mov	r1, r9
 8004e7c:	4640      	mov	r0, r8
 8004e7e:	47d0      	blx	sl
 8004e80:	3001      	adds	r0, #1
 8004e82:	d09d      	beq.n	8004dc0 <_printf_i+0x160>
 8004e84:	3501      	adds	r5, #1
 8004e86:	68e3      	ldr	r3, [r4, #12]
 8004e88:	9903      	ldr	r1, [sp, #12]
 8004e8a:	1a5b      	subs	r3, r3, r1
 8004e8c:	42ab      	cmp	r3, r5
 8004e8e:	dcf2      	bgt.n	8004e76 <_printf_i+0x216>
 8004e90:	e7eb      	b.n	8004e6a <_printf_i+0x20a>
 8004e92:	2500      	movs	r5, #0
 8004e94:	f104 0619 	add.w	r6, r4, #25
 8004e98:	e7f5      	b.n	8004e86 <_printf_i+0x226>
 8004e9a:	bf00      	nop
 8004e9c:	08007515 	.word	0x08007515
 8004ea0:	08007526 	.word	0x08007526

08004ea4 <std>:
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	b510      	push	{r4, lr}
 8004ea8:	4604      	mov	r4, r0
 8004eaa:	e9c0 3300 	strd	r3, r3, [r0]
 8004eae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004eb2:	6083      	str	r3, [r0, #8]
 8004eb4:	8181      	strh	r1, [r0, #12]
 8004eb6:	6643      	str	r3, [r0, #100]	; 0x64
 8004eb8:	81c2      	strh	r2, [r0, #14]
 8004eba:	6183      	str	r3, [r0, #24]
 8004ebc:	4619      	mov	r1, r3
 8004ebe:	2208      	movs	r2, #8
 8004ec0:	305c      	adds	r0, #92	; 0x5c
 8004ec2:	f000 f8f4 	bl	80050ae <memset>
 8004ec6:	4b05      	ldr	r3, [pc, #20]	; (8004edc <std+0x38>)
 8004ec8:	6263      	str	r3, [r4, #36]	; 0x24
 8004eca:	4b05      	ldr	r3, [pc, #20]	; (8004ee0 <std+0x3c>)
 8004ecc:	62a3      	str	r3, [r4, #40]	; 0x28
 8004ece:	4b05      	ldr	r3, [pc, #20]	; (8004ee4 <std+0x40>)
 8004ed0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004ed2:	4b05      	ldr	r3, [pc, #20]	; (8004ee8 <std+0x44>)
 8004ed4:	6224      	str	r4, [r4, #32]
 8004ed6:	6323      	str	r3, [r4, #48]	; 0x30
 8004ed8:	bd10      	pop	{r4, pc}
 8004eda:	bf00      	nop
 8004edc:	08005029 	.word	0x08005029
 8004ee0:	0800504b 	.word	0x0800504b
 8004ee4:	08005083 	.word	0x08005083
 8004ee8:	080050a7 	.word	0x080050a7

08004eec <stdio_exit_handler>:
 8004eec:	4a02      	ldr	r2, [pc, #8]	; (8004ef8 <stdio_exit_handler+0xc>)
 8004eee:	4903      	ldr	r1, [pc, #12]	; (8004efc <stdio_exit_handler+0x10>)
 8004ef0:	4803      	ldr	r0, [pc, #12]	; (8004f00 <stdio_exit_handler+0x14>)
 8004ef2:	f000 b869 	b.w	8004fc8 <_fwalk_sglue>
 8004ef6:	bf00      	nop
 8004ef8:	2000000c 	.word	0x2000000c
 8004efc:	08006b31 	.word	0x08006b31
 8004f00:	20000018 	.word	0x20000018

08004f04 <cleanup_stdio>:
 8004f04:	6841      	ldr	r1, [r0, #4]
 8004f06:	4b0c      	ldr	r3, [pc, #48]	; (8004f38 <cleanup_stdio+0x34>)
 8004f08:	4299      	cmp	r1, r3
 8004f0a:	b510      	push	{r4, lr}
 8004f0c:	4604      	mov	r4, r0
 8004f0e:	d001      	beq.n	8004f14 <cleanup_stdio+0x10>
 8004f10:	f001 fe0e 	bl	8006b30 <_fflush_r>
 8004f14:	68a1      	ldr	r1, [r4, #8]
 8004f16:	4b09      	ldr	r3, [pc, #36]	; (8004f3c <cleanup_stdio+0x38>)
 8004f18:	4299      	cmp	r1, r3
 8004f1a:	d002      	beq.n	8004f22 <cleanup_stdio+0x1e>
 8004f1c:	4620      	mov	r0, r4
 8004f1e:	f001 fe07 	bl	8006b30 <_fflush_r>
 8004f22:	68e1      	ldr	r1, [r4, #12]
 8004f24:	4b06      	ldr	r3, [pc, #24]	; (8004f40 <cleanup_stdio+0x3c>)
 8004f26:	4299      	cmp	r1, r3
 8004f28:	d004      	beq.n	8004f34 <cleanup_stdio+0x30>
 8004f2a:	4620      	mov	r0, r4
 8004f2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f30:	f001 bdfe 	b.w	8006b30 <_fflush_r>
 8004f34:	bd10      	pop	{r4, pc}
 8004f36:	bf00      	nop
 8004f38:	20000264 	.word	0x20000264
 8004f3c:	200002cc 	.word	0x200002cc
 8004f40:	20000334 	.word	0x20000334

08004f44 <global_stdio_init.part.0>:
 8004f44:	b510      	push	{r4, lr}
 8004f46:	4b0b      	ldr	r3, [pc, #44]	; (8004f74 <global_stdio_init.part.0+0x30>)
 8004f48:	4c0b      	ldr	r4, [pc, #44]	; (8004f78 <global_stdio_init.part.0+0x34>)
 8004f4a:	4a0c      	ldr	r2, [pc, #48]	; (8004f7c <global_stdio_init.part.0+0x38>)
 8004f4c:	601a      	str	r2, [r3, #0]
 8004f4e:	4620      	mov	r0, r4
 8004f50:	2200      	movs	r2, #0
 8004f52:	2104      	movs	r1, #4
 8004f54:	f7ff ffa6 	bl	8004ea4 <std>
 8004f58:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	2109      	movs	r1, #9
 8004f60:	f7ff ffa0 	bl	8004ea4 <std>
 8004f64:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004f68:	2202      	movs	r2, #2
 8004f6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f6e:	2112      	movs	r1, #18
 8004f70:	f7ff bf98 	b.w	8004ea4 <std>
 8004f74:	2000039c 	.word	0x2000039c
 8004f78:	20000264 	.word	0x20000264
 8004f7c:	08004eed 	.word	0x08004eed

08004f80 <__sfp_lock_acquire>:
 8004f80:	4801      	ldr	r0, [pc, #4]	; (8004f88 <__sfp_lock_acquire+0x8>)
 8004f82:	f000 b911 	b.w	80051a8 <__retarget_lock_acquire_recursive>
 8004f86:	bf00      	nop
 8004f88:	200003a5 	.word	0x200003a5

08004f8c <__sfp_lock_release>:
 8004f8c:	4801      	ldr	r0, [pc, #4]	; (8004f94 <__sfp_lock_release+0x8>)
 8004f8e:	f000 b90c 	b.w	80051aa <__retarget_lock_release_recursive>
 8004f92:	bf00      	nop
 8004f94:	200003a5 	.word	0x200003a5

08004f98 <__sinit>:
 8004f98:	b510      	push	{r4, lr}
 8004f9a:	4604      	mov	r4, r0
 8004f9c:	f7ff fff0 	bl	8004f80 <__sfp_lock_acquire>
 8004fa0:	6a23      	ldr	r3, [r4, #32]
 8004fa2:	b11b      	cbz	r3, 8004fac <__sinit+0x14>
 8004fa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fa8:	f7ff bff0 	b.w	8004f8c <__sfp_lock_release>
 8004fac:	4b04      	ldr	r3, [pc, #16]	; (8004fc0 <__sinit+0x28>)
 8004fae:	6223      	str	r3, [r4, #32]
 8004fb0:	4b04      	ldr	r3, [pc, #16]	; (8004fc4 <__sinit+0x2c>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d1f5      	bne.n	8004fa4 <__sinit+0xc>
 8004fb8:	f7ff ffc4 	bl	8004f44 <global_stdio_init.part.0>
 8004fbc:	e7f2      	b.n	8004fa4 <__sinit+0xc>
 8004fbe:	bf00      	nop
 8004fc0:	08004f05 	.word	0x08004f05
 8004fc4:	2000039c 	.word	0x2000039c

08004fc8 <_fwalk_sglue>:
 8004fc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fcc:	4607      	mov	r7, r0
 8004fce:	4688      	mov	r8, r1
 8004fd0:	4614      	mov	r4, r2
 8004fd2:	2600      	movs	r6, #0
 8004fd4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004fd8:	f1b9 0901 	subs.w	r9, r9, #1
 8004fdc:	d505      	bpl.n	8004fea <_fwalk_sglue+0x22>
 8004fde:	6824      	ldr	r4, [r4, #0]
 8004fe0:	2c00      	cmp	r4, #0
 8004fe2:	d1f7      	bne.n	8004fd4 <_fwalk_sglue+0xc>
 8004fe4:	4630      	mov	r0, r6
 8004fe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fea:	89ab      	ldrh	r3, [r5, #12]
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d907      	bls.n	8005000 <_fwalk_sglue+0x38>
 8004ff0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004ff4:	3301      	adds	r3, #1
 8004ff6:	d003      	beq.n	8005000 <_fwalk_sglue+0x38>
 8004ff8:	4629      	mov	r1, r5
 8004ffa:	4638      	mov	r0, r7
 8004ffc:	47c0      	blx	r8
 8004ffe:	4306      	orrs	r6, r0
 8005000:	3568      	adds	r5, #104	; 0x68
 8005002:	e7e9      	b.n	8004fd8 <_fwalk_sglue+0x10>

08005004 <iprintf>:
 8005004:	b40f      	push	{r0, r1, r2, r3}
 8005006:	b507      	push	{r0, r1, r2, lr}
 8005008:	4906      	ldr	r1, [pc, #24]	; (8005024 <iprintf+0x20>)
 800500a:	ab04      	add	r3, sp, #16
 800500c:	6808      	ldr	r0, [r1, #0]
 800500e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005012:	6881      	ldr	r1, [r0, #8]
 8005014:	9301      	str	r3, [sp, #4]
 8005016:	f001 fbeb 	bl	80067f0 <_vfiprintf_r>
 800501a:	b003      	add	sp, #12
 800501c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005020:	b004      	add	sp, #16
 8005022:	4770      	bx	lr
 8005024:	20000064 	.word	0x20000064

08005028 <__sread>:
 8005028:	b510      	push	{r4, lr}
 800502a:	460c      	mov	r4, r1
 800502c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005030:	f000 f86c 	bl	800510c <_read_r>
 8005034:	2800      	cmp	r0, #0
 8005036:	bfab      	itete	ge
 8005038:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800503a:	89a3      	ldrhlt	r3, [r4, #12]
 800503c:	181b      	addge	r3, r3, r0
 800503e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005042:	bfac      	ite	ge
 8005044:	6563      	strge	r3, [r4, #84]	; 0x54
 8005046:	81a3      	strhlt	r3, [r4, #12]
 8005048:	bd10      	pop	{r4, pc}

0800504a <__swrite>:
 800504a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800504e:	461f      	mov	r7, r3
 8005050:	898b      	ldrh	r3, [r1, #12]
 8005052:	05db      	lsls	r3, r3, #23
 8005054:	4605      	mov	r5, r0
 8005056:	460c      	mov	r4, r1
 8005058:	4616      	mov	r6, r2
 800505a:	d505      	bpl.n	8005068 <__swrite+0x1e>
 800505c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005060:	2302      	movs	r3, #2
 8005062:	2200      	movs	r2, #0
 8005064:	f000 f840 	bl	80050e8 <_lseek_r>
 8005068:	89a3      	ldrh	r3, [r4, #12]
 800506a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800506e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005072:	81a3      	strh	r3, [r4, #12]
 8005074:	4632      	mov	r2, r6
 8005076:	463b      	mov	r3, r7
 8005078:	4628      	mov	r0, r5
 800507a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800507e:	f000 b857 	b.w	8005130 <_write_r>

08005082 <__sseek>:
 8005082:	b510      	push	{r4, lr}
 8005084:	460c      	mov	r4, r1
 8005086:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800508a:	f000 f82d 	bl	80050e8 <_lseek_r>
 800508e:	1c43      	adds	r3, r0, #1
 8005090:	89a3      	ldrh	r3, [r4, #12]
 8005092:	bf15      	itete	ne
 8005094:	6560      	strne	r0, [r4, #84]	; 0x54
 8005096:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800509a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800509e:	81a3      	strheq	r3, [r4, #12]
 80050a0:	bf18      	it	ne
 80050a2:	81a3      	strhne	r3, [r4, #12]
 80050a4:	bd10      	pop	{r4, pc}

080050a6 <__sclose>:
 80050a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050aa:	f000 b80d 	b.w	80050c8 <_close_r>

080050ae <memset>:
 80050ae:	4402      	add	r2, r0
 80050b0:	4603      	mov	r3, r0
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d100      	bne.n	80050b8 <memset+0xa>
 80050b6:	4770      	bx	lr
 80050b8:	f803 1b01 	strb.w	r1, [r3], #1
 80050bc:	e7f9      	b.n	80050b2 <memset+0x4>
	...

080050c0 <_localeconv_r>:
 80050c0:	4800      	ldr	r0, [pc, #0]	; (80050c4 <_localeconv_r+0x4>)
 80050c2:	4770      	bx	lr
 80050c4:	20000158 	.word	0x20000158

080050c8 <_close_r>:
 80050c8:	b538      	push	{r3, r4, r5, lr}
 80050ca:	4d06      	ldr	r5, [pc, #24]	; (80050e4 <_close_r+0x1c>)
 80050cc:	2300      	movs	r3, #0
 80050ce:	4604      	mov	r4, r0
 80050d0:	4608      	mov	r0, r1
 80050d2:	602b      	str	r3, [r5, #0]
 80050d4:	f7fc ff4d 	bl	8001f72 <_close>
 80050d8:	1c43      	adds	r3, r0, #1
 80050da:	d102      	bne.n	80050e2 <_close_r+0x1a>
 80050dc:	682b      	ldr	r3, [r5, #0]
 80050de:	b103      	cbz	r3, 80050e2 <_close_r+0x1a>
 80050e0:	6023      	str	r3, [r4, #0]
 80050e2:	bd38      	pop	{r3, r4, r5, pc}
 80050e4:	200003a0 	.word	0x200003a0

080050e8 <_lseek_r>:
 80050e8:	b538      	push	{r3, r4, r5, lr}
 80050ea:	4d07      	ldr	r5, [pc, #28]	; (8005108 <_lseek_r+0x20>)
 80050ec:	4604      	mov	r4, r0
 80050ee:	4608      	mov	r0, r1
 80050f0:	4611      	mov	r1, r2
 80050f2:	2200      	movs	r2, #0
 80050f4:	602a      	str	r2, [r5, #0]
 80050f6:	461a      	mov	r2, r3
 80050f8:	f7fc ff62 	bl	8001fc0 <_lseek>
 80050fc:	1c43      	adds	r3, r0, #1
 80050fe:	d102      	bne.n	8005106 <_lseek_r+0x1e>
 8005100:	682b      	ldr	r3, [r5, #0]
 8005102:	b103      	cbz	r3, 8005106 <_lseek_r+0x1e>
 8005104:	6023      	str	r3, [r4, #0]
 8005106:	bd38      	pop	{r3, r4, r5, pc}
 8005108:	200003a0 	.word	0x200003a0

0800510c <_read_r>:
 800510c:	b538      	push	{r3, r4, r5, lr}
 800510e:	4d07      	ldr	r5, [pc, #28]	; (800512c <_read_r+0x20>)
 8005110:	4604      	mov	r4, r0
 8005112:	4608      	mov	r0, r1
 8005114:	4611      	mov	r1, r2
 8005116:	2200      	movs	r2, #0
 8005118:	602a      	str	r2, [r5, #0]
 800511a:	461a      	mov	r2, r3
 800511c:	f7fc ff0c 	bl	8001f38 <_read>
 8005120:	1c43      	adds	r3, r0, #1
 8005122:	d102      	bne.n	800512a <_read_r+0x1e>
 8005124:	682b      	ldr	r3, [r5, #0]
 8005126:	b103      	cbz	r3, 800512a <_read_r+0x1e>
 8005128:	6023      	str	r3, [r4, #0]
 800512a:	bd38      	pop	{r3, r4, r5, pc}
 800512c:	200003a0 	.word	0x200003a0

08005130 <_write_r>:
 8005130:	b538      	push	{r3, r4, r5, lr}
 8005132:	4d07      	ldr	r5, [pc, #28]	; (8005150 <_write_r+0x20>)
 8005134:	4604      	mov	r4, r0
 8005136:	4608      	mov	r0, r1
 8005138:	4611      	mov	r1, r2
 800513a:	2200      	movs	r2, #0
 800513c:	602a      	str	r2, [r5, #0]
 800513e:	461a      	mov	r2, r3
 8005140:	f7fc fd4e 	bl	8001be0 <_write>
 8005144:	1c43      	adds	r3, r0, #1
 8005146:	d102      	bne.n	800514e <_write_r+0x1e>
 8005148:	682b      	ldr	r3, [r5, #0]
 800514a:	b103      	cbz	r3, 800514e <_write_r+0x1e>
 800514c:	6023      	str	r3, [r4, #0]
 800514e:	bd38      	pop	{r3, r4, r5, pc}
 8005150:	200003a0 	.word	0x200003a0

08005154 <__errno>:
 8005154:	4b01      	ldr	r3, [pc, #4]	; (800515c <__errno+0x8>)
 8005156:	6818      	ldr	r0, [r3, #0]
 8005158:	4770      	bx	lr
 800515a:	bf00      	nop
 800515c:	20000064 	.word	0x20000064

08005160 <__libc_init_array>:
 8005160:	b570      	push	{r4, r5, r6, lr}
 8005162:	4d0d      	ldr	r5, [pc, #52]	; (8005198 <__libc_init_array+0x38>)
 8005164:	4c0d      	ldr	r4, [pc, #52]	; (800519c <__libc_init_array+0x3c>)
 8005166:	1b64      	subs	r4, r4, r5
 8005168:	10a4      	asrs	r4, r4, #2
 800516a:	2600      	movs	r6, #0
 800516c:	42a6      	cmp	r6, r4
 800516e:	d109      	bne.n	8005184 <__libc_init_array+0x24>
 8005170:	4d0b      	ldr	r5, [pc, #44]	; (80051a0 <__libc_init_array+0x40>)
 8005172:	4c0c      	ldr	r4, [pc, #48]	; (80051a4 <__libc_init_array+0x44>)
 8005174:	f002 f9a0 	bl	80074b8 <_init>
 8005178:	1b64      	subs	r4, r4, r5
 800517a:	10a4      	asrs	r4, r4, #2
 800517c:	2600      	movs	r6, #0
 800517e:	42a6      	cmp	r6, r4
 8005180:	d105      	bne.n	800518e <__libc_init_array+0x2e>
 8005182:	bd70      	pop	{r4, r5, r6, pc}
 8005184:	f855 3b04 	ldr.w	r3, [r5], #4
 8005188:	4798      	blx	r3
 800518a:	3601      	adds	r6, #1
 800518c:	e7ee      	b.n	800516c <__libc_init_array+0xc>
 800518e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005192:	4798      	blx	r3
 8005194:	3601      	adds	r6, #1
 8005196:	e7f2      	b.n	800517e <__libc_init_array+0x1e>
 8005198:	080078c0 	.word	0x080078c0
 800519c:	080078c0 	.word	0x080078c0
 80051a0:	080078c0 	.word	0x080078c0
 80051a4:	080078c4 	.word	0x080078c4

080051a8 <__retarget_lock_acquire_recursive>:
 80051a8:	4770      	bx	lr

080051aa <__retarget_lock_release_recursive>:
 80051aa:	4770      	bx	lr

080051ac <quorem>:
 80051ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051b0:	6903      	ldr	r3, [r0, #16]
 80051b2:	690c      	ldr	r4, [r1, #16]
 80051b4:	42a3      	cmp	r3, r4
 80051b6:	4607      	mov	r7, r0
 80051b8:	db7e      	blt.n	80052b8 <quorem+0x10c>
 80051ba:	3c01      	subs	r4, #1
 80051bc:	f101 0814 	add.w	r8, r1, #20
 80051c0:	f100 0514 	add.w	r5, r0, #20
 80051c4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80051c8:	9301      	str	r3, [sp, #4]
 80051ca:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80051ce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80051d2:	3301      	adds	r3, #1
 80051d4:	429a      	cmp	r2, r3
 80051d6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80051da:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80051de:	fbb2 f6f3 	udiv	r6, r2, r3
 80051e2:	d331      	bcc.n	8005248 <quorem+0x9c>
 80051e4:	f04f 0e00 	mov.w	lr, #0
 80051e8:	4640      	mov	r0, r8
 80051ea:	46ac      	mov	ip, r5
 80051ec:	46f2      	mov	sl, lr
 80051ee:	f850 2b04 	ldr.w	r2, [r0], #4
 80051f2:	b293      	uxth	r3, r2
 80051f4:	fb06 e303 	mla	r3, r6, r3, lr
 80051f8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80051fc:	0c1a      	lsrs	r2, r3, #16
 80051fe:	b29b      	uxth	r3, r3
 8005200:	ebaa 0303 	sub.w	r3, sl, r3
 8005204:	f8dc a000 	ldr.w	sl, [ip]
 8005208:	fa13 f38a 	uxtah	r3, r3, sl
 800520c:	fb06 220e 	mla	r2, r6, lr, r2
 8005210:	9300      	str	r3, [sp, #0]
 8005212:	9b00      	ldr	r3, [sp, #0]
 8005214:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005218:	b292      	uxth	r2, r2
 800521a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800521e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005222:	f8bd 3000 	ldrh.w	r3, [sp]
 8005226:	4581      	cmp	r9, r0
 8005228:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800522c:	f84c 3b04 	str.w	r3, [ip], #4
 8005230:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005234:	d2db      	bcs.n	80051ee <quorem+0x42>
 8005236:	f855 300b 	ldr.w	r3, [r5, fp]
 800523a:	b92b      	cbnz	r3, 8005248 <quorem+0x9c>
 800523c:	9b01      	ldr	r3, [sp, #4]
 800523e:	3b04      	subs	r3, #4
 8005240:	429d      	cmp	r5, r3
 8005242:	461a      	mov	r2, r3
 8005244:	d32c      	bcc.n	80052a0 <quorem+0xf4>
 8005246:	613c      	str	r4, [r7, #16]
 8005248:	4638      	mov	r0, r7
 800524a:	f001 f9a7 	bl	800659c <__mcmp>
 800524e:	2800      	cmp	r0, #0
 8005250:	db22      	blt.n	8005298 <quorem+0xec>
 8005252:	3601      	adds	r6, #1
 8005254:	4629      	mov	r1, r5
 8005256:	2000      	movs	r0, #0
 8005258:	f858 2b04 	ldr.w	r2, [r8], #4
 800525c:	f8d1 c000 	ldr.w	ip, [r1]
 8005260:	b293      	uxth	r3, r2
 8005262:	1ac3      	subs	r3, r0, r3
 8005264:	0c12      	lsrs	r2, r2, #16
 8005266:	fa13 f38c 	uxtah	r3, r3, ip
 800526a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800526e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005272:	b29b      	uxth	r3, r3
 8005274:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005278:	45c1      	cmp	r9, r8
 800527a:	f841 3b04 	str.w	r3, [r1], #4
 800527e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005282:	d2e9      	bcs.n	8005258 <quorem+0xac>
 8005284:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005288:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800528c:	b922      	cbnz	r2, 8005298 <quorem+0xec>
 800528e:	3b04      	subs	r3, #4
 8005290:	429d      	cmp	r5, r3
 8005292:	461a      	mov	r2, r3
 8005294:	d30a      	bcc.n	80052ac <quorem+0x100>
 8005296:	613c      	str	r4, [r7, #16]
 8005298:	4630      	mov	r0, r6
 800529a:	b003      	add	sp, #12
 800529c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052a0:	6812      	ldr	r2, [r2, #0]
 80052a2:	3b04      	subs	r3, #4
 80052a4:	2a00      	cmp	r2, #0
 80052a6:	d1ce      	bne.n	8005246 <quorem+0x9a>
 80052a8:	3c01      	subs	r4, #1
 80052aa:	e7c9      	b.n	8005240 <quorem+0x94>
 80052ac:	6812      	ldr	r2, [r2, #0]
 80052ae:	3b04      	subs	r3, #4
 80052b0:	2a00      	cmp	r2, #0
 80052b2:	d1f0      	bne.n	8005296 <quorem+0xea>
 80052b4:	3c01      	subs	r4, #1
 80052b6:	e7eb      	b.n	8005290 <quorem+0xe4>
 80052b8:	2000      	movs	r0, #0
 80052ba:	e7ee      	b.n	800529a <quorem+0xee>
 80052bc:	0000      	movs	r0, r0
	...

080052c0 <_dtoa_r>:
 80052c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052c4:	ed2d 8b04 	vpush	{d8-d9}
 80052c8:	69c5      	ldr	r5, [r0, #28]
 80052ca:	b093      	sub	sp, #76	; 0x4c
 80052cc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80052d0:	ec57 6b10 	vmov	r6, r7, d0
 80052d4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80052d8:	9107      	str	r1, [sp, #28]
 80052da:	4604      	mov	r4, r0
 80052dc:	920a      	str	r2, [sp, #40]	; 0x28
 80052de:	930d      	str	r3, [sp, #52]	; 0x34
 80052e0:	b975      	cbnz	r5, 8005300 <_dtoa_r+0x40>
 80052e2:	2010      	movs	r0, #16
 80052e4:	f000 fe2a 	bl	8005f3c <malloc>
 80052e8:	4602      	mov	r2, r0
 80052ea:	61e0      	str	r0, [r4, #28]
 80052ec:	b920      	cbnz	r0, 80052f8 <_dtoa_r+0x38>
 80052ee:	4bae      	ldr	r3, [pc, #696]	; (80055a8 <_dtoa_r+0x2e8>)
 80052f0:	21ef      	movs	r1, #239	; 0xef
 80052f2:	48ae      	ldr	r0, [pc, #696]	; (80055ac <_dtoa_r+0x2ec>)
 80052f4:	f001 fcf8 	bl	8006ce8 <__assert_func>
 80052f8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80052fc:	6005      	str	r5, [r0, #0]
 80052fe:	60c5      	str	r5, [r0, #12]
 8005300:	69e3      	ldr	r3, [r4, #28]
 8005302:	6819      	ldr	r1, [r3, #0]
 8005304:	b151      	cbz	r1, 800531c <_dtoa_r+0x5c>
 8005306:	685a      	ldr	r2, [r3, #4]
 8005308:	604a      	str	r2, [r1, #4]
 800530a:	2301      	movs	r3, #1
 800530c:	4093      	lsls	r3, r2
 800530e:	608b      	str	r3, [r1, #8]
 8005310:	4620      	mov	r0, r4
 8005312:	f000 ff07 	bl	8006124 <_Bfree>
 8005316:	69e3      	ldr	r3, [r4, #28]
 8005318:	2200      	movs	r2, #0
 800531a:	601a      	str	r2, [r3, #0]
 800531c:	1e3b      	subs	r3, r7, #0
 800531e:	bfbb      	ittet	lt
 8005320:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005324:	9303      	strlt	r3, [sp, #12]
 8005326:	2300      	movge	r3, #0
 8005328:	2201      	movlt	r2, #1
 800532a:	bfac      	ite	ge
 800532c:	f8c8 3000 	strge.w	r3, [r8]
 8005330:	f8c8 2000 	strlt.w	r2, [r8]
 8005334:	4b9e      	ldr	r3, [pc, #632]	; (80055b0 <_dtoa_r+0x2f0>)
 8005336:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800533a:	ea33 0308 	bics.w	r3, r3, r8
 800533e:	d11b      	bne.n	8005378 <_dtoa_r+0xb8>
 8005340:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005342:	f242 730f 	movw	r3, #9999	; 0x270f
 8005346:	6013      	str	r3, [r2, #0]
 8005348:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800534c:	4333      	orrs	r3, r6
 800534e:	f000 8593 	beq.w	8005e78 <_dtoa_r+0xbb8>
 8005352:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005354:	b963      	cbnz	r3, 8005370 <_dtoa_r+0xb0>
 8005356:	4b97      	ldr	r3, [pc, #604]	; (80055b4 <_dtoa_r+0x2f4>)
 8005358:	e027      	b.n	80053aa <_dtoa_r+0xea>
 800535a:	4b97      	ldr	r3, [pc, #604]	; (80055b8 <_dtoa_r+0x2f8>)
 800535c:	9300      	str	r3, [sp, #0]
 800535e:	3308      	adds	r3, #8
 8005360:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005362:	6013      	str	r3, [r2, #0]
 8005364:	9800      	ldr	r0, [sp, #0]
 8005366:	b013      	add	sp, #76	; 0x4c
 8005368:	ecbd 8b04 	vpop	{d8-d9}
 800536c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005370:	4b90      	ldr	r3, [pc, #576]	; (80055b4 <_dtoa_r+0x2f4>)
 8005372:	9300      	str	r3, [sp, #0]
 8005374:	3303      	adds	r3, #3
 8005376:	e7f3      	b.n	8005360 <_dtoa_r+0xa0>
 8005378:	ed9d 7b02 	vldr	d7, [sp, #8]
 800537c:	2200      	movs	r2, #0
 800537e:	ec51 0b17 	vmov	r0, r1, d7
 8005382:	eeb0 8a47 	vmov.f32	s16, s14
 8005386:	eef0 8a67 	vmov.f32	s17, s15
 800538a:	2300      	movs	r3, #0
 800538c:	f7fb fba4 	bl	8000ad8 <__aeabi_dcmpeq>
 8005390:	4681      	mov	r9, r0
 8005392:	b160      	cbz	r0, 80053ae <_dtoa_r+0xee>
 8005394:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005396:	2301      	movs	r3, #1
 8005398:	6013      	str	r3, [r2, #0]
 800539a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800539c:	2b00      	cmp	r3, #0
 800539e:	f000 8568 	beq.w	8005e72 <_dtoa_r+0xbb2>
 80053a2:	4b86      	ldr	r3, [pc, #536]	; (80055bc <_dtoa_r+0x2fc>)
 80053a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80053a6:	6013      	str	r3, [r2, #0]
 80053a8:	3b01      	subs	r3, #1
 80053aa:	9300      	str	r3, [sp, #0]
 80053ac:	e7da      	b.n	8005364 <_dtoa_r+0xa4>
 80053ae:	aa10      	add	r2, sp, #64	; 0x40
 80053b0:	a911      	add	r1, sp, #68	; 0x44
 80053b2:	4620      	mov	r0, r4
 80053b4:	eeb0 0a48 	vmov.f32	s0, s16
 80053b8:	eef0 0a68 	vmov.f32	s1, s17
 80053bc:	f001 f994 	bl	80066e8 <__d2b>
 80053c0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80053c4:	4682      	mov	sl, r0
 80053c6:	2d00      	cmp	r5, #0
 80053c8:	d07f      	beq.n	80054ca <_dtoa_r+0x20a>
 80053ca:	ee18 3a90 	vmov	r3, s17
 80053ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80053d2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80053d6:	ec51 0b18 	vmov	r0, r1, d8
 80053da:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80053de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80053e2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80053e6:	4619      	mov	r1, r3
 80053e8:	2200      	movs	r2, #0
 80053ea:	4b75      	ldr	r3, [pc, #468]	; (80055c0 <_dtoa_r+0x300>)
 80053ec:	f7fa ff54 	bl	8000298 <__aeabi_dsub>
 80053f0:	a367      	add	r3, pc, #412	; (adr r3, 8005590 <_dtoa_r+0x2d0>)
 80053f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f6:	f7fb f907 	bl	8000608 <__aeabi_dmul>
 80053fa:	a367      	add	r3, pc, #412	; (adr r3, 8005598 <_dtoa_r+0x2d8>)
 80053fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005400:	f7fa ff4c 	bl	800029c <__adddf3>
 8005404:	4606      	mov	r6, r0
 8005406:	4628      	mov	r0, r5
 8005408:	460f      	mov	r7, r1
 800540a:	f7fb f893 	bl	8000534 <__aeabi_i2d>
 800540e:	a364      	add	r3, pc, #400	; (adr r3, 80055a0 <_dtoa_r+0x2e0>)
 8005410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005414:	f7fb f8f8 	bl	8000608 <__aeabi_dmul>
 8005418:	4602      	mov	r2, r0
 800541a:	460b      	mov	r3, r1
 800541c:	4630      	mov	r0, r6
 800541e:	4639      	mov	r1, r7
 8005420:	f7fa ff3c 	bl	800029c <__adddf3>
 8005424:	4606      	mov	r6, r0
 8005426:	460f      	mov	r7, r1
 8005428:	f7fb fb9e 	bl	8000b68 <__aeabi_d2iz>
 800542c:	2200      	movs	r2, #0
 800542e:	4683      	mov	fp, r0
 8005430:	2300      	movs	r3, #0
 8005432:	4630      	mov	r0, r6
 8005434:	4639      	mov	r1, r7
 8005436:	f7fb fb59 	bl	8000aec <__aeabi_dcmplt>
 800543a:	b148      	cbz	r0, 8005450 <_dtoa_r+0x190>
 800543c:	4658      	mov	r0, fp
 800543e:	f7fb f879 	bl	8000534 <__aeabi_i2d>
 8005442:	4632      	mov	r2, r6
 8005444:	463b      	mov	r3, r7
 8005446:	f7fb fb47 	bl	8000ad8 <__aeabi_dcmpeq>
 800544a:	b908      	cbnz	r0, 8005450 <_dtoa_r+0x190>
 800544c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005450:	f1bb 0f16 	cmp.w	fp, #22
 8005454:	d857      	bhi.n	8005506 <_dtoa_r+0x246>
 8005456:	4b5b      	ldr	r3, [pc, #364]	; (80055c4 <_dtoa_r+0x304>)
 8005458:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800545c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005460:	ec51 0b18 	vmov	r0, r1, d8
 8005464:	f7fb fb42 	bl	8000aec <__aeabi_dcmplt>
 8005468:	2800      	cmp	r0, #0
 800546a:	d04e      	beq.n	800550a <_dtoa_r+0x24a>
 800546c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005470:	2300      	movs	r3, #0
 8005472:	930c      	str	r3, [sp, #48]	; 0x30
 8005474:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005476:	1b5b      	subs	r3, r3, r5
 8005478:	1e5a      	subs	r2, r3, #1
 800547a:	bf45      	ittet	mi
 800547c:	f1c3 0301 	rsbmi	r3, r3, #1
 8005480:	9305      	strmi	r3, [sp, #20]
 8005482:	2300      	movpl	r3, #0
 8005484:	2300      	movmi	r3, #0
 8005486:	9206      	str	r2, [sp, #24]
 8005488:	bf54      	ite	pl
 800548a:	9305      	strpl	r3, [sp, #20]
 800548c:	9306      	strmi	r3, [sp, #24]
 800548e:	f1bb 0f00 	cmp.w	fp, #0
 8005492:	db3c      	blt.n	800550e <_dtoa_r+0x24e>
 8005494:	9b06      	ldr	r3, [sp, #24]
 8005496:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800549a:	445b      	add	r3, fp
 800549c:	9306      	str	r3, [sp, #24]
 800549e:	2300      	movs	r3, #0
 80054a0:	9308      	str	r3, [sp, #32]
 80054a2:	9b07      	ldr	r3, [sp, #28]
 80054a4:	2b09      	cmp	r3, #9
 80054a6:	d868      	bhi.n	800557a <_dtoa_r+0x2ba>
 80054a8:	2b05      	cmp	r3, #5
 80054aa:	bfc4      	itt	gt
 80054ac:	3b04      	subgt	r3, #4
 80054ae:	9307      	strgt	r3, [sp, #28]
 80054b0:	9b07      	ldr	r3, [sp, #28]
 80054b2:	f1a3 0302 	sub.w	r3, r3, #2
 80054b6:	bfcc      	ite	gt
 80054b8:	2500      	movgt	r5, #0
 80054ba:	2501      	movle	r5, #1
 80054bc:	2b03      	cmp	r3, #3
 80054be:	f200 8085 	bhi.w	80055cc <_dtoa_r+0x30c>
 80054c2:	e8df f003 	tbb	[pc, r3]
 80054c6:	3b2e      	.short	0x3b2e
 80054c8:	5839      	.short	0x5839
 80054ca:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80054ce:	441d      	add	r5, r3
 80054d0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80054d4:	2b20      	cmp	r3, #32
 80054d6:	bfc1      	itttt	gt
 80054d8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80054dc:	fa08 f803 	lslgt.w	r8, r8, r3
 80054e0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80054e4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80054e8:	bfd6      	itet	le
 80054ea:	f1c3 0320 	rsble	r3, r3, #32
 80054ee:	ea48 0003 	orrgt.w	r0, r8, r3
 80054f2:	fa06 f003 	lslle.w	r0, r6, r3
 80054f6:	f7fb f80d 	bl	8000514 <__aeabi_ui2d>
 80054fa:	2201      	movs	r2, #1
 80054fc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005500:	3d01      	subs	r5, #1
 8005502:	920e      	str	r2, [sp, #56]	; 0x38
 8005504:	e76f      	b.n	80053e6 <_dtoa_r+0x126>
 8005506:	2301      	movs	r3, #1
 8005508:	e7b3      	b.n	8005472 <_dtoa_r+0x1b2>
 800550a:	900c      	str	r0, [sp, #48]	; 0x30
 800550c:	e7b2      	b.n	8005474 <_dtoa_r+0x1b4>
 800550e:	9b05      	ldr	r3, [sp, #20]
 8005510:	eba3 030b 	sub.w	r3, r3, fp
 8005514:	9305      	str	r3, [sp, #20]
 8005516:	f1cb 0300 	rsb	r3, fp, #0
 800551a:	9308      	str	r3, [sp, #32]
 800551c:	2300      	movs	r3, #0
 800551e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005520:	e7bf      	b.n	80054a2 <_dtoa_r+0x1e2>
 8005522:	2300      	movs	r3, #0
 8005524:	9309      	str	r3, [sp, #36]	; 0x24
 8005526:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005528:	2b00      	cmp	r3, #0
 800552a:	dc52      	bgt.n	80055d2 <_dtoa_r+0x312>
 800552c:	2301      	movs	r3, #1
 800552e:	9301      	str	r3, [sp, #4]
 8005530:	9304      	str	r3, [sp, #16]
 8005532:	461a      	mov	r2, r3
 8005534:	920a      	str	r2, [sp, #40]	; 0x28
 8005536:	e00b      	b.n	8005550 <_dtoa_r+0x290>
 8005538:	2301      	movs	r3, #1
 800553a:	e7f3      	b.n	8005524 <_dtoa_r+0x264>
 800553c:	2300      	movs	r3, #0
 800553e:	9309      	str	r3, [sp, #36]	; 0x24
 8005540:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005542:	445b      	add	r3, fp
 8005544:	9301      	str	r3, [sp, #4]
 8005546:	3301      	adds	r3, #1
 8005548:	2b01      	cmp	r3, #1
 800554a:	9304      	str	r3, [sp, #16]
 800554c:	bfb8      	it	lt
 800554e:	2301      	movlt	r3, #1
 8005550:	69e0      	ldr	r0, [r4, #28]
 8005552:	2100      	movs	r1, #0
 8005554:	2204      	movs	r2, #4
 8005556:	f102 0614 	add.w	r6, r2, #20
 800555a:	429e      	cmp	r6, r3
 800555c:	d93d      	bls.n	80055da <_dtoa_r+0x31a>
 800555e:	6041      	str	r1, [r0, #4]
 8005560:	4620      	mov	r0, r4
 8005562:	f000 fd9f 	bl	80060a4 <_Balloc>
 8005566:	9000      	str	r0, [sp, #0]
 8005568:	2800      	cmp	r0, #0
 800556a:	d139      	bne.n	80055e0 <_dtoa_r+0x320>
 800556c:	4b16      	ldr	r3, [pc, #88]	; (80055c8 <_dtoa_r+0x308>)
 800556e:	4602      	mov	r2, r0
 8005570:	f240 11af 	movw	r1, #431	; 0x1af
 8005574:	e6bd      	b.n	80052f2 <_dtoa_r+0x32>
 8005576:	2301      	movs	r3, #1
 8005578:	e7e1      	b.n	800553e <_dtoa_r+0x27e>
 800557a:	2501      	movs	r5, #1
 800557c:	2300      	movs	r3, #0
 800557e:	9307      	str	r3, [sp, #28]
 8005580:	9509      	str	r5, [sp, #36]	; 0x24
 8005582:	f04f 33ff 	mov.w	r3, #4294967295
 8005586:	9301      	str	r3, [sp, #4]
 8005588:	9304      	str	r3, [sp, #16]
 800558a:	2200      	movs	r2, #0
 800558c:	2312      	movs	r3, #18
 800558e:	e7d1      	b.n	8005534 <_dtoa_r+0x274>
 8005590:	636f4361 	.word	0x636f4361
 8005594:	3fd287a7 	.word	0x3fd287a7
 8005598:	8b60c8b3 	.word	0x8b60c8b3
 800559c:	3fc68a28 	.word	0x3fc68a28
 80055a0:	509f79fb 	.word	0x509f79fb
 80055a4:	3fd34413 	.word	0x3fd34413
 80055a8:	08007544 	.word	0x08007544
 80055ac:	0800755b 	.word	0x0800755b
 80055b0:	7ff00000 	.word	0x7ff00000
 80055b4:	08007540 	.word	0x08007540
 80055b8:	08007537 	.word	0x08007537
 80055bc:	08007514 	.word	0x08007514
 80055c0:	3ff80000 	.word	0x3ff80000
 80055c4:	08007648 	.word	0x08007648
 80055c8:	080075b3 	.word	0x080075b3
 80055cc:	2301      	movs	r3, #1
 80055ce:	9309      	str	r3, [sp, #36]	; 0x24
 80055d0:	e7d7      	b.n	8005582 <_dtoa_r+0x2c2>
 80055d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055d4:	9301      	str	r3, [sp, #4]
 80055d6:	9304      	str	r3, [sp, #16]
 80055d8:	e7ba      	b.n	8005550 <_dtoa_r+0x290>
 80055da:	3101      	adds	r1, #1
 80055dc:	0052      	lsls	r2, r2, #1
 80055de:	e7ba      	b.n	8005556 <_dtoa_r+0x296>
 80055e0:	69e3      	ldr	r3, [r4, #28]
 80055e2:	9a00      	ldr	r2, [sp, #0]
 80055e4:	601a      	str	r2, [r3, #0]
 80055e6:	9b04      	ldr	r3, [sp, #16]
 80055e8:	2b0e      	cmp	r3, #14
 80055ea:	f200 80a8 	bhi.w	800573e <_dtoa_r+0x47e>
 80055ee:	2d00      	cmp	r5, #0
 80055f0:	f000 80a5 	beq.w	800573e <_dtoa_r+0x47e>
 80055f4:	f1bb 0f00 	cmp.w	fp, #0
 80055f8:	dd38      	ble.n	800566c <_dtoa_r+0x3ac>
 80055fa:	4bc0      	ldr	r3, [pc, #768]	; (80058fc <_dtoa_r+0x63c>)
 80055fc:	f00b 020f 	and.w	r2, fp, #15
 8005600:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005604:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005608:	e9d3 6700 	ldrd	r6, r7, [r3]
 800560c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8005610:	d019      	beq.n	8005646 <_dtoa_r+0x386>
 8005612:	4bbb      	ldr	r3, [pc, #748]	; (8005900 <_dtoa_r+0x640>)
 8005614:	ec51 0b18 	vmov	r0, r1, d8
 8005618:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800561c:	f7fb f91e 	bl	800085c <__aeabi_ddiv>
 8005620:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005624:	f008 080f 	and.w	r8, r8, #15
 8005628:	2503      	movs	r5, #3
 800562a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8005900 <_dtoa_r+0x640>
 800562e:	f1b8 0f00 	cmp.w	r8, #0
 8005632:	d10a      	bne.n	800564a <_dtoa_r+0x38a>
 8005634:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005638:	4632      	mov	r2, r6
 800563a:	463b      	mov	r3, r7
 800563c:	f7fb f90e 	bl	800085c <__aeabi_ddiv>
 8005640:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005644:	e02b      	b.n	800569e <_dtoa_r+0x3de>
 8005646:	2502      	movs	r5, #2
 8005648:	e7ef      	b.n	800562a <_dtoa_r+0x36a>
 800564a:	f018 0f01 	tst.w	r8, #1
 800564e:	d008      	beq.n	8005662 <_dtoa_r+0x3a2>
 8005650:	4630      	mov	r0, r6
 8005652:	4639      	mov	r1, r7
 8005654:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005658:	f7fa ffd6 	bl	8000608 <__aeabi_dmul>
 800565c:	3501      	adds	r5, #1
 800565e:	4606      	mov	r6, r0
 8005660:	460f      	mov	r7, r1
 8005662:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005666:	f109 0908 	add.w	r9, r9, #8
 800566a:	e7e0      	b.n	800562e <_dtoa_r+0x36e>
 800566c:	f000 809f 	beq.w	80057ae <_dtoa_r+0x4ee>
 8005670:	f1cb 0600 	rsb	r6, fp, #0
 8005674:	4ba1      	ldr	r3, [pc, #644]	; (80058fc <_dtoa_r+0x63c>)
 8005676:	4fa2      	ldr	r7, [pc, #648]	; (8005900 <_dtoa_r+0x640>)
 8005678:	f006 020f 	and.w	r2, r6, #15
 800567c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005684:	ec51 0b18 	vmov	r0, r1, d8
 8005688:	f7fa ffbe 	bl	8000608 <__aeabi_dmul>
 800568c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005690:	1136      	asrs	r6, r6, #4
 8005692:	2300      	movs	r3, #0
 8005694:	2502      	movs	r5, #2
 8005696:	2e00      	cmp	r6, #0
 8005698:	d17e      	bne.n	8005798 <_dtoa_r+0x4d8>
 800569a:	2b00      	cmp	r3, #0
 800569c:	d1d0      	bne.n	8005640 <_dtoa_r+0x380>
 800569e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80056a0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	f000 8084 	beq.w	80057b2 <_dtoa_r+0x4f2>
 80056aa:	4b96      	ldr	r3, [pc, #600]	; (8005904 <_dtoa_r+0x644>)
 80056ac:	2200      	movs	r2, #0
 80056ae:	4640      	mov	r0, r8
 80056b0:	4649      	mov	r1, r9
 80056b2:	f7fb fa1b 	bl	8000aec <__aeabi_dcmplt>
 80056b6:	2800      	cmp	r0, #0
 80056b8:	d07b      	beq.n	80057b2 <_dtoa_r+0x4f2>
 80056ba:	9b04      	ldr	r3, [sp, #16]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d078      	beq.n	80057b2 <_dtoa_r+0x4f2>
 80056c0:	9b01      	ldr	r3, [sp, #4]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	dd39      	ble.n	800573a <_dtoa_r+0x47a>
 80056c6:	4b90      	ldr	r3, [pc, #576]	; (8005908 <_dtoa_r+0x648>)
 80056c8:	2200      	movs	r2, #0
 80056ca:	4640      	mov	r0, r8
 80056cc:	4649      	mov	r1, r9
 80056ce:	f7fa ff9b 	bl	8000608 <__aeabi_dmul>
 80056d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80056d6:	9e01      	ldr	r6, [sp, #4]
 80056d8:	f10b 37ff 	add.w	r7, fp, #4294967295
 80056dc:	3501      	adds	r5, #1
 80056de:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80056e2:	4628      	mov	r0, r5
 80056e4:	f7fa ff26 	bl	8000534 <__aeabi_i2d>
 80056e8:	4642      	mov	r2, r8
 80056ea:	464b      	mov	r3, r9
 80056ec:	f7fa ff8c 	bl	8000608 <__aeabi_dmul>
 80056f0:	4b86      	ldr	r3, [pc, #536]	; (800590c <_dtoa_r+0x64c>)
 80056f2:	2200      	movs	r2, #0
 80056f4:	f7fa fdd2 	bl	800029c <__adddf3>
 80056f8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80056fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005700:	9303      	str	r3, [sp, #12]
 8005702:	2e00      	cmp	r6, #0
 8005704:	d158      	bne.n	80057b8 <_dtoa_r+0x4f8>
 8005706:	4b82      	ldr	r3, [pc, #520]	; (8005910 <_dtoa_r+0x650>)
 8005708:	2200      	movs	r2, #0
 800570a:	4640      	mov	r0, r8
 800570c:	4649      	mov	r1, r9
 800570e:	f7fa fdc3 	bl	8000298 <__aeabi_dsub>
 8005712:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005716:	4680      	mov	r8, r0
 8005718:	4689      	mov	r9, r1
 800571a:	f7fb fa05 	bl	8000b28 <__aeabi_dcmpgt>
 800571e:	2800      	cmp	r0, #0
 8005720:	f040 8296 	bne.w	8005c50 <_dtoa_r+0x990>
 8005724:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005728:	4640      	mov	r0, r8
 800572a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800572e:	4649      	mov	r1, r9
 8005730:	f7fb f9dc 	bl	8000aec <__aeabi_dcmplt>
 8005734:	2800      	cmp	r0, #0
 8005736:	f040 8289 	bne.w	8005c4c <_dtoa_r+0x98c>
 800573a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800573e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005740:	2b00      	cmp	r3, #0
 8005742:	f2c0 814e 	blt.w	80059e2 <_dtoa_r+0x722>
 8005746:	f1bb 0f0e 	cmp.w	fp, #14
 800574a:	f300 814a 	bgt.w	80059e2 <_dtoa_r+0x722>
 800574e:	4b6b      	ldr	r3, [pc, #428]	; (80058fc <_dtoa_r+0x63c>)
 8005750:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005754:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005758:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800575a:	2b00      	cmp	r3, #0
 800575c:	f280 80dc 	bge.w	8005918 <_dtoa_r+0x658>
 8005760:	9b04      	ldr	r3, [sp, #16]
 8005762:	2b00      	cmp	r3, #0
 8005764:	f300 80d8 	bgt.w	8005918 <_dtoa_r+0x658>
 8005768:	f040 826f 	bne.w	8005c4a <_dtoa_r+0x98a>
 800576c:	4b68      	ldr	r3, [pc, #416]	; (8005910 <_dtoa_r+0x650>)
 800576e:	2200      	movs	r2, #0
 8005770:	4640      	mov	r0, r8
 8005772:	4649      	mov	r1, r9
 8005774:	f7fa ff48 	bl	8000608 <__aeabi_dmul>
 8005778:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800577c:	f7fb f9ca 	bl	8000b14 <__aeabi_dcmpge>
 8005780:	9e04      	ldr	r6, [sp, #16]
 8005782:	4637      	mov	r7, r6
 8005784:	2800      	cmp	r0, #0
 8005786:	f040 8245 	bne.w	8005c14 <_dtoa_r+0x954>
 800578a:	9d00      	ldr	r5, [sp, #0]
 800578c:	2331      	movs	r3, #49	; 0x31
 800578e:	f805 3b01 	strb.w	r3, [r5], #1
 8005792:	f10b 0b01 	add.w	fp, fp, #1
 8005796:	e241      	b.n	8005c1c <_dtoa_r+0x95c>
 8005798:	07f2      	lsls	r2, r6, #31
 800579a:	d505      	bpl.n	80057a8 <_dtoa_r+0x4e8>
 800579c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057a0:	f7fa ff32 	bl	8000608 <__aeabi_dmul>
 80057a4:	3501      	adds	r5, #1
 80057a6:	2301      	movs	r3, #1
 80057a8:	1076      	asrs	r6, r6, #1
 80057aa:	3708      	adds	r7, #8
 80057ac:	e773      	b.n	8005696 <_dtoa_r+0x3d6>
 80057ae:	2502      	movs	r5, #2
 80057b0:	e775      	b.n	800569e <_dtoa_r+0x3de>
 80057b2:	9e04      	ldr	r6, [sp, #16]
 80057b4:	465f      	mov	r7, fp
 80057b6:	e792      	b.n	80056de <_dtoa_r+0x41e>
 80057b8:	9900      	ldr	r1, [sp, #0]
 80057ba:	4b50      	ldr	r3, [pc, #320]	; (80058fc <_dtoa_r+0x63c>)
 80057bc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80057c0:	4431      	add	r1, r6
 80057c2:	9102      	str	r1, [sp, #8]
 80057c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80057c6:	eeb0 9a47 	vmov.f32	s18, s14
 80057ca:	eef0 9a67 	vmov.f32	s19, s15
 80057ce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80057d2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80057d6:	2900      	cmp	r1, #0
 80057d8:	d044      	beq.n	8005864 <_dtoa_r+0x5a4>
 80057da:	494e      	ldr	r1, [pc, #312]	; (8005914 <_dtoa_r+0x654>)
 80057dc:	2000      	movs	r0, #0
 80057de:	f7fb f83d 	bl	800085c <__aeabi_ddiv>
 80057e2:	ec53 2b19 	vmov	r2, r3, d9
 80057e6:	f7fa fd57 	bl	8000298 <__aeabi_dsub>
 80057ea:	9d00      	ldr	r5, [sp, #0]
 80057ec:	ec41 0b19 	vmov	d9, r0, r1
 80057f0:	4649      	mov	r1, r9
 80057f2:	4640      	mov	r0, r8
 80057f4:	f7fb f9b8 	bl	8000b68 <__aeabi_d2iz>
 80057f8:	4606      	mov	r6, r0
 80057fa:	f7fa fe9b 	bl	8000534 <__aeabi_i2d>
 80057fe:	4602      	mov	r2, r0
 8005800:	460b      	mov	r3, r1
 8005802:	4640      	mov	r0, r8
 8005804:	4649      	mov	r1, r9
 8005806:	f7fa fd47 	bl	8000298 <__aeabi_dsub>
 800580a:	3630      	adds	r6, #48	; 0x30
 800580c:	f805 6b01 	strb.w	r6, [r5], #1
 8005810:	ec53 2b19 	vmov	r2, r3, d9
 8005814:	4680      	mov	r8, r0
 8005816:	4689      	mov	r9, r1
 8005818:	f7fb f968 	bl	8000aec <__aeabi_dcmplt>
 800581c:	2800      	cmp	r0, #0
 800581e:	d164      	bne.n	80058ea <_dtoa_r+0x62a>
 8005820:	4642      	mov	r2, r8
 8005822:	464b      	mov	r3, r9
 8005824:	4937      	ldr	r1, [pc, #220]	; (8005904 <_dtoa_r+0x644>)
 8005826:	2000      	movs	r0, #0
 8005828:	f7fa fd36 	bl	8000298 <__aeabi_dsub>
 800582c:	ec53 2b19 	vmov	r2, r3, d9
 8005830:	f7fb f95c 	bl	8000aec <__aeabi_dcmplt>
 8005834:	2800      	cmp	r0, #0
 8005836:	f040 80b6 	bne.w	80059a6 <_dtoa_r+0x6e6>
 800583a:	9b02      	ldr	r3, [sp, #8]
 800583c:	429d      	cmp	r5, r3
 800583e:	f43f af7c 	beq.w	800573a <_dtoa_r+0x47a>
 8005842:	4b31      	ldr	r3, [pc, #196]	; (8005908 <_dtoa_r+0x648>)
 8005844:	ec51 0b19 	vmov	r0, r1, d9
 8005848:	2200      	movs	r2, #0
 800584a:	f7fa fedd 	bl	8000608 <__aeabi_dmul>
 800584e:	4b2e      	ldr	r3, [pc, #184]	; (8005908 <_dtoa_r+0x648>)
 8005850:	ec41 0b19 	vmov	d9, r0, r1
 8005854:	2200      	movs	r2, #0
 8005856:	4640      	mov	r0, r8
 8005858:	4649      	mov	r1, r9
 800585a:	f7fa fed5 	bl	8000608 <__aeabi_dmul>
 800585e:	4680      	mov	r8, r0
 8005860:	4689      	mov	r9, r1
 8005862:	e7c5      	b.n	80057f0 <_dtoa_r+0x530>
 8005864:	ec51 0b17 	vmov	r0, r1, d7
 8005868:	f7fa fece 	bl	8000608 <__aeabi_dmul>
 800586c:	9b02      	ldr	r3, [sp, #8]
 800586e:	9d00      	ldr	r5, [sp, #0]
 8005870:	930f      	str	r3, [sp, #60]	; 0x3c
 8005872:	ec41 0b19 	vmov	d9, r0, r1
 8005876:	4649      	mov	r1, r9
 8005878:	4640      	mov	r0, r8
 800587a:	f7fb f975 	bl	8000b68 <__aeabi_d2iz>
 800587e:	4606      	mov	r6, r0
 8005880:	f7fa fe58 	bl	8000534 <__aeabi_i2d>
 8005884:	3630      	adds	r6, #48	; 0x30
 8005886:	4602      	mov	r2, r0
 8005888:	460b      	mov	r3, r1
 800588a:	4640      	mov	r0, r8
 800588c:	4649      	mov	r1, r9
 800588e:	f7fa fd03 	bl	8000298 <__aeabi_dsub>
 8005892:	f805 6b01 	strb.w	r6, [r5], #1
 8005896:	9b02      	ldr	r3, [sp, #8]
 8005898:	429d      	cmp	r5, r3
 800589a:	4680      	mov	r8, r0
 800589c:	4689      	mov	r9, r1
 800589e:	f04f 0200 	mov.w	r2, #0
 80058a2:	d124      	bne.n	80058ee <_dtoa_r+0x62e>
 80058a4:	4b1b      	ldr	r3, [pc, #108]	; (8005914 <_dtoa_r+0x654>)
 80058a6:	ec51 0b19 	vmov	r0, r1, d9
 80058aa:	f7fa fcf7 	bl	800029c <__adddf3>
 80058ae:	4602      	mov	r2, r0
 80058b0:	460b      	mov	r3, r1
 80058b2:	4640      	mov	r0, r8
 80058b4:	4649      	mov	r1, r9
 80058b6:	f7fb f937 	bl	8000b28 <__aeabi_dcmpgt>
 80058ba:	2800      	cmp	r0, #0
 80058bc:	d173      	bne.n	80059a6 <_dtoa_r+0x6e6>
 80058be:	ec53 2b19 	vmov	r2, r3, d9
 80058c2:	4914      	ldr	r1, [pc, #80]	; (8005914 <_dtoa_r+0x654>)
 80058c4:	2000      	movs	r0, #0
 80058c6:	f7fa fce7 	bl	8000298 <__aeabi_dsub>
 80058ca:	4602      	mov	r2, r0
 80058cc:	460b      	mov	r3, r1
 80058ce:	4640      	mov	r0, r8
 80058d0:	4649      	mov	r1, r9
 80058d2:	f7fb f90b 	bl	8000aec <__aeabi_dcmplt>
 80058d6:	2800      	cmp	r0, #0
 80058d8:	f43f af2f 	beq.w	800573a <_dtoa_r+0x47a>
 80058dc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80058de:	1e6b      	subs	r3, r5, #1
 80058e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80058e2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80058e6:	2b30      	cmp	r3, #48	; 0x30
 80058e8:	d0f8      	beq.n	80058dc <_dtoa_r+0x61c>
 80058ea:	46bb      	mov	fp, r7
 80058ec:	e04a      	b.n	8005984 <_dtoa_r+0x6c4>
 80058ee:	4b06      	ldr	r3, [pc, #24]	; (8005908 <_dtoa_r+0x648>)
 80058f0:	f7fa fe8a 	bl	8000608 <__aeabi_dmul>
 80058f4:	4680      	mov	r8, r0
 80058f6:	4689      	mov	r9, r1
 80058f8:	e7bd      	b.n	8005876 <_dtoa_r+0x5b6>
 80058fa:	bf00      	nop
 80058fc:	08007648 	.word	0x08007648
 8005900:	08007620 	.word	0x08007620
 8005904:	3ff00000 	.word	0x3ff00000
 8005908:	40240000 	.word	0x40240000
 800590c:	401c0000 	.word	0x401c0000
 8005910:	40140000 	.word	0x40140000
 8005914:	3fe00000 	.word	0x3fe00000
 8005918:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800591c:	9d00      	ldr	r5, [sp, #0]
 800591e:	4642      	mov	r2, r8
 8005920:	464b      	mov	r3, r9
 8005922:	4630      	mov	r0, r6
 8005924:	4639      	mov	r1, r7
 8005926:	f7fa ff99 	bl	800085c <__aeabi_ddiv>
 800592a:	f7fb f91d 	bl	8000b68 <__aeabi_d2iz>
 800592e:	9001      	str	r0, [sp, #4]
 8005930:	f7fa fe00 	bl	8000534 <__aeabi_i2d>
 8005934:	4642      	mov	r2, r8
 8005936:	464b      	mov	r3, r9
 8005938:	f7fa fe66 	bl	8000608 <__aeabi_dmul>
 800593c:	4602      	mov	r2, r0
 800593e:	460b      	mov	r3, r1
 8005940:	4630      	mov	r0, r6
 8005942:	4639      	mov	r1, r7
 8005944:	f7fa fca8 	bl	8000298 <__aeabi_dsub>
 8005948:	9e01      	ldr	r6, [sp, #4]
 800594a:	9f04      	ldr	r7, [sp, #16]
 800594c:	3630      	adds	r6, #48	; 0x30
 800594e:	f805 6b01 	strb.w	r6, [r5], #1
 8005952:	9e00      	ldr	r6, [sp, #0]
 8005954:	1bae      	subs	r6, r5, r6
 8005956:	42b7      	cmp	r7, r6
 8005958:	4602      	mov	r2, r0
 800595a:	460b      	mov	r3, r1
 800595c:	d134      	bne.n	80059c8 <_dtoa_r+0x708>
 800595e:	f7fa fc9d 	bl	800029c <__adddf3>
 8005962:	4642      	mov	r2, r8
 8005964:	464b      	mov	r3, r9
 8005966:	4606      	mov	r6, r0
 8005968:	460f      	mov	r7, r1
 800596a:	f7fb f8dd 	bl	8000b28 <__aeabi_dcmpgt>
 800596e:	b9c8      	cbnz	r0, 80059a4 <_dtoa_r+0x6e4>
 8005970:	4642      	mov	r2, r8
 8005972:	464b      	mov	r3, r9
 8005974:	4630      	mov	r0, r6
 8005976:	4639      	mov	r1, r7
 8005978:	f7fb f8ae 	bl	8000ad8 <__aeabi_dcmpeq>
 800597c:	b110      	cbz	r0, 8005984 <_dtoa_r+0x6c4>
 800597e:	9b01      	ldr	r3, [sp, #4]
 8005980:	07db      	lsls	r3, r3, #31
 8005982:	d40f      	bmi.n	80059a4 <_dtoa_r+0x6e4>
 8005984:	4651      	mov	r1, sl
 8005986:	4620      	mov	r0, r4
 8005988:	f000 fbcc 	bl	8006124 <_Bfree>
 800598c:	2300      	movs	r3, #0
 800598e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005990:	702b      	strb	r3, [r5, #0]
 8005992:	f10b 0301 	add.w	r3, fp, #1
 8005996:	6013      	str	r3, [r2, #0]
 8005998:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800599a:	2b00      	cmp	r3, #0
 800599c:	f43f ace2 	beq.w	8005364 <_dtoa_r+0xa4>
 80059a0:	601d      	str	r5, [r3, #0]
 80059a2:	e4df      	b.n	8005364 <_dtoa_r+0xa4>
 80059a4:	465f      	mov	r7, fp
 80059a6:	462b      	mov	r3, r5
 80059a8:	461d      	mov	r5, r3
 80059aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80059ae:	2a39      	cmp	r2, #57	; 0x39
 80059b0:	d106      	bne.n	80059c0 <_dtoa_r+0x700>
 80059b2:	9a00      	ldr	r2, [sp, #0]
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d1f7      	bne.n	80059a8 <_dtoa_r+0x6e8>
 80059b8:	9900      	ldr	r1, [sp, #0]
 80059ba:	2230      	movs	r2, #48	; 0x30
 80059bc:	3701      	adds	r7, #1
 80059be:	700a      	strb	r2, [r1, #0]
 80059c0:	781a      	ldrb	r2, [r3, #0]
 80059c2:	3201      	adds	r2, #1
 80059c4:	701a      	strb	r2, [r3, #0]
 80059c6:	e790      	b.n	80058ea <_dtoa_r+0x62a>
 80059c8:	4ba3      	ldr	r3, [pc, #652]	; (8005c58 <_dtoa_r+0x998>)
 80059ca:	2200      	movs	r2, #0
 80059cc:	f7fa fe1c 	bl	8000608 <__aeabi_dmul>
 80059d0:	2200      	movs	r2, #0
 80059d2:	2300      	movs	r3, #0
 80059d4:	4606      	mov	r6, r0
 80059d6:	460f      	mov	r7, r1
 80059d8:	f7fb f87e 	bl	8000ad8 <__aeabi_dcmpeq>
 80059dc:	2800      	cmp	r0, #0
 80059de:	d09e      	beq.n	800591e <_dtoa_r+0x65e>
 80059e0:	e7d0      	b.n	8005984 <_dtoa_r+0x6c4>
 80059e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059e4:	2a00      	cmp	r2, #0
 80059e6:	f000 80ca 	beq.w	8005b7e <_dtoa_r+0x8be>
 80059ea:	9a07      	ldr	r2, [sp, #28]
 80059ec:	2a01      	cmp	r2, #1
 80059ee:	f300 80ad 	bgt.w	8005b4c <_dtoa_r+0x88c>
 80059f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80059f4:	2a00      	cmp	r2, #0
 80059f6:	f000 80a5 	beq.w	8005b44 <_dtoa_r+0x884>
 80059fa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80059fe:	9e08      	ldr	r6, [sp, #32]
 8005a00:	9d05      	ldr	r5, [sp, #20]
 8005a02:	9a05      	ldr	r2, [sp, #20]
 8005a04:	441a      	add	r2, r3
 8005a06:	9205      	str	r2, [sp, #20]
 8005a08:	9a06      	ldr	r2, [sp, #24]
 8005a0a:	2101      	movs	r1, #1
 8005a0c:	441a      	add	r2, r3
 8005a0e:	4620      	mov	r0, r4
 8005a10:	9206      	str	r2, [sp, #24]
 8005a12:	f000 fc3d 	bl	8006290 <__i2b>
 8005a16:	4607      	mov	r7, r0
 8005a18:	b165      	cbz	r5, 8005a34 <_dtoa_r+0x774>
 8005a1a:	9b06      	ldr	r3, [sp, #24]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	dd09      	ble.n	8005a34 <_dtoa_r+0x774>
 8005a20:	42ab      	cmp	r3, r5
 8005a22:	9a05      	ldr	r2, [sp, #20]
 8005a24:	bfa8      	it	ge
 8005a26:	462b      	movge	r3, r5
 8005a28:	1ad2      	subs	r2, r2, r3
 8005a2a:	9205      	str	r2, [sp, #20]
 8005a2c:	9a06      	ldr	r2, [sp, #24]
 8005a2e:	1aed      	subs	r5, r5, r3
 8005a30:	1ad3      	subs	r3, r2, r3
 8005a32:	9306      	str	r3, [sp, #24]
 8005a34:	9b08      	ldr	r3, [sp, #32]
 8005a36:	b1f3      	cbz	r3, 8005a76 <_dtoa_r+0x7b6>
 8005a38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	f000 80a3 	beq.w	8005b86 <_dtoa_r+0x8c6>
 8005a40:	2e00      	cmp	r6, #0
 8005a42:	dd10      	ble.n	8005a66 <_dtoa_r+0x7a6>
 8005a44:	4639      	mov	r1, r7
 8005a46:	4632      	mov	r2, r6
 8005a48:	4620      	mov	r0, r4
 8005a4a:	f000 fce1 	bl	8006410 <__pow5mult>
 8005a4e:	4652      	mov	r2, sl
 8005a50:	4601      	mov	r1, r0
 8005a52:	4607      	mov	r7, r0
 8005a54:	4620      	mov	r0, r4
 8005a56:	f000 fc31 	bl	80062bc <__multiply>
 8005a5a:	4651      	mov	r1, sl
 8005a5c:	4680      	mov	r8, r0
 8005a5e:	4620      	mov	r0, r4
 8005a60:	f000 fb60 	bl	8006124 <_Bfree>
 8005a64:	46c2      	mov	sl, r8
 8005a66:	9b08      	ldr	r3, [sp, #32]
 8005a68:	1b9a      	subs	r2, r3, r6
 8005a6a:	d004      	beq.n	8005a76 <_dtoa_r+0x7b6>
 8005a6c:	4651      	mov	r1, sl
 8005a6e:	4620      	mov	r0, r4
 8005a70:	f000 fcce 	bl	8006410 <__pow5mult>
 8005a74:	4682      	mov	sl, r0
 8005a76:	2101      	movs	r1, #1
 8005a78:	4620      	mov	r0, r4
 8005a7a:	f000 fc09 	bl	8006290 <__i2b>
 8005a7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	4606      	mov	r6, r0
 8005a84:	f340 8081 	ble.w	8005b8a <_dtoa_r+0x8ca>
 8005a88:	461a      	mov	r2, r3
 8005a8a:	4601      	mov	r1, r0
 8005a8c:	4620      	mov	r0, r4
 8005a8e:	f000 fcbf 	bl	8006410 <__pow5mult>
 8005a92:	9b07      	ldr	r3, [sp, #28]
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	4606      	mov	r6, r0
 8005a98:	dd7a      	ble.n	8005b90 <_dtoa_r+0x8d0>
 8005a9a:	f04f 0800 	mov.w	r8, #0
 8005a9e:	6933      	ldr	r3, [r6, #16]
 8005aa0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005aa4:	6918      	ldr	r0, [r3, #16]
 8005aa6:	f000 fba5 	bl	80061f4 <__hi0bits>
 8005aaa:	f1c0 0020 	rsb	r0, r0, #32
 8005aae:	9b06      	ldr	r3, [sp, #24]
 8005ab0:	4418      	add	r0, r3
 8005ab2:	f010 001f 	ands.w	r0, r0, #31
 8005ab6:	f000 8094 	beq.w	8005be2 <_dtoa_r+0x922>
 8005aba:	f1c0 0320 	rsb	r3, r0, #32
 8005abe:	2b04      	cmp	r3, #4
 8005ac0:	f340 8085 	ble.w	8005bce <_dtoa_r+0x90e>
 8005ac4:	9b05      	ldr	r3, [sp, #20]
 8005ac6:	f1c0 001c 	rsb	r0, r0, #28
 8005aca:	4403      	add	r3, r0
 8005acc:	9305      	str	r3, [sp, #20]
 8005ace:	9b06      	ldr	r3, [sp, #24]
 8005ad0:	4403      	add	r3, r0
 8005ad2:	4405      	add	r5, r0
 8005ad4:	9306      	str	r3, [sp, #24]
 8005ad6:	9b05      	ldr	r3, [sp, #20]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	dd05      	ble.n	8005ae8 <_dtoa_r+0x828>
 8005adc:	4651      	mov	r1, sl
 8005ade:	461a      	mov	r2, r3
 8005ae0:	4620      	mov	r0, r4
 8005ae2:	f000 fcef 	bl	80064c4 <__lshift>
 8005ae6:	4682      	mov	sl, r0
 8005ae8:	9b06      	ldr	r3, [sp, #24]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	dd05      	ble.n	8005afa <_dtoa_r+0x83a>
 8005aee:	4631      	mov	r1, r6
 8005af0:	461a      	mov	r2, r3
 8005af2:	4620      	mov	r0, r4
 8005af4:	f000 fce6 	bl	80064c4 <__lshift>
 8005af8:	4606      	mov	r6, r0
 8005afa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d072      	beq.n	8005be6 <_dtoa_r+0x926>
 8005b00:	4631      	mov	r1, r6
 8005b02:	4650      	mov	r0, sl
 8005b04:	f000 fd4a 	bl	800659c <__mcmp>
 8005b08:	2800      	cmp	r0, #0
 8005b0a:	da6c      	bge.n	8005be6 <_dtoa_r+0x926>
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	4651      	mov	r1, sl
 8005b10:	220a      	movs	r2, #10
 8005b12:	4620      	mov	r0, r4
 8005b14:	f000 fb28 	bl	8006168 <__multadd>
 8005b18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b1a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005b1e:	4682      	mov	sl, r0
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	f000 81b0 	beq.w	8005e86 <_dtoa_r+0xbc6>
 8005b26:	2300      	movs	r3, #0
 8005b28:	4639      	mov	r1, r7
 8005b2a:	220a      	movs	r2, #10
 8005b2c:	4620      	mov	r0, r4
 8005b2e:	f000 fb1b 	bl	8006168 <__multadd>
 8005b32:	9b01      	ldr	r3, [sp, #4]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	4607      	mov	r7, r0
 8005b38:	f300 8096 	bgt.w	8005c68 <_dtoa_r+0x9a8>
 8005b3c:	9b07      	ldr	r3, [sp, #28]
 8005b3e:	2b02      	cmp	r3, #2
 8005b40:	dc59      	bgt.n	8005bf6 <_dtoa_r+0x936>
 8005b42:	e091      	b.n	8005c68 <_dtoa_r+0x9a8>
 8005b44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005b46:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005b4a:	e758      	b.n	80059fe <_dtoa_r+0x73e>
 8005b4c:	9b04      	ldr	r3, [sp, #16]
 8005b4e:	1e5e      	subs	r6, r3, #1
 8005b50:	9b08      	ldr	r3, [sp, #32]
 8005b52:	42b3      	cmp	r3, r6
 8005b54:	bfbf      	itttt	lt
 8005b56:	9b08      	ldrlt	r3, [sp, #32]
 8005b58:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8005b5a:	9608      	strlt	r6, [sp, #32]
 8005b5c:	1af3      	sublt	r3, r6, r3
 8005b5e:	bfb4      	ite	lt
 8005b60:	18d2      	addlt	r2, r2, r3
 8005b62:	1b9e      	subge	r6, r3, r6
 8005b64:	9b04      	ldr	r3, [sp, #16]
 8005b66:	bfbc      	itt	lt
 8005b68:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8005b6a:	2600      	movlt	r6, #0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	bfb7      	itett	lt
 8005b70:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8005b74:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8005b78:	1a9d      	sublt	r5, r3, r2
 8005b7a:	2300      	movlt	r3, #0
 8005b7c:	e741      	b.n	8005a02 <_dtoa_r+0x742>
 8005b7e:	9e08      	ldr	r6, [sp, #32]
 8005b80:	9d05      	ldr	r5, [sp, #20]
 8005b82:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005b84:	e748      	b.n	8005a18 <_dtoa_r+0x758>
 8005b86:	9a08      	ldr	r2, [sp, #32]
 8005b88:	e770      	b.n	8005a6c <_dtoa_r+0x7ac>
 8005b8a:	9b07      	ldr	r3, [sp, #28]
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	dc19      	bgt.n	8005bc4 <_dtoa_r+0x904>
 8005b90:	9b02      	ldr	r3, [sp, #8]
 8005b92:	b9bb      	cbnz	r3, 8005bc4 <_dtoa_r+0x904>
 8005b94:	9b03      	ldr	r3, [sp, #12]
 8005b96:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b9a:	b99b      	cbnz	r3, 8005bc4 <_dtoa_r+0x904>
 8005b9c:	9b03      	ldr	r3, [sp, #12]
 8005b9e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ba2:	0d1b      	lsrs	r3, r3, #20
 8005ba4:	051b      	lsls	r3, r3, #20
 8005ba6:	b183      	cbz	r3, 8005bca <_dtoa_r+0x90a>
 8005ba8:	9b05      	ldr	r3, [sp, #20]
 8005baa:	3301      	adds	r3, #1
 8005bac:	9305      	str	r3, [sp, #20]
 8005bae:	9b06      	ldr	r3, [sp, #24]
 8005bb0:	3301      	adds	r3, #1
 8005bb2:	9306      	str	r3, [sp, #24]
 8005bb4:	f04f 0801 	mov.w	r8, #1
 8005bb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	f47f af6f 	bne.w	8005a9e <_dtoa_r+0x7de>
 8005bc0:	2001      	movs	r0, #1
 8005bc2:	e774      	b.n	8005aae <_dtoa_r+0x7ee>
 8005bc4:	f04f 0800 	mov.w	r8, #0
 8005bc8:	e7f6      	b.n	8005bb8 <_dtoa_r+0x8f8>
 8005bca:	4698      	mov	r8, r3
 8005bcc:	e7f4      	b.n	8005bb8 <_dtoa_r+0x8f8>
 8005bce:	d082      	beq.n	8005ad6 <_dtoa_r+0x816>
 8005bd0:	9a05      	ldr	r2, [sp, #20]
 8005bd2:	331c      	adds	r3, #28
 8005bd4:	441a      	add	r2, r3
 8005bd6:	9205      	str	r2, [sp, #20]
 8005bd8:	9a06      	ldr	r2, [sp, #24]
 8005bda:	441a      	add	r2, r3
 8005bdc:	441d      	add	r5, r3
 8005bde:	9206      	str	r2, [sp, #24]
 8005be0:	e779      	b.n	8005ad6 <_dtoa_r+0x816>
 8005be2:	4603      	mov	r3, r0
 8005be4:	e7f4      	b.n	8005bd0 <_dtoa_r+0x910>
 8005be6:	9b04      	ldr	r3, [sp, #16]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	dc37      	bgt.n	8005c5c <_dtoa_r+0x99c>
 8005bec:	9b07      	ldr	r3, [sp, #28]
 8005bee:	2b02      	cmp	r3, #2
 8005bf0:	dd34      	ble.n	8005c5c <_dtoa_r+0x99c>
 8005bf2:	9b04      	ldr	r3, [sp, #16]
 8005bf4:	9301      	str	r3, [sp, #4]
 8005bf6:	9b01      	ldr	r3, [sp, #4]
 8005bf8:	b963      	cbnz	r3, 8005c14 <_dtoa_r+0x954>
 8005bfa:	4631      	mov	r1, r6
 8005bfc:	2205      	movs	r2, #5
 8005bfe:	4620      	mov	r0, r4
 8005c00:	f000 fab2 	bl	8006168 <__multadd>
 8005c04:	4601      	mov	r1, r0
 8005c06:	4606      	mov	r6, r0
 8005c08:	4650      	mov	r0, sl
 8005c0a:	f000 fcc7 	bl	800659c <__mcmp>
 8005c0e:	2800      	cmp	r0, #0
 8005c10:	f73f adbb 	bgt.w	800578a <_dtoa_r+0x4ca>
 8005c14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c16:	9d00      	ldr	r5, [sp, #0]
 8005c18:	ea6f 0b03 	mvn.w	fp, r3
 8005c1c:	f04f 0800 	mov.w	r8, #0
 8005c20:	4631      	mov	r1, r6
 8005c22:	4620      	mov	r0, r4
 8005c24:	f000 fa7e 	bl	8006124 <_Bfree>
 8005c28:	2f00      	cmp	r7, #0
 8005c2a:	f43f aeab 	beq.w	8005984 <_dtoa_r+0x6c4>
 8005c2e:	f1b8 0f00 	cmp.w	r8, #0
 8005c32:	d005      	beq.n	8005c40 <_dtoa_r+0x980>
 8005c34:	45b8      	cmp	r8, r7
 8005c36:	d003      	beq.n	8005c40 <_dtoa_r+0x980>
 8005c38:	4641      	mov	r1, r8
 8005c3a:	4620      	mov	r0, r4
 8005c3c:	f000 fa72 	bl	8006124 <_Bfree>
 8005c40:	4639      	mov	r1, r7
 8005c42:	4620      	mov	r0, r4
 8005c44:	f000 fa6e 	bl	8006124 <_Bfree>
 8005c48:	e69c      	b.n	8005984 <_dtoa_r+0x6c4>
 8005c4a:	2600      	movs	r6, #0
 8005c4c:	4637      	mov	r7, r6
 8005c4e:	e7e1      	b.n	8005c14 <_dtoa_r+0x954>
 8005c50:	46bb      	mov	fp, r7
 8005c52:	4637      	mov	r7, r6
 8005c54:	e599      	b.n	800578a <_dtoa_r+0x4ca>
 8005c56:	bf00      	nop
 8005c58:	40240000 	.word	0x40240000
 8005c5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	f000 80c8 	beq.w	8005df4 <_dtoa_r+0xb34>
 8005c64:	9b04      	ldr	r3, [sp, #16]
 8005c66:	9301      	str	r3, [sp, #4]
 8005c68:	2d00      	cmp	r5, #0
 8005c6a:	dd05      	ble.n	8005c78 <_dtoa_r+0x9b8>
 8005c6c:	4639      	mov	r1, r7
 8005c6e:	462a      	mov	r2, r5
 8005c70:	4620      	mov	r0, r4
 8005c72:	f000 fc27 	bl	80064c4 <__lshift>
 8005c76:	4607      	mov	r7, r0
 8005c78:	f1b8 0f00 	cmp.w	r8, #0
 8005c7c:	d05b      	beq.n	8005d36 <_dtoa_r+0xa76>
 8005c7e:	6879      	ldr	r1, [r7, #4]
 8005c80:	4620      	mov	r0, r4
 8005c82:	f000 fa0f 	bl	80060a4 <_Balloc>
 8005c86:	4605      	mov	r5, r0
 8005c88:	b928      	cbnz	r0, 8005c96 <_dtoa_r+0x9d6>
 8005c8a:	4b83      	ldr	r3, [pc, #524]	; (8005e98 <_dtoa_r+0xbd8>)
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8005c92:	f7ff bb2e 	b.w	80052f2 <_dtoa_r+0x32>
 8005c96:	693a      	ldr	r2, [r7, #16]
 8005c98:	3202      	adds	r2, #2
 8005c9a:	0092      	lsls	r2, r2, #2
 8005c9c:	f107 010c 	add.w	r1, r7, #12
 8005ca0:	300c      	adds	r0, #12
 8005ca2:	f001 f813 	bl	8006ccc <memcpy>
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	4629      	mov	r1, r5
 8005caa:	4620      	mov	r0, r4
 8005cac:	f000 fc0a 	bl	80064c4 <__lshift>
 8005cb0:	9b00      	ldr	r3, [sp, #0]
 8005cb2:	3301      	adds	r3, #1
 8005cb4:	9304      	str	r3, [sp, #16]
 8005cb6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005cba:	4413      	add	r3, r2
 8005cbc:	9308      	str	r3, [sp, #32]
 8005cbe:	9b02      	ldr	r3, [sp, #8]
 8005cc0:	f003 0301 	and.w	r3, r3, #1
 8005cc4:	46b8      	mov	r8, r7
 8005cc6:	9306      	str	r3, [sp, #24]
 8005cc8:	4607      	mov	r7, r0
 8005cca:	9b04      	ldr	r3, [sp, #16]
 8005ccc:	4631      	mov	r1, r6
 8005cce:	3b01      	subs	r3, #1
 8005cd0:	4650      	mov	r0, sl
 8005cd2:	9301      	str	r3, [sp, #4]
 8005cd4:	f7ff fa6a 	bl	80051ac <quorem>
 8005cd8:	4641      	mov	r1, r8
 8005cda:	9002      	str	r0, [sp, #8]
 8005cdc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005ce0:	4650      	mov	r0, sl
 8005ce2:	f000 fc5b 	bl	800659c <__mcmp>
 8005ce6:	463a      	mov	r2, r7
 8005ce8:	9005      	str	r0, [sp, #20]
 8005cea:	4631      	mov	r1, r6
 8005cec:	4620      	mov	r0, r4
 8005cee:	f000 fc71 	bl	80065d4 <__mdiff>
 8005cf2:	68c2      	ldr	r2, [r0, #12]
 8005cf4:	4605      	mov	r5, r0
 8005cf6:	bb02      	cbnz	r2, 8005d3a <_dtoa_r+0xa7a>
 8005cf8:	4601      	mov	r1, r0
 8005cfa:	4650      	mov	r0, sl
 8005cfc:	f000 fc4e 	bl	800659c <__mcmp>
 8005d00:	4602      	mov	r2, r0
 8005d02:	4629      	mov	r1, r5
 8005d04:	4620      	mov	r0, r4
 8005d06:	9209      	str	r2, [sp, #36]	; 0x24
 8005d08:	f000 fa0c 	bl	8006124 <_Bfree>
 8005d0c:	9b07      	ldr	r3, [sp, #28]
 8005d0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d10:	9d04      	ldr	r5, [sp, #16]
 8005d12:	ea43 0102 	orr.w	r1, r3, r2
 8005d16:	9b06      	ldr	r3, [sp, #24]
 8005d18:	4319      	orrs	r1, r3
 8005d1a:	d110      	bne.n	8005d3e <_dtoa_r+0xa7e>
 8005d1c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005d20:	d029      	beq.n	8005d76 <_dtoa_r+0xab6>
 8005d22:	9b05      	ldr	r3, [sp, #20]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	dd02      	ble.n	8005d2e <_dtoa_r+0xa6e>
 8005d28:	9b02      	ldr	r3, [sp, #8]
 8005d2a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8005d2e:	9b01      	ldr	r3, [sp, #4]
 8005d30:	f883 9000 	strb.w	r9, [r3]
 8005d34:	e774      	b.n	8005c20 <_dtoa_r+0x960>
 8005d36:	4638      	mov	r0, r7
 8005d38:	e7ba      	b.n	8005cb0 <_dtoa_r+0x9f0>
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	e7e1      	b.n	8005d02 <_dtoa_r+0xa42>
 8005d3e:	9b05      	ldr	r3, [sp, #20]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	db04      	blt.n	8005d4e <_dtoa_r+0xa8e>
 8005d44:	9907      	ldr	r1, [sp, #28]
 8005d46:	430b      	orrs	r3, r1
 8005d48:	9906      	ldr	r1, [sp, #24]
 8005d4a:	430b      	orrs	r3, r1
 8005d4c:	d120      	bne.n	8005d90 <_dtoa_r+0xad0>
 8005d4e:	2a00      	cmp	r2, #0
 8005d50:	dded      	ble.n	8005d2e <_dtoa_r+0xa6e>
 8005d52:	4651      	mov	r1, sl
 8005d54:	2201      	movs	r2, #1
 8005d56:	4620      	mov	r0, r4
 8005d58:	f000 fbb4 	bl	80064c4 <__lshift>
 8005d5c:	4631      	mov	r1, r6
 8005d5e:	4682      	mov	sl, r0
 8005d60:	f000 fc1c 	bl	800659c <__mcmp>
 8005d64:	2800      	cmp	r0, #0
 8005d66:	dc03      	bgt.n	8005d70 <_dtoa_r+0xab0>
 8005d68:	d1e1      	bne.n	8005d2e <_dtoa_r+0xa6e>
 8005d6a:	f019 0f01 	tst.w	r9, #1
 8005d6e:	d0de      	beq.n	8005d2e <_dtoa_r+0xa6e>
 8005d70:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005d74:	d1d8      	bne.n	8005d28 <_dtoa_r+0xa68>
 8005d76:	9a01      	ldr	r2, [sp, #4]
 8005d78:	2339      	movs	r3, #57	; 0x39
 8005d7a:	7013      	strb	r3, [r2, #0]
 8005d7c:	462b      	mov	r3, r5
 8005d7e:	461d      	mov	r5, r3
 8005d80:	3b01      	subs	r3, #1
 8005d82:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005d86:	2a39      	cmp	r2, #57	; 0x39
 8005d88:	d06c      	beq.n	8005e64 <_dtoa_r+0xba4>
 8005d8a:	3201      	adds	r2, #1
 8005d8c:	701a      	strb	r2, [r3, #0]
 8005d8e:	e747      	b.n	8005c20 <_dtoa_r+0x960>
 8005d90:	2a00      	cmp	r2, #0
 8005d92:	dd07      	ble.n	8005da4 <_dtoa_r+0xae4>
 8005d94:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005d98:	d0ed      	beq.n	8005d76 <_dtoa_r+0xab6>
 8005d9a:	9a01      	ldr	r2, [sp, #4]
 8005d9c:	f109 0301 	add.w	r3, r9, #1
 8005da0:	7013      	strb	r3, [r2, #0]
 8005da2:	e73d      	b.n	8005c20 <_dtoa_r+0x960>
 8005da4:	9b04      	ldr	r3, [sp, #16]
 8005da6:	9a08      	ldr	r2, [sp, #32]
 8005da8:	f803 9c01 	strb.w	r9, [r3, #-1]
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d043      	beq.n	8005e38 <_dtoa_r+0xb78>
 8005db0:	4651      	mov	r1, sl
 8005db2:	2300      	movs	r3, #0
 8005db4:	220a      	movs	r2, #10
 8005db6:	4620      	mov	r0, r4
 8005db8:	f000 f9d6 	bl	8006168 <__multadd>
 8005dbc:	45b8      	cmp	r8, r7
 8005dbe:	4682      	mov	sl, r0
 8005dc0:	f04f 0300 	mov.w	r3, #0
 8005dc4:	f04f 020a 	mov.w	r2, #10
 8005dc8:	4641      	mov	r1, r8
 8005dca:	4620      	mov	r0, r4
 8005dcc:	d107      	bne.n	8005dde <_dtoa_r+0xb1e>
 8005dce:	f000 f9cb 	bl	8006168 <__multadd>
 8005dd2:	4680      	mov	r8, r0
 8005dd4:	4607      	mov	r7, r0
 8005dd6:	9b04      	ldr	r3, [sp, #16]
 8005dd8:	3301      	adds	r3, #1
 8005dda:	9304      	str	r3, [sp, #16]
 8005ddc:	e775      	b.n	8005cca <_dtoa_r+0xa0a>
 8005dde:	f000 f9c3 	bl	8006168 <__multadd>
 8005de2:	4639      	mov	r1, r7
 8005de4:	4680      	mov	r8, r0
 8005de6:	2300      	movs	r3, #0
 8005de8:	220a      	movs	r2, #10
 8005dea:	4620      	mov	r0, r4
 8005dec:	f000 f9bc 	bl	8006168 <__multadd>
 8005df0:	4607      	mov	r7, r0
 8005df2:	e7f0      	b.n	8005dd6 <_dtoa_r+0xb16>
 8005df4:	9b04      	ldr	r3, [sp, #16]
 8005df6:	9301      	str	r3, [sp, #4]
 8005df8:	9d00      	ldr	r5, [sp, #0]
 8005dfa:	4631      	mov	r1, r6
 8005dfc:	4650      	mov	r0, sl
 8005dfe:	f7ff f9d5 	bl	80051ac <quorem>
 8005e02:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005e06:	9b00      	ldr	r3, [sp, #0]
 8005e08:	f805 9b01 	strb.w	r9, [r5], #1
 8005e0c:	1aea      	subs	r2, r5, r3
 8005e0e:	9b01      	ldr	r3, [sp, #4]
 8005e10:	4293      	cmp	r3, r2
 8005e12:	dd07      	ble.n	8005e24 <_dtoa_r+0xb64>
 8005e14:	4651      	mov	r1, sl
 8005e16:	2300      	movs	r3, #0
 8005e18:	220a      	movs	r2, #10
 8005e1a:	4620      	mov	r0, r4
 8005e1c:	f000 f9a4 	bl	8006168 <__multadd>
 8005e20:	4682      	mov	sl, r0
 8005e22:	e7ea      	b.n	8005dfa <_dtoa_r+0xb3a>
 8005e24:	9b01      	ldr	r3, [sp, #4]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	bfc8      	it	gt
 8005e2a:	461d      	movgt	r5, r3
 8005e2c:	9b00      	ldr	r3, [sp, #0]
 8005e2e:	bfd8      	it	le
 8005e30:	2501      	movle	r5, #1
 8005e32:	441d      	add	r5, r3
 8005e34:	f04f 0800 	mov.w	r8, #0
 8005e38:	4651      	mov	r1, sl
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	4620      	mov	r0, r4
 8005e3e:	f000 fb41 	bl	80064c4 <__lshift>
 8005e42:	4631      	mov	r1, r6
 8005e44:	4682      	mov	sl, r0
 8005e46:	f000 fba9 	bl	800659c <__mcmp>
 8005e4a:	2800      	cmp	r0, #0
 8005e4c:	dc96      	bgt.n	8005d7c <_dtoa_r+0xabc>
 8005e4e:	d102      	bne.n	8005e56 <_dtoa_r+0xb96>
 8005e50:	f019 0f01 	tst.w	r9, #1
 8005e54:	d192      	bne.n	8005d7c <_dtoa_r+0xabc>
 8005e56:	462b      	mov	r3, r5
 8005e58:	461d      	mov	r5, r3
 8005e5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005e5e:	2a30      	cmp	r2, #48	; 0x30
 8005e60:	d0fa      	beq.n	8005e58 <_dtoa_r+0xb98>
 8005e62:	e6dd      	b.n	8005c20 <_dtoa_r+0x960>
 8005e64:	9a00      	ldr	r2, [sp, #0]
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d189      	bne.n	8005d7e <_dtoa_r+0xabe>
 8005e6a:	f10b 0b01 	add.w	fp, fp, #1
 8005e6e:	2331      	movs	r3, #49	; 0x31
 8005e70:	e796      	b.n	8005da0 <_dtoa_r+0xae0>
 8005e72:	4b0a      	ldr	r3, [pc, #40]	; (8005e9c <_dtoa_r+0xbdc>)
 8005e74:	f7ff ba99 	b.w	80053aa <_dtoa_r+0xea>
 8005e78:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	f47f aa6d 	bne.w	800535a <_dtoa_r+0x9a>
 8005e80:	4b07      	ldr	r3, [pc, #28]	; (8005ea0 <_dtoa_r+0xbe0>)
 8005e82:	f7ff ba92 	b.w	80053aa <_dtoa_r+0xea>
 8005e86:	9b01      	ldr	r3, [sp, #4]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	dcb5      	bgt.n	8005df8 <_dtoa_r+0xb38>
 8005e8c:	9b07      	ldr	r3, [sp, #28]
 8005e8e:	2b02      	cmp	r3, #2
 8005e90:	f73f aeb1 	bgt.w	8005bf6 <_dtoa_r+0x936>
 8005e94:	e7b0      	b.n	8005df8 <_dtoa_r+0xb38>
 8005e96:	bf00      	nop
 8005e98:	080075b3 	.word	0x080075b3
 8005e9c:	08007513 	.word	0x08007513
 8005ea0:	08007537 	.word	0x08007537

08005ea4 <_free_r>:
 8005ea4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005ea6:	2900      	cmp	r1, #0
 8005ea8:	d044      	beq.n	8005f34 <_free_r+0x90>
 8005eaa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005eae:	9001      	str	r0, [sp, #4]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	f1a1 0404 	sub.w	r4, r1, #4
 8005eb6:	bfb8      	it	lt
 8005eb8:	18e4      	addlt	r4, r4, r3
 8005eba:	f000 f8e7 	bl	800608c <__malloc_lock>
 8005ebe:	4a1e      	ldr	r2, [pc, #120]	; (8005f38 <_free_r+0x94>)
 8005ec0:	9801      	ldr	r0, [sp, #4]
 8005ec2:	6813      	ldr	r3, [r2, #0]
 8005ec4:	b933      	cbnz	r3, 8005ed4 <_free_r+0x30>
 8005ec6:	6063      	str	r3, [r4, #4]
 8005ec8:	6014      	str	r4, [r2, #0]
 8005eca:	b003      	add	sp, #12
 8005ecc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005ed0:	f000 b8e2 	b.w	8006098 <__malloc_unlock>
 8005ed4:	42a3      	cmp	r3, r4
 8005ed6:	d908      	bls.n	8005eea <_free_r+0x46>
 8005ed8:	6825      	ldr	r5, [r4, #0]
 8005eda:	1961      	adds	r1, r4, r5
 8005edc:	428b      	cmp	r3, r1
 8005ede:	bf01      	itttt	eq
 8005ee0:	6819      	ldreq	r1, [r3, #0]
 8005ee2:	685b      	ldreq	r3, [r3, #4]
 8005ee4:	1949      	addeq	r1, r1, r5
 8005ee6:	6021      	streq	r1, [r4, #0]
 8005ee8:	e7ed      	b.n	8005ec6 <_free_r+0x22>
 8005eea:	461a      	mov	r2, r3
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	b10b      	cbz	r3, 8005ef4 <_free_r+0x50>
 8005ef0:	42a3      	cmp	r3, r4
 8005ef2:	d9fa      	bls.n	8005eea <_free_r+0x46>
 8005ef4:	6811      	ldr	r1, [r2, #0]
 8005ef6:	1855      	adds	r5, r2, r1
 8005ef8:	42a5      	cmp	r5, r4
 8005efa:	d10b      	bne.n	8005f14 <_free_r+0x70>
 8005efc:	6824      	ldr	r4, [r4, #0]
 8005efe:	4421      	add	r1, r4
 8005f00:	1854      	adds	r4, r2, r1
 8005f02:	42a3      	cmp	r3, r4
 8005f04:	6011      	str	r1, [r2, #0]
 8005f06:	d1e0      	bne.n	8005eca <_free_r+0x26>
 8005f08:	681c      	ldr	r4, [r3, #0]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	6053      	str	r3, [r2, #4]
 8005f0e:	440c      	add	r4, r1
 8005f10:	6014      	str	r4, [r2, #0]
 8005f12:	e7da      	b.n	8005eca <_free_r+0x26>
 8005f14:	d902      	bls.n	8005f1c <_free_r+0x78>
 8005f16:	230c      	movs	r3, #12
 8005f18:	6003      	str	r3, [r0, #0]
 8005f1a:	e7d6      	b.n	8005eca <_free_r+0x26>
 8005f1c:	6825      	ldr	r5, [r4, #0]
 8005f1e:	1961      	adds	r1, r4, r5
 8005f20:	428b      	cmp	r3, r1
 8005f22:	bf04      	itt	eq
 8005f24:	6819      	ldreq	r1, [r3, #0]
 8005f26:	685b      	ldreq	r3, [r3, #4]
 8005f28:	6063      	str	r3, [r4, #4]
 8005f2a:	bf04      	itt	eq
 8005f2c:	1949      	addeq	r1, r1, r5
 8005f2e:	6021      	streq	r1, [r4, #0]
 8005f30:	6054      	str	r4, [r2, #4]
 8005f32:	e7ca      	b.n	8005eca <_free_r+0x26>
 8005f34:	b003      	add	sp, #12
 8005f36:	bd30      	pop	{r4, r5, pc}
 8005f38:	200003a8 	.word	0x200003a8

08005f3c <malloc>:
 8005f3c:	4b02      	ldr	r3, [pc, #8]	; (8005f48 <malloc+0xc>)
 8005f3e:	4601      	mov	r1, r0
 8005f40:	6818      	ldr	r0, [r3, #0]
 8005f42:	f000 b823 	b.w	8005f8c <_malloc_r>
 8005f46:	bf00      	nop
 8005f48:	20000064 	.word	0x20000064

08005f4c <sbrk_aligned>:
 8005f4c:	b570      	push	{r4, r5, r6, lr}
 8005f4e:	4e0e      	ldr	r6, [pc, #56]	; (8005f88 <sbrk_aligned+0x3c>)
 8005f50:	460c      	mov	r4, r1
 8005f52:	6831      	ldr	r1, [r6, #0]
 8005f54:	4605      	mov	r5, r0
 8005f56:	b911      	cbnz	r1, 8005f5e <sbrk_aligned+0x12>
 8005f58:	f000 fea8 	bl	8006cac <_sbrk_r>
 8005f5c:	6030      	str	r0, [r6, #0]
 8005f5e:	4621      	mov	r1, r4
 8005f60:	4628      	mov	r0, r5
 8005f62:	f000 fea3 	bl	8006cac <_sbrk_r>
 8005f66:	1c43      	adds	r3, r0, #1
 8005f68:	d00a      	beq.n	8005f80 <sbrk_aligned+0x34>
 8005f6a:	1cc4      	adds	r4, r0, #3
 8005f6c:	f024 0403 	bic.w	r4, r4, #3
 8005f70:	42a0      	cmp	r0, r4
 8005f72:	d007      	beq.n	8005f84 <sbrk_aligned+0x38>
 8005f74:	1a21      	subs	r1, r4, r0
 8005f76:	4628      	mov	r0, r5
 8005f78:	f000 fe98 	bl	8006cac <_sbrk_r>
 8005f7c:	3001      	adds	r0, #1
 8005f7e:	d101      	bne.n	8005f84 <sbrk_aligned+0x38>
 8005f80:	f04f 34ff 	mov.w	r4, #4294967295
 8005f84:	4620      	mov	r0, r4
 8005f86:	bd70      	pop	{r4, r5, r6, pc}
 8005f88:	200003ac 	.word	0x200003ac

08005f8c <_malloc_r>:
 8005f8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f90:	1ccd      	adds	r5, r1, #3
 8005f92:	f025 0503 	bic.w	r5, r5, #3
 8005f96:	3508      	adds	r5, #8
 8005f98:	2d0c      	cmp	r5, #12
 8005f9a:	bf38      	it	cc
 8005f9c:	250c      	movcc	r5, #12
 8005f9e:	2d00      	cmp	r5, #0
 8005fa0:	4607      	mov	r7, r0
 8005fa2:	db01      	blt.n	8005fa8 <_malloc_r+0x1c>
 8005fa4:	42a9      	cmp	r1, r5
 8005fa6:	d905      	bls.n	8005fb4 <_malloc_r+0x28>
 8005fa8:	230c      	movs	r3, #12
 8005faa:	603b      	str	r3, [r7, #0]
 8005fac:	2600      	movs	r6, #0
 8005fae:	4630      	mov	r0, r6
 8005fb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fb4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006088 <_malloc_r+0xfc>
 8005fb8:	f000 f868 	bl	800608c <__malloc_lock>
 8005fbc:	f8d8 3000 	ldr.w	r3, [r8]
 8005fc0:	461c      	mov	r4, r3
 8005fc2:	bb5c      	cbnz	r4, 800601c <_malloc_r+0x90>
 8005fc4:	4629      	mov	r1, r5
 8005fc6:	4638      	mov	r0, r7
 8005fc8:	f7ff ffc0 	bl	8005f4c <sbrk_aligned>
 8005fcc:	1c43      	adds	r3, r0, #1
 8005fce:	4604      	mov	r4, r0
 8005fd0:	d155      	bne.n	800607e <_malloc_r+0xf2>
 8005fd2:	f8d8 4000 	ldr.w	r4, [r8]
 8005fd6:	4626      	mov	r6, r4
 8005fd8:	2e00      	cmp	r6, #0
 8005fda:	d145      	bne.n	8006068 <_malloc_r+0xdc>
 8005fdc:	2c00      	cmp	r4, #0
 8005fde:	d048      	beq.n	8006072 <_malloc_r+0xe6>
 8005fe0:	6823      	ldr	r3, [r4, #0]
 8005fe2:	4631      	mov	r1, r6
 8005fe4:	4638      	mov	r0, r7
 8005fe6:	eb04 0903 	add.w	r9, r4, r3
 8005fea:	f000 fe5f 	bl	8006cac <_sbrk_r>
 8005fee:	4581      	cmp	r9, r0
 8005ff0:	d13f      	bne.n	8006072 <_malloc_r+0xe6>
 8005ff2:	6821      	ldr	r1, [r4, #0]
 8005ff4:	1a6d      	subs	r5, r5, r1
 8005ff6:	4629      	mov	r1, r5
 8005ff8:	4638      	mov	r0, r7
 8005ffa:	f7ff ffa7 	bl	8005f4c <sbrk_aligned>
 8005ffe:	3001      	adds	r0, #1
 8006000:	d037      	beq.n	8006072 <_malloc_r+0xe6>
 8006002:	6823      	ldr	r3, [r4, #0]
 8006004:	442b      	add	r3, r5
 8006006:	6023      	str	r3, [r4, #0]
 8006008:	f8d8 3000 	ldr.w	r3, [r8]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d038      	beq.n	8006082 <_malloc_r+0xf6>
 8006010:	685a      	ldr	r2, [r3, #4]
 8006012:	42a2      	cmp	r2, r4
 8006014:	d12b      	bne.n	800606e <_malloc_r+0xe2>
 8006016:	2200      	movs	r2, #0
 8006018:	605a      	str	r2, [r3, #4]
 800601a:	e00f      	b.n	800603c <_malloc_r+0xb0>
 800601c:	6822      	ldr	r2, [r4, #0]
 800601e:	1b52      	subs	r2, r2, r5
 8006020:	d41f      	bmi.n	8006062 <_malloc_r+0xd6>
 8006022:	2a0b      	cmp	r2, #11
 8006024:	d917      	bls.n	8006056 <_malloc_r+0xca>
 8006026:	1961      	adds	r1, r4, r5
 8006028:	42a3      	cmp	r3, r4
 800602a:	6025      	str	r5, [r4, #0]
 800602c:	bf18      	it	ne
 800602e:	6059      	strne	r1, [r3, #4]
 8006030:	6863      	ldr	r3, [r4, #4]
 8006032:	bf08      	it	eq
 8006034:	f8c8 1000 	streq.w	r1, [r8]
 8006038:	5162      	str	r2, [r4, r5]
 800603a:	604b      	str	r3, [r1, #4]
 800603c:	4638      	mov	r0, r7
 800603e:	f104 060b 	add.w	r6, r4, #11
 8006042:	f000 f829 	bl	8006098 <__malloc_unlock>
 8006046:	f026 0607 	bic.w	r6, r6, #7
 800604a:	1d23      	adds	r3, r4, #4
 800604c:	1af2      	subs	r2, r6, r3
 800604e:	d0ae      	beq.n	8005fae <_malloc_r+0x22>
 8006050:	1b9b      	subs	r3, r3, r6
 8006052:	50a3      	str	r3, [r4, r2]
 8006054:	e7ab      	b.n	8005fae <_malloc_r+0x22>
 8006056:	42a3      	cmp	r3, r4
 8006058:	6862      	ldr	r2, [r4, #4]
 800605a:	d1dd      	bne.n	8006018 <_malloc_r+0x8c>
 800605c:	f8c8 2000 	str.w	r2, [r8]
 8006060:	e7ec      	b.n	800603c <_malloc_r+0xb0>
 8006062:	4623      	mov	r3, r4
 8006064:	6864      	ldr	r4, [r4, #4]
 8006066:	e7ac      	b.n	8005fc2 <_malloc_r+0x36>
 8006068:	4634      	mov	r4, r6
 800606a:	6876      	ldr	r6, [r6, #4]
 800606c:	e7b4      	b.n	8005fd8 <_malloc_r+0x4c>
 800606e:	4613      	mov	r3, r2
 8006070:	e7cc      	b.n	800600c <_malloc_r+0x80>
 8006072:	230c      	movs	r3, #12
 8006074:	603b      	str	r3, [r7, #0]
 8006076:	4638      	mov	r0, r7
 8006078:	f000 f80e 	bl	8006098 <__malloc_unlock>
 800607c:	e797      	b.n	8005fae <_malloc_r+0x22>
 800607e:	6025      	str	r5, [r4, #0]
 8006080:	e7dc      	b.n	800603c <_malloc_r+0xb0>
 8006082:	605b      	str	r3, [r3, #4]
 8006084:	deff      	udf	#255	; 0xff
 8006086:	bf00      	nop
 8006088:	200003a8 	.word	0x200003a8

0800608c <__malloc_lock>:
 800608c:	4801      	ldr	r0, [pc, #4]	; (8006094 <__malloc_lock+0x8>)
 800608e:	f7ff b88b 	b.w	80051a8 <__retarget_lock_acquire_recursive>
 8006092:	bf00      	nop
 8006094:	200003a4 	.word	0x200003a4

08006098 <__malloc_unlock>:
 8006098:	4801      	ldr	r0, [pc, #4]	; (80060a0 <__malloc_unlock+0x8>)
 800609a:	f7ff b886 	b.w	80051aa <__retarget_lock_release_recursive>
 800609e:	bf00      	nop
 80060a0:	200003a4 	.word	0x200003a4

080060a4 <_Balloc>:
 80060a4:	b570      	push	{r4, r5, r6, lr}
 80060a6:	69c6      	ldr	r6, [r0, #28]
 80060a8:	4604      	mov	r4, r0
 80060aa:	460d      	mov	r5, r1
 80060ac:	b976      	cbnz	r6, 80060cc <_Balloc+0x28>
 80060ae:	2010      	movs	r0, #16
 80060b0:	f7ff ff44 	bl	8005f3c <malloc>
 80060b4:	4602      	mov	r2, r0
 80060b6:	61e0      	str	r0, [r4, #28]
 80060b8:	b920      	cbnz	r0, 80060c4 <_Balloc+0x20>
 80060ba:	4b18      	ldr	r3, [pc, #96]	; (800611c <_Balloc+0x78>)
 80060bc:	4818      	ldr	r0, [pc, #96]	; (8006120 <_Balloc+0x7c>)
 80060be:	216b      	movs	r1, #107	; 0x6b
 80060c0:	f000 fe12 	bl	8006ce8 <__assert_func>
 80060c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80060c8:	6006      	str	r6, [r0, #0]
 80060ca:	60c6      	str	r6, [r0, #12]
 80060cc:	69e6      	ldr	r6, [r4, #28]
 80060ce:	68f3      	ldr	r3, [r6, #12]
 80060d0:	b183      	cbz	r3, 80060f4 <_Balloc+0x50>
 80060d2:	69e3      	ldr	r3, [r4, #28]
 80060d4:	68db      	ldr	r3, [r3, #12]
 80060d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80060da:	b9b8      	cbnz	r0, 800610c <_Balloc+0x68>
 80060dc:	2101      	movs	r1, #1
 80060de:	fa01 f605 	lsl.w	r6, r1, r5
 80060e2:	1d72      	adds	r2, r6, #5
 80060e4:	0092      	lsls	r2, r2, #2
 80060e6:	4620      	mov	r0, r4
 80060e8:	f000 fe1c 	bl	8006d24 <_calloc_r>
 80060ec:	b160      	cbz	r0, 8006108 <_Balloc+0x64>
 80060ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80060f2:	e00e      	b.n	8006112 <_Balloc+0x6e>
 80060f4:	2221      	movs	r2, #33	; 0x21
 80060f6:	2104      	movs	r1, #4
 80060f8:	4620      	mov	r0, r4
 80060fa:	f000 fe13 	bl	8006d24 <_calloc_r>
 80060fe:	69e3      	ldr	r3, [r4, #28]
 8006100:	60f0      	str	r0, [r6, #12]
 8006102:	68db      	ldr	r3, [r3, #12]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d1e4      	bne.n	80060d2 <_Balloc+0x2e>
 8006108:	2000      	movs	r0, #0
 800610a:	bd70      	pop	{r4, r5, r6, pc}
 800610c:	6802      	ldr	r2, [r0, #0]
 800610e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006112:	2300      	movs	r3, #0
 8006114:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006118:	e7f7      	b.n	800610a <_Balloc+0x66>
 800611a:	bf00      	nop
 800611c:	08007544 	.word	0x08007544
 8006120:	080075c4 	.word	0x080075c4

08006124 <_Bfree>:
 8006124:	b570      	push	{r4, r5, r6, lr}
 8006126:	69c6      	ldr	r6, [r0, #28]
 8006128:	4605      	mov	r5, r0
 800612a:	460c      	mov	r4, r1
 800612c:	b976      	cbnz	r6, 800614c <_Bfree+0x28>
 800612e:	2010      	movs	r0, #16
 8006130:	f7ff ff04 	bl	8005f3c <malloc>
 8006134:	4602      	mov	r2, r0
 8006136:	61e8      	str	r0, [r5, #28]
 8006138:	b920      	cbnz	r0, 8006144 <_Bfree+0x20>
 800613a:	4b09      	ldr	r3, [pc, #36]	; (8006160 <_Bfree+0x3c>)
 800613c:	4809      	ldr	r0, [pc, #36]	; (8006164 <_Bfree+0x40>)
 800613e:	218f      	movs	r1, #143	; 0x8f
 8006140:	f000 fdd2 	bl	8006ce8 <__assert_func>
 8006144:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006148:	6006      	str	r6, [r0, #0]
 800614a:	60c6      	str	r6, [r0, #12]
 800614c:	b13c      	cbz	r4, 800615e <_Bfree+0x3a>
 800614e:	69eb      	ldr	r3, [r5, #28]
 8006150:	6862      	ldr	r2, [r4, #4]
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006158:	6021      	str	r1, [r4, #0]
 800615a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800615e:	bd70      	pop	{r4, r5, r6, pc}
 8006160:	08007544 	.word	0x08007544
 8006164:	080075c4 	.word	0x080075c4

08006168 <__multadd>:
 8006168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800616c:	690d      	ldr	r5, [r1, #16]
 800616e:	4607      	mov	r7, r0
 8006170:	460c      	mov	r4, r1
 8006172:	461e      	mov	r6, r3
 8006174:	f101 0c14 	add.w	ip, r1, #20
 8006178:	2000      	movs	r0, #0
 800617a:	f8dc 3000 	ldr.w	r3, [ip]
 800617e:	b299      	uxth	r1, r3
 8006180:	fb02 6101 	mla	r1, r2, r1, r6
 8006184:	0c1e      	lsrs	r6, r3, #16
 8006186:	0c0b      	lsrs	r3, r1, #16
 8006188:	fb02 3306 	mla	r3, r2, r6, r3
 800618c:	b289      	uxth	r1, r1
 800618e:	3001      	adds	r0, #1
 8006190:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006194:	4285      	cmp	r5, r0
 8006196:	f84c 1b04 	str.w	r1, [ip], #4
 800619a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800619e:	dcec      	bgt.n	800617a <__multadd+0x12>
 80061a0:	b30e      	cbz	r6, 80061e6 <__multadd+0x7e>
 80061a2:	68a3      	ldr	r3, [r4, #8]
 80061a4:	42ab      	cmp	r3, r5
 80061a6:	dc19      	bgt.n	80061dc <__multadd+0x74>
 80061a8:	6861      	ldr	r1, [r4, #4]
 80061aa:	4638      	mov	r0, r7
 80061ac:	3101      	adds	r1, #1
 80061ae:	f7ff ff79 	bl	80060a4 <_Balloc>
 80061b2:	4680      	mov	r8, r0
 80061b4:	b928      	cbnz	r0, 80061c2 <__multadd+0x5a>
 80061b6:	4602      	mov	r2, r0
 80061b8:	4b0c      	ldr	r3, [pc, #48]	; (80061ec <__multadd+0x84>)
 80061ba:	480d      	ldr	r0, [pc, #52]	; (80061f0 <__multadd+0x88>)
 80061bc:	21ba      	movs	r1, #186	; 0xba
 80061be:	f000 fd93 	bl	8006ce8 <__assert_func>
 80061c2:	6922      	ldr	r2, [r4, #16]
 80061c4:	3202      	adds	r2, #2
 80061c6:	f104 010c 	add.w	r1, r4, #12
 80061ca:	0092      	lsls	r2, r2, #2
 80061cc:	300c      	adds	r0, #12
 80061ce:	f000 fd7d 	bl	8006ccc <memcpy>
 80061d2:	4621      	mov	r1, r4
 80061d4:	4638      	mov	r0, r7
 80061d6:	f7ff ffa5 	bl	8006124 <_Bfree>
 80061da:	4644      	mov	r4, r8
 80061dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80061e0:	3501      	adds	r5, #1
 80061e2:	615e      	str	r6, [r3, #20]
 80061e4:	6125      	str	r5, [r4, #16]
 80061e6:	4620      	mov	r0, r4
 80061e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061ec:	080075b3 	.word	0x080075b3
 80061f0:	080075c4 	.word	0x080075c4

080061f4 <__hi0bits>:
 80061f4:	0c03      	lsrs	r3, r0, #16
 80061f6:	041b      	lsls	r3, r3, #16
 80061f8:	b9d3      	cbnz	r3, 8006230 <__hi0bits+0x3c>
 80061fa:	0400      	lsls	r0, r0, #16
 80061fc:	2310      	movs	r3, #16
 80061fe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006202:	bf04      	itt	eq
 8006204:	0200      	lsleq	r0, r0, #8
 8006206:	3308      	addeq	r3, #8
 8006208:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800620c:	bf04      	itt	eq
 800620e:	0100      	lsleq	r0, r0, #4
 8006210:	3304      	addeq	r3, #4
 8006212:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006216:	bf04      	itt	eq
 8006218:	0080      	lsleq	r0, r0, #2
 800621a:	3302      	addeq	r3, #2
 800621c:	2800      	cmp	r0, #0
 800621e:	db05      	blt.n	800622c <__hi0bits+0x38>
 8006220:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006224:	f103 0301 	add.w	r3, r3, #1
 8006228:	bf08      	it	eq
 800622a:	2320      	moveq	r3, #32
 800622c:	4618      	mov	r0, r3
 800622e:	4770      	bx	lr
 8006230:	2300      	movs	r3, #0
 8006232:	e7e4      	b.n	80061fe <__hi0bits+0xa>

08006234 <__lo0bits>:
 8006234:	6803      	ldr	r3, [r0, #0]
 8006236:	f013 0207 	ands.w	r2, r3, #7
 800623a:	d00c      	beq.n	8006256 <__lo0bits+0x22>
 800623c:	07d9      	lsls	r1, r3, #31
 800623e:	d422      	bmi.n	8006286 <__lo0bits+0x52>
 8006240:	079a      	lsls	r2, r3, #30
 8006242:	bf49      	itett	mi
 8006244:	085b      	lsrmi	r3, r3, #1
 8006246:	089b      	lsrpl	r3, r3, #2
 8006248:	6003      	strmi	r3, [r0, #0]
 800624a:	2201      	movmi	r2, #1
 800624c:	bf5c      	itt	pl
 800624e:	6003      	strpl	r3, [r0, #0]
 8006250:	2202      	movpl	r2, #2
 8006252:	4610      	mov	r0, r2
 8006254:	4770      	bx	lr
 8006256:	b299      	uxth	r1, r3
 8006258:	b909      	cbnz	r1, 800625e <__lo0bits+0x2a>
 800625a:	0c1b      	lsrs	r3, r3, #16
 800625c:	2210      	movs	r2, #16
 800625e:	b2d9      	uxtb	r1, r3
 8006260:	b909      	cbnz	r1, 8006266 <__lo0bits+0x32>
 8006262:	3208      	adds	r2, #8
 8006264:	0a1b      	lsrs	r3, r3, #8
 8006266:	0719      	lsls	r1, r3, #28
 8006268:	bf04      	itt	eq
 800626a:	091b      	lsreq	r3, r3, #4
 800626c:	3204      	addeq	r2, #4
 800626e:	0799      	lsls	r1, r3, #30
 8006270:	bf04      	itt	eq
 8006272:	089b      	lsreq	r3, r3, #2
 8006274:	3202      	addeq	r2, #2
 8006276:	07d9      	lsls	r1, r3, #31
 8006278:	d403      	bmi.n	8006282 <__lo0bits+0x4e>
 800627a:	085b      	lsrs	r3, r3, #1
 800627c:	f102 0201 	add.w	r2, r2, #1
 8006280:	d003      	beq.n	800628a <__lo0bits+0x56>
 8006282:	6003      	str	r3, [r0, #0]
 8006284:	e7e5      	b.n	8006252 <__lo0bits+0x1e>
 8006286:	2200      	movs	r2, #0
 8006288:	e7e3      	b.n	8006252 <__lo0bits+0x1e>
 800628a:	2220      	movs	r2, #32
 800628c:	e7e1      	b.n	8006252 <__lo0bits+0x1e>
	...

08006290 <__i2b>:
 8006290:	b510      	push	{r4, lr}
 8006292:	460c      	mov	r4, r1
 8006294:	2101      	movs	r1, #1
 8006296:	f7ff ff05 	bl	80060a4 <_Balloc>
 800629a:	4602      	mov	r2, r0
 800629c:	b928      	cbnz	r0, 80062aa <__i2b+0x1a>
 800629e:	4b05      	ldr	r3, [pc, #20]	; (80062b4 <__i2b+0x24>)
 80062a0:	4805      	ldr	r0, [pc, #20]	; (80062b8 <__i2b+0x28>)
 80062a2:	f240 1145 	movw	r1, #325	; 0x145
 80062a6:	f000 fd1f 	bl	8006ce8 <__assert_func>
 80062aa:	2301      	movs	r3, #1
 80062ac:	6144      	str	r4, [r0, #20]
 80062ae:	6103      	str	r3, [r0, #16]
 80062b0:	bd10      	pop	{r4, pc}
 80062b2:	bf00      	nop
 80062b4:	080075b3 	.word	0x080075b3
 80062b8:	080075c4 	.word	0x080075c4

080062bc <__multiply>:
 80062bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062c0:	4691      	mov	r9, r2
 80062c2:	690a      	ldr	r2, [r1, #16]
 80062c4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80062c8:	429a      	cmp	r2, r3
 80062ca:	bfb8      	it	lt
 80062cc:	460b      	movlt	r3, r1
 80062ce:	460c      	mov	r4, r1
 80062d0:	bfbc      	itt	lt
 80062d2:	464c      	movlt	r4, r9
 80062d4:	4699      	movlt	r9, r3
 80062d6:	6927      	ldr	r7, [r4, #16]
 80062d8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80062dc:	68a3      	ldr	r3, [r4, #8]
 80062de:	6861      	ldr	r1, [r4, #4]
 80062e0:	eb07 060a 	add.w	r6, r7, sl
 80062e4:	42b3      	cmp	r3, r6
 80062e6:	b085      	sub	sp, #20
 80062e8:	bfb8      	it	lt
 80062ea:	3101      	addlt	r1, #1
 80062ec:	f7ff feda 	bl	80060a4 <_Balloc>
 80062f0:	b930      	cbnz	r0, 8006300 <__multiply+0x44>
 80062f2:	4602      	mov	r2, r0
 80062f4:	4b44      	ldr	r3, [pc, #272]	; (8006408 <__multiply+0x14c>)
 80062f6:	4845      	ldr	r0, [pc, #276]	; (800640c <__multiply+0x150>)
 80062f8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80062fc:	f000 fcf4 	bl	8006ce8 <__assert_func>
 8006300:	f100 0514 	add.w	r5, r0, #20
 8006304:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006308:	462b      	mov	r3, r5
 800630a:	2200      	movs	r2, #0
 800630c:	4543      	cmp	r3, r8
 800630e:	d321      	bcc.n	8006354 <__multiply+0x98>
 8006310:	f104 0314 	add.w	r3, r4, #20
 8006314:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006318:	f109 0314 	add.w	r3, r9, #20
 800631c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006320:	9202      	str	r2, [sp, #8]
 8006322:	1b3a      	subs	r2, r7, r4
 8006324:	3a15      	subs	r2, #21
 8006326:	f022 0203 	bic.w	r2, r2, #3
 800632a:	3204      	adds	r2, #4
 800632c:	f104 0115 	add.w	r1, r4, #21
 8006330:	428f      	cmp	r7, r1
 8006332:	bf38      	it	cc
 8006334:	2204      	movcc	r2, #4
 8006336:	9201      	str	r2, [sp, #4]
 8006338:	9a02      	ldr	r2, [sp, #8]
 800633a:	9303      	str	r3, [sp, #12]
 800633c:	429a      	cmp	r2, r3
 800633e:	d80c      	bhi.n	800635a <__multiply+0x9e>
 8006340:	2e00      	cmp	r6, #0
 8006342:	dd03      	ble.n	800634c <__multiply+0x90>
 8006344:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006348:	2b00      	cmp	r3, #0
 800634a:	d05b      	beq.n	8006404 <__multiply+0x148>
 800634c:	6106      	str	r6, [r0, #16]
 800634e:	b005      	add	sp, #20
 8006350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006354:	f843 2b04 	str.w	r2, [r3], #4
 8006358:	e7d8      	b.n	800630c <__multiply+0x50>
 800635a:	f8b3 a000 	ldrh.w	sl, [r3]
 800635e:	f1ba 0f00 	cmp.w	sl, #0
 8006362:	d024      	beq.n	80063ae <__multiply+0xf2>
 8006364:	f104 0e14 	add.w	lr, r4, #20
 8006368:	46a9      	mov	r9, r5
 800636a:	f04f 0c00 	mov.w	ip, #0
 800636e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006372:	f8d9 1000 	ldr.w	r1, [r9]
 8006376:	fa1f fb82 	uxth.w	fp, r2
 800637a:	b289      	uxth	r1, r1
 800637c:	fb0a 110b 	mla	r1, sl, fp, r1
 8006380:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006384:	f8d9 2000 	ldr.w	r2, [r9]
 8006388:	4461      	add	r1, ip
 800638a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800638e:	fb0a c20b 	mla	r2, sl, fp, ip
 8006392:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006396:	b289      	uxth	r1, r1
 8006398:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800639c:	4577      	cmp	r7, lr
 800639e:	f849 1b04 	str.w	r1, [r9], #4
 80063a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80063a6:	d8e2      	bhi.n	800636e <__multiply+0xb2>
 80063a8:	9a01      	ldr	r2, [sp, #4]
 80063aa:	f845 c002 	str.w	ip, [r5, r2]
 80063ae:	9a03      	ldr	r2, [sp, #12]
 80063b0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80063b4:	3304      	adds	r3, #4
 80063b6:	f1b9 0f00 	cmp.w	r9, #0
 80063ba:	d021      	beq.n	8006400 <__multiply+0x144>
 80063bc:	6829      	ldr	r1, [r5, #0]
 80063be:	f104 0c14 	add.w	ip, r4, #20
 80063c2:	46ae      	mov	lr, r5
 80063c4:	f04f 0a00 	mov.w	sl, #0
 80063c8:	f8bc b000 	ldrh.w	fp, [ip]
 80063cc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80063d0:	fb09 220b 	mla	r2, r9, fp, r2
 80063d4:	4452      	add	r2, sl
 80063d6:	b289      	uxth	r1, r1
 80063d8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80063dc:	f84e 1b04 	str.w	r1, [lr], #4
 80063e0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80063e4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80063e8:	f8be 1000 	ldrh.w	r1, [lr]
 80063ec:	fb09 110a 	mla	r1, r9, sl, r1
 80063f0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80063f4:	4567      	cmp	r7, ip
 80063f6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80063fa:	d8e5      	bhi.n	80063c8 <__multiply+0x10c>
 80063fc:	9a01      	ldr	r2, [sp, #4]
 80063fe:	50a9      	str	r1, [r5, r2]
 8006400:	3504      	adds	r5, #4
 8006402:	e799      	b.n	8006338 <__multiply+0x7c>
 8006404:	3e01      	subs	r6, #1
 8006406:	e79b      	b.n	8006340 <__multiply+0x84>
 8006408:	080075b3 	.word	0x080075b3
 800640c:	080075c4 	.word	0x080075c4

08006410 <__pow5mult>:
 8006410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006414:	4615      	mov	r5, r2
 8006416:	f012 0203 	ands.w	r2, r2, #3
 800641a:	4606      	mov	r6, r0
 800641c:	460f      	mov	r7, r1
 800641e:	d007      	beq.n	8006430 <__pow5mult+0x20>
 8006420:	4c25      	ldr	r4, [pc, #148]	; (80064b8 <__pow5mult+0xa8>)
 8006422:	3a01      	subs	r2, #1
 8006424:	2300      	movs	r3, #0
 8006426:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800642a:	f7ff fe9d 	bl	8006168 <__multadd>
 800642e:	4607      	mov	r7, r0
 8006430:	10ad      	asrs	r5, r5, #2
 8006432:	d03d      	beq.n	80064b0 <__pow5mult+0xa0>
 8006434:	69f4      	ldr	r4, [r6, #28]
 8006436:	b97c      	cbnz	r4, 8006458 <__pow5mult+0x48>
 8006438:	2010      	movs	r0, #16
 800643a:	f7ff fd7f 	bl	8005f3c <malloc>
 800643e:	4602      	mov	r2, r0
 8006440:	61f0      	str	r0, [r6, #28]
 8006442:	b928      	cbnz	r0, 8006450 <__pow5mult+0x40>
 8006444:	4b1d      	ldr	r3, [pc, #116]	; (80064bc <__pow5mult+0xac>)
 8006446:	481e      	ldr	r0, [pc, #120]	; (80064c0 <__pow5mult+0xb0>)
 8006448:	f240 11b3 	movw	r1, #435	; 0x1b3
 800644c:	f000 fc4c 	bl	8006ce8 <__assert_func>
 8006450:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006454:	6004      	str	r4, [r0, #0]
 8006456:	60c4      	str	r4, [r0, #12]
 8006458:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800645c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006460:	b94c      	cbnz	r4, 8006476 <__pow5mult+0x66>
 8006462:	f240 2171 	movw	r1, #625	; 0x271
 8006466:	4630      	mov	r0, r6
 8006468:	f7ff ff12 	bl	8006290 <__i2b>
 800646c:	2300      	movs	r3, #0
 800646e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006472:	4604      	mov	r4, r0
 8006474:	6003      	str	r3, [r0, #0]
 8006476:	f04f 0900 	mov.w	r9, #0
 800647a:	07eb      	lsls	r3, r5, #31
 800647c:	d50a      	bpl.n	8006494 <__pow5mult+0x84>
 800647e:	4639      	mov	r1, r7
 8006480:	4622      	mov	r2, r4
 8006482:	4630      	mov	r0, r6
 8006484:	f7ff ff1a 	bl	80062bc <__multiply>
 8006488:	4639      	mov	r1, r7
 800648a:	4680      	mov	r8, r0
 800648c:	4630      	mov	r0, r6
 800648e:	f7ff fe49 	bl	8006124 <_Bfree>
 8006492:	4647      	mov	r7, r8
 8006494:	106d      	asrs	r5, r5, #1
 8006496:	d00b      	beq.n	80064b0 <__pow5mult+0xa0>
 8006498:	6820      	ldr	r0, [r4, #0]
 800649a:	b938      	cbnz	r0, 80064ac <__pow5mult+0x9c>
 800649c:	4622      	mov	r2, r4
 800649e:	4621      	mov	r1, r4
 80064a0:	4630      	mov	r0, r6
 80064a2:	f7ff ff0b 	bl	80062bc <__multiply>
 80064a6:	6020      	str	r0, [r4, #0]
 80064a8:	f8c0 9000 	str.w	r9, [r0]
 80064ac:	4604      	mov	r4, r0
 80064ae:	e7e4      	b.n	800647a <__pow5mult+0x6a>
 80064b0:	4638      	mov	r0, r7
 80064b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064b6:	bf00      	nop
 80064b8:	08007710 	.word	0x08007710
 80064bc:	08007544 	.word	0x08007544
 80064c0:	080075c4 	.word	0x080075c4

080064c4 <__lshift>:
 80064c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064c8:	460c      	mov	r4, r1
 80064ca:	6849      	ldr	r1, [r1, #4]
 80064cc:	6923      	ldr	r3, [r4, #16]
 80064ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80064d2:	68a3      	ldr	r3, [r4, #8]
 80064d4:	4607      	mov	r7, r0
 80064d6:	4691      	mov	r9, r2
 80064d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80064dc:	f108 0601 	add.w	r6, r8, #1
 80064e0:	42b3      	cmp	r3, r6
 80064e2:	db0b      	blt.n	80064fc <__lshift+0x38>
 80064e4:	4638      	mov	r0, r7
 80064e6:	f7ff fddd 	bl	80060a4 <_Balloc>
 80064ea:	4605      	mov	r5, r0
 80064ec:	b948      	cbnz	r0, 8006502 <__lshift+0x3e>
 80064ee:	4602      	mov	r2, r0
 80064f0:	4b28      	ldr	r3, [pc, #160]	; (8006594 <__lshift+0xd0>)
 80064f2:	4829      	ldr	r0, [pc, #164]	; (8006598 <__lshift+0xd4>)
 80064f4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80064f8:	f000 fbf6 	bl	8006ce8 <__assert_func>
 80064fc:	3101      	adds	r1, #1
 80064fe:	005b      	lsls	r3, r3, #1
 8006500:	e7ee      	b.n	80064e0 <__lshift+0x1c>
 8006502:	2300      	movs	r3, #0
 8006504:	f100 0114 	add.w	r1, r0, #20
 8006508:	f100 0210 	add.w	r2, r0, #16
 800650c:	4618      	mov	r0, r3
 800650e:	4553      	cmp	r3, sl
 8006510:	db33      	blt.n	800657a <__lshift+0xb6>
 8006512:	6920      	ldr	r0, [r4, #16]
 8006514:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006518:	f104 0314 	add.w	r3, r4, #20
 800651c:	f019 091f 	ands.w	r9, r9, #31
 8006520:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006524:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006528:	d02b      	beq.n	8006582 <__lshift+0xbe>
 800652a:	f1c9 0e20 	rsb	lr, r9, #32
 800652e:	468a      	mov	sl, r1
 8006530:	2200      	movs	r2, #0
 8006532:	6818      	ldr	r0, [r3, #0]
 8006534:	fa00 f009 	lsl.w	r0, r0, r9
 8006538:	4310      	orrs	r0, r2
 800653a:	f84a 0b04 	str.w	r0, [sl], #4
 800653e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006542:	459c      	cmp	ip, r3
 8006544:	fa22 f20e 	lsr.w	r2, r2, lr
 8006548:	d8f3      	bhi.n	8006532 <__lshift+0x6e>
 800654a:	ebac 0304 	sub.w	r3, ip, r4
 800654e:	3b15      	subs	r3, #21
 8006550:	f023 0303 	bic.w	r3, r3, #3
 8006554:	3304      	adds	r3, #4
 8006556:	f104 0015 	add.w	r0, r4, #21
 800655a:	4584      	cmp	ip, r0
 800655c:	bf38      	it	cc
 800655e:	2304      	movcc	r3, #4
 8006560:	50ca      	str	r2, [r1, r3]
 8006562:	b10a      	cbz	r2, 8006568 <__lshift+0xa4>
 8006564:	f108 0602 	add.w	r6, r8, #2
 8006568:	3e01      	subs	r6, #1
 800656a:	4638      	mov	r0, r7
 800656c:	612e      	str	r6, [r5, #16]
 800656e:	4621      	mov	r1, r4
 8006570:	f7ff fdd8 	bl	8006124 <_Bfree>
 8006574:	4628      	mov	r0, r5
 8006576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800657a:	f842 0f04 	str.w	r0, [r2, #4]!
 800657e:	3301      	adds	r3, #1
 8006580:	e7c5      	b.n	800650e <__lshift+0x4a>
 8006582:	3904      	subs	r1, #4
 8006584:	f853 2b04 	ldr.w	r2, [r3], #4
 8006588:	f841 2f04 	str.w	r2, [r1, #4]!
 800658c:	459c      	cmp	ip, r3
 800658e:	d8f9      	bhi.n	8006584 <__lshift+0xc0>
 8006590:	e7ea      	b.n	8006568 <__lshift+0xa4>
 8006592:	bf00      	nop
 8006594:	080075b3 	.word	0x080075b3
 8006598:	080075c4 	.word	0x080075c4

0800659c <__mcmp>:
 800659c:	b530      	push	{r4, r5, lr}
 800659e:	6902      	ldr	r2, [r0, #16]
 80065a0:	690c      	ldr	r4, [r1, #16]
 80065a2:	1b12      	subs	r2, r2, r4
 80065a4:	d10e      	bne.n	80065c4 <__mcmp+0x28>
 80065a6:	f100 0314 	add.w	r3, r0, #20
 80065aa:	3114      	adds	r1, #20
 80065ac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80065b0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80065b4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80065b8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80065bc:	42a5      	cmp	r5, r4
 80065be:	d003      	beq.n	80065c8 <__mcmp+0x2c>
 80065c0:	d305      	bcc.n	80065ce <__mcmp+0x32>
 80065c2:	2201      	movs	r2, #1
 80065c4:	4610      	mov	r0, r2
 80065c6:	bd30      	pop	{r4, r5, pc}
 80065c8:	4283      	cmp	r3, r0
 80065ca:	d3f3      	bcc.n	80065b4 <__mcmp+0x18>
 80065cc:	e7fa      	b.n	80065c4 <__mcmp+0x28>
 80065ce:	f04f 32ff 	mov.w	r2, #4294967295
 80065d2:	e7f7      	b.n	80065c4 <__mcmp+0x28>

080065d4 <__mdiff>:
 80065d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065d8:	460c      	mov	r4, r1
 80065da:	4606      	mov	r6, r0
 80065dc:	4611      	mov	r1, r2
 80065de:	4620      	mov	r0, r4
 80065e0:	4690      	mov	r8, r2
 80065e2:	f7ff ffdb 	bl	800659c <__mcmp>
 80065e6:	1e05      	subs	r5, r0, #0
 80065e8:	d110      	bne.n	800660c <__mdiff+0x38>
 80065ea:	4629      	mov	r1, r5
 80065ec:	4630      	mov	r0, r6
 80065ee:	f7ff fd59 	bl	80060a4 <_Balloc>
 80065f2:	b930      	cbnz	r0, 8006602 <__mdiff+0x2e>
 80065f4:	4b3a      	ldr	r3, [pc, #232]	; (80066e0 <__mdiff+0x10c>)
 80065f6:	4602      	mov	r2, r0
 80065f8:	f240 2137 	movw	r1, #567	; 0x237
 80065fc:	4839      	ldr	r0, [pc, #228]	; (80066e4 <__mdiff+0x110>)
 80065fe:	f000 fb73 	bl	8006ce8 <__assert_func>
 8006602:	2301      	movs	r3, #1
 8006604:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006608:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800660c:	bfa4      	itt	ge
 800660e:	4643      	movge	r3, r8
 8006610:	46a0      	movge	r8, r4
 8006612:	4630      	mov	r0, r6
 8006614:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006618:	bfa6      	itte	ge
 800661a:	461c      	movge	r4, r3
 800661c:	2500      	movge	r5, #0
 800661e:	2501      	movlt	r5, #1
 8006620:	f7ff fd40 	bl	80060a4 <_Balloc>
 8006624:	b920      	cbnz	r0, 8006630 <__mdiff+0x5c>
 8006626:	4b2e      	ldr	r3, [pc, #184]	; (80066e0 <__mdiff+0x10c>)
 8006628:	4602      	mov	r2, r0
 800662a:	f240 2145 	movw	r1, #581	; 0x245
 800662e:	e7e5      	b.n	80065fc <__mdiff+0x28>
 8006630:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006634:	6926      	ldr	r6, [r4, #16]
 8006636:	60c5      	str	r5, [r0, #12]
 8006638:	f104 0914 	add.w	r9, r4, #20
 800663c:	f108 0514 	add.w	r5, r8, #20
 8006640:	f100 0e14 	add.w	lr, r0, #20
 8006644:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006648:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800664c:	f108 0210 	add.w	r2, r8, #16
 8006650:	46f2      	mov	sl, lr
 8006652:	2100      	movs	r1, #0
 8006654:	f859 3b04 	ldr.w	r3, [r9], #4
 8006658:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800665c:	fa11 f88b 	uxtah	r8, r1, fp
 8006660:	b299      	uxth	r1, r3
 8006662:	0c1b      	lsrs	r3, r3, #16
 8006664:	eba8 0801 	sub.w	r8, r8, r1
 8006668:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800666c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006670:	fa1f f888 	uxth.w	r8, r8
 8006674:	1419      	asrs	r1, r3, #16
 8006676:	454e      	cmp	r6, r9
 8006678:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800667c:	f84a 3b04 	str.w	r3, [sl], #4
 8006680:	d8e8      	bhi.n	8006654 <__mdiff+0x80>
 8006682:	1b33      	subs	r3, r6, r4
 8006684:	3b15      	subs	r3, #21
 8006686:	f023 0303 	bic.w	r3, r3, #3
 800668a:	3304      	adds	r3, #4
 800668c:	3415      	adds	r4, #21
 800668e:	42a6      	cmp	r6, r4
 8006690:	bf38      	it	cc
 8006692:	2304      	movcc	r3, #4
 8006694:	441d      	add	r5, r3
 8006696:	4473      	add	r3, lr
 8006698:	469e      	mov	lr, r3
 800669a:	462e      	mov	r6, r5
 800669c:	4566      	cmp	r6, ip
 800669e:	d30e      	bcc.n	80066be <__mdiff+0xea>
 80066a0:	f10c 0203 	add.w	r2, ip, #3
 80066a4:	1b52      	subs	r2, r2, r5
 80066a6:	f022 0203 	bic.w	r2, r2, #3
 80066aa:	3d03      	subs	r5, #3
 80066ac:	45ac      	cmp	ip, r5
 80066ae:	bf38      	it	cc
 80066b0:	2200      	movcc	r2, #0
 80066b2:	4413      	add	r3, r2
 80066b4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80066b8:	b17a      	cbz	r2, 80066da <__mdiff+0x106>
 80066ba:	6107      	str	r7, [r0, #16]
 80066bc:	e7a4      	b.n	8006608 <__mdiff+0x34>
 80066be:	f856 8b04 	ldr.w	r8, [r6], #4
 80066c2:	fa11 f288 	uxtah	r2, r1, r8
 80066c6:	1414      	asrs	r4, r2, #16
 80066c8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80066cc:	b292      	uxth	r2, r2
 80066ce:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80066d2:	f84e 2b04 	str.w	r2, [lr], #4
 80066d6:	1421      	asrs	r1, r4, #16
 80066d8:	e7e0      	b.n	800669c <__mdiff+0xc8>
 80066da:	3f01      	subs	r7, #1
 80066dc:	e7ea      	b.n	80066b4 <__mdiff+0xe0>
 80066de:	bf00      	nop
 80066e0:	080075b3 	.word	0x080075b3
 80066e4:	080075c4 	.word	0x080075c4

080066e8 <__d2b>:
 80066e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80066ec:	460f      	mov	r7, r1
 80066ee:	2101      	movs	r1, #1
 80066f0:	ec59 8b10 	vmov	r8, r9, d0
 80066f4:	4616      	mov	r6, r2
 80066f6:	f7ff fcd5 	bl	80060a4 <_Balloc>
 80066fa:	4604      	mov	r4, r0
 80066fc:	b930      	cbnz	r0, 800670c <__d2b+0x24>
 80066fe:	4602      	mov	r2, r0
 8006700:	4b24      	ldr	r3, [pc, #144]	; (8006794 <__d2b+0xac>)
 8006702:	4825      	ldr	r0, [pc, #148]	; (8006798 <__d2b+0xb0>)
 8006704:	f240 310f 	movw	r1, #783	; 0x30f
 8006708:	f000 faee 	bl	8006ce8 <__assert_func>
 800670c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006710:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006714:	bb2d      	cbnz	r5, 8006762 <__d2b+0x7a>
 8006716:	9301      	str	r3, [sp, #4]
 8006718:	f1b8 0300 	subs.w	r3, r8, #0
 800671c:	d026      	beq.n	800676c <__d2b+0x84>
 800671e:	4668      	mov	r0, sp
 8006720:	9300      	str	r3, [sp, #0]
 8006722:	f7ff fd87 	bl	8006234 <__lo0bits>
 8006726:	e9dd 1200 	ldrd	r1, r2, [sp]
 800672a:	b1e8      	cbz	r0, 8006768 <__d2b+0x80>
 800672c:	f1c0 0320 	rsb	r3, r0, #32
 8006730:	fa02 f303 	lsl.w	r3, r2, r3
 8006734:	430b      	orrs	r3, r1
 8006736:	40c2      	lsrs	r2, r0
 8006738:	6163      	str	r3, [r4, #20]
 800673a:	9201      	str	r2, [sp, #4]
 800673c:	9b01      	ldr	r3, [sp, #4]
 800673e:	61a3      	str	r3, [r4, #24]
 8006740:	2b00      	cmp	r3, #0
 8006742:	bf14      	ite	ne
 8006744:	2202      	movne	r2, #2
 8006746:	2201      	moveq	r2, #1
 8006748:	6122      	str	r2, [r4, #16]
 800674a:	b1bd      	cbz	r5, 800677c <__d2b+0x94>
 800674c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006750:	4405      	add	r5, r0
 8006752:	603d      	str	r5, [r7, #0]
 8006754:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006758:	6030      	str	r0, [r6, #0]
 800675a:	4620      	mov	r0, r4
 800675c:	b003      	add	sp, #12
 800675e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006762:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006766:	e7d6      	b.n	8006716 <__d2b+0x2e>
 8006768:	6161      	str	r1, [r4, #20]
 800676a:	e7e7      	b.n	800673c <__d2b+0x54>
 800676c:	a801      	add	r0, sp, #4
 800676e:	f7ff fd61 	bl	8006234 <__lo0bits>
 8006772:	9b01      	ldr	r3, [sp, #4]
 8006774:	6163      	str	r3, [r4, #20]
 8006776:	3020      	adds	r0, #32
 8006778:	2201      	movs	r2, #1
 800677a:	e7e5      	b.n	8006748 <__d2b+0x60>
 800677c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006780:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006784:	6038      	str	r0, [r7, #0]
 8006786:	6918      	ldr	r0, [r3, #16]
 8006788:	f7ff fd34 	bl	80061f4 <__hi0bits>
 800678c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006790:	e7e2      	b.n	8006758 <__d2b+0x70>
 8006792:	bf00      	nop
 8006794:	080075b3 	.word	0x080075b3
 8006798:	080075c4 	.word	0x080075c4

0800679c <__sfputc_r>:
 800679c:	6893      	ldr	r3, [r2, #8]
 800679e:	3b01      	subs	r3, #1
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	b410      	push	{r4}
 80067a4:	6093      	str	r3, [r2, #8]
 80067a6:	da08      	bge.n	80067ba <__sfputc_r+0x1e>
 80067a8:	6994      	ldr	r4, [r2, #24]
 80067aa:	42a3      	cmp	r3, r4
 80067ac:	db01      	blt.n	80067b2 <__sfputc_r+0x16>
 80067ae:	290a      	cmp	r1, #10
 80067b0:	d103      	bne.n	80067ba <__sfputc_r+0x1e>
 80067b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80067b6:	f000 b9e3 	b.w	8006b80 <__swbuf_r>
 80067ba:	6813      	ldr	r3, [r2, #0]
 80067bc:	1c58      	adds	r0, r3, #1
 80067be:	6010      	str	r0, [r2, #0]
 80067c0:	7019      	strb	r1, [r3, #0]
 80067c2:	4608      	mov	r0, r1
 80067c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80067c8:	4770      	bx	lr

080067ca <__sfputs_r>:
 80067ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067cc:	4606      	mov	r6, r0
 80067ce:	460f      	mov	r7, r1
 80067d0:	4614      	mov	r4, r2
 80067d2:	18d5      	adds	r5, r2, r3
 80067d4:	42ac      	cmp	r4, r5
 80067d6:	d101      	bne.n	80067dc <__sfputs_r+0x12>
 80067d8:	2000      	movs	r0, #0
 80067da:	e007      	b.n	80067ec <__sfputs_r+0x22>
 80067dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067e0:	463a      	mov	r2, r7
 80067e2:	4630      	mov	r0, r6
 80067e4:	f7ff ffda 	bl	800679c <__sfputc_r>
 80067e8:	1c43      	adds	r3, r0, #1
 80067ea:	d1f3      	bne.n	80067d4 <__sfputs_r+0xa>
 80067ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080067f0 <_vfiprintf_r>:
 80067f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067f4:	460d      	mov	r5, r1
 80067f6:	b09d      	sub	sp, #116	; 0x74
 80067f8:	4614      	mov	r4, r2
 80067fa:	4698      	mov	r8, r3
 80067fc:	4606      	mov	r6, r0
 80067fe:	b118      	cbz	r0, 8006808 <_vfiprintf_r+0x18>
 8006800:	6a03      	ldr	r3, [r0, #32]
 8006802:	b90b      	cbnz	r3, 8006808 <_vfiprintf_r+0x18>
 8006804:	f7fe fbc8 	bl	8004f98 <__sinit>
 8006808:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800680a:	07d9      	lsls	r1, r3, #31
 800680c:	d405      	bmi.n	800681a <_vfiprintf_r+0x2a>
 800680e:	89ab      	ldrh	r3, [r5, #12]
 8006810:	059a      	lsls	r2, r3, #22
 8006812:	d402      	bmi.n	800681a <_vfiprintf_r+0x2a>
 8006814:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006816:	f7fe fcc7 	bl	80051a8 <__retarget_lock_acquire_recursive>
 800681a:	89ab      	ldrh	r3, [r5, #12]
 800681c:	071b      	lsls	r3, r3, #28
 800681e:	d501      	bpl.n	8006824 <_vfiprintf_r+0x34>
 8006820:	692b      	ldr	r3, [r5, #16]
 8006822:	b99b      	cbnz	r3, 800684c <_vfiprintf_r+0x5c>
 8006824:	4629      	mov	r1, r5
 8006826:	4630      	mov	r0, r6
 8006828:	f000 f9e8 	bl	8006bfc <__swsetup_r>
 800682c:	b170      	cbz	r0, 800684c <_vfiprintf_r+0x5c>
 800682e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006830:	07dc      	lsls	r4, r3, #31
 8006832:	d504      	bpl.n	800683e <_vfiprintf_r+0x4e>
 8006834:	f04f 30ff 	mov.w	r0, #4294967295
 8006838:	b01d      	add	sp, #116	; 0x74
 800683a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800683e:	89ab      	ldrh	r3, [r5, #12]
 8006840:	0598      	lsls	r0, r3, #22
 8006842:	d4f7      	bmi.n	8006834 <_vfiprintf_r+0x44>
 8006844:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006846:	f7fe fcb0 	bl	80051aa <__retarget_lock_release_recursive>
 800684a:	e7f3      	b.n	8006834 <_vfiprintf_r+0x44>
 800684c:	2300      	movs	r3, #0
 800684e:	9309      	str	r3, [sp, #36]	; 0x24
 8006850:	2320      	movs	r3, #32
 8006852:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006856:	f8cd 800c 	str.w	r8, [sp, #12]
 800685a:	2330      	movs	r3, #48	; 0x30
 800685c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006a10 <_vfiprintf_r+0x220>
 8006860:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006864:	f04f 0901 	mov.w	r9, #1
 8006868:	4623      	mov	r3, r4
 800686a:	469a      	mov	sl, r3
 800686c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006870:	b10a      	cbz	r2, 8006876 <_vfiprintf_r+0x86>
 8006872:	2a25      	cmp	r2, #37	; 0x25
 8006874:	d1f9      	bne.n	800686a <_vfiprintf_r+0x7a>
 8006876:	ebba 0b04 	subs.w	fp, sl, r4
 800687a:	d00b      	beq.n	8006894 <_vfiprintf_r+0xa4>
 800687c:	465b      	mov	r3, fp
 800687e:	4622      	mov	r2, r4
 8006880:	4629      	mov	r1, r5
 8006882:	4630      	mov	r0, r6
 8006884:	f7ff ffa1 	bl	80067ca <__sfputs_r>
 8006888:	3001      	adds	r0, #1
 800688a:	f000 80a9 	beq.w	80069e0 <_vfiprintf_r+0x1f0>
 800688e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006890:	445a      	add	r2, fp
 8006892:	9209      	str	r2, [sp, #36]	; 0x24
 8006894:	f89a 3000 	ldrb.w	r3, [sl]
 8006898:	2b00      	cmp	r3, #0
 800689a:	f000 80a1 	beq.w	80069e0 <_vfiprintf_r+0x1f0>
 800689e:	2300      	movs	r3, #0
 80068a0:	f04f 32ff 	mov.w	r2, #4294967295
 80068a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80068a8:	f10a 0a01 	add.w	sl, sl, #1
 80068ac:	9304      	str	r3, [sp, #16]
 80068ae:	9307      	str	r3, [sp, #28]
 80068b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80068b4:	931a      	str	r3, [sp, #104]	; 0x68
 80068b6:	4654      	mov	r4, sl
 80068b8:	2205      	movs	r2, #5
 80068ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068be:	4854      	ldr	r0, [pc, #336]	; (8006a10 <_vfiprintf_r+0x220>)
 80068c0:	f7f9 fc8e 	bl	80001e0 <memchr>
 80068c4:	9a04      	ldr	r2, [sp, #16]
 80068c6:	b9d8      	cbnz	r0, 8006900 <_vfiprintf_r+0x110>
 80068c8:	06d1      	lsls	r1, r2, #27
 80068ca:	bf44      	itt	mi
 80068cc:	2320      	movmi	r3, #32
 80068ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80068d2:	0713      	lsls	r3, r2, #28
 80068d4:	bf44      	itt	mi
 80068d6:	232b      	movmi	r3, #43	; 0x2b
 80068d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80068dc:	f89a 3000 	ldrb.w	r3, [sl]
 80068e0:	2b2a      	cmp	r3, #42	; 0x2a
 80068e2:	d015      	beq.n	8006910 <_vfiprintf_r+0x120>
 80068e4:	9a07      	ldr	r2, [sp, #28]
 80068e6:	4654      	mov	r4, sl
 80068e8:	2000      	movs	r0, #0
 80068ea:	f04f 0c0a 	mov.w	ip, #10
 80068ee:	4621      	mov	r1, r4
 80068f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80068f4:	3b30      	subs	r3, #48	; 0x30
 80068f6:	2b09      	cmp	r3, #9
 80068f8:	d94d      	bls.n	8006996 <_vfiprintf_r+0x1a6>
 80068fa:	b1b0      	cbz	r0, 800692a <_vfiprintf_r+0x13a>
 80068fc:	9207      	str	r2, [sp, #28]
 80068fe:	e014      	b.n	800692a <_vfiprintf_r+0x13a>
 8006900:	eba0 0308 	sub.w	r3, r0, r8
 8006904:	fa09 f303 	lsl.w	r3, r9, r3
 8006908:	4313      	orrs	r3, r2
 800690a:	9304      	str	r3, [sp, #16]
 800690c:	46a2      	mov	sl, r4
 800690e:	e7d2      	b.n	80068b6 <_vfiprintf_r+0xc6>
 8006910:	9b03      	ldr	r3, [sp, #12]
 8006912:	1d19      	adds	r1, r3, #4
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	9103      	str	r1, [sp, #12]
 8006918:	2b00      	cmp	r3, #0
 800691a:	bfbb      	ittet	lt
 800691c:	425b      	neglt	r3, r3
 800691e:	f042 0202 	orrlt.w	r2, r2, #2
 8006922:	9307      	strge	r3, [sp, #28]
 8006924:	9307      	strlt	r3, [sp, #28]
 8006926:	bfb8      	it	lt
 8006928:	9204      	strlt	r2, [sp, #16]
 800692a:	7823      	ldrb	r3, [r4, #0]
 800692c:	2b2e      	cmp	r3, #46	; 0x2e
 800692e:	d10c      	bne.n	800694a <_vfiprintf_r+0x15a>
 8006930:	7863      	ldrb	r3, [r4, #1]
 8006932:	2b2a      	cmp	r3, #42	; 0x2a
 8006934:	d134      	bne.n	80069a0 <_vfiprintf_r+0x1b0>
 8006936:	9b03      	ldr	r3, [sp, #12]
 8006938:	1d1a      	adds	r2, r3, #4
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	9203      	str	r2, [sp, #12]
 800693e:	2b00      	cmp	r3, #0
 8006940:	bfb8      	it	lt
 8006942:	f04f 33ff 	movlt.w	r3, #4294967295
 8006946:	3402      	adds	r4, #2
 8006948:	9305      	str	r3, [sp, #20]
 800694a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006a20 <_vfiprintf_r+0x230>
 800694e:	7821      	ldrb	r1, [r4, #0]
 8006950:	2203      	movs	r2, #3
 8006952:	4650      	mov	r0, sl
 8006954:	f7f9 fc44 	bl	80001e0 <memchr>
 8006958:	b138      	cbz	r0, 800696a <_vfiprintf_r+0x17a>
 800695a:	9b04      	ldr	r3, [sp, #16]
 800695c:	eba0 000a 	sub.w	r0, r0, sl
 8006960:	2240      	movs	r2, #64	; 0x40
 8006962:	4082      	lsls	r2, r0
 8006964:	4313      	orrs	r3, r2
 8006966:	3401      	adds	r4, #1
 8006968:	9304      	str	r3, [sp, #16]
 800696a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800696e:	4829      	ldr	r0, [pc, #164]	; (8006a14 <_vfiprintf_r+0x224>)
 8006970:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006974:	2206      	movs	r2, #6
 8006976:	f7f9 fc33 	bl	80001e0 <memchr>
 800697a:	2800      	cmp	r0, #0
 800697c:	d03f      	beq.n	80069fe <_vfiprintf_r+0x20e>
 800697e:	4b26      	ldr	r3, [pc, #152]	; (8006a18 <_vfiprintf_r+0x228>)
 8006980:	bb1b      	cbnz	r3, 80069ca <_vfiprintf_r+0x1da>
 8006982:	9b03      	ldr	r3, [sp, #12]
 8006984:	3307      	adds	r3, #7
 8006986:	f023 0307 	bic.w	r3, r3, #7
 800698a:	3308      	adds	r3, #8
 800698c:	9303      	str	r3, [sp, #12]
 800698e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006990:	443b      	add	r3, r7
 8006992:	9309      	str	r3, [sp, #36]	; 0x24
 8006994:	e768      	b.n	8006868 <_vfiprintf_r+0x78>
 8006996:	fb0c 3202 	mla	r2, ip, r2, r3
 800699a:	460c      	mov	r4, r1
 800699c:	2001      	movs	r0, #1
 800699e:	e7a6      	b.n	80068ee <_vfiprintf_r+0xfe>
 80069a0:	2300      	movs	r3, #0
 80069a2:	3401      	adds	r4, #1
 80069a4:	9305      	str	r3, [sp, #20]
 80069a6:	4619      	mov	r1, r3
 80069a8:	f04f 0c0a 	mov.w	ip, #10
 80069ac:	4620      	mov	r0, r4
 80069ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80069b2:	3a30      	subs	r2, #48	; 0x30
 80069b4:	2a09      	cmp	r2, #9
 80069b6:	d903      	bls.n	80069c0 <_vfiprintf_r+0x1d0>
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d0c6      	beq.n	800694a <_vfiprintf_r+0x15a>
 80069bc:	9105      	str	r1, [sp, #20]
 80069be:	e7c4      	b.n	800694a <_vfiprintf_r+0x15a>
 80069c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80069c4:	4604      	mov	r4, r0
 80069c6:	2301      	movs	r3, #1
 80069c8:	e7f0      	b.n	80069ac <_vfiprintf_r+0x1bc>
 80069ca:	ab03      	add	r3, sp, #12
 80069cc:	9300      	str	r3, [sp, #0]
 80069ce:	462a      	mov	r2, r5
 80069d0:	4b12      	ldr	r3, [pc, #72]	; (8006a1c <_vfiprintf_r+0x22c>)
 80069d2:	a904      	add	r1, sp, #16
 80069d4:	4630      	mov	r0, r6
 80069d6:	f7fd fe9f 	bl	8004718 <_printf_float>
 80069da:	4607      	mov	r7, r0
 80069dc:	1c78      	adds	r0, r7, #1
 80069de:	d1d6      	bne.n	800698e <_vfiprintf_r+0x19e>
 80069e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80069e2:	07d9      	lsls	r1, r3, #31
 80069e4:	d405      	bmi.n	80069f2 <_vfiprintf_r+0x202>
 80069e6:	89ab      	ldrh	r3, [r5, #12]
 80069e8:	059a      	lsls	r2, r3, #22
 80069ea:	d402      	bmi.n	80069f2 <_vfiprintf_r+0x202>
 80069ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80069ee:	f7fe fbdc 	bl	80051aa <__retarget_lock_release_recursive>
 80069f2:	89ab      	ldrh	r3, [r5, #12]
 80069f4:	065b      	lsls	r3, r3, #25
 80069f6:	f53f af1d 	bmi.w	8006834 <_vfiprintf_r+0x44>
 80069fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80069fc:	e71c      	b.n	8006838 <_vfiprintf_r+0x48>
 80069fe:	ab03      	add	r3, sp, #12
 8006a00:	9300      	str	r3, [sp, #0]
 8006a02:	462a      	mov	r2, r5
 8006a04:	4b05      	ldr	r3, [pc, #20]	; (8006a1c <_vfiprintf_r+0x22c>)
 8006a06:	a904      	add	r1, sp, #16
 8006a08:	4630      	mov	r0, r6
 8006a0a:	f7fe f929 	bl	8004c60 <_printf_i>
 8006a0e:	e7e4      	b.n	80069da <_vfiprintf_r+0x1ea>
 8006a10:	0800771c 	.word	0x0800771c
 8006a14:	08007726 	.word	0x08007726
 8006a18:	08004719 	.word	0x08004719
 8006a1c:	080067cb 	.word	0x080067cb
 8006a20:	08007722 	.word	0x08007722

08006a24 <__sflush_r>:
 8006a24:	898a      	ldrh	r2, [r1, #12]
 8006a26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a2a:	4605      	mov	r5, r0
 8006a2c:	0710      	lsls	r0, r2, #28
 8006a2e:	460c      	mov	r4, r1
 8006a30:	d458      	bmi.n	8006ae4 <__sflush_r+0xc0>
 8006a32:	684b      	ldr	r3, [r1, #4]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	dc05      	bgt.n	8006a44 <__sflush_r+0x20>
 8006a38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	dc02      	bgt.n	8006a44 <__sflush_r+0x20>
 8006a3e:	2000      	movs	r0, #0
 8006a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a46:	2e00      	cmp	r6, #0
 8006a48:	d0f9      	beq.n	8006a3e <__sflush_r+0x1a>
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006a50:	682f      	ldr	r7, [r5, #0]
 8006a52:	6a21      	ldr	r1, [r4, #32]
 8006a54:	602b      	str	r3, [r5, #0]
 8006a56:	d032      	beq.n	8006abe <__sflush_r+0x9a>
 8006a58:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006a5a:	89a3      	ldrh	r3, [r4, #12]
 8006a5c:	075a      	lsls	r2, r3, #29
 8006a5e:	d505      	bpl.n	8006a6c <__sflush_r+0x48>
 8006a60:	6863      	ldr	r3, [r4, #4]
 8006a62:	1ac0      	subs	r0, r0, r3
 8006a64:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006a66:	b10b      	cbz	r3, 8006a6c <__sflush_r+0x48>
 8006a68:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006a6a:	1ac0      	subs	r0, r0, r3
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	4602      	mov	r2, r0
 8006a70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a72:	6a21      	ldr	r1, [r4, #32]
 8006a74:	4628      	mov	r0, r5
 8006a76:	47b0      	blx	r6
 8006a78:	1c43      	adds	r3, r0, #1
 8006a7a:	89a3      	ldrh	r3, [r4, #12]
 8006a7c:	d106      	bne.n	8006a8c <__sflush_r+0x68>
 8006a7e:	6829      	ldr	r1, [r5, #0]
 8006a80:	291d      	cmp	r1, #29
 8006a82:	d82b      	bhi.n	8006adc <__sflush_r+0xb8>
 8006a84:	4a29      	ldr	r2, [pc, #164]	; (8006b2c <__sflush_r+0x108>)
 8006a86:	410a      	asrs	r2, r1
 8006a88:	07d6      	lsls	r6, r2, #31
 8006a8a:	d427      	bmi.n	8006adc <__sflush_r+0xb8>
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	6062      	str	r2, [r4, #4]
 8006a90:	04d9      	lsls	r1, r3, #19
 8006a92:	6922      	ldr	r2, [r4, #16]
 8006a94:	6022      	str	r2, [r4, #0]
 8006a96:	d504      	bpl.n	8006aa2 <__sflush_r+0x7e>
 8006a98:	1c42      	adds	r2, r0, #1
 8006a9a:	d101      	bne.n	8006aa0 <__sflush_r+0x7c>
 8006a9c:	682b      	ldr	r3, [r5, #0]
 8006a9e:	b903      	cbnz	r3, 8006aa2 <__sflush_r+0x7e>
 8006aa0:	6560      	str	r0, [r4, #84]	; 0x54
 8006aa2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006aa4:	602f      	str	r7, [r5, #0]
 8006aa6:	2900      	cmp	r1, #0
 8006aa8:	d0c9      	beq.n	8006a3e <__sflush_r+0x1a>
 8006aaa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006aae:	4299      	cmp	r1, r3
 8006ab0:	d002      	beq.n	8006ab8 <__sflush_r+0x94>
 8006ab2:	4628      	mov	r0, r5
 8006ab4:	f7ff f9f6 	bl	8005ea4 <_free_r>
 8006ab8:	2000      	movs	r0, #0
 8006aba:	6360      	str	r0, [r4, #52]	; 0x34
 8006abc:	e7c0      	b.n	8006a40 <__sflush_r+0x1c>
 8006abe:	2301      	movs	r3, #1
 8006ac0:	4628      	mov	r0, r5
 8006ac2:	47b0      	blx	r6
 8006ac4:	1c41      	adds	r1, r0, #1
 8006ac6:	d1c8      	bne.n	8006a5a <__sflush_r+0x36>
 8006ac8:	682b      	ldr	r3, [r5, #0]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d0c5      	beq.n	8006a5a <__sflush_r+0x36>
 8006ace:	2b1d      	cmp	r3, #29
 8006ad0:	d001      	beq.n	8006ad6 <__sflush_r+0xb2>
 8006ad2:	2b16      	cmp	r3, #22
 8006ad4:	d101      	bne.n	8006ada <__sflush_r+0xb6>
 8006ad6:	602f      	str	r7, [r5, #0]
 8006ad8:	e7b1      	b.n	8006a3e <__sflush_r+0x1a>
 8006ada:	89a3      	ldrh	r3, [r4, #12]
 8006adc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ae0:	81a3      	strh	r3, [r4, #12]
 8006ae2:	e7ad      	b.n	8006a40 <__sflush_r+0x1c>
 8006ae4:	690f      	ldr	r7, [r1, #16]
 8006ae6:	2f00      	cmp	r7, #0
 8006ae8:	d0a9      	beq.n	8006a3e <__sflush_r+0x1a>
 8006aea:	0793      	lsls	r3, r2, #30
 8006aec:	680e      	ldr	r6, [r1, #0]
 8006aee:	bf08      	it	eq
 8006af0:	694b      	ldreq	r3, [r1, #20]
 8006af2:	600f      	str	r7, [r1, #0]
 8006af4:	bf18      	it	ne
 8006af6:	2300      	movne	r3, #0
 8006af8:	eba6 0807 	sub.w	r8, r6, r7
 8006afc:	608b      	str	r3, [r1, #8]
 8006afe:	f1b8 0f00 	cmp.w	r8, #0
 8006b02:	dd9c      	ble.n	8006a3e <__sflush_r+0x1a>
 8006b04:	6a21      	ldr	r1, [r4, #32]
 8006b06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006b08:	4643      	mov	r3, r8
 8006b0a:	463a      	mov	r2, r7
 8006b0c:	4628      	mov	r0, r5
 8006b0e:	47b0      	blx	r6
 8006b10:	2800      	cmp	r0, #0
 8006b12:	dc06      	bgt.n	8006b22 <__sflush_r+0xfe>
 8006b14:	89a3      	ldrh	r3, [r4, #12]
 8006b16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b1a:	81a3      	strh	r3, [r4, #12]
 8006b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b20:	e78e      	b.n	8006a40 <__sflush_r+0x1c>
 8006b22:	4407      	add	r7, r0
 8006b24:	eba8 0800 	sub.w	r8, r8, r0
 8006b28:	e7e9      	b.n	8006afe <__sflush_r+0xda>
 8006b2a:	bf00      	nop
 8006b2c:	dfbffffe 	.word	0xdfbffffe

08006b30 <_fflush_r>:
 8006b30:	b538      	push	{r3, r4, r5, lr}
 8006b32:	690b      	ldr	r3, [r1, #16]
 8006b34:	4605      	mov	r5, r0
 8006b36:	460c      	mov	r4, r1
 8006b38:	b913      	cbnz	r3, 8006b40 <_fflush_r+0x10>
 8006b3a:	2500      	movs	r5, #0
 8006b3c:	4628      	mov	r0, r5
 8006b3e:	bd38      	pop	{r3, r4, r5, pc}
 8006b40:	b118      	cbz	r0, 8006b4a <_fflush_r+0x1a>
 8006b42:	6a03      	ldr	r3, [r0, #32]
 8006b44:	b90b      	cbnz	r3, 8006b4a <_fflush_r+0x1a>
 8006b46:	f7fe fa27 	bl	8004f98 <__sinit>
 8006b4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d0f3      	beq.n	8006b3a <_fflush_r+0xa>
 8006b52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006b54:	07d0      	lsls	r0, r2, #31
 8006b56:	d404      	bmi.n	8006b62 <_fflush_r+0x32>
 8006b58:	0599      	lsls	r1, r3, #22
 8006b5a:	d402      	bmi.n	8006b62 <_fflush_r+0x32>
 8006b5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b5e:	f7fe fb23 	bl	80051a8 <__retarget_lock_acquire_recursive>
 8006b62:	4628      	mov	r0, r5
 8006b64:	4621      	mov	r1, r4
 8006b66:	f7ff ff5d 	bl	8006a24 <__sflush_r>
 8006b6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b6c:	07da      	lsls	r2, r3, #31
 8006b6e:	4605      	mov	r5, r0
 8006b70:	d4e4      	bmi.n	8006b3c <_fflush_r+0xc>
 8006b72:	89a3      	ldrh	r3, [r4, #12]
 8006b74:	059b      	lsls	r3, r3, #22
 8006b76:	d4e1      	bmi.n	8006b3c <_fflush_r+0xc>
 8006b78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b7a:	f7fe fb16 	bl	80051aa <__retarget_lock_release_recursive>
 8006b7e:	e7dd      	b.n	8006b3c <_fflush_r+0xc>

08006b80 <__swbuf_r>:
 8006b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b82:	460e      	mov	r6, r1
 8006b84:	4614      	mov	r4, r2
 8006b86:	4605      	mov	r5, r0
 8006b88:	b118      	cbz	r0, 8006b92 <__swbuf_r+0x12>
 8006b8a:	6a03      	ldr	r3, [r0, #32]
 8006b8c:	b90b      	cbnz	r3, 8006b92 <__swbuf_r+0x12>
 8006b8e:	f7fe fa03 	bl	8004f98 <__sinit>
 8006b92:	69a3      	ldr	r3, [r4, #24]
 8006b94:	60a3      	str	r3, [r4, #8]
 8006b96:	89a3      	ldrh	r3, [r4, #12]
 8006b98:	071a      	lsls	r2, r3, #28
 8006b9a:	d525      	bpl.n	8006be8 <__swbuf_r+0x68>
 8006b9c:	6923      	ldr	r3, [r4, #16]
 8006b9e:	b31b      	cbz	r3, 8006be8 <__swbuf_r+0x68>
 8006ba0:	6823      	ldr	r3, [r4, #0]
 8006ba2:	6922      	ldr	r2, [r4, #16]
 8006ba4:	1a98      	subs	r0, r3, r2
 8006ba6:	6963      	ldr	r3, [r4, #20]
 8006ba8:	b2f6      	uxtb	r6, r6
 8006baa:	4283      	cmp	r3, r0
 8006bac:	4637      	mov	r7, r6
 8006bae:	dc04      	bgt.n	8006bba <__swbuf_r+0x3a>
 8006bb0:	4621      	mov	r1, r4
 8006bb2:	4628      	mov	r0, r5
 8006bb4:	f7ff ffbc 	bl	8006b30 <_fflush_r>
 8006bb8:	b9e0      	cbnz	r0, 8006bf4 <__swbuf_r+0x74>
 8006bba:	68a3      	ldr	r3, [r4, #8]
 8006bbc:	3b01      	subs	r3, #1
 8006bbe:	60a3      	str	r3, [r4, #8]
 8006bc0:	6823      	ldr	r3, [r4, #0]
 8006bc2:	1c5a      	adds	r2, r3, #1
 8006bc4:	6022      	str	r2, [r4, #0]
 8006bc6:	701e      	strb	r6, [r3, #0]
 8006bc8:	6962      	ldr	r2, [r4, #20]
 8006bca:	1c43      	adds	r3, r0, #1
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d004      	beq.n	8006bda <__swbuf_r+0x5a>
 8006bd0:	89a3      	ldrh	r3, [r4, #12]
 8006bd2:	07db      	lsls	r3, r3, #31
 8006bd4:	d506      	bpl.n	8006be4 <__swbuf_r+0x64>
 8006bd6:	2e0a      	cmp	r6, #10
 8006bd8:	d104      	bne.n	8006be4 <__swbuf_r+0x64>
 8006bda:	4621      	mov	r1, r4
 8006bdc:	4628      	mov	r0, r5
 8006bde:	f7ff ffa7 	bl	8006b30 <_fflush_r>
 8006be2:	b938      	cbnz	r0, 8006bf4 <__swbuf_r+0x74>
 8006be4:	4638      	mov	r0, r7
 8006be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006be8:	4621      	mov	r1, r4
 8006bea:	4628      	mov	r0, r5
 8006bec:	f000 f806 	bl	8006bfc <__swsetup_r>
 8006bf0:	2800      	cmp	r0, #0
 8006bf2:	d0d5      	beq.n	8006ba0 <__swbuf_r+0x20>
 8006bf4:	f04f 37ff 	mov.w	r7, #4294967295
 8006bf8:	e7f4      	b.n	8006be4 <__swbuf_r+0x64>
	...

08006bfc <__swsetup_r>:
 8006bfc:	b538      	push	{r3, r4, r5, lr}
 8006bfe:	4b2a      	ldr	r3, [pc, #168]	; (8006ca8 <__swsetup_r+0xac>)
 8006c00:	4605      	mov	r5, r0
 8006c02:	6818      	ldr	r0, [r3, #0]
 8006c04:	460c      	mov	r4, r1
 8006c06:	b118      	cbz	r0, 8006c10 <__swsetup_r+0x14>
 8006c08:	6a03      	ldr	r3, [r0, #32]
 8006c0a:	b90b      	cbnz	r3, 8006c10 <__swsetup_r+0x14>
 8006c0c:	f7fe f9c4 	bl	8004f98 <__sinit>
 8006c10:	89a3      	ldrh	r3, [r4, #12]
 8006c12:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c16:	0718      	lsls	r0, r3, #28
 8006c18:	d422      	bmi.n	8006c60 <__swsetup_r+0x64>
 8006c1a:	06d9      	lsls	r1, r3, #27
 8006c1c:	d407      	bmi.n	8006c2e <__swsetup_r+0x32>
 8006c1e:	2309      	movs	r3, #9
 8006c20:	602b      	str	r3, [r5, #0]
 8006c22:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006c26:	81a3      	strh	r3, [r4, #12]
 8006c28:	f04f 30ff 	mov.w	r0, #4294967295
 8006c2c:	e034      	b.n	8006c98 <__swsetup_r+0x9c>
 8006c2e:	0758      	lsls	r0, r3, #29
 8006c30:	d512      	bpl.n	8006c58 <__swsetup_r+0x5c>
 8006c32:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c34:	b141      	cbz	r1, 8006c48 <__swsetup_r+0x4c>
 8006c36:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c3a:	4299      	cmp	r1, r3
 8006c3c:	d002      	beq.n	8006c44 <__swsetup_r+0x48>
 8006c3e:	4628      	mov	r0, r5
 8006c40:	f7ff f930 	bl	8005ea4 <_free_r>
 8006c44:	2300      	movs	r3, #0
 8006c46:	6363      	str	r3, [r4, #52]	; 0x34
 8006c48:	89a3      	ldrh	r3, [r4, #12]
 8006c4a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006c4e:	81a3      	strh	r3, [r4, #12]
 8006c50:	2300      	movs	r3, #0
 8006c52:	6063      	str	r3, [r4, #4]
 8006c54:	6923      	ldr	r3, [r4, #16]
 8006c56:	6023      	str	r3, [r4, #0]
 8006c58:	89a3      	ldrh	r3, [r4, #12]
 8006c5a:	f043 0308 	orr.w	r3, r3, #8
 8006c5e:	81a3      	strh	r3, [r4, #12]
 8006c60:	6923      	ldr	r3, [r4, #16]
 8006c62:	b94b      	cbnz	r3, 8006c78 <__swsetup_r+0x7c>
 8006c64:	89a3      	ldrh	r3, [r4, #12]
 8006c66:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006c6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c6e:	d003      	beq.n	8006c78 <__swsetup_r+0x7c>
 8006c70:	4621      	mov	r1, r4
 8006c72:	4628      	mov	r0, r5
 8006c74:	f000 f8c4 	bl	8006e00 <__smakebuf_r>
 8006c78:	89a0      	ldrh	r0, [r4, #12]
 8006c7a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c7e:	f010 0301 	ands.w	r3, r0, #1
 8006c82:	d00a      	beq.n	8006c9a <__swsetup_r+0x9e>
 8006c84:	2300      	movs	r3, #0
 8006c86:	60a3      	str	r3, [r4, #8]
 8006c88:	6963      	ldr	r3, [r4, #20]
 8006c8a:	425b      	negs	r3, r3
 8006c8c:	61a3      	str	r3, [r4, #24]
 8006c8e:	6923      	ldr	r3, [r4, #16]
 8006c90:	b943      	cbnz	r3, 8006ca4 <__swsetup_r+0xa8>
 8006c92:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006c96:	d1c4      	bne.n	8006c22 <__swsetup_r+0x26>
 8006c98:	bd38      	pop	{r3, r4, r5, pc}
 8006c9a:	0781      	lsls	r1, r0, #30
 8006c9c:	bf58      	it	pl
 8006c9e:	6963      	ldrpl	r3, [r4, #20]
 8006ca0:	60a3      	str	r3, [r4, #8]
 8006ca2:	e7f4      	b.n	8006c8e <__swsetup_r+0x92>
 8006ca4:	2000      	movs	r0, #0
 8006ca6:	e7f7      	b.n	8006c98 <__swsetup_r+0x9c>
 8006ca8:	20000064 	.word	0x20000064

08006cac <_sbrk_r>:
 8006cac:	b538      	push	{r3, r4, r5, lr}
 8006cae:	4d06      	ldr	r5, [pc, #24]	; (8006cc8 <_sbrk_r+0x1c>)
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	4604      	mov	r4, r0
 8006cb4:	4608      	mov	r0, r1
 8006cb6:	602b      	str	r3, [r5, #0]
 8006cb8:	f7fb f990 	bl	8001fdc <_sbrk>
 8006cbc:	1c43      	adds	r3, r0, #1
 8006cbe:	d102      	bne.n	8006cc6 <_sbrk_r+0x1a>
 8006cc0:	682b      	ldr	r3, [r5, #0]
 8006cc2:	b103      	cbz	r3, 8006cc6 <_sbrk_r+0x1a>
 8006cc4:	6023      	str	r3, [r4, #0]
 8006cc6:	bd38      	pop	{r3, r4, r5, pc}
 8006cc8:	200003a0 	.word	0x200003a0

08006ccc <memcpy>:
 8006ccc:	440a      	add	r2, r1
 8006cce:	4291      	cmp	r1, r2
 8006cd0:	f100 33ff 	add.w	r3, r0, #4294967295
 8006cd4:	d100      	bne.n	8006cd8 <memcpy+0xc>
 8006cd6:	4770      	bx	lr
 8006cd8:	b510      	push	{r4, lr}
 8006cda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006cde:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ce2:	4291      	cmp	r1, r2
 8006ce4:	d1f9      	bne.n	8006cda <memcpy+0xe>
 8006ce6:	bd10      	pop	{r4, pc}

08006ce8 <__assert_func>:
 8006ce8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006cea:	4614      	mov	r4, r2
 8006cec:	461a      	mov	r2, r3
 8006cee:	4b09      	ldr	r3, [pc, #36]	; (8006d14 <__assert_func+0x2c>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4605      	mov	r5, r0
 8006cf4:	68d8      	ldr	r0, [r3, #12]
 8006cf6:	b14c      	cbz	r4, 8006d0c <__assert_func+0x24>
 8006cf8:	4b07      	ldr	r3, [pc, #28]	; (8006d18 <__assert_func+0x30>)
 8006cfa:	9100      	str	r1, [sp, #0]
 8006cfc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006d00:	4906      	ldr	r1, [pc, #24]	; (8006d1c <__assert_func+0x34>)
 8006d02:	462b      	mov	r3, r5
 8006d04:	f000 f844 	bl	8006d90 <fiprintf>
 8006d08:	f000 f8d8 	bl	8006ebc <abort>
 8006d0c:	4b04      	ldr	r3, [pc, #16]	; (8006d20 <__assert_func+0x38>)
 8006d0e:	461c      	mov	r4, r3
 8006d10:	e7f3      	b.n	8006cfa <__assert_func+0x12>
 8006d12:	bf00      	nop
 8006d14:	20000064 	.word	0x20000064
 8006d18:	08007737 	.word	0x08007737
 8006d1c:	08007744 	.word	0x08007744
 8006d20:	08007772 	.word	0x08007772

08006d24 <_calloc_r>:
 8006d24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d26:	fba1 2402 	umull	r2, r4, r1, r2
 8006d2a:	b94c      	cbnz	r4, 8006d40 <_calloc_r+0x1c>
 8006d2c:	4611      	mov	r1, r2
 8006d2e:	9201      	str	r2, [sp, #4]
 8006d30:	f7ff f92c 	bl	8005f8c <_malloc_r>
 8006d34:	9a01      	ldr	r2, [sp, #4]
 8006d36:	4605      	mov	r5, r0
 8006d38:	b930      	cbnz	r0, 8006d48 <_calloc_r+0x24>
 8006d3a:	4628      	mov	r0, r5
 8006d3c:	b003      	add	sp, #12
 8006d3e:	bd30      	pop	{r4, r5, pc}
 8006d40:	220c      	movs	r2, #12
 8006d42:	6002      	str	r2, [r0, #0]
 8006d44:	2500      	movs	r5, #0
 8006d46:	e7f8      	b.n	8006d3a <_calloc_r+0x16>
 8006d48:	4621      	mov	r1, r4
 8006d4a:	f7fe f9b0 	bl	80050ae <memset>
 8006d4e:	e7f4      	b.n	8006d3a <_calloc_r+0x16>

08006d50 <__ascii_mbtowc>:
 8006d50:	b082      	sub	sp, #8
 8006d52:	b901      	cbnz	r1, 8006d56 <__ascii_mbtowc+0x6>
 8006d54:	a901      	add	r1, sp, #4
 8006d56:	b142      	cbz	r2, 8006d6a <__ascii_mbtowc+0x1a>
 8006d58:	b14b      	cbz	r3, 8006d6e <__ascii_mbtowc+0x1e>
 8006d5a:	7813      	ldrb	r3, [r2, #0]
 8006d5c:	600b      	str	r3, [r1, #0]
 8006d5e:	7812      	ldrb	r2, [r2, #0]
 8006d60:	1e10      	subs	r0, r2, #0
 8006d62:	bf18      	it	ne
 8006d64:	2001      	movne	r0, #1
 8006d66:	b002      	add	sp, #8
 8006d68:	4770      	bx	lr
 8006d6a:	4610      	mov	r0, r2
 8006d6c:	e7fb      	b.n	8006d66 <__ascii_mbtowc+0x16>
 8006d6e:	f06f 0001 	mvn.w	r0, #1
 8006d72:	e7f8      	b.n	8006d66 <__ascii_mbtowc+0x16>

08006d74 <__ascii_wctomb>:
 8006d74:	b149      	cbz	r1, 8006d8a <__ascii_wctomb+0x16>
 8006d76:	2aff      	cmp	r2, #255	; 0xff
 8006d78:	bf85      	ittet	hi
 8006d7a:	238a      	movhi	r3, #138	; 0x8a
 8006d7c:	6003      	strhi	r3, [r0, #0]
 8006d7e:	700a      	strbls	r2, [r1, #0]
 8006d80:	f04f 30ff 	movhi.w	r0, #4294967295
 8006d84:	bf98      	it	ls
 8006d86:	2001      	movls	r0, #1
 8006d88:	4770      	bx	lr
 8006d8a:	4608      	mov	r0, r1
 8006d8c:	4770      	bx	lr
	...

08006d90 <fiprintf>:
 8006d90:	b40e      	push	{r1, r2, r3}
 8006d92:	b503      	push	{r0, r1, lr}
 8006d94:	4601      	mov	r1, r0
 8006d96:	ab03      	add	r3, sp, #12
 8006d98:	4805      	ldr	r0, [pc, #20]	; (8006db0 <fiprintf+0x20>)
 8006d9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d9e:	6800      	ldr	r0, [r0, #0]
 8006da0:	9301      	str	r3, [sp, #4]
 8006da2:	f7ff fd25 	bl	80067f0 <_vfiprintf_r>
 8006da6:	b002      	add	sp, #8
 8006da8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006dac:	b003      	add	sp, #12
 8006dae:	4770      	bx	lr
 8006db0:	20000064 	.word	0x20000064

08006db4 <__swhatbuf_r>:
 8006db4:	b570      	push	{r4, r5, r6, lr}
 8006db6:	460c      	mov	r4, r1
 8006db8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dbc:	2900      	cmp	r1, #0
 8006dbe:	b096      	sub	sp, #88	; 0x58
 8006dc0:	4615      	mov	r5, r2
 8006dc2:	461e      	mov	r6, r3
 8006dc4:	da0d      	bge.n	8006de2 <__swhatbuf_r+0x2e>
 8006dc6:	89a3      	ldrh	r3, [r4, #12]
 8006dc8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006dcc:	f04f 0100 	mov.w	r1, #0
 8006dd0:	bf0c      	ite	eq
 8006dd2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006dd6:	2340      	movne	r3, #64	; 0x40
 8006dd8:	2000      	movs	r0, #0
 8006dda:	6031      	str	r1, [r6, #0]
 8006ddc:	602b      	str	r3, [r5, #0]
 8006dde:	b016      	add	sp, #88	; 0x58
 8006de0:	bd70      	pop	{r4, r5, r6, pc}
 8006de2:	466a      	mov	r2, sp
 8006de4:	f000 f848 	bl	8006e78 <_fstat_r>
 8006de8:	2800      	cmp	r0, #0
 8006dea:	dbec      	blt.n	8006dc6 <__swhatbuf_r+0x12>
 8006dec:	9901      	ldr	r1, [sp, #4]
 8006dee:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006df2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006df6:	4259      	negs	r1, r3
 8006df8:	4159      	adcs	r1, r3
 8006dfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006dfe:	e7eb      	b.n	8006dd8 <__swhatbuf_r+0x24>

08006e00 <__smakebuf_r>:
 8006e00:	898b      	ldrh	r3, [r1, #12]
 8006e02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006e04:	079d      	lsls	r5, r3, #30
 8006e06:	4606      	mov	r6, r0
 8006e08:	460c      	mov	r4, r1
 8006e0a:	d507      	bpl.n	8006e1c <__smakebuf_r+0x1c>
 8006e0c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006e10:	6023      	str	r3, [r4, #0]
 8006e12:	6123      	str	r3, [r4, #16]
 8006e14:	2301      	movs	r3, #1
 8006e16:	6163      	str	r3, [r4, #20]
 8006e18:	b002      	add	sp, #8
 8006e1a:	bd70      	pop	{r4, r5, r6, pc}
 8006e1c:	ab01      	add	r3, sp, #4
 8006e1e:	466a      	mov	r2, sp
 8006e20:	f7ff ffc8 	bl	8006db4 <__swhatbuf_r>
 8006e24:	9900      	ldr	r1, [sp, #0]
 8006e26:	4605      	mov	r5, r0
 8006e28:	4630      	mov	r0, r6
 8006e2a:	f7ff f8af 	bl	8005f8c <_malloc_r>
 8006e2e:	b948      	cbnz	r0, 8006e44 <__smakebuf_r+0x44>
 8006e30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e34:	059a      	lsls	r2, r3, #22
 8006e36:	d4ef      	bmi.n	8006e18 <__smakebuf_r+0x18>
 8006e38:	f023 0303 	bic.w	r3, r3, #3
 8006e3c:	f043 0302 	orr.w	r3, r3, #2
 8006e40:	81a3      	strh	r3, [r4, #12]
 8006e42:	e7e3      	b.n	8006e0c <__smakebuf_r+0xc>
 8006e44:	89a3      	ldrh	r3, [r4, #12]
 8006e46:	6020      	str	r0, [r4, #0]
 8006e48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e4c:	81a3      	strh	r3, [r4, #12]
 8006e4e:	9b00      	ldr	r3, [sp, #0]
 8006e50:	6163      	str	r3, [r4, #20]
 8006e52:	9b01      	ldr	r3, [sp, #4]
 8006e54:	6120      	str	r0, [r4, #16]
 8006e56:	b15b      	cbz	r3, 8006e70 <__smakebuf_r+0x70>
 8006e58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e5c:	4630      	mov	r0, r6
 8006e5e:	f000 f81d 	bl	8006e9c <_isatty_r>
 8006e62:	b128      	cbz	r0, 8006e70 <__smakebuf_r+0x70>
 8006e64:	89a3      	ldrh	r3, [r4, #12]
 8006e66:	f023 0303 	bic.w	r3, r3, #3
 8006e6a:	f043 0301 	orr.w	r3, r3, #1
 8006e6e:	81a3      	strh	r3, [r4, #12]
 8006e70:	89a3      	ldrh	r3, [r4, #12]
 8006e72:	431d      	orrs	r5, r3
 8006e74:	81a5      	strh	r5, [r4, #12]
 8006e76:	e7cf      	b.n	8006e18 <__smakebuf_r+0x18>

08006e78 <_fstat_r>:
 8006e78:	b538      	push	{r3, r4, r5, lr}
 8006e7a:	4d07      	ldr	r5, [pc, #28]	; (8006e98 <_fstat_r+0x20>)
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	4604      	mov	r4, r0
 8006e80:	4608      	mov	r0, r1
 8006e82:	4611      	mov	r1, r2
 8006e84:	602b      	str	r3, [r5, #0]
 8006e86:	f7fb f880 	bl	8001f8a <_fstat>
 8006e8a:	1c43      	adds	r3, r0, #1
 8006e8c:	d102      	bne.n	8006e94 <_fstat_r+0x1c>
 8006e8e:	682b      	ldr	r3, [r5, #0]
 8006e90:	b103      	cbz	r3, 8006e94 <_fstat_r+0x1c>
 8006e92:	6023      	str	r3, [r4, #0]
 8006e94:	bd38      	pop	{r3, r4, r5, pc}
 8006e96:	bf00      	nop
 8006e98:	200003a0 	.word	0x200003a0

08006e9c <_isatty_r>:
 8006e9c:	b538      	push	{r3, r4, r5, lr}
 8006e9e:	4d06      	ldr	r5, [pc, #24]	; (8006eb8 <_isatty_r+0x1c>)
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	4604      	mov	r4, r0
 8006ea4:	4608      	mov	r0, r1
 8006ea6:	602b      	str	r3, [r5, #0]
 8006ea8:	f7fb f87f 	bl	8001faa <_isatty>
 8006eac:	1c43      	adds	r3, r0, #1
 8006eae:	d102      	bne.n	8006eb6 <_isatty_r+0x1a>
 8006eb0:	682b      	ldr	r3, [r5, #0]
 8006eb2:	b103      	cbz	r3, 8006eb6 <_isatty_r+0x1a>
 8006eb4:	6023      	str	r3, [r4, #0]
 8006eb6:	bd38      	pop	{r3, r4, r5, pc}
 8006eb8:	200003a0 	.word	0x200003a0

08006ebc <abort>:
 8006ebc:	b508      	push	{r3, lr}
 8006ebe:	2006      	movs	r0, #6
 8006ec0:	f000 f82c 	bl	8006f1c <raise>
 8006ec4:	2001      	movs	r0, #1
 8006ec6:	f7fb f82d 	bl	8001f24 <_exit>

08006eca <_raise_r>:
 8006eca:	291f      	cmp	r1, #31
 8006ecc:	b538      	push	{r3, r4, r5, lr}
 8006ece:	4604      	mov	r4, r0
 8006ed0:	460d      	mov	r5, r1
 8006ed2:	d904      	bls.n	8006ede <_raise_r+0x14>
 8006ed4:	2316      	movs	r3, #22
 8006ed6:	6003      	str	r3, [r0, #0]
 8006ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8006edc:	bd38      	pop	{r3, r4, r5, pc}
 8006ede:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006ee0:	b112      	cbz	r2, 8006ee8 <_raise_r+0x1e>
 8006ee2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006ee6:	b94b      	cbnz	r3, 8006efc <_raise_r+0x32>
 8006ee8:	4620      	mov	r0, r4
 8006eea:	f000 f831 	bl	8006f50 <_getpid_r>
 8006eee:	462a      	mov	r2, r5
 8006ef0:	4601      	mov	r1, r0
 8006ef2:	4620      	mov	r0, r4
 8006ef4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ef8:	f000 b818 	b.w	8006f2c <_kill_r>
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d00a      	beq.n	8006f16 <_raise_r+0x4c>
 8006f00:	1c59      	adds	r1, r3, #1
 8006f02:	d103      	bne.n	8006f0c <_raise_r+0x42>
 8006f04:	2316      	movs	r3, #22
 8006f06:	6003      	str	r3, [r0, #0]
 8006f08:	2001      	movs	r0, #1
 8006f0a:	e7e7      	b.n	8006edc <_raise_r+0x12>
 8006f0c:	2400      	movs	r4, #0
 8006f0e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006f12:	4628      	mov	r0, r5
 8006f14:	4798      	blx	r3
 8006f16:	2000      	movs	r0, #0
 8006f18:	e7e0      	b.n	8006edc <_raise_r+0x12>
	...

08006f1c <raise>:
 8006f1c:	4b02      	ldr	r3, [pc, #8]	; (8006f28 <raise+0xc>)
 8006f1e:	4601      	mov	r1, r0
 8006f20:	6818      	ldr	r0, [r3, #0]
 8006f22:	f7ff bfd2 	b.w	8006eca <_raise_r>
 8006f26:	bf00      	nop
 8006f28:	20000064 	.word	0x20000064

08006f2c <_kill_r>:
 8006f2c:	b538      	push	{r3, r4, r5, lr}
 8006f2e:	4d07      	ldr	r5, [pc, #28]	; (8006f4c <_kill_r+0x20>)
 8006f30:	2300      	movs	r3, #0
 8006f32:	4604      	mov	r4, r0
 8006f34:	4608      	mov	r0, r1
 8006f36:	4611      	mov	r1, r2
 8006f38:	602b      	str	r3, [r5, #0]
 8006f3a:	f7fa ffe3 	bl	8001f04 <_kill>
 8006f3e:	1c43      	adds	r3, r0, #1
 8006f40:	d102      	bne.n	8006f48 <_kill_r+0x1c>
 8006f42:	682b      	ldr	r3, [r5, #0]
 8006f44:	b103      	cbz	r3, 8006f48 <_kill_r+0x1c>
 8006f46:	6023      	str	r3, [r4, #0]
 8006f48:	bd38      	pop	{r3, r4, r5, pc}
 8006f4a:	bf00      	nop
 8006f4c:	200003a0 	.word	0x200003a0

08006f50 <_getpid_r>:
 8006f50:	f7fa bfd0 	b.w	8001ef4 <_getpid>

08006f54 <sqrt>:
 8006f54:	b538      	push	{r3, r4, r5, lr}
 8006f56:	ed2d 8b02 	vpush	{d8}
 8006f5a:	ec55 4b10 	vmov	r4, r5, d0
 8006f5e:	f000 f9d1 	bl	8007304 <__ieee754_sqrt>
 8006f62:	4622      	mov	r2, r4
 8006f64:	462b      	mov	r3, r5
 8006f66:	4620      	mov	r0, r4
 8006f68:	4629      	mov	r1, r5
 8006f6a:	eeb0 8a40 	vmov.f32	s16, s0
 8006f6e:	eef0 8a60 	vmov.f32	s17, s1
 8006f72:	f7f9 fde3 	bl	8000b3c <__aeabi_dcmpun>
 8006f76:	b990      	cbnz	r0, 8006f9e <sqrt+0x4a>
 8006f78:	2200      	movs	r2, #0
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	4620      	mov	r0, r4
 8006f7e:	4629      	mov	r1, r5
 8006f80:	f7f9 fdb4 	bl	8000aec <__aeabi_dcmplt>
 8006f84:	b158      	cbz	r0, 8006f9e <sqrt+0x4a>
 8006f86:	f7fe f8e5 	bl	8005154 <__errno>
 8006f8a:	2321      	movs	r3, #33	; 0x21
 8006f8c:	6003      	str	r3, [r0, #0]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	2300      	movs	r3, #0
 8006f92:	4610      	mov	r0, r2
 8006f94:	4619      	mov	r1, r3
 8006f96:	f7f9 fc61 	bl	800085c <__aeabi_ddiv>
 8006f9a:	ec41 0b18 	vmov	d8, r0, r1
 8006f9e:	eeb0 0a48 	vmov.f32	s0, s16
 8006fa2:	eef0 0a68 	vmov.f32	s1, s17
 8006fa6:	ecbd 8b02 	vpop	{d8}
 8006faa:	bd38      	pop	{r3, r4, r5, pc}
 8006fac:	0000      	movs	r0, r0
	...

08006fb0 <atan>:
 8006fb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fb4:	ec55 4b10 	vmov	r4, r5, d0
 8006fb8:	4bc3      	ldr	r3, [pc, #780]	; (80072c8 <atan+0x318>)
 8006fba:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006fbe:	429e      	cmp	r6, r3
 8006fc0:	46ab      	mov	fp, r5
 8006fc2:	dd18      	ble.n	8006ff6 <atan+0x46>
 8006fc4:	4bc1      	ldr	r3, [pc, #772]	; (80072cc <atan+0x31c>)
 8006fc6:	429e      	cmp	r6, r3
 8006fc8:	dc01      	bgt.n	8006fce <atan+0x1e>
 8006fca:	d109      	bne.n	8006fe0 <atan+0x30>
 8006fcc:	b144      	cbz	r4, 8006fe0 <atan+0x30>
 8006fce:	4622      	mov	r2, r4
 8006fd0:	462b      	mov	r3, r5
 8006fd2:	4620      	mov	r0, r4
 8006fd4:	4629      	mov	r1, r5
 8006fd6:	f7f9 f961 	bl	800029c <__adddf3>
 8006fda:	4604      	mov	r4, r0
 8006fdc:	460d      	mov	r5, r1
 8006fde:	e006      	b.n	8006fee <atan+0x3e>
 8006fe0:	f1bb 0f00 	cmp.w	fp, #0
 8006fe4:	f300 8131 	bgt.w	800724a <atan+0x29a>
 8006fe8:	a59b      	add	r5, pc, #620	; (adr r5, 8007258 <atan+0x2a8>)
 8006fea:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006fee:	ec45 4b10 	vmov	d0, r4, r5
 8006ff2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ff6:	4bb6      	ldr	r3, [pc, #728]	; (80072d0 <atan+0x320>)
 8006ff8:	429e      	cmp	r6, r3
 8006ffa:	dc14      	bgt.n	8007026 <atan+0x76>
 8006ffc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8007000:	429e      	cmp	r6, r3
 8007002:	dc0d      	bgt.n	8007020 <atan+0x70>
 8007004:	a396      	add	r3, pc, #600	; (adr r3, 8007260 <atan+0x2b0>)
 8007006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800700a:	ee10 0a10 	vmov	r0, s0
 800700e:	4629      	mov	r1, r5
 8007010:	f7f9 f944 	bl	800029c <__adddf3>
 8007014:	4baf      	ldr	r3, [pc, #700]	; (80072d4 <atan+0x324>)
 8007016:	2200      	movs	r2, #0
 8007018:	f7f9 fd86 	bl	8000b28 <__aeabi_dcmpgt>
 800701c:	2800      	cmp	r0, #0
 800701e:	d1e6      	bne.n	8006fee <atan+0x3e>
 8007020:	f04f 3aff 	mov.w	sl, #4294967295
 8007024:	e02b      	b.n	800707e <atan+0xce>
 8007026:	f000 f963 	bl	80072f0 <fabs>
 800702a:	4bab      	ldr	r3, [pc, #684]	; (80072d8 <atan+0x328>)
 800702c:	429e      	cmp	r6, r3
 800702e:	ec55 4b10 	vmov	r4, r5, d0
 8007032:	f300 80bf 	bgt.w	80071b4 <atan+0x204>
 8007036:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800703a:	429e      	cmp	r6, r3
 800703c:	f300 80a0 	bgt.w	8007180 <atan+0x1d0>
 8007040:	ee10 2a10 	vmov	r2, s0
 8007044:	ee10 0a10 	vmov	r0, s0
 8007048:	462b      	mov	r3, r5
 800704a:	4629      	mov	r1, r5
 800704c:	f7f9 f926 	bl	800029c <__adddf3>
 8007050:	4ba0      	ldr	r3, [pc, #640]	; (80072d4 <atan+0x324>)
 8007052:	2200      	movs	r2, #0
 8007054:	f7f9 f920 	bl	8000298 <__aeabi_dsub>
 8007058:	2200      	movs	r2, #0
 800705a:	4606      	mov	r6, r0
 800705c:	460f      	mov	r7, r1
 800705e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007062:	4620      	mov	r0, r4
 8007064:	4629      	mov	r1, r5
 8007066:	f7f9 f919 	bl	800029c <__adddf3>
 800706a:	4602      	mov	r2, r0
 800706c:	460b      	mov	r3, r1
 800706e:	4630      	mov	r0, r6
 8007070:	4639      	mov	r1, r7
 8007072:	f7f9 fbf3 	bl	800085c <__aeabi_ddiv>
 8007076:	f04f 0a00 	mov.w	sl, #0
 800707a:	4604      	mov	r4, r0
 800707c:	460d      	mov	r5, r1
 800707e:	4622      	mov	r2, r4
 8007080:	462b      	mov	r3, r5
 8007082:	4620      	mov	r0, r4
 8007084:	4629      	mov	r1, r5
 8007086:	f7f9 fabf 	bl	8000608 <__aeabi_dmul>
 800708a:	4602      	mov	r2, r0
 800708c:	460b      	mov	r3, r1
 800708e:	4680      	mov	r8, r0
 8007090:	4689      	mov	r9, r1
 8007092:	f7f9 fab9 	bl	8000608 <__aeabi_dmul>
 8007096:	a374      	add	r3, pc, #464	; (adr r3, 8007268 <atan+0x2b8>)
 8007098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800709c:	4606      	mov	r6, r0
 800709e:	460f      	mov	r7, r1
 80070a0:	f7f9 fab2 	bl	8000608 <__aeabi_dmul>
 80070a4:	a372      	add	r3, pc, #456	; (adr r3, 8007270 <atan+0x2c0>)
 80070a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070aa:	f7f9 f8f7 	bl	800029c <__adddf3>
 80070ae:	4632      	mov	r2, r6
 80070b0:	463b      	mov	r3, r7
 80070b2:	f7f9 faa9 	bl	8000608 <__aeabi_dmul>
 80070b6:	a370      	add	r3, pc, #448	; (adr r3, 8007278 <atan+0x2c8>)
 80070b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070bc:	f7f9 f8ee 	bl	800029c <__adddf3>
 80070c0:	4632      	mov	r2, r6
 80070c2:	463b      	mov	r3, r7
 80070c4:	f7f9 faa0 	bl	8000608 <__aeabi_dmul>
 80070c8:	a36d      	add	r3, pc, #436	; (adr r3, 8007280 <atan+0x2d0>)
 80070ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ce:	f7f9 f8e5 	bl	800029c <__adddf3>
 80070d2:	4632      	mov	r2, r6
 80070d4:	463b      	mov	r3, r7
 80070d6:	f7f9 fa97 	bl	8000608 <__aeabi_dmul>
 80070da:	a36b      	add	r3, pc, #428	; (adr r3, 8007288 <atan+0x2d8>)
 80070dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e0:	f7f9 f8dc 	bl	800029c <__adddf3>
 80070e4:	4632      	mov	r2, r6
 80070e6:	463b      	mov	r3, r7
 80070e8:	f7f9 fa8e 	bl	8000608 <__aeabi_dmul>
 80070ec:	a368      	add	r3, pc, #416	; (adr r3, 8007290 <atan+0x2e0>)
 80070ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f2:	f7f9 f8d3 	bl	800029c <__adddf3>
 80070f6:	4642      	mov	r2, r8
 80070f8:	464b      	mov	r3, r9
 80070fa:	f7f9 fa85 	bl	8000608 <__aeabi_dmul>
 80070fe:	a366      	add	r3, pc, #408	; (adr r3, 8007298 <atan+0x2e8>)
 8007100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007104:	4680      	mov	r8, r0
 8007106:	4689      	mov	r9, r1
 8007108:	4630      	mov	r0, r6
 800710a:	4639      	mov	r1, r7
 800710c:	f7f9 fa7c 	bl	8000608 <__aeabi_dmul>
 8007110:	a363      	add	r3, pc, #396	; (adr r3, 80072a0 <atan+0x2f0>)
 8007112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007116:	f7f9 f8bf 	bl	8000298 <__aeabi_dsub>
 800711a:	4632      	mov	r2, r6
 800711c:	463b      	mov	r3, r7
 800711e:	f7f9 fa73 	bl	8000608 <__aeabi_dmul>
 8007122:	a361      	add	r3, pc, #388	; (adr r3, 80072a8 <atan+0x2f8>)
 8007124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007128:	f7f9 f8b6 	bl	8000298 <__aeabi_dsub>
 800712c:	4632      	mov	r2, r6
 800712e:	463b      	mov	r3, r7
 8007130:	f7f9 fa6a 	bl	8000608 <__aeabi_dmul>
 8007134:	a35e      	add	r3, pc, #376	; (adr r3, 80072b0 <atan+0x300>)
 8007136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800713a:	f7f9 f8ad 	bl	8000298 <__aeabi_dsub>
 800713e:	4632      	mov	r2, r6
 8007140:	463b      	mov	r3, r7
 8007142:	f7f9 fa61 	bl	8000608 <__aeabi_dmul>
 8007146:	a35c      	add	r3, pc, #368	; (adr r3, 80072b8 <atan+0x308>)
 8007148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800714c:	f7f9 f8a4 	bl	8000298 <__aeabi_dsub>
 8007150:	4632      	mov	r2, r6
 8007152:	463b      	mov	r3, r7
 8007154:	f7f9 fa58 	bl	8000608 <__aeabi_dmul>
 8007158:	4602      	mov	r2, r0
 800715a:	460b      	mov	r3, r1
 800715c:	4640      	mov	r0, r8
 800715e:	4649      	mov	r1, r9
 8007160:	f7f9 f89c 	bl	800029c <__adddf3>
 8007164:	4622      	mov	r2, r4
 8007166:	462b      	mov	r3, r5
 8007168:	f7f9 fa4e 	bl	8000608 <__aeabi_dmul>
 800716c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8007170:	4602      	mov	r2, r0
 8007172:	460b      	mov	r3, r1
 8007174:	d14b      	bne.n	800720e <atan+0x25e>
 8007176:	4620      	mov	r0, r4
 8007178:	4629      	mov	r1, r5
 800717a:	f7f9 f88d 	bl	8000298 <__aeabi_dsub>
 800717e:	e72c      	b.n	8006fda <atan+0x2a>
 8007180:	ee10 0a10 	vmov	r0, s0
 8007184:	4b53      	ldr	r3, [pc, #332]	; (80072d4 <atan+0x324>)
 8007186:	2200      	movs	r2, #0
 8007188:	4629      	mov	r1, r5
 800718a:	f7f9 f885 	bl	8000298 <__aeabi_dsub>
 800718e:	4b51      	ldr	r3, [pc, #324]	; (80072d4 <atan+0x324>)
 8007190:	4606      	mov	r6, r0
 8007192:	460f      	mov	r7, r1
 8007194:	2200      	movs	r2, #0
 8007196:	4620      	mov	r0, r4
 8007198:	4629      	mov	r1, r5
 800719a:	f7f9 f87f 	bl	800029c <__adddf3>
 800719e:	4602      	mov	r2, r0
 80071a0:	460b      	mov	r3, r1
 80071a2:	4630      	mov	r0, r6
 80071a4:	4639      	mov	r1, r7
 80071a6:	f7f9 fb59 	bl	800085c <__aeabi_ddiv>
 80071aa:	f04f 0a01 	mov.w	sl, #1
 80071ae:	4604      	mov	r4, r0
 80071b0:	460d      	mov	r5, r1
 80071b2:	e764      	b.n	800707e <atan+0xce>
 80071b4:	4b49      	ldr	r3, [pc, #292]	; (80072dc <atan+0x32c>)
 80071b6:	429e      	cmp	r6, r3
 80071b8:	da1d      	bge.n	80071f6 <atan+0x246>
 80071ba:	ee10 0a10 	vmov	r0, s0
 80071be:	4b48      	ldr	r3, [pc, #288]	; (80072e0 <atan+0x330>)
 80071c0:	2200      	movs	r2, #0
 80071c2:	4629      	mov	r1, r5
 80071c4:	f7f9 f868 	bl	8000298 <__aeabi_dsub>
 80071c8:	4b45      	ldr	r3, [pc, #276]	; (80072e0 <atan+0x330>)
 80071ca:	4606      	mov	r6, r0
 80071cc:	460f      	mov	r7, r1
 80071ce:	2200      	movs	r2, #0
 80071d0:	4620      	mov	r0, r4
 80071d2:	4629      	mov	r1, r5
 80071d4:	f7f9 fa18 	bl	8000608 <__aeabi_dmul>
 80071d8:	4b3e      	ldr	r3, [pc, #248]	; (80072d4 <atan+0x324>)
 80071da:	2200      	movs	r2, #0
 80071dc:	f7f9 f85e 	bl	800029c <__adddf3>
 80071e0:	4602      	mov	r2, r0
 80071e2:	460b      	mov	r3, r1
 80071e4:	4630      	mov	r0, r6
 80071e6:	4639      	mov	r1, r7
 80071e8:	f7f9 fb38 	bl	800085c <__aeabi_ddiv>
 80071ec:	f04f 0a02 	mov.w	sl, #2
 80071f0:	4604      	mov	r4, r0
 80071f2:	460d      	mov	r5, r1
 80071f4:	e743      	b.n	800707e <atan+0xce>
 80071f6:	462b      	mov	r3, r5
 80071f8:	ee10 2a10 	vmov	r2, s0
 80071fc:	4939      	ldr	r1, [pc, #228]	; (80072e4 <atan+0x334>)
 80071fe:	2000      	movs	r0, #0
 8007200:	f7f9 fb2c 	bl	800085c <__aeabi_ddiv>
 8007204:	f04f 0a03 	mov.w	sl, #3
 8007208:	4604      	mov	r4, r0
 800720a:	460d      	mov	r5, r1
 800720c:	e737      	b.n	800707e <atan+0xce>
 800720e:	4b36      	ldr	r3, [pc, #216]	; (80072e8 <atan+0x338>)
 8007210:	4e36      	ldr	r6, [pc, #216]	; (80072ec <atan+0x33c>)
 8007212:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800721a:	f7f9 f83d 	bl	8000298 <__aeabi_dsub>
 800721e:	4622      	mov	r2, r4
 8007220:	462b      	mov	r3, r5
 8007222:	f7f9 f839 	bl	8000298 <__aeabi_dsub>
 8007226:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800722a:	4602      	mov	r2, r0
 800722c:	460b      	mov	r3, r1
 800722e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8007232:	f7f9 f831 	bl	8000298 <__aeabi_dsub>
 8007236:	f1bb 0f00 	cmp.w	fp, #0
 800723a:	4604      	mov	r4, r0
 800723c:	460d      	mov	r5, r1
 800723e:	f6bf aed6 	bge.w	8006fee <atan+0x3e>
 8007242:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007246:	461d      	mov	r5, r3
 8007248:	e6d1      	b.n	8006fee <atan+0x3e>
 800724a:	a51d      	add	r5, pc, #116	; (adr r5, 80072c0 <atan+0x310>)
 800724c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007250:	e6cd      	b.n	8006fee <atan+0x3e>
 8007252:	bf00      	nop
 8007254:	f3af 8000 	nop.w
 8007258:	54442d18 	.word	0x54442d18
 800725c:	bff921fb 	.word	0xbff921fb
 8007260:	8800759c 	.word	0x8800759c
 8007264:	7e37e43c 	.word	0x7e37e43c
 8007268:	e322da11 	.word	0xe322da11
 800726c:	3f90ad3a 	.word	0x3f90ad3a
 8007270:	24760deb 	.word	0x24760deb
 8007274:	3fa97b4b 	.word	0x3fa97b4b
 8007278:	a0d03d51 	.word	0xa0d03d51
 800727c:	3fb10d66 	.word	0x3fb10d66
 8007280:	c54c206e 	.word	0xc54c206e
 8007284:	3fb745cd 	.word	0x3fb745cd
 8007288:	920083ff 	.word	0x920083ff
 800728c:	3fc24924 	.word	0x3fc24924
 8007290:	5555550d 	.word	0x5555550d
 8007294:	3fd55555 	.word	0x3fd55555
 8007298:	2c6a6c2f 	.word	0x2c6a6c2f
 800729c:	bfa2b444 	.word	0xbfa2b444
 80072a0:	52defd9a 	.word	0x52defd9a
 80072a4:	3fadde2d 	.word	0x3fadde2d
 80072a8:	af749a6d 	.word	0xaf749a6d
 80072ac:	3fb3b0f2 	.word	0x3fb3b0f2
 80072b0:	fe231671 	.word	0xfe231671
 80072b4:	3fbc71c6 	.word	0x3fbc71c6
 80072b8:	9998ebc4 	.word	0x9998ebc4
 80072bc:	3fc99999 	.word	0x3fc99999
 80072c0:	54442d18 	.word	0x54442d18
 80072c4:	3ff921fb 	.word	0x3ff921fb
 80072c8:	440fffff 	.word	0x440fffff
 80072cc:	7ff00000 	.word	0x7ff00000
 80072d0:	3fdbffff 	.word	0x3fdbffff
 80072d4:	3ff00000 	.word	0x3ff00000
 80072d8:	3ff2ffff 	.word	0x3ff2ffff
 80072dc:	40038000 	.word	0x40038000
 80072e0:	3ff80000 	.word	0x3ff80000
 80072e4:	bff00000 	.word	0xbff00000
 80072e8:	08007898 	.word	0x08007898
 80072ec:	08007878 	.word	0x08007878

080072f0 <fabs>:
 80072f0:	ec51 0b10 	vmov	r0, r1, d0
 80072f4:	ee10 2a10 	vmov	r2, s0
 80072f8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80072fc:	ec43 2b10 	vmov	d0, r2, r3
 8007300:	4770      	bx	lr
	...

08007304 <__ieee754_sqrt>:
 8007304:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007308:	ec55 4b10 	vmov	r4, r5, d0
 800730c:	4e67      	ldr	r6, [pc, #412]	; (80074ac <__ieee754_sqrt+0x1a8>)
 800730e:	43ae      	bics	r6, r5
 8007310:	ee10 0a10 	vmov	r0, s0
 8007314:	ee10 2a10 	vmov	r2, s0
 8007318:	4629      	mov	r1, r5
 800731a:	462b      	mov	r3, r5
 800731c:	d10d      	bne.n	800733a <__ieee754_sqrt+0x36>
 800731e:	f7f9 f973 	bl	8000608 <__aeabi_dmul>
 8007322:	4602      	mov	r2, r0
 8007324:	460b      	mov	r3, r1
 8007326:	4620      	mov	r0, r4
 8007328:	4629      	mov	r1, r5
 800732a:	f7f8 ffb7 	bl	800029c <__adddf3>
 800732e:	4604      	mov	r4, r0
 8007330:	460d      	mov	r5, r1
 8007332:	ec45 4b10 	vmov	d0, r4, r5
 8007336:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800733a:	2d00      	cmp	r5, #0
 800733c:	dc0b      	bgt.n	8007356 <__ieee754_sqrt+0x52>
 800733e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007342:	4326      	orrs	r6, r4
 8007344:	d0f5      	beq.n	8007332 <__ieee754_sqrt+0x2e>
 8007346:	b135      	cbz	r5, 8007356 <__ieee754_sqrt+0x52>
 8007348:	f7f8 ffa6 	bl	8000298 <__aeabi_dsub>
 800734c:	4602      	mov	r2, r0
 800734e:	460b      	mov	r3, r1
 8007350:	f7f9 fa84 	bl	800085c <__aeabi_ddiv>
 8007354:	e7eb      	b.n	800732e <__ieee754_sqrt+0x2a>
 8007356:	1509      	asrs	r1, r1, #20
 8007358:	f000 808d 	beq.w	8007476 <__ieee754_sqrt+0x172>
 800735c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007360:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8007364:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007368:	07c9      	lsls	r1, r1, #31
 800736a:	bf5c      	itt	pl
 800736c:	005b      	lslpl	r3, r3, #1
 800736e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8007372:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007376:	bf58      	it	pl
 8007378:	0052      	lslpl	r2, r2, #1
 800737a:	2500      	movs	r5, #0
 800737c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8007380:	1076      	asrs	r6, r6, #1
 8007382:	0052      	lsls	r2, r2, #1
 8007384:	f04f 0e16 	mov.w	lr, #22
 8007388:	46ac      	mov	ip, r5
 800738a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800738e:	eb0c 0001 	add.w	r0, ip, r1
 8007392:	4298      	cmp	r0, r3
 8007394:	bfde      	ittt	le
 8007396:	1a1b      	suble	r3, r3, r0
 8007398:	eb00 0c01 	addle.w	ip, r0, r1
 800739c:	186d      	addle	r5, r5, r1
 800739e:	005b      	lsls	r3, r3, #1
 80073a0:	f1be 0e01 	subs.w	lr, lr, #1
 80073a4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80073a8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80073ac:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80073b0:	d1ed      	bne.n	800738e <__ieee754_sqrt+0x8a>
 80073b2:	4674      	mov	r4, lr
 80073b4:	2720      	movs	r7, #32
 80073b6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80073ba:	4563      	cmp	r3, ip
 80073bc:	eb01 000e 	add.w	r0, r1, lr
 80073c0:	dc02      	bgt.n	80073c8 <__ieee754_sqrt+0xc4>
 80073c2:	d113      	bne.n	80073ec <__ieee754_sqrt+0xe8>
 80073c4:	4290      	cmp	r0, r2
 80073c6:	d811      	bhi.n	80073ec <__ieee754_sqrt+0xe8>
 80073c8:	2800      	cmp	r0, #0
 80073ca:	eb00 0e01 	add.w	lr, r0, r1
 80073ce:	da57      	bge.n	8007480 <__ieee754_sqrt+0x17c>
 80073d0:	f1be 0f00 	cmp.w	lr, #0
 80073d4:	db54      	blt.n	8007480 <__ieee754_sqrt+0x17c>
 80073d6:	f10c 0801 	add.w	r8, ip, #1
 80073da:	eba3 030c 	sub.w	r3, r3, ip
 80073de:	4290      	cmp	r0, r2
 80073e0:	bf88      	it	hi
 80073e2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80073e6:	1a12      	subs	r2, r2, r0
 80073e8:	440c      	add	r4, r1
 80073ea:	46c4      	mov	ip, r8
 80073ec:	005b      	lsls	r3, r3, #1
 80073ee:	3f01      	subs	r7, #1
 80073f0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80073f4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80073f8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80073fc:	d1dd      	bne.n	80073ba <__ieee754_sqrt+0xb6>
 80073fe:	4313      	orrs	r3, r2
 8007400:	d01b      	beq.n	800743a <__ieee754_sqrt+0x136>
 8007402:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 80074b0 <__ieee754_sqrt+0x1ac>
 8007406:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 80074b4 <__ieee754_sqrt+0x1b0>
 800740a:	e9da 0100 	ldrd	r0, r1, [sl]
 800740e:	e9db 2300 	ldrd	r2, r3, [fp]
 8007412:	f7f8 ff41 	bl	8000298 <__aeabi_dsub>
 8007416:	e9da 8900 	ldrd	r8, r9, [sl]
 800741a:	4602      	mov	r2, r0
 800741c:	460b      	mov	r3, r1
 800741e:	4640      	mov	r0, r8
 8007420:	4649      	mov	r1, r9
 8007422:	f7f9 fb6d 	bl	8000b00 <__aeabi_dcmple>
 8007426:	b140      	cbz	r0, 800743a <__ieee754_sqrt+0x136>
 8007428:	f1b4 3fff 	cmp.w	r4, #4294967295
 800742c:	e9da 0100 	ldrd	r0, r1, [sl]
 8007430:	e9db 2300 	ldrd	r2, r3, [fp]
 8007434:	d126      	bne.n	8007484 <__ieee754_sqrt+0x180>
 8007436:	3501      	adds	r5, #1
 8007438:	463c      	mov	r4, r7
 800743a:	106a      	asrs	r2, r5, #1
 800743c:	0863      	lsrs	r3, r4, #1
 800743e:	07e9      	lsls	r1, r5, #31
 8007440:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8007444:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8007448:	bf48      	it	mi
 800744a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800744e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8007452:	461c      	mov	r4, r3
 8007454:	e76d      	b.n	8007332 <__ieee754_sqrt+0x2e>
 8007456:	0ad3      	lsrs	r3, r2, #11
 8007458:	3815      	subs	r0, #21
 800745a:	0552      	lsls	r2, r2, #21
 800745c:	2b00      	cmp	r3, #0
 800745e:	d0fa      	beq.n	8007456 <__ieee754_sqrt+0x152>
 8007460:	02dc      	lsls	r4, r3, #11
 8007462:	d50a      	bpl.n	800747a <__ieee754_sqrt+0x176>
 8007464:	f1c1 0420 	rsb	r4, r1, #32
 8007468:	fa22 f404 	lsr.w	r4, r2, r4
 800746c:	1e4d      	subs	r5, r1, #1
 800746e:	408a      	lsls	r2, r1
 8007470:	4323      	orrs	r3, r4
 8007472:	1b41      	subs	r1, r0, r5
 8007474:	e772      	b.n	800735c <__ieee754_sqrt+0x58>
 8007476:	4608      	mov	r0, r1
 8007478:	e7f0      	b.n	800745c <__ieee754_sqrt+0x158>
 800747a:	005b      	lsls	r3, r3, #1
 800747c:	3101      	adds	r1, #1
 800747e:	e7ef      	b.n	8007460 <__ieee754_sqrt+0x15c>
 8007480:	46e0      	mov	r8, ip
 8007482:	e7aa      	b.n	80073da <__ieee754_sqrt+0xd6>
 8007484:	f7f8 ff0a 	bl	800029c <__adddf3>
 8007488:	e9da 8900 	ldrd	r8, r9, [sl]
 800748c:	4602      	mov	r2, r0
 800748e:	460b      	mov	r3, r1
 8007490:	4640      	mov	r0, r8
 8007492:	4649      	mov	r1, r9
 8007494:	f7f9 fb2a 	bl	8000aec <__aeabi_dcmplt>
 8007498:	b120      	cbz	r0, 80074a4 <__ieee754_sqrt+0x1a0>
 800749a:	1ca0      	adds	r0, r4, #2
 800749c:	bf08      	it	eq
 800749e:	3501      	addeq	r5, #1
 80074a0:	3402      	adds	r4, #2
 80074a2:	e7ca      	b.n	800743a <__ieee754_sqrt+0x136>
 80074a4:	3401      	adds	r4, #1
 80074a6:	f024 0401 	bic.w	r4, r4, #1
 80074aa:	e7c6      	b.n	800743a <__ieee754_sqrt+0x136>
 80074ac:	7ff00000 	.word	0x7ff00000
 80074b0:	200001d8 	.word	0x200001d8
 80074b4:	200001e0 	.word	0x200001e0

080074b8 <_init>:
 80074b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074ba:	bf00      	nop
 80074bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074be:	bc08      	pop	{r3}
 80074c0:	469e      	mov	lr, r3
 80074c2:	4770      	bx	lr

080074c4 <_fini>:
 80074c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074c6:	bf00      	nop
 80074c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074ca:	bc08      	pop	{r3}
 80074cc:	469e      	mov	lr, r3
 80074ce:	4770      	bx	lr
