
STM32F4_Balancing_Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005da0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e4  08005f40  08005f40  00015f40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006324  08006324  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08006324  08006324  00016324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800632c  0800632c  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800632c  0800632c  0001632c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006330  08006330  00016330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08006334  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  200001d4  08006508  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000354  08006508  00020354  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006f3e  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f6c  00000000  00000000  00027185  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000888  00000000  00000000  000290f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000061e  00000000  00000000  00029980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018c59  00000000  00000000  00029f9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a334  00000000  00000000  00042bf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f81c  00000000  00000000  0004cf2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000030e0  00000000  00000000  000dc748  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000df828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005f28 	.word	0x08005f28

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	08005f28 	.word	0x08005f28

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b970 	b.w	8000eb0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	460d      	mov	r5, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	460f      	mov	r7, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4694      	mov	ip, r2
 8000bfc:	d965      	bls.n	8000cca <__udivmoddi4+0xe2>
 8000bfe:	fab2 f382 	clz	r3, r2
 8000c02:	b143      	cbz	r3, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c08:	f1c3 0220 	rsb	r2, r3, #32
 8000c0c:	409f      	lsls	r7, r3
 8000c0e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c12:	4317      	orrs	r7, r2
 8000c14:	409c      	lsls	r4, r3
 8000c16:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c1a:	fa1f f58c 	uxth.w	r5, ip
 8000c1e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c22:	0c22      	lsrs	r2, r4, #16
 8000c24:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c2c:	fb01 f005 	mul.w	r0, r1, r5
 8000c30:	4290      	cmp	r0, r2
 8000c32:	d90a      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c34:	eb1c 0202 	adds.w	r2, ip, r2
 8000c38:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c3c:	f080 811c 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c40:	4290      	cmp	r0, r2
 8000c42:	f240 8119 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c46:	3902      	subs	r1, #2
 8000c48:	4462      	add	r2, ip
 8000c4a:	1a12      	subs	r2, r2, r0
 8000c4c:	b2a4      	uxth	r4, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c5a:	fb00 f505 	mul.w	r5, r0, r5
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	d90a      	bls.n	8000c78 <__udivmoddi4+0x90>
 8000c62:	eb1c 0404 	adds.w	r4, ip, r4
 8000c66:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c6a:	f080 8107 	bcs.w	8000e7c <__udivmoddi4+0x294>
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	f240 8104 	bls.w	8000e7c <__udivmoddi4+0x294>
 8000c74:	4464      	add	r4, ip
 8000c76:	3802      	subs	r0, #2
 8000c78:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7c:	1b64      	subs	r4, r4, r5
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11e      	cbz	r6, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40dc      	lsrs	r4, r3
 8000c84:	2300      	movs	r3, #0
 8000c86:	e9c6 4300 	strd	r4, r3, [r6]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0xbc>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80ed 	beq.w	8000e72 <__udivmoddi4+0x28a>
 8000c98:	2100      	movs	r1, #0
 8000c9a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca4:	fab3 f183 	clz	r1, r3
 8000ca8:	2900      	cmp	r1, #0
 8000caa:	d149      	bne.n	8000d40 <__udivmoddi4+0x158>
 8000cac:	42ab      	cmp	r3, r5
 8000cae:	d302      	bcc.n	8000cb6 <__udivmoddi4+0xce>
 8000cb0:	4282      	cmp	r2, r0
 8000cb2:	f200 80f8 	bhi.w	8000ea6 <__udivmoddi4+0x2be>
 8000cb6:	1a84      	subs	r4, r0, r2
 8000cb8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	4617      	mov	r7, r2
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	d0e2      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cc8:	e7df      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cca:	b902      	cbnz	r2, 8000cce <__udivmoddi4+0xe6>
 8000ccc:	deff      	udf	#255	; 0xff
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8090 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cd8:	1a8a      	subs	r2, r1, r2
 8000cda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cde:	fa1f fe8c 	uxth.w	lr, ip
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ce8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cec:	0c22      	lsrs	r2, r4, #16
 8000cee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cf2:	fb0e f005 	mul.w	r0, lr, r5
 8000cf6:	4290      	cmp	r0, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfa:	eb1c 0202 	adds.w	r2, ip, r2
 8000cfe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4290      	cmp	r0, r2
 8000d06:	f200 80cb 	bhi.w	8000ea0 <__udivmoddi4+0x2b8>
 8000d0a:	4645      	mov	r5, r8
 8000d0c:	1a12      	subs	r2, r2, r0
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d14:	fb07 2210 	mls	r2, r7, r0, r2
 8000d18:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d20:	45a6      	cmp	lr, r4
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x14e>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x14c>
 8000d2e:	45a6      	cmp	lr, r4
 8000d30:	f200 80bb 	bhi.w	8000eaa <__udivmoddi4+0x2c2>
 8000d34:	4610      	mov	r0, r2
 8000d36:	eba4 040e 	sub.w	r4, r4, lr
 8000d3a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d3e:	e79f      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d40:	f1c1 0720 	rsb	r7, r1, #32
 8000d44:	408b      	lsls	r3, r1
 8000d46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d4e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d52:	fa20 f307 	lsr.w	r3, r0, r7
 8000d56:	40fd      	lsrs	r5, r7
 8000d58:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d5c:	4323      	orrs	r3, r4
 8000d5e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d62:	fa1f fe8c 	uxth.w	lr, ip
 8000d66:	fb09 5518 	mls	r5, r9, r8, r5
 8000d6a:	0c1c      	lsrs	r4, r3, #16
 8000d6c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d70:	fb08 f50e 	mul.w	r5, r8, lr
 8000d74:	42a5      	cmp	r5, r4
 8000d76:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1c 0404 	adds.w	r4, ip, r4
 8000d84:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d88:	f080 8088 	bcs.w	8000e9c <__udivmoddi4+0x2b4>
 8000d8c:	42a5      	cmp	r5, r4
 8000d8e:	f240 8085 	bls.w	8000e9c <__udivmoddi4+0x2b4>
 8000d92:	f1a8 0802 	sub.w	r8, r8, #2
 8000d96:	4464      	add	r4, ip
 8000d98:	1b64      	subs	r4, r4, r5
 8000d9a:	b29d      	uxth	r5, r3
 8000d9c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da0:	fb09 4413 	mls	r4, r9, r3, r4
 8000da4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000da8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000db8:	d26c      	bcs.n	8000e94 <__udivmoddi4+0x2ac>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	d96a      	bls.n	8000e94 <__udivmoddi4+0x2ac>
 8000dbe:	3b02      	subs	r3, #2
 8000dc0:	4464      	add	r4, ip
 8000dc2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dc6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dca:	eba4 040e 	sub.w	r4, r4, lr
 8000dce:	42ac      	cmp	r4, r5
 8000dd0:	46c8      	mov	r8, r9
 8000dd2:	46ae      	mov	lr, r5
 8000dd4:	d356      	bcc.n	8000e84 <__udivmoddi4+0x29c>
 8000dd6:	d053      	beq.n	8000e80 <__udivmoddi4+0x298>
 8000dd8:	b156      	cbz	r6, 8000df0 <__udivmoddi4+0x208>
 8000dda:	ebb0 0208 	subs.w	r2, r0, r8
 8000dde:	eb64 040e 	sbc.w	r4, r4, lr
 8000de2:	fa04 f707 	lsl.w	r7, r4, r7
 8000de6:	40ca      	lsrs	r2, r1
 8000de8:	40cc      	lsrs	r4, r1
 8000dea:	4317      	orrs	r7, r2
 8000dec:	e9c6 7400 	strd	r7, r4, [r6]
 8000df0:	4618      	mov	r0, r3
 8000df2:	2100      	movs	r1, #0
 8000df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df8:	f1c3 0120 	rsb	r1, r3, #32
 8000dfc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e00:	fa20 f201 	lsr.w	r2, r0, r1
 8000e04:	fa25 f101 	lsr.w	r1, r5, r1
 8000e08:	409d      	lsls	r5, r3
 8000e0a:	432a      	orrs	r2, r5
 8000e0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e18:	fb07 1510 	mls	r5, r7, r0, r1
 8000e1c:	0c11      	lsrs	r1, r2, #16
 8000e1e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e22:	fb00 f50e 	mul.w	r5, r0, lr
 8000e26:	428d      	cmp	r5, r1
 8000e28:	fa04 f403 	lsl.w	r4, r4, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x258>
 8000e2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e32:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e36:	d22f      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e38:	428d      	cmp	r5, r1
 8000e3a:	d92d      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1b49      	subs	r1, r1, r5
 8000e42:	b292      	uxth	r2, r2
 8000e44:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e48:	fb07 1115 	mls	r1, r7, r5, r1
 8000e4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e50:	fb05 f10e 	mul.w	r1, r5, lr
 8000e54:	4291      	cmp	r1, r2
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x282>
 8000e58:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e60:	d216      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000e62:	4291      	cmp	r1, r2
 8000e64:	d914      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e66:	3d02      	subs	r5, #2
 8000e68:	4462      	add	r2, ip
 8000e6a:	1a52      	subs	r2, r2, r1
 8000e6c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e70:	e738      	b.n	8000ce4 <__udivmoddi4+0xfc>
 8000e72:	4631      	mov	r1, r6
 8000e74:	4630      	mov	r0, r6
 8000e76:	e708      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000e78:	4639      	mov	r1, r7
 8000e7a:	e6e6      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	e6fb      	b.n	8000c78 <__udivmoddi4+0x90>
 8000e80:	4548      	cmp	r0, r9
 8000e82:	d2a9      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e84:	ebb9 0802 	subs.w	r8, r9, r2
 8000e88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	e7a3      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e90:	4645      	mov	r5, r8
 8000e92:	e7ea      	b.n	8000e6a <__udivmoddi4+0x282>
 8000e94:	462b      	mov	r3, r5
 8000e96:	e794      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e98:	4640      	mov	r0, r8
 8000e9a:	e7d1      	b.n	8000e40 <__udivmoddi4+0x258>
 8000e9c:	46d0      	mov	r8, sl
 8000e9e:	e77b      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000ea0:	3d02      	subs	r5, #2
 8000ea2:	4462      	add	r2, ip
 8000ea4:	e732      	b.n	8000d0c <__udivmoddi4+0x124>
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	e70a      	b.n	8000cc0 <__udivmoddi4+0xd8>
 8000eaa:	4464      	add	r4, ip
 8000eac:	3802      	subs	r0, #2
 8000eae:	e742      	b.n	8000d36 <__udivmoddi4+0x14e>

08000eb0 <__aeabi_idiv0>:
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f043 0201 	orr.w	r2, r3, #1
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	601a      	str	r2, [r3, #0]
}
 8000ec8:	bf00      	nop
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <LL_I2C_IsActiveFlag_TXE>:
  * @rmtoll SR1          TXE           LL_I2C_IsActiveFlag_TXE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXE(I2C_TypeDef *I2Cx)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_TXE) == (I2C_SR1_TXE));
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	695b      	ldr	r3, [r3, #20]
 8000ee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ee4:	2b80      	cmp	r3, #128	; 0x80
 8000ee6:	bf0c      	ite	eq
 8000ee8:	2301      	moveq	r3, #1
 8000eea:	2300      	movne	r3, #0
 8000eec:	b2db      	uxtb	r3, r3
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr

08000efa <LL_I2C_IsActiveFlag_BTF>:
  * @rmtoll SR1          BTF           LL_I2C_IsActiveFlag_BTF
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_BTF(I2C_TypeDef *I2Cx)
{
 8000efa:	b480      	push	{r7}
 8000efc:	b083      	sub	sp, #12
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_BTF) == (I2C_SR1_BTF));
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	695b      	ldr	r3, [r3, #20]
 8000f06:	f003 0304 	and.w	r3, r3, #4
 8000f0a:	2b04      	cmp	r3, #4
 8000f0c:	bf0c      	ite	eq
 8000f0e:	2301      	moveq	r3, #1
 8000f10:	2300      	movne	r3, #0
 8000f12:	b2db      	uxtb	r3, r3
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll SR1          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(I2C_TypeDef *I2Cx)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_RXNE) == (I2C_SR1_RXNE));
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	695b      	ldr	r3, [r3, #20]
 8000f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f30:	2b40      	cmp	r3, #64	; 0x40
 8000f32:	bf0c      	ite	eq
 8000f34:	2301      	moveq	r3, #1
 8000f36:	2300      	movne	r3, #0
 8000f38:	b2db      	uxtb	r3, r3
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <LL_I2C_IsActiveFlag_SB>:
  * @rmtoll SR1          SB            LL_I2C_IsActiveFlag_SB
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_SB(I2C_TypeDef *I2Cx)
{
 8000f46:	b480      	push	{r7}
 8000f48:	b083      	sub	sp, #12
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_SB) == (I2C_SR1_SB));
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	695b      	ldr	r3, [r3, #20]
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	bf0c      	ite	eq
 8000f5a:	2301      	moveq	r3, #1
 8000f5c:	2300      	movne	r3, #0
 8000f5e:	b2db      	uxtb	r3, r3
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <LL_I2C_IsActiveFlag_ADDR>:
  * @rmtoll SR1          ADDR          LL_I2C_IsActiveFlag_ADDR
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_ADDR(I2C_TypeDef *I2Cx)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_ADDR) == (I2C_SR1_ADDR));
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	695b      	ldr	r3, [r3, #20]
 8000f78:	f003 0302 	and.w	r3, r3, #2
 8000f7c:	2b02      	cmp	r3, #2
 8000f7e:	bf0c      	ite	eq
 8000f80:	2301      	moveq	r3, #1
 8000f82:	2300      	movne	r3, #0
 8000f84:	b2db      	uxtb	r3, r3
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr

08000f92 <LL_I2C_ClearFlag_ADDR>:
  * @rmtoll SR1          ADDR          LL_I2C_ClearFlag_ADDR
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_ADDR(I2C_TypeDef *I2Cx)
{
 8000f92:	b480      	push	{r7}
 8000f94:	b085      	sub	sp, #20
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = I2Cx->SR1;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	695b      	ldr	r3, [r3, #20]
 8000f9e:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8000fa0:	68fb      	ldr	r3, [r7, #12]
  tmpreg = I2Cx->SR2;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	699b      	ldr	r3, [r3, #24]
 8000fa6:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8000fa8:	68fb      	ldr	r3, [r7, #12]
}
 8000faa:	bf00      	nop
 8000fac:	3714      	adds	r7, #20
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr

08000fb6 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	b083      	sub	sp, #12
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
 8000fbe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	431a      	orrs	r2, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	601a      	str	r2, [r3, #0]
}
 8000fd0:	bf00      	nop
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <LL_I2C_GenerateStartCondition>:
  * @rmtoll CR1          START         LL_I2C_GenerateStartCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStartCondition(I2C_TypeDef *I2Cx)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_START);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	601a      	str	r2, [r3, #0]
}
 8000ff0:	bf00      	nop
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <LL_I2C_GenerateStopCondition>:
  * @rmtoll CR1          STOP          LL_I2C_GenerateStopCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStopCondition(I2C_TypeDef *I2Cx)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_STOP);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	601a      	str	r2, [r3, #0]
}
 8001010:	bf00      	nop
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <LL_I2C_ReceiveData8>:
  * @rmtoll DR           DR            LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x0 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->DR, I2C_DR_DR));
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	691b      	ldr	r3, [r3, #16]
 8001028:	b2db      	uxtb	r3, r3
}
 800102a:	4618      	mov	r0, r3
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr

08001036 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x0 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8001036:	b480      	push	{r7}
 8001038:	b083      	sub	sp, #12
 800103a:	af00      	add	r7, sp, #0
 800103c:	6078      	str	r0, [r7, #4]
 800103e:	460b      	mov	r3, r1
 8001040:	70fb      	strb	r3, [r7, #3]
  MODIFY_REG(I2Cx->DR, I2C_DR_DR, Data);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	691b      	ldr	r3, [r3, #16]
 8001046:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800104a:	78fb      	ldrb	r3, [r7, #3]
 800104c:	431a      	orrs	r2, r3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	611a      	str	r2, [r3, #16]
}
 8001052:	bf00      	nop
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
	...

08001060 <MPU6050_Init>:
#include "i2c.h"
#include "MPU6050.h"

MPU6050 IMU;

void MPU6050_Init(void){
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0

	LL_I2C_Enable(I2C1);
 8001064:	4821      	ldr	r0, [pc, #132]	; (80010ec <MPU6050_Init+0x8c>)
 8001066:	f7ff ff25 	bl	8000eb4 <LL_I2C_Enable>

	LL_I2C_GenerateStartCondition(I2C1);
 800106a:	4820      	ldr	r0, [pc, #128]	; (80010ec <MPU6050_Init+0x8c>)
 800106c:	f7ff ffb6 	bl	8000fdc <LL_I2C_GenerateStartCondition>
	while(!LL_I2C_IsActiveFlag_SB(I2C1));
 8001070:	bf00      	nop
 8001072:	481e      	ldr	r0, [pc, #120]	; (80010ec <MPU6050_Init+0x8c>)
 8001074:	f7ff ff67 	bl	8000f46 <LL_I2C_IsActiveFlag_SB>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d0f9      	beq.n	8001072 <MPU6050_Init+0x12>

	LL_I2C_TransmitData8(I2C1, 0x68 << 1);	// MPU6050 Address(Write Mode)
 800107e:	21d0      	movs	r1, #208	; 0xd0
 8001080:	481a      	ldr	r0, [pc, #104]	; (80010ec <MPU6050_Init+0x8c>)
 8001082:	f7ff ffd8 	bl	8001036 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_ADDR(I2C1));
 8001086:	bf00      	nop
 8001088:	4818      	ldr	r0, [pc, #96]	; (80010ec <MPU6050_Init+0x8c>)
 800108a:	f7ff ff6f 	bl	8000f6c <LL_I2C_IsActiveFlag_ADDR>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d0f9      	beq.n	8001088 <MPU6050_Init+0x28>
	while(!LL_I2C_IsActiveFlag_TXE(I2C1));
 8001094:	bf00      	nop
 8001096:	4815      	ldr	r0, [pc, #84]	; (80010ec <MPU6050_Init+0x8c>)
 8001098:	f7ff ff1c 	bl	8000ed4 <LL_I2C_IsActiveFlag_TXE>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d0f9      	beq.n	8001096 <MPU6050_Init+0x36>
	LL_I2C_ClearFlag_ADDR(I2C1);
 80010a2:	4812      	ldr	r0, [pc, #72]	; (80010ec <MPU6050_Init+0x8c>)
 80010a4:	f7ff ff75 	bl	8000f92 <LL_I2C_ClearFlag_ADDR>

	LL_I2C_TransmitData8(I2C1, 0x6B);		// PWR_MGMT_1 Register
 80010a8:	216b      	movs	r1, #107	; 0x6b
 80010aa:	4810      	ldr	r0, [pc, #64]	; (80010ec <MPU6050_Init+0x8c>)
 80010ac:	f7ff ffc3 	bl	8001036 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_TXE(I2C1));
 80010b0:	bf00      	nop
 80010b2:	480e      	ldr	r0, [pc, #56]	; (80010ec <MPU6050_Init+0x8c>)
 80010b4:	f7ff ff0e 	bl	8000ed4 <LL_I2C_IsActiveFlag_TXE>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d0f9      	beq.n	80010b2 <MPU6050_Init+0x52>

	LL_I2C_TransmitData8(I2C1, 0x00);		// Write 0x00(SLEEP 0)
 80010be:	2100      	movs	r1, #0
 80010c0:	480a      	ldr	r0, [pc, #40]	; (80010ec <MPU6050_Init+0x8c>)
 80010c2:	f7ff ffb8 	bl	8001036 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_TXE(I2C1));
 80010c6:	bf00      	nop
 80010c8:	4808      	ldr	r0, [pc, #32]	; (80010ec <MPU6050_Init+0x8c>)
 80010ca:	f7ff ff03 	bl	8000ed4 <LL_I2C_IsActiveFlag_TXE>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d0f9      	beq.n	80010c8 <MPU6050_Init+0x68>
	while(!LL_I2C_IsActiveFlag_BTF(I2C1));
 80010d4:	bf00      	nop
 80010d6:	4805      	ldr	r0, [pc, #20]	; (80010ec <MPU6050_Init+0x8c>)
 80010d8:	f7ff ff0f 	bl	8000efa <LL_I2C_IsActiveFlag_BTF>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d0f9      	beq.n	80010d6 <MPU6050_Init+0x76>

	LL_I2C_GenerateStopCondition(I2C1);
 80010e2:	4802      	ldr	r0, [pc, #8]	; (80010ec <MPU6050_Init+0x8c>)
 80010e4:	f7ff ff8a 	bl	8000ffc <LL_I2C_GenerateStopCondition>

}
 80010e8:	bf00      	nop
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	40005400 	.word	0x40005400

080010f0 <MPU6050_ReceiveData>:

unsigned char MPU6050_ReceiveData(unsigned char Address){
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	71fb      	strb	r3, [r7, #7]

	LL_I2C_GenerateStartCondition(I2C1);
 80010fa:	4831      	ldr	r0, [pc, #196]	; (80011c0 <MPU6050_ReceiveData+0xd0>)
 80010fc:	f7ff ff6e 	bl	8000fdc <LL_I2C_GenerateStartCondition>
	while(!LL_I2C_IsActiveFlag_SB(I2C1));
 8001100:	bf00      	nop
 8001102:	482f      	ldr	r0, [pc, #188]	; (80011c0 <MPU6050_ReceiveData+0xd0>)
 8001104:	f7ff ff1f 	bl	8000f46 <LL_I2C_IsActiveFlag_SB>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d0f9      	beq.n	8001102 <MPU6050_ReceiveData+0x12>

	LL_I2C_TransmitData8(I2C1, 0x68 << 1);
 800110e:	21d0      	movs	r1, #208	; 0xd0
 8001110:	482b      	ldr	r0, [pc, #172]	; (80011c0 <MPU6050_ReceiveData+0xd0>)
 8001112:	f7ff ff90 	bl	8001036 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_ADDR(I2C1));
 8001116:	bf00      	nop
 8001118:	4829      	ldr	r0, [pc, #164]	; (80011c0 <MPU6050_ReceiveData+0xd0>)
 800111a:	f7ff ff27 	bl	8000f6c <LL_I2C_IsActiveFlag_ADDR>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d0f9      	beq.n	8001118 <MPU6050_ReceiveData+0x28>
	while(!LL_I2C_IsActiveFlag_TXE(I2C1));
 8001124:	bf00      	nop
 8001126:	4826      	ldr	r0, [pc, #152]	; (80011c0 <MPU6050_ReceiveData+0xd0>)
 8001128:	f7ff fed4 	bl	8000ed4 <LL_I2C_IsActiveFlag_TXE>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d0f9      	beq.n	8001126 <MPU6050_ReceiveData+0x36>
	LL_I2C_ClearFlag_ADDR(I2C1);
 8001132:	4823      	ldr	r0, [pc, #140]	; (80011c0 <MPU6050_ReceiveData+0xd0>)
 8001134:	f7ff ff2d 	bl	8000f92 <LL_I2C_ClearFlag_ADDR>

	LL_I2C_TransmitData8(I2C1, Address);
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	4619      	mov	r1, r3
 800113c:	4820      	ldr	r0, [pc, #128]	; (80011c0 <MPU6050_ReceiveData+0xd0>)
 800113e:	f7ff ff7a 	bl	8001036 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_TXE(I2C1));
 8001142:	bf00      	nop
 8001144:	481e      	ldr	r0, [pc, #120]	; (80011c0 <MPU6050_ReceiveData+0xd0>)
 8001146:	f7ff fec5 	bl	8000ed4 <LL_I2C_IsActiveFlag_TXE>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d0f9      	beq.n	8001144 <MPU6050_ReceiveData+0x54>
	while(!LL_I2C_IsActiveFlag_BTF(I2C1));
 8001150:	bf00      	nop
 8001152:	481b      	ldr	r0, [pc, #108]	; (80011c0 <MPU6050_ReceiveData+0xd0>)
 8001154:	f7ff fed1 	bl	8000efa <LL_I2C_IsActiveFlag_BTF>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d0f9      	beq.n	8001152 <MPU6050_ReceiveData+0x62>

	LL_I2C_GenerateStartCondition(I2C1);
 800115e:	4818      	ldr	r0, [pc, #96]	; (80011c0 <MPU6050_ReceiveData+0xd0>)
 8001160:	f7ff ff3c 	bl	8000fdc <LL_I2C_GenerateStartCondition>
	while(!LL_I2C_IsActiveFlag_SB(I2C1));
 8001164:	bf00      	nop
 8001166:	4816      	ldr	r0, [pc, #88]	; (80011c0 <MPU6050_ReceiveData+0xd0>)
 8001168:	f7ff feed 	bl	8000f46 <LL_I2C_IsActiveFlag_SB>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d0f9      	beq.n	8001166 <MPU6050_ReceiveData+0x76>

	LL_I2C_TransmitData8(I2C1, (0x68 << 1 | 0x01));
 8001172:	21d1      	movs	r1, #209	; 0xd1
 8001174:	4812      	ldr	r0, [pc, #72]	; (80011c0 <MPU6050_ReceiveData+0xd0>)
 8001176:	f7ff ff5e 	bl	8001036 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_ADDR(I2C1));
 800117a:	bf00      	nop
 800117c:	4810      	ldr	r0, [pc, #64]	; (80011c0 <MPU6050_ReceiveData+0xd0>)
 800117e:	f7ff fef5 	bl	8000f6c <LL_I2C_IsActiveFlag_ADDR>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d0f9      	beq.n	800117c <MPU6050_ReceiveData+0x8c>
	LL_I2C_ClearFlag_ADDR(I2C1);
 8001188:	480d      	ldr	r0, [pc, #52]	; (80011c0 <MPU6050_ReceiveData+0xd0>)
 800118a:	f7ff ff02 	bl	8000f92 <LL_I2C_ClearFlag_ADDR>

	while(!LL_I2C_IsActiveFlag_RXNE(I2C1));
 800118e:	bf00      	nop
 8001190:	480b      	ldr	r0, [pc, #44]	; (80011c0 <MPU6050_ReceiveData+0xd0>)
 8001192:	f7ff fec5 	bl	8000f20 <LL_I2C_IsActiveFlag_RXNE>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d0f9      	beq.n	8001190 <MPU6050_ReceiveData+0xa0>
	unsigned char Data = LL_I2C_ReceiveData8(I2C1);
 800119c:	4808      	ldr	r0, [pc, #32]	; (80011c0 <MPU6050_ReceiveData+0xd0>)
 800119e:	f7ff ff3d 	bl	800101c <LL_I2C_ReceiveData8>
 80011a2:	4603      	mov	r3, r0
 80011a4:	73fb      	strb	r3, [r7, #15]
	LL_I2C_AcknowledgeNextData(I2C1, LL_I2C_NACK);
 80011a6:	2100      	movs	r1, #0
 80011a8:	4805      	ldr	r0, [pc, #20]	; (80011c0 <MPU6050_ReceiveData+0xd0>)
 80011aa:	f7ff ff04 	bl	8000fb6 <LL_I2C_AcknowledgeNextData>

	LL_I2C_GenerateStopCondition(I2C1);
 80011ae:	4804      	ldr	r0, [pc, #16]	; (80011c0 <MPU6050_ReceiveData+0xd0>)
 80011b0:	f7ff ff24 	bl	8000ffc <LL_I2C_GenerateStopCondition>

	return Data;
 80011b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40005400 	.word	0x40005400

080011c4 <MPU6050_GetAccel>:

void MPU6050_GetAccel(void){
 80011c4:	b598      	push	{r3, r4, r7, lr}
 80011c6:	af00      	add	r7, sp, #0

	IMU.ax = MPU6050_ReceiveData(0x3B) << 8 | MPU6050_ReceiveData(0x3C);
 80011c8:	203b      	movs	r0, #59	; 0x3b
 80011ca:	f7ff ff91 	bl	80010f0 <MPU6050_ReceiveData>
 80011ce:	4603      	mov	r3, r0
 80011d0:	021b      	lsls	r3, r3, #8
 80011d2:	b21c      	sxth	r4, r3
 80011d4:	203c      	movs	r0, #60	; 0x3c
 80011d6:	f7ff ff8b 	bl	80010f0 <MPU6050_ReceiveData>
 80011da:	4603      	mov	r3, r0
 80011dc:	b21b      	sxth	r3, r3
 80011de:	4323      	orrs	r3, r4
 80011e0:	b21b      	sxth	r3, r3
 80011e2:	b29a      	uxth	r2, r3
 80011e4:	4b11      	ldr	r3, [pc, #68]	; (800122c <MPU6050_GetAccel+0x68>)
 80011e6:	801a      	strh	r2, [r3, #0]
	IMU.ay = MPU6050_ReceiveData(0x3D) << 8 | MPU6050_ReceiveData(0x3E);
 80011e8:	203d      	movs	r0, #61	; 0x3d
 80011ea:	f7ff ff81 	bl	80010f0 <MPU6050_ReceiveData>
 80011ee:	4603      	mov	r3, r0
 80011f0:	021b      	lsls	r3, r3, #8
 80011f2:	b21c      	sxth	r4, r3
 80011f4:	203e      	movs	r0, #62	; 0x3e
 80011f6:	f7ff ff7b 	bl	80010f0 <MPU6050_ReceiveData>
 80011fa:	4603      	mov	r3, r0
 80011fc:	b21b      	sxth	r3, r3
 80011fe:	4323      	orrs	r3, r4
 8001200:	b21b      	sxth	r3, r3
 8001202:	b29a      	uxth	r2, r3
 8001204:	4b09      	ldr	r3, [pc, #36]	; (800122c <MPU6050_GetAccel+0x68>)
 8001206:	805a      	strh	r2, [r3, #2]
	IMU.az = MPU6050_ReceiveData(0x3F) << 8 | MPU6050_ReceiveData(0x40);
 8001208:	203f      	movs	r0, #63	; 0x3f
 800120a:	f7ff ff71 	bl	80010f0 <MPU6050_ReceiveData>
 800120e:	4603      	mov	r3, r0
 8001210:	021b      	lsls	r3, r3, #8
 8001212:	b21c      	sxth	r4, r3
 8001214:	2040      	movs	r0, #64	; 0x40
 8001216:	f7ff ff6b 	bl	80010f0 <MPU6050_ReceiveData>
 800121a:	4603      	mov	r3, r0
 800121c:	b21b      	sxth	r3, r3
 800121e:	4323      	orrs	r3, r4
 8001220:	b21b      	sxth	r3, r3
 8001222:	b29a      	uxth	r2, r3
 8001224:	4b01      	ldr	r3, [pc, #4]	; (800122c <MPU6050_GetAccel+0x68>)
 8001226:	809a      	strh	r2, [r3, #4]
}
 8001228:	bf00      	nop
 800122a:	bd98      	pop	{r3, r4, r7, pc}
 800122c:	200001f0 	.word	0x200001f0

08001230 <MPU6050_GetGyro>:

void MPU6050_GetGyro(void){
 8001230:	b598      	push	{r3, r4, r7, lr}
 8001232:	af00      	add	r7, sp, #0
	IMU.gx = MPU6050_ReceiveData(0x43) << 8 | MPU6050_ReceiveData(0x44);
 8001234:	2043      	movs	r0, #67	; 0x43
 8001236:	f7ff ff5b 	bl	80010f0 <MPU6050_ReceiveData>
 800123a:	4603      	mov	r3, r0
 800123c:	021b      	lsls	r3, r3, #8
 800123e:	b21c      	sxth	r4, r3
 8001240:	2044      	movs	r0, #68	; 0x44
 8001242:	f7ff ff55 	bl	80010f0 <MPU6050_ReceiveData>
 8001246:	4603      	mov	r3, r0
 8001248:	b21b      	sxth	r3, r3
 800124a:	4323      	orrs	r3, r4
 800124c:	b21b      	sxth	r3, r3
 800124e:	b29a      	uxth	r2, r3
 8001250:	4b11      	ldr	r3, [pc, #68]	; (8001298 <MPU6050_GetGyro+0x68>)
 8001252:	80da      	strh	r2, [r3, #6]
	IMU.gy = MPU6050_ReceiveData(0x45) << 8 | MPU6050_ReceiveData(0x46);
 8001254:	2045      	movs	r0, #69	; 0x45
 8001256:	f7ff ff4b 	bl	80010f0 <MPU6050_ReceiveData>
 800125a:	4603      	mov	r3, r0
 800125c:	021b      	lsls	r3, r3, #8
 800125e:	b21c      	sxth	r4, r3
 8001260:	2046      	movs	r0, #70	; 0x46
 8001262:	f7ff ff45 	bl	80010f0 <MPU6050_ReceiveData>
 8001266:	4603      	mov	r3, r0
 8001268:	b21b      	sxth	r3, r3
 800126a:	4323      	orrs	r3, r4
 800126c:	b21b      	sxth	r3, r3
 800126e:	b29a      	uxth	r2, r3
 8001270:	4b09      	ldr	r3, [pc, #36]	; (8001298 <MPU6050_GetGyro+0x68>)
 8001272:	811a      	strh	r2, [r3, #8]
	IMU.gz = MPU6050_ReceiveData(0x47) << 8 | MPU6050_ReceiveData(0x48);
 8001274:	2047      	movs	r0, #71	; 0x47
 8001276:	f7ff ff3b 	bl	80010f0 <MPU6050_ReceiveData>
 800127a:	4603      	mov	r3, r0
 800127c:	021b      	lsls	r3, r3, #8
 800127e:	b21c      	sxth	r4, r3
 8001280:	2048      	movs	r0, #72	; 0x48
 8001282:	f7ff ff35 	bl	80010f0 <MPU6050_ReceiveData>
 8001286:	4603      	mov	r3, r0
 8001288:	b21b      	sxth	r3, r3
 800128a:	4323      	orrs	r3, r4
 800128c:	b21b      	sxth	r3, r3
 800128e:	b29a      	uxth	r2, r3
 8001290:	4b01      	ldr	r3, [pc, #4]	; (8001298 <MPU6050_GetGyro+0x68>)
 8001292:	815a      	strh	r2, [r3, #10]
}
 8001294:	bf00      	nop
 8001296:	bd98      	pop	{r3, r4, r7, pc}
 8001298:	200001f0 	.word	0x200001f0

0800129c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	041a      	lsls	r2, r3, #16
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	619a      	str	r2, [r3, #24]
}
 80012ae:	bf00      	nop
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
	...

080012bc <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80012c4:	4b08      	ldr	r3, [pc, #32]	; (80012e8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80012c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012c8:	4907      	ldr	r1, [pc, #28]	; (80012e8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80012d0:	4b05      	ldr	r3, [pc, #20]	; (80012e8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80012d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	4013      	ands	r3, r2
 80012d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012da:	68fb      	ldr	r3, [r7, #12]
}
 80012dc:	bf00      	nop
 80012de:	3714      	adds	r7, #20
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	40023800 	.word	0x40023800

080012ec <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b086      	sub	sp, #24
 80012f0:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f2:	463b      	mov	r3, r7
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]
 80012fe:	611a      	str	r2, [r3, #16]
 8001300:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001302:	2004      	movs	r0, #4
 8001304:	f7ff ffda 	bl	80012bc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001308:	2001      	movs	r0, #1
 800130a:	f7ff ffd7 	bl	80012bc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800130e:	2002      	movs	r0, #2
 8001310:	f7ff ffd4 	bl	80012bc <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_13);
 8001314:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001318:	480b      	ldr	r0, [pc, #44]	; (8001348 <MX_GPIO_Init+0x5c>)
 800131a:	f7ff ffbf 	bl	800129c <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 800131e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001322:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001324:	2301      	movs	r3, #1
 8001326:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001328:	2300      	movs	r3, #0
 800132a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001330:	2300      	movs	r3, #0
 8001332:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001334:	463b      	mov	r3, r7
 8001336:	4619      	mov	r1, r3
 8001338:	4803      	ldr	r0, [pc, #12]	; (8001348 <MX_GPIO_Init+0x5c>)
 800133a:	f001 fb20 	bl	800297e <LL_GPIO_Init>

}
 800133e:	bf00      	nop
 8001340:	3718      	adds	r7, #24
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40020800 	.word	0x40020800

0800134c <LL_I2C_EnableClockStretching>:
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	601a      	str	r2, [r3, #0]
}
 8001360:	bf00      	nop
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <LL_I2C_DisableGeneralCall>:
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	601a      	str	r2, [r3, #0]
}
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <LL_I2C_SetOwnAddress2>:
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	68db      	ldr	r3, [r3, #12]
 800139a:	f023 02fe 	bic.w	r2, r3, #254	; 0xfe
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	431a      	orrs	r2, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	60da      	str	r2, [r3, #12]
}
 80013a6:	bf00      	nop
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr

080013b2 <LL_I2C_DisableOwnAddress2>:
{
 80013b2:	b480      	push	{r7}
 80013b4:	b083      	sub	sp, #12
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	68db      	ldr	r3, [r3, #12]
 80013be:	f023 0201 	bic.w	r2, r3, #1
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	60da      	str	r2, [r3, #12]
}
 80013c6:	bf00      	nop
 80013c8:	370c      	adds	r7, #12
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
	...

080013d4 <LL_AHB1_GRP1_EnableClock>:
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80013dc:	4b08      	ldr	r3, [pc, #32]	; (8001400 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80013de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013e0:	4907      	ldr	r1, [pc, #28]	; (8001400 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80013e8:	4b05      	ldr	r3, [pc, #20]	; (8001400 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80013ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	4013      	ands	r3, r2
 80013f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013f2:	68fb      	ldr	r3, [r7, #12]
}
 80013f4:	bf00      	nop
 80013f6:	3714      	adds	r7, #20
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	40023800 	.word	0x40023800

08001404 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800140c:	4b08      	ldr	r3, [pc, #32]	; (8001430 <LL_APB1_GRP1_EnableClock+0x2c>)
 800140e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001410:	4907      	ldr	r1, [pc, #28]	; (8001430 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4313      	orrs	r3, r2
 8001416:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001418:	4b05      	ldr	r3, [pc, #20]	; (8001430 <LL_APB1_GRP1_EnableClock+0x2c>)
 800141a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	4013      	ands	r3, r2
 8001420:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001422:	68fb      	ldr	r3, [r7, #12]
}
 8001424:	bf00      	nop
 8001426:	3714      	adds	r7, #20
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	40023800 	.word	0x40023800

08001434 <MX_I2C1_Init>:

/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b08e      	sub	sp, #56	; 0x38
 8001438:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 800143a:	f107 0318 	add.w	r3, r7, #24
 800143e:	2220      	movs	r2, #32
 8001440:	2100      	movs	r1, #0
 8001442:	4618      	mov	r0, r3
 8001444:	f002 feb6 	bl	80041b4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001448:	463b      	mov	r3, r7
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	605a      	str	r2, [r3, #4]
 8001450:	609a      	str	r2, [r3, #8]
 8001452:	60da      	str	r2, [r3, #12]
 8001454:	611a      	str	r2, [r3, #16]
 8001456:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001458:	2002      	movs	r0, #2
 800145a:	f7ff ffbb 	bl	80013d4 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800145e:	23c0      	movs	r3, #192	; 0xc0
 8001460:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001462:	2302      	movs	r3, #2
 8001464:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001466:	2303      	movs	r3, #3
 8001468:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 800146a:	2301      	movs	r3, #1
 800146c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800146e:	2300      	movs	r3, #0
 8001470:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8001472:	2304      	movs	r3, #4
 8001474:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001476:	463b      	mov	r3, r7
 8001478:	4619      	mov	r1, r3
 800147a:	4816      	ldr	r0, [pc, #88]	; (80014d4 <MX_I2C1_Init+0xa0>)
 800147c:	f001 fa7f 	bl	800297e <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8001480:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001484:	f7ff ffbe 	bl	8001404 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C1_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C1);
 8001488:	4813      	ldr	r0, [pc, #76]	; (80014d8 <MX_I2C1_Init+0xa4>)
 800148a:	f7ff ff92 	bl	80013b2 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 800148e:	4812      	ldr	r0, [pc, #72]	; (80014d8 <MX_I2C1_Init+0xa4>)
 8001490:	f7ff ff6c 	bl	800136c <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8001494:	4810      	ldr	r0, [pc, #64]	; (80014d8 <MX_I2C1_Init+0xa4>)
 8001496:	f7ff ff59 	bl	800134c <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 800149a:	2300      	movs	r3, #0
 800149c:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 800149e:	4b0f      	ldr	r3, [pc, #60]	; (80014dc <MX_I2C1_Init+0xa8>)
 80014a0:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 80014a2:	2300      	movs	r3, #0
 80014a4:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.OwnAddress1 = 0;
 80014a6:	2300      	movs	r3, #0
 80014a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 80014aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014ae:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 80014b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80014b4:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 80014b6:	f107 0318 	add.w	r3, r7, #24
 80014ba:	4619      	mov	r1, r3
 80014bc:	4806      	ldr	r0, [pc, #24]	; (80014d8 <MX_I2C1_Init+0xa4>)
 80014be:	f001 fbdd 	bl	8002c7c <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0);
 80014c2:	2100      	movs	r1, #0
 80014c4:	4804      	ldr	r0, [pc, #16]	; (80014d8 <MX_I2C1_Init+0xa4>)
 80014c6:	f7ff ff61 	bl	800138c <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014ca:	bf00      	nop
 80014cc:	3738      	adds	r7, #56	; 0x38
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	40020400 	.word	0x40020400
 80014d8:	40005400 	.word	0x40005400
 80014dc:	000186a0 	.word	0x000186a0

080014e0 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014f0:	2b80      	cmp	r3, #128	; 0x80
 80014f2:	bf0c      	ite	eq
 80014f4:	2301      	moveq	r3, #1
 80014f6:	2300      	movne	r3, #0
 80014f8:	b2db      	uxtb	r3, r3
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr

08001506 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8001506:	b480      	push	{r7}
 8001508:	b083      	sub	sp, #12
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
 800150e:	460b      	mov	r3, r1
 8001510:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8001512:	78fa      	ldrb	r2, [r7, #3]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	605a      	str	r2, [r3, #4]
}
 8001518:	bf00      	nop
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <_write>:
#include "MPU6050.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
int _write(int file, char *p, int len){		// printf�????? USART6?�� ?���????? ?��?�� ?��?��
 8001524:	b580      	push	{r7, lr}
 8001526:	b086      	sub	sp, #24
 8001528:	af00      	add	r7, sp, #0
 800152a:	60f8      	str	r0, [r7, #12]
 800152c:	60b9      	str	r1, [r7, #8]
 800152e:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < len ; i++){
 8001530:	2300      	movs	r3, #0
 8001532:	617b      	str	r3, [r7, #20]
 8001534:	e011      	b.n	800155a <_write+0x36>
		while(!LL_USART_IsActiveFlag_TXE(USART6));
 8001536:	bf00      	nop
 8001538:	480c      	ldr	r0, [pc, #48]	; (800156c <_write+0x48>)
 800153a:	f7ff ffd1 	bl	80014e0 <LL_USART_IsActiveFlag_TXE>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d0f9      	beq.n	8001538 <_write+0x14>
		LL_USART_TransmitData8(USART6, *(p+i));
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	68ba      	ldr	r2, [r7, #8]
 8001548:	4413      	add	r3, r2
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	4619      	mov	r1, r3
 800154e:	4807      	ldr	r0, [pc, #28]	; (800156c <_write+0x48>)
 8001550:	f7ff ffd9 	bl	8001506 <LL_USART_TransmitData8>
	for (int i = 0; i < len ; i++){
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	3301      	adds	r3, #1
 8001558:	617b      	str	r3, [r7, #20]
 800155a:	697a      	ldr	r2, [r7, #20]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	429a      	cmp	r2, r3
 8001560:	dbe9      	blt.n	8001536 <_write+0x12>
	}
	return len;
 8001562:	687b      	ldr	r3, [r7, #4]
}
 8001564:	4618      	mov	r0, r3
 8001566:	3718      	adds	r7, #24
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40011400 	.word	0x40011400

08001570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001574:	f000 fb5e 	bl	8001c34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001578:	f000 f832 	bl	80015e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800157c:	f7ff feb6 	bl	80012ec <MX_GPIO_Init>
  MX_USART6_UART_Init();
 8001580:	f000 face 	bl	8001b20 <MX_USART6_UART_Init>
  MX_I2C1_Init();
 8001584:	f7ff ff56 	bl	8001434 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  MPU6050_Init();
 8001588:	f7ff fd6a 	bl	8001060 <MPU6050_Init>
  printf("MPU6050 Initialization is completed\n");
 800158c:	4810      	ldr	r0, [pc, #64]	; (80015d0 <main+0x60>)
 800158e:	f002 fd31 	bl	8003ff4 <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MPU6050_GetAccel();
 8001592:	f7ff fe17 	bl	80011c4 <MPU6050_GetAccel>
	  MPU6050_GetGyro();
 8001596:	f7ff fe4b 	bl	8001230 <MPU6050_GetGyro>
	  printf("ax : %d  ay : %d  az : %d\n", IMU.ax, IMU.ay, IMU.az);
 800159a:	4b0e      	ldr	r3, [pc, #56]	; (80015d4 <main+0x64>)
 800159c:	881b      	ldrh	r3, [r3, #0]
 800159e:	4619      	mov	r1, r3
 80015a0:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <main+0x64>)
 80015a2:	885b      	ldrh	r3, [r3, #2]
 80015a4:	461a      	mov	r2, r3
 80015a6:	4b0b      	ldr	r3, [pc, #44]	; (80015d4 <main+0x64>)
 80015a8:	889b      	ldrh	r3, [r3, #4]
 80015aa:	480b      	ldr	r0, [pc, #44]	; (80015d8 <main+0x68>)
 80015ac:	f002 fcbc 	bl	8003f28 <iprintf>
	  printf("gx : %d  gy : %d  gz : %d\n\n", IMU.gx, IMU.gy, IMU.gz);
 80015b0:	4b08      	ldr	r3, [pc, #32]	; (80015d4 <main+0x64>)
 80015b2:	88db      	ldrh	r3, [r3, #6]
 80015b4:	4619      	mov	r1, r3
 80015b6:	4b07      	ldr	r3, [pc, #28]	; (80015d4 <main+0x64>)
 80015b8:	891b      	ldrh	r3, [r3, #8]
 80015ba:	461a      	mov	r2, r3
 80015bc:	4b05      	ldr	r3, [pc, #20]	; (80015d4 <main+0x64>)
 80015be:	895b      	ldrh	r3, [r3, #10]
 80015c0:	4806      	ldr	r0, [pc, #24]	; (80015dc <main+0x6c>)
 80015c2:	f002 fcb1 	bl	8003f28 <iprintf>
	  HAL_Delay(10);
 80015c6:	200a      	movs	r0, #10
 80015c8:	f000 fba6 	bl	8001d18 <HAL_Delay>
	  MPU6050_GetAccel();
 80015cc:	e7e1      	b.n	8001592 <main+0x22>
 80015ce:	bf00      	nop
 80015d0:	08005f40 	.word	0x08005f40
 80015d4:	200001f0 	.word	0x200001f0
 80015d8:	08005f64 	.word	0x08005f64
 80015dc:	08005f80 	.word	0x08005f80

080015e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b094      	sub	sp, #80	; 0x50
 80015e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015e6:	f107 0320 	add.w	r3, r7, #32
 80015ea:	2230      	movs	r2, #48	; 0x30
 80015ec:	2100      	movs	r1, #0
 80015ee:	4618      	mov	r0, r3
 80015f0:	f002 fde0 	bl	80041b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015f4:	f107 030c 	add.w	r3, r7, #12
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	60da      	str	r2, [r3, #12]
 8001602:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001604:	2300      	movs	r3, #0
 8001606:	60bb      	str	r3, [r7, #8]
 8001608:	4b23      	ldr	r3, [pc, #140]	; (8001698 <SystemClock_Config+0xb8>)
 800160a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160c:	4a22      	ldr	r2, [pc, #136]	; (8001698 <SystemClock_Config+0xb8>)
 800160e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001612:	6413      	str	r3, [r2, #64]	; 0x40
 8001614:	4b20      	ldr	r3, [pc, #128]	; (8001698 <SystemClock_Config+0xb8>)
 8001616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800161c:	60bb      	str	r3, [r7, #8]
 800161e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001620:	2300      	movs	r3, #0
 8001622:	607b      	str	r3, [r7, #4]
 8001624:	4b1d      	ldr	r3, [pc, #116]	; (800169c <SystemClock_Config+0xbc>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800162c:	4a1b      	ldr	r2, [pc, #108]	; (800169c <SystemClock_Config+0xbc>)
 800162e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001632:	6013      	str	r3, [r2, #0]
 8001634:	4b19      	ldr	r3, [pc, #100]	; (800169c <SystemClock_Config+0xbc>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800163c:	607b      	str	r3, [r7, #4]
 800163e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001640:	2302      	movs	r3, #2
 8001642:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001644:	2301      	movs	r3, #1
 8001646:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001648:	2310      	movs	r3, #16
 800164a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800164c:	2300      	movs	r3, #0
 800164e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001650:	f107 0320 	add.w	r3, r7, #32
 8001654:	4618      	mov	r0, r3
 8001656:	f000 fc69 	bl	8001f2c <HAL_RCC_OscConfig>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001660:	f000 f81e 	bl	80016a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001664:	230f      	movs	r3, #15
 8001666:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001668:	2300      	movs	r3, #0
 800166a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800166c:	2300      	movs	r3, #0
 800166e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001670:	2300      	movs	r3, #0
 8001672:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001674:	2300      	movs	r3, #0
 8001676:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001678:	f107 030c 	add.w	r3, r7, #12
 800167c:	2100      	movs	r1, #0
 800167e:	4618      	mov	r0, r3
 8001680:	f000 fecc 	bl	800241c <HAL_RCC_ClockConfig>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800168a:	f000 f809 	bl	80016a0 <Error_Handler>
  }
}
 800168e:	bf00      	nop
 8001690:	3750      	adds	r7, #80	; 0x50
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	40023800 	.word	0x40023800
 800169c:	40007000 	.word	0x40007000

080016a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016a4:	b672      	cpsid	i
}
 80016a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016a8:	e7fe      	b.n	80016a8 <Error_Handler+0x8>
	...

080016ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016b2:	2300      	movs	r3, #0
 80016b4:	607b      	str	r3, [r7, #4]
 80016b6:	4b10      	ldr	r3, [pc, #64]	; (80016f8 <HAL_MspInit+0x4c>)
 80016b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ba:	4a0f      	ldr	r2, [pc, #60]	; (80016f8 <HAL_MspInit+0x4c>)
 80016bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016c0:	6453      	str	r3, [r2, #68]	; 0x44
 80016c2:	4b0d      	ldr	r3, [pc, #52]	; (80016f8 <HAL_MspInit+0x4c>)
 80016c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ca:	607b      	str	r3, [r7, #4]
 80016cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	603b      	str	r3, [r7, #0]
 80016d2:	4b09      	ldr	r3, [pc, #36]	; (80016f8 <HAL_MspInit+0x4c>)
 80016d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d6:	4a08      	ldr	r2, [pc, #32]	; (80016f8 <HAL_MspInit+0x4c>)
 80016d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016dc:	6413      	str	r3, [r2, #64]	; 0x40
 80016de:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <HAL_MspInit+0x4c>)
 80016e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e6:	603b      	str	r3, [r7, #0]
 80016e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ea:	bf00      	nop
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	40023800 	.word	0x40023800

080016fc <LL_USART_IsActiveFlag_RXNE>:
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0320 	and.w	r3, r3, #32
 800170c:	2b20      	cmp	r3, #32
 800170e:	bf0c      	ite	eq
 8001710:	2301      	moveq	r3, #1
 8001712:	2300      	movne	r3, #0
 8001714:	b2db      	uxtb	r3, r3
}
 8001716:	4618      	mov	r0, r3
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr

08001722 <LL_USART_ClearFlag_RXNE>:
{
 8001722:	b480      	push	{r7}
 8001724:	b083      	sub	sp, #12
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	f06f 0220 	mvn.w	r2, #32
 8001730:	601a      	str	r2, [r3, #0]
}
 8001732:	bf00      	nop
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr

0800173e <LL_USART_ReceiveData8>:
{
 800173e:	b480      	push	{r7}
 8001740:	b083      	sub	sp, #12
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	b2db      	uxtb	r3, r3
}
 800174c:	4618      	mov	r0, r3
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800175c:	e7fe      	b.n	800175c <NMI_Handler+0x4>

0800175e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800175e:	b480      	push	{r7}
 8001760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001762:	e7fe      	b.n	8001762 <HardFault_Handler+0x4>

08001764 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001768:	e7fe      	b.n	8001768 <MemManage_Handler+0x4>

0800176a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800176a:	b480      	push	{r7}
 800176c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800176e:	e7fe      	b.n	800176e <BusFault_Handler+0x4>

08001770 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001774:	e7fe      	b.n	8001774 <UsageFault_Handler+0x4>

08001776 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001776:	b480      	push	{r7}
 8001778:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800177a:	bf00      	nop
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001792:	b480      	push	{r7}
 8001794:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017a4:	f000 fa98 	bl	8001cd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017a8:	bf00      	nop
 80017aa:	bd80      	pop	{r7, pc}

080017ac <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	if (LL_USART_IsActiveFlag_RXNE(USART6)){
 80017b0:	480a      	ldr	r0, [pc, #40]	; (80017dc <USART6_IRQHandler+0x30>)
 80017b2:	f7ff ffa3 	bl	80016fc <LL_USART_IsActiveFlag_RXNE>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d00c      	beq.n	80017d6 <USART6_IRQHandler+0x2a>
	  LL_USART_ClearFlag_RXNE(USART6);
 80017bc:	4807      	ldr	r0, [pc, #28]	; (80017dc <USART6_IRQHandler+0x30>)
 80017be:	f7ff ffb0 	bl	8001722 <LL_USART_ClearFlag_RXNE>
	  uart_rx_data = LL_USART_ReceiveData8(USART6);
 80017c2:	4806      	ldr	r0, [pc, #24]	; (80017dc <USART6_IRQHandler+0x30>)
 80017c4:	f7ff ffbb 	bl	800173e <LL_USART_ReceiveData8>
 80017c8:	4603      	mov	r3, r0
 80017ca:	461a      	mov	r2, r3
 80017cc:	4b04      	ldr	r3, [pc, #16]	; (80017e0 <USART6_IRQHandler+0x34>)
 80017ce:	701a      	strb	r2, [r3, #0]
	  uart_rx_flag = 1;
 80017d0:	4b04      	ldr	r3, [pc, #16]	; (80017e4 <USART6_IRQHandler+0x38>)
 80017d2:	2201      	movs	r2, #1
 80017d4:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40011400 	.word	0x40011400
 80017e0:	200001fd 	.word	0x200001fd
 80017e4:	200001fc 	.word	0x200001fc

080017e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  return 1;
 80017ec:	2301      	movs	r3, #1
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <_kill>:

int _kill(int pid, int sig)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001802:	f002 fd29 	bl	8004258 <__errno>
 8001806:	4603      	mov	r3, r0
 8001808:	2216      	movs	r2, #22
 800180a:	601a      	str	r2, [r3, #0]
  return -1;
 800180c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001810:	4618      	mov	r0, r3
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}

08001818 <_exit>:

void _exit (int status)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001820:	f04f 31ff 	mov.w	r1, #4294967295
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f7ff ffe7 	bl	80017f8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800182a:	e7fe      	b.n	800182a <_exit+0x12>

0800182c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af00      	add	r7, sp, #0
 8001832:	60f8      	str	r0, [r7, #12]
 8001834:	60b9      	str	r1, [r7, #8]
 8001836:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001838:	2300      	movs	r3, #0
 800183a:	617b      	str	r3, [r7, #20]
 800183c:	e00a      	b.n	8001854 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800183e:	f3af 8000 	nop.w
 8001842:	4601      	mov	r1, r0
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	1c5a      	adds	r2, r3, #1
 8001848:	60ba      	str	r2, [r7, #8]
 800184a:	b2ca      	uxtb	r2, r1
 800184c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	3301      	adds	r3, #1
 8001852:	617b      	str	r3, [r7, #20]
 8001854:	697a      	ldr	r2, [r7, #20]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	429a      	cmp	r2, r3
 800185a:	dbf0      	blt.n	800183e <_read+0x12>
  }

  return len;
 800185c:	687b      	ldr	r3, [r7, #4]
}
 800185e:	4618      	mov	r0, r3
 8001860:	3718      	adds	r7, #24
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}

08001866 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001866:	b480      	push	{r7}
 8001868:	b083      	sub	sp, #12
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800186e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001872:	4618      	mov	r0, r3
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr

0800187e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800187e:	b480      	push	{r7}
 8001880:	b083      	sub	sp, #12
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
 8001886:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800188e:	605a      	str	r2, [r3, #4]
  return 0;
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr

0800189e <_isatty>:

int _isatty(int file)
{
 800189e:	b480      	push	{r7}
 80018a0:	b083      	sub	sp, #12
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018a6:	2301      	movs	r3, #1
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	60b9      	str	r1, [r7, #8]
 80018be:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3714      	adds	r7, #20
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
	...

080018d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018d8:	4a14      	ldr	r2, [pc, #80]	; (800192c <_sbrk+0x5c>)
 80018da:	4b15      	ldr	r3, [pc, #84]	; (8001930 <_sbrk+0x60>)
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018e4:	4b13      	ldr	r3, [pc, #76]	; (8001934 <_sbrk+0x64>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d102      	bne.n	80018f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018ec:	4b11      	ldr	r3, [pc, #68]	; (8001934 <_sbrk+0x64>)
 80018ee:	4a12      	ldr	r2, [pc, #72]	; (8001938 <_sbrk+0x68>)
 80018f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018f2:	4b10      	ldr	r3, [pc, #64]	; (8001934 <_sbrk+0x64>)
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4413      	add	r3, r2
 80018fa:	693a      	ldr	r2, [r7, #16]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d207      	bcs.n	8001910 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001900:	f002 fcaa 	bl	8004258 <__errno>
 8001904:	4603      	mov	r3, r0
 8001906:	220c      	movs	r2, #12
 8001908:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800190a:	f04f 33ff 	mov.w	r3, #4294967295
 800190e:	e009      	b.n	8001924 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001910:	4b08      	ldr	r3, [pc, #32]	; (8001934 <_sbrk+0x64>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001916:	4b07      	ldr	r3, [pc, #28]	; (8001934 <_sbrk+0x64>)
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4413      	add	r3, r2
 800191e:	4a05      	ldr	r2, [pc, #20]	; (8001934 <_sbrk+0x64>)
 8001920:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001922:	68fb      	ldr	r3, [r7, #12]
}
 8001924:	4618      	mov	r0, r3
 8001926:	3718      	adds	r7, #24
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	20010000 	.word	0x20010000
 8001930:	00000400 	.word	0x00000400
 8001934:	20000200 	.word	0x20000200
 8001938:	20000358 	.word	0x20000358

0800193c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001940:	4b06      	ldr	r3, [pc, #24]	; (800195c <SystemInit+0x20>)
 8001942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001946:	4a05      	ldr	r2, [pc, #20]	; (800195c <SystemInit+0x20>)
 8001948:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800194c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001950:	bf00      	nop
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	e000ed00 	.word	0xe000ed00

08001960 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001964:	4b04      	ldr	r3, [pc, #16]	; (8001978 <__NVIC_GetPriorityGrouping+0x18>)
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	0a1b      	lsrs	r3, r3, #8
 800196a:	f003 0307 	and.w	r3, r3, #7
}
 800196e:	4618      	mov	r0, r3
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr
 8001978:	e000ed00 	.word	0xe000ed00

0800197c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	4603      	mov	r3, r0
 8001984:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198a:	2b00      	cmp	r3, #0
 800198c:	db0b      	blt.n	80019a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800198e:	79fb      	ldrb	r3, [r7, #7]
 8001990:	f003 021f 	and.w	r2, r3, #31
 8001994:	4907      	ldr	r1, [pc, #28]	; (80019b4 <__NVIC_EnableIRQ+0x38>)
 8001996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199a:	095b      	lsrs	r3, r3, #5
 800199c:	2001      	movs	r0, #1
 800199e:	fa00 f202 	lsl.w	r2, r0, r2
 80019a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019a6:	bf00      	nop
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	e000e100 	.word	0xe000e100

080019b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	4603      	mov	r3, r0
 80019c0:	6039      	str	r1, [r7, #0]
 80019c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	db0a      	blt.n	80019e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	b2da      	uxtb	r2, r3
 80019d0:	490c      	ldr	r1, [pc, #48]	; (8001a04 <__NVIC_SetPriority+0x4c>)
 80019d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d6:	0112      	lsls	r2, r2, #4
 80019d8:	b2d2      	uxtb	r2, r2
 80019da:	440b      	add	r3, r1
 80019dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019e0:	e00a      	b.n	80019f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	b2da      	uxtb	r2, r3
 80019e6:	4908      	ldr	r1, [pc, #32]	; (8001a08 <__NVIC_SetPriority+0x50>)
 80019e8:	79fb      	ldrb	r3, [r7, #7]
 80019ea:	f003 030f 	and.w	r3, r3, #15
 80019ee:	3b04      	subs	r3, #4
 80019f0:	0112      	lsls	r2, r2, #4
 80019f2:	b2d2      	uxtb	r2, r2
 80019f4:	440b      	add	r3, r1
 80019f6:	761a      	strb	r2, [r3, #24]
}
 80019f8:	bf00      	nop
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr
 8001a04:	e000e100 	.word	0xe000e100
 8001a08:	e000ed00 	.word	0xe000ed00

08001a0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b089      	sub	sp, #36	; 0x24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f003 0307 	and.w	r3, r3, #7
 8001a1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	f1c3 0307 	rsb	r3, r3, #7
 8001a26:	2b04      	cmp	r3, #4
 8001a28:	bf28      	it	cs
 8001a2a:	2304      	movcs	r3, #4
 8001a2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	3304      	adds	r3, #4
 8001a32:	2b06      	cmp	r3, #6
 8001a34:	d902      	bls.n	8001a3c <NVIC_EncodePriority+0x30>
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	3b03      	subs	r3, #3
 8001a3a:	e000      	b.n	8001a3e <NVIC_EncodePriority+0x32>
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a40:	f04f 32ff 	mov.w	r2, #4294967295
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4a:	43da      	mvns	r2, r3
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	401a      	ands	r2, r3
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a54:	f04f 31ff 	mov.w	r1, #4294967295
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a5e:	43d9      	mvns	r1, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a64:	4313      	orrs	r3, r2
         );
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3724      	adds	r7, #36	; 0x24
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr

08001a72 <LL_USART_Enable>:
{
 8001a72:	b480      	push	{r7}
 8001a74:	b083      	sub	sp, #12
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	60da      	str	r2, [r3, #12]
}
 8001a86:	bf00      	nop
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr

08001a92 <LL_USART_ConfigAsyncMode>:
{
 8001a92:	b480      	push	{r7}
 8001a94:	b083      	sub	sp, #12
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	691b      	ldr	r3, [r3, #16]
 8001a9e:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	695b      	ldr	r3, [r3, #20]
 8001aaa:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	615a      	str	r2, [r3, #20]
}
 8001ab2:	bf00      	nop
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
	...

08001ac0 <LL_AHB1_GRP1_EnableClock>:
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001ac8:	4b08      	ldr	r3, [pc, #32]	; (8001aec <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001aca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001acc:	4907      	ldr	r1, [pc, #28]	; (8001aec <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001ad4:	4b05      	ldr	r3, [pc, #20]	; (8001aec <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001ad6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	4013      	ands	r3, r2
 8001adc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ade:	68fb      	ldr	r3, [r7, #12]
}
 8001ae0:	bf00      	nop
 8001ae2:	3714      	adds	r7, #20
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr
 8001aec:	40023800 	.word	0x40023800

08001af0 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b085      	sub	sp, #20
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001af8:	4b08      	ldr	r3, [pc, #32]	; (8001b1c <LL_APB2_GRP1_EnableClock+0x2c>)
 8001afa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001afc:	4907      	ldr	r1, [pc, #28]	; (8001b1c <LL_APB2_GRP1_EnableClock+0x2c>)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001b04:	4b05      	ldr	r3, [pc, #20]	; (8001b1c <LL_APB2_GRP1_EnableClock+0x2c>)
 8001b06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
}
 8001b10:	bf00      	nop
 8001b12:	3714      	adds	r7, #20
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr
 8001b1c:	40023800 	.word	0x40023800

08001b20 <MX_USART6_UART_Init>:
/* USER CODE END 0 */

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b08e      	sub	sp, #56	; 0x38
 8001b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001b26:	f107 031c 	add.w	r3, r7, #28
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	605a      	str	r2, [r3, #4]
 8001b30:	609a      	str	r2, [r3, #8]
 8001b32:	60da      	str	r2, [r3, #12]
 8001b34:	611a      	str	r2, [r3, #16]
 8001b36:	615a      	str	r2, [r3, #20]
 8001b38:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b3a:	1d3b      	adds	r3, r7, #4
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	605a      	str	r2, [r3, #4]
 8001b42:	609a      	str	r2, [r3, #8]
 8001b44:	60da      	str	r2, [r3, #12]
 8001b46:	611a      	str	r2, [r3, #16]
 8001b48:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 8001b4a:	2020      	movs	r0, #32
 8001b4c:	f7ff ffd0 	bl	8001af0 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001b50:	2001      	movs	r0, #1
 8001b52:	f7ff ffb5 	bl	8001ac0 <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PA11   ------> USART6_TX
  PA12   ------> USART6_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 8001b56:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001b5a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001b60:	2303      	movs	r3, #3
 8001b62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001b64:	2300      	movs	r3, #0
 8001b66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8001b6c:	2308      	movs	r3, #8
 8001b6e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b70:	1d3b      	adds	r3, r7, #4
 8001b72:	4619      	mov	r1, r3
 8001b74:	4818      	ldr	r0, [pc, #96]	; (8001bd8 <MX_USART6_UART_Init+0xb8>)
 8001b76:	f000 ff02 	bl	800297e <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001b7a:	f7ff fef1 	bl	8001960 <__NVIC_GetPriorityGrouping>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2200      	movs	r2, #0
 8001b82:	2100      	movs	r1, #0
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff ff41 	bl	8001a0c <NVIC_EncodePriority>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	2047      	movs	r0, #71	; 0x47
 8001b90:	f7ff ff12 	bl	80019b8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 8001b94:	2047      	movs	r0, #71	; 0x47
 8001b96:	f7ff fef1 	bl	800197c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001b9a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001b9e:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001bac:	230c      	movs	r3, #12
 8001bae:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART6, &USART_InitStruct);
 8001bb8:	f107 031c 	add.w	r3, r7, #28
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4807      	ldr	r0, [pc, #28]	; (8001bdc <MX_USART6_UART_Init+0xbc>)
 8001bc0:	f001 fc38 	bl	8003434 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 8001bc4:	4805      	ldr	r0, [pc, #20]	; (8001bdc <MX_USART6_UART_Init+0xbc>)
 8001bc6:	f7ff ff64 	bl	8001a92 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 8001bca:	4804      	ldr	r0, [pc, #16]	; (8001bdc <MX_USART6_UART_Init+0xbc>)
 8001bcc:	f7ff ff51 	bl	8001a72 <LL_USART_Enable>
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001bd0:	bf00      	nop
 8001bd2:	3738      	adds	r7, #56	; 0x38
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	40020000 	.word	0x40020000
 8001bdc:	40011400 	.word	0x40011400

08001be0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001be0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c18 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001be4:	480d      	ldr	r0, [pc, #52]	; (8001c1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001be6:	490e      	ldr	r1, [pc, #56]	; (8001c20 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001be8:	4a0e      	ldr	r2, [pc, #56]	; (8001c24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bec:	e002      	b.n	8001bf4 <LoopCopyDataInit>

08001bee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bf2:	3304      	adds	r3, #4

08001bf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bf8:	d3f9      	bcc.n	8001bee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bfa:	4a0b      	ldr	r2, [pc, #44]	; (8001c28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001bfc:	4c0b      	ldr	r4, [pc, #44]	; (8001c2c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001bfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c00:	e001      	b.n	8001c06 <LoopFillZerobss>

08001c02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c04:	3204      	adds	r2, #4

08001c06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c08:	d3fb      	bcc.n	8001c02 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c0a:	f7ff fe97 	bl	800193c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c0e:	f002 fb29 	bl	8004264 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c12:	f7ff fcad 	bl	8001570 <main>
  bx  lr    
 8001c16:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c18:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001c1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c20:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001c24:	08006334 	.word	0x08006334
  ldr r2, =_sbss
 8001c28:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001c2c:	20000354 	.word	0x20000354

08001c30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c30:	e7fe      	b.n	8001c30 <ADC_IRQHandler>
	...

08001c34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c38:	4b0e      	ldr	r3, [pc, #56]	; (8001c74 <HAL_Init+0x40>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a0d      	ldr	r2, [pc, #52]	; (8001c74 <HAL_Init+0x40>)
 8001c3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c44:	4b0b      	ldr	r3, [pc, #44]	; (8001c74 <HAL_Init+0x40>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a0a      	ldr	r2, [pc, #40]	; (8001c74 <HAL_Init+0x40>)
 8001c4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c50:	4b08      	ldr	r3, [pc, #32]	; (8001c74 <HAL_Init+0x40>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a07      	ldr	r2, [pc, #28]	; (8001c74 <HAL_Init+0x40>)
 8001c56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c5c:	2003      	movs	r0, #3
 8001c5e:	f000 f931 	bl	8001ec4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c62:	200f      	movs	r0, #15
 8001c64:	f000 f808 	bl	8001c78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c68:	f7ff fd20 	bl	80016ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	40023c00 	.word	0x40023c00

08001c78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c80:	4b12      	ldr	r3, [pc, #72]	; (8001ccc <HAL_InitTick+0x54>)
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	4b12      	ldr	r3, [pc, #72]	; (8001cd0 <HAL_InitTick+0x58>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	4619      	mov	r1, r3
 8001c8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c96:	4618      	mov	r0, r3
 8001c98:	f000 f93b 	bl	8001f12 <HAL_SYSTICK_Config>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e00e      	b.n	8001cc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2b0f      	cmp	r3, #15
 8001caa:	d80a      	bhi.n	8001cc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cac:	2200      	movs	r2, #0
 8001cae:	6879      	ldr	r1, [r7, #4]
 8001cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cb4:	f000 f911 	bl	8001eda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cb8:	4a06      	ldr	r2, [pc, #24]	; (8001cd4 <HAL_InitTick+0x5c>)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	e000      	b.n	8001cc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3708      	adds	r7, #8
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	20000000 	.word	0x20000000
 8001cd0:	20000008 	.word	0x20000008
 8001cd4:	20000004 	.word	0x20000004

08001cd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cdc:	4b06      	ldr	r3, [pc, #24]	; (8001cf8 <HAL_IncTick+0x20>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	4b06      	ldr	r3, [pc, #24]	; (8001cfc <HAL_IncTick+0x24>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	4a04      	ldr	r2, [pc, #16]	; (8001cfc <HAL_IncTick+0x24>)
 8001cea:	6013      	str	r3, [r2, #0]
}
 8001cec:	bf00      	nop
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	20000008 	.word	0x20000008
 8001cfc:	20000204 	.word	0x20000204

08001d00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  return uwTick;
 8001d04:	4b03      	ldr	r3, [pc, #12]	; (8001d14 <HAL_GetTick+0x14>)
 8001d06:	681b      	ldr	r3, [r3, #0]
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	20000204 	.word	0x20000204

08001d18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d20:	f7ff ffee 	bl	8001d00 <HAL_GetTick>
 8001d24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d30:	d005      	beq.n	8001d3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d32:	4b0a      	ldr	r3, [pc, #40]	; (8001d5c <HAL_Delay+0x44>)
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	461a      	mov	r2, r3
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d3e:	bf00      	nop
 8001d40:	f7ff ffde 	bl	8001d00 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	68fa      	ldr	r2, [r7, #12]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d8f7      	bhi.n	8001d40 <HAL_Delay+0x28>
  {
  }
}
 8001d50:	bf00      	nop
 8001d52:	bf00      	nop
 8001d54:	3710      	adds	r7, #16
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	20000008 	.word	0x20000008

08001d60 <__NVIC_SetPriorityGrouping>:
{
 8001d60:	b480      	push	{r7}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f003 0307 	and.w	r3, r3, #7
 8001d6e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d70:	4b0c      	ldr	r3, [pc, #48]	; (8001da4 <__NVIC_SetPriorityGrouping+0x44>)
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d76:	68ba      	ldr	r2, [r7, #8]
 8001d78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d92:	4a04      	ldr	r2, [pc, #16]	; (8001da4 <__NVIC_SetPriorityGrouping+0x44>)
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	60d3      	str	r3, [r2, #12]
}
 8001d98:	bf00      	nop
 8001d9a:	3714      	adds	r7, #20
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr
 8001da4:	e000ed00 	.word	0xe000ed00

08001da8 <__NVIC_GetPriorityGrouping>:
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dac:	4b04      	ldr	r3, [pc, #16]	; (8001dc0 <__NVIC_GetPriorityGrouping+0x18>)
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	0a1b      	lsrs	r3, r3, #8
 8001db2:	f003 0307 	and.w	r3, r3, #7
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr
 8001dc0:	e000ed00 	.word	0xe000ed00

08001dc4 <__NVIC_SetPriority>:
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	4603      	mov	r3, r0
 8001dcc:	6039      	str	r1, [r7, #0]
 8001dce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	db0a      	blt.n	8001dee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	b2da      	uxtb	r2, r3
 8001ddc:	490c      	ldr	r1, [pc, #48]	; (8001e10 <__NVIC_SetPriority+0x4c>)
 8001dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de2:	0112      	lsls	r2, r2, #4
 8001de4:	b2d2      	uxtb	r2, r2
 8001de6:	440b      	add	r3, r1
 8001de8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001dec:	e00a      	b.n	8001e04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	b2da      	uxtb	r2, r3
 8001df2:	4908      	ldr	r1, [pc, #32]	; (8001e14 <__NVIC_SetPriority+0x50>)
 8001df4:	79fb      	ldrb	r3, [r7, #7]
 8001df6:	f003 030f 	and.w	r3, r3, #15
 8001dfa:	3b04      	subs	r3, #4
 8001dfc:	0112      	lsls	r2, r2, #4
 8001dfe:	b2d2      	uxtb	r2, r2
 8001e00:	440b      	add	r3, r1
 8001e02:	761a      	strb	r2, [r3, #24]
}
 8001e04:	bf00      	nop
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr
 8001e10:	e000e100 	.word	0xe000e100
 8001e14:	e000ed00 	.word	0xe000ed00

08001e18 <NVIC_EncodePriority>:
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b089      	sub	sp, #36	; 0x24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f003 0307 	and.w	r3, r3, #7
 8001e2a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	f1c3 0307 	rsb	r3, r3, #7
 8001e32:	2b04      	cmp	r3, #4
 8001e34:	bf28      	it	cs
 8001e36:	2304      	movcs	r3, #4
 8001e38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	3304      	adds	r3, #4
 8001e3e:	2b06      	cmp	r3, #6
 8001e40:	d902      	bls.n	8001e48 <NVIC_EncodePriority+0x30>
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	3b03      	subs	r3, #3
 8001e46:	e000      	b.n	8001e4a <NVIC_EncodePriority+0x32>
 8001e48:	2300      	movs	r3, #0
 8001e4a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	43da      	mvns	r2, r3
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	401a      	ands	r2, r3
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e60:	f04f 31ff 	mov.w	r1, #4294967295
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	fa01 f303 	lsl.w	r3, r1, r3
 8001e6a:	43d9      	mvns	r1, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e70:	4313      	orrs	r3, r2
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3724      	adds	r7, #36	; 0x24
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
	...

08001e80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e90:	d301      	bcc.n	8001e96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e92:	2301      	movs	r3, #1
 8001e94:	e00f      	b.n	8001eb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e96:	4a0a      	ldr	r2, [pc, #40]	; (8001ec0 <SysTick_Config+0x40>)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e9e:	210f      	movs	r1, #15
 8001ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ea4:	f7ff ff8e 	bl	8001dc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ea8:	4b05      	ldr	r3, [pc, #20]	; (8001ec0 <SysTick_Config+0x40>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eae:	4b04      	ldr	r3, [pc, #16]	; (8001ec0 <SysTick_Config+0x40>)
 8001eb0:	2207      	movs	r2, #7
 8001eb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	e000e010 	.word	0xe000e010

08001ec4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f7ff ff47 	bl	8001d60 <__NVIC_SetPriorityGrouping>
}
 8001ed2:	bf00      	nop
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b086      	sub	sp, #24
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	60b9      	str	r1, [r7, #8]
 8001ee4:	607a      	str	r2, [r7, #4]
 8001ee6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001eec:	f7ff ff5c 	bl	8001da8 <__NVIC_GetPriorityGrouping>
 8001ef0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	68b9      	ldr	r1, [r7, #8]
 8001ef6:	6978      	ldr	r0, [r7, #20]
 8001ef8:	f7ff ff8e 	bl	8001e18 <NVIC_EncodePriority>
 8001efc:	4602      	mov	r2, r0
 8001efe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f02:	4611      	mov	r1, r2
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff ff5d 	bl	8001dc4 <__NVIC_SetPriority>
}
 8001f0a:	bf00      	nop
 8001f0c:	3718      	adds	r7, #24
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b082      	sub	sp, #8
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f7ff ffb0 	bl	8001e80 <SysTick_Config>
 8001f20:	4603      	mov	r3, r0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
	...

08001f2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b086      	sub	sp, #24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d101      	bne.n	8001f3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e267      	b.n	800240e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d075      	beq.n	8002036 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f4a:	4b88      	ldr	r3, [pc, #544]	; (800216c <HAL_RCC_OscConfig+0x240>)
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f003 030c 	and.w	r3, r3, #12
 8001f52:	2b04      	cmp	r3, #4
 8001f54:	d00c      	beq.n	8001f70 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f56:	4b85      	ldr	r3, [pc, #532]	; (800216c <HAL_RCC_OscConfig+0x240>)
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f5e:	2b08      	cmp	r3, #8
 8001f60:	d112      	bne.n	8001f88 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f62:	4b82      	ldr	r3, [pc, #520]	; (800216c <HAL_RCC_OscConfig+0x240>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f6e:	d10b      	bne.n	8001f88 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f70:	4b7e      	ldr	r3, [pc, #504]	; (800216c <HAL_RCC_OscConfig+0x240>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d05b      	beq.n	8002034 <HAL_RCC_OscConfig+0x108>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d157      	bne.n	8002034 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e242      	b.n	800240e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f90:	d106      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x74>
 8001f92:	4b76      	ldr	r3, [pc, #472]	; (800216c <HAL_RCC_OscConfig+0x240>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a75      	ldr	r2, [pc, #468]	; (800216c <HAL_RCC_OscConfig+0x240>)
 8001f98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f9c:	6013      	str	r3, [r2, #0]
 8001f9e:	e01d      	b.n	8001fdc <HAL_RCC_OscConfig+0xb0>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fa8:	d10c      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x98>
 8001faa:	4b70      	ldr	r3, [pc, #448]	; (800216c <HAL_RCC_OscConfig+0x240>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a6f      	ldr	r2, [pc, #444]	; (800216c <HAL_RCC_OscConfig+0x240>)
 8001fb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fb4:	6013      	str	r3, [r2, #0]
 8001fb6:	4b6d      	ldr	r3, [pc, #436]	; (800216c <HAL_RCC_OscConfig+0x240>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a6c      	ldr	r2, [pc, #432]	; (800216c <HAL_RCC_OscConfig+0x240>)
 8001fbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fc0:	6013      	str	r3, [r2, #0]
 8001fc2:	e00b      	b.n	8001fdc <HAL_RCC_OscConfig+0xb0>
 8001fc4:	4b69      	ldr	r3, [pc, #420]	; (800216c <HAL_RCC_OscConfig+0x240>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a68      	ldr	r2, [pc, #416]	; (800216c <HAL_RCC_OscConfig+0x240>)
 8001fca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fce:	6013      	str	r3, [r2, #0]
 8001fd0:	4b66      	ldr	r3, [pc, #408]	; (800216c <HAL_RCC_OscConfig+0x240>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a65      	ldr	r2, [pc, #404]	; (800216c <HAL_RCC_OscConfig+0x240>)
 8001fd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d013      	beq.n	800200c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe4:	f7ff fe8c 	bl	8001d00 <HAL_GetTick>
 8001fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fea:	e008      	b.n	8001ffe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fec:	f7ff fe88 	bl	8001d00 <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	2b64      	cmp	r3, #100	; 0x64
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e207      	b.n	800240e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ffe:	4b5b      	ldr	r3, [pc, #364]	; (800216c <HAL_RCC_OscConfig+0x240>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d0f0      	beq.n	8001fec <HAL_RCC_OscConfig+0xc0>
 800200a:	e014      	b.n	8002036 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800200c:	f7ff fe78 	bl	8001d00 <HAL_GetTick>
 8002010:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002012:	e008      	b.n	8002026 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002014:	f7ff fe74 	bl	8001d00 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b64      	cmp	r3, #100	; 0x64
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e1f3      	b.n	800240e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002026:	4b51      	ldr	r3, [pc, #324]	; (800216c <HAL_RCC_OscConfig+0x240>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d1f0      	bne.n	8002014 <HAL_RCC_OscConfig+0xe8>
 8002032:	e000      	b.n	8002036 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002034:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d063      	beq.n	800210a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002042:	4b4a      	ldr	r3, [pc, #296]	; (800216c <HAL_RCC_OscConfig+0x240>)
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	f003 030c 	and.w	r3, r3, #12
 800204a:	2b00      	cmp	r3, #0
 800204c:	d00b      	beq.n	8002066 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800204e:	4b47      	ldr	r3, [pc, #284]	; (800216c <HAL_RCC_OscConfig+0x240>)
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002056:	2b08      	cmp	r3, #8
 8002058:	d11c      	bne.n	8002094 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800205a:	4b44      	ldr	r3, [pc, #272]	; (800216c <HAL_RCC_OscConfig+0x240>)
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d116      	bne.n	8002094 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002066:	4b41      	ldr	r3, [pc, #260]	; (800216c <HAL_RCC_OscConfig+0x240>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d005      	beq.n	800207e <HAL_RCC_OscConfig+0x152>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	2b01      	cmp	r3, #1
 8002078:	d001      	beq.n	800207e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e1c7      	b.n	800240e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800207e:	4b3b      	ldr	r3, [pc, #236]	; (800216c <HAL_RCC_OscConfig+0x240>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	691b      	ldr	r3, [r3, #16]
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	4937      	ldr	r1, [pc, #220]	; (800216c <HAL_RCC_OscConfig+0x240>)
 800208e:	4313      	orrs	r3, r2
 8002090:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002092:	e03a      	b.n	800210a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d020      	beq.n	80020de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800209c:	4b34      	ldr	r3, [pc, #208]	; (8002170 <HAL_RCC_OscConfig+0x244>)
 800209e:	2201      	movs	r2, #1
 80020a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a2:	f7ff fe2d 	bl	8001d00 <HAL_GetTick>
 80020a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020a8:	e008      	b.n	80020bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020aa:	f7ff fe29 	bl	8001d00 <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d901      	bls.n	80020bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e1a8      	b.n	800240e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020bc:	4b2b      	ldr	r3, [pc, #172]	; (800216c <HAL_RCC_OscConfig+0x240>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0302 	and.w	r3, r3, #2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d0f0      	beq.n	80020aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020c8:	4b28      	ldr	r3, [pc, #160]	; (800216c <HAL_RCC_OscConfig+0x240>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	691b      	ldr	r3, [r3, #16]
 80020d4:	00db      	lsls	r3, r3, #3
 80020d6:	4925      	ldr	r1, [pc, #148]	; (800216c <HAL_RCC_OscConfig+0x240>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	600b      	str	r3, [r1, #0]
 80020dc:	e015      	b.n	800210a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020de:	4b24      	ldr	r3, [pc, #144]	; (8002170 <HAL_RCC_OscConfig+0x244>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e4:	f7ff fe0c 	bl	8001d00 <HAL_GetTick>
 80020e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ea:	e008      	b.n	80020fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020ec:	f7ff fe08 	bl	8001d00 <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e187      	b.n	800240e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020fe:	4b1b      	ldr	r3, [pc, #108]	; (800216c <HAL_RCC_OscConfig+0x240>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	2b00      	cmp	r3, #0
 8002108:	d1f0      	bne.n	80020ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0308 	and.w	r3, r3, #8
 8002112:	2b00      	cmp	r3, #0
 8002114:	d036      	beq.n	8002184 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	695b      	ldr	r3, [r3, #20]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d016      	beq.n	800214c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800211e:	4b15      	ldr	r3, [pc, #84]	; (8002174 <HAL_RCC_OscConfig+0x248>)
 8002120:	2201      	movs	r2, #1
 8002122:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002124:	f7ff fdec 	bl	8001d00 <HAL_GetTick>
 8002128:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800212a:	e008      	b.n	800213e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800212c:	f7ff fde8 	bl	8001d00 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	2b02      	cmp	r3, #2
 8002138:	d901      	bls.n	800213e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e167      	b.n	800240e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800213e:	4b0b      	ldr	r3, [pc, #44]	; (800216c <HAL_RCC_OscConfig+0x240>)
 8002140:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002142:	f003 0302 	and.w	r3, r3, #2
 8002146:	2b00      	cmp	r3, #0
 8002148:	d0f0      	beq.n	800212c <HAL_RCC_OscConfig+0x200>
 800214a:	e01b      	b.n	8002184 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800214c:	4b09      	ldr	r3, [pc, #36]	; (8002174 <HAL_RCC_OscConfig+0x248>)
 800214e:	2200      	movs	r2, #0
 8002150:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002152:	f7ff fdd5 	bl	8001d00 <HAL_GetTick>
 8002156:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002158:	e00e      	b.n	8002178 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800215a:	f7ff fdd1 	bl	8001d00 <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	2b02      	cmp	r3, #2
 8002166:	d907      	bls.n	8002178 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e150      	b.n	800240e <HAL_RCC_OscConfig+0x4e2>
 800216c:	40023800 	.word	0x40023800
 8002170:	42470000 	.word	0x42470000
 8002174:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002178:	4b88      	ldr	r3, [pc, #544]	; (800239c <HAL_RCC_OscConfig+0x470>)
 800217a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800217c:	f003 0302 	and.w	r3, r3, #2
 8002180:	2b00      	cmp	r3, #0
 8002182:	d1ea      	bne.n	800215a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0304 	and.w	r3, r3, #4
 800218c:	2b00      	cmp	r3, #0
 800218e:	f000 8097 	beq.w	80022c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002192:	2300      	movs	r3, #0
 8002194:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002196:	4b81      	ldr	r3, [pc, #516]	; (800239c <HAL_RCC_OscConfig+0x470>)
 8002198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d10f      	bne.n	80021c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021a2:	2300      	movs	r3, #0
 80021a4:	60bb      	str	r3, [r7, #8]
 80021a6:	4b7d      	ldr	r3, [pc, #500]	; (800239c <HAL_RCC_OscConfig+0x470>)
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	4a7c      	ldr	r2, [pc, #496]	; (800239c <HAL_RCC_OscConfig+0x470>)
 80021ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021b0:	6413      	str	r3, [r2, #64]	; 0x40
 80021b2:	4b7a      	ldr	r3, [pc, #488]	; (800239c <HAL_RCC_OscConfig+0x470>)
 80021b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ba:	60bb      	str	r3, [r7, #8]
 80021bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021be:	2301      	movs	r3, #1
 80021c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021c2:	4b77      	ldr	r3, [pc, #476]	; (80023a0 <HAL_RCC_OscConfig+0x474>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d118      	bne.n	8002200 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021ce:	4b74      	ldr	r3, [pc, #464]	; (80023a0 <HAL_RCC_OscConfig+0x474>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a73      	ldr	r2, [pc, #460]	; (80023a0 <HAL_RCC_OscConfig+0x474>)
 80021d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021da:	f7ff fd91 	bl	8001d00 <HAL_GetTick>
 80021de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021e0:	e008      	b.n	80021f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021e2:	f7ff fd8d 	bl	8001d00 <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d901      	bls.n	80021f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e10c      	b.n	800240e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021f4:	4b6a      	ldr	r3, [pc, #424]	; (80023a0 <HAL_RCC_OscConfig+0x474>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d0f0      	beq.n	80021e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d106      	bne.n	8002216 <HAL_RCC_OscConfig+0x2ea>
 8002208:	4b64      	ldr	r3, [pc, #400]	; (800239c <HAL_RCC_OscConfig+0x470>)
 800220a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800220c:	4a63      	ldr	r2, [pc, #396]	; (800239c <HAL_RCC_OscConfig+0x470>)
 800220e:	f043 0301 	orr.w	r3, r3, #1
 8002212:	6713      	str	r3, [r2, #112]	; 0x70
 8002214:	e01c      	b.n	8002250 <HAL_RCC_OscConfig+0x324>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	2b05      	cmp	r3, #5
 800221c:	d10c      	bne.n	8002238 <HAL_RCC_OscConfig+0x30c>
 800221e:	4b5f      	ldr	r3, [pc, #380]	; (800239c <HAL_RCC_OscConfig+0x470>)
 8002220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002222:	4a5e      	ldr	r2, [pc, #376]	; (800239c <HAL_RCC_OscConfig+0x470>)
 8002224:	f043 0304 	orr.w	r3, r3, #4
 8002228:	6713      	str	r3, [r2, #112]	; 0x70
 800222a:	4b5c      	ldr	r3, [pc, #368]	; (800239c <HAL_RCC_OscConfig+0x470>)
 800222c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800222e:	4a5b      	ldr	r2, [pc, #364]	; (800239c <HAL_RCC_OscConfig+0x470>)
 8002230:	f043 0301 	orr.w	r3, r3, #1
 8002234:	6713      	str	r3, [r2, #112]	; 0x70
 8002236:	e00b      	b.n	8002250 <HAL_RCC_OscConfig+0x324>
 8002238:	4b58      	ldr	r3, [pc, #352]	; (800239c <HAL_RCC_OscConfig+0x470>)
 800223a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800223c:	4a57      	ldr	r2, [pc, #348]	; (800239c <HAL_RCC_OscConfig+0x470>)
 800223e:	f023 0301 	bic.w	r3, r3, #1
 8002242:	6713      	str	r3, [r2, #112]	; 0x70
 8002244:	4b55      	ldr	r3, [pc, #340]	; (800239c <HAL_RCC_OscConfig+0x470>)
 8002246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002248:	4a54      	ldr	r2, [pc, #336]	; (800239c <HAL_RCC_OscConfig+0x470>)
 800224a:	f023 0304 	bic.w	r3, r3, #4
 800224e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d015      	beq.n	8002284 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002258:	f7ff fd52 	bl	8001d00 <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800225e:	e00a      	b.n	8002276 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002260:	f7ff fd4e 	bl	8001d00 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	f241 3288 	movw	r2, #5000	; 0x1388
 800226e:	4293      	cmp	r3, r2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e0cb      	b.n	800240e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002276:	4b49      	ldr	r3, [pc, #292]	; (800239c <HAL_RCC_OscConfig+0x470>)
 8002278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d0ee      	beq.n	8002260 <HAL_RCC_OscConfig+0x334>
 8002282:	e014      	b.n	80022ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002284:	f7ff fd3c 	bl	8001d00 <HAL_GetTick>
 8002288:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800228a:	e00a      	b.n	80022a2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800228c:	f7ff fd38 	bl	8001d00 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	f241 3288 	movw	r2, #5000	; 0x1388
 800229a:	4293      	cmp	r3, r2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e0b5      	b.n	800240e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022a2:	4b3e      	ldr	r3, [pc, #248]	; (800239c <HAL_RCC_OscConfig+0x470>)
 80022a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1ee      	bne.n	800228c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022ae:	7dfb      	ldrb	r3, [r7, #23]
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d105      	bne.n	80022c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022b4:	4b39      	ldr	r3, [pc, #228]	; (800239c <HAL_RCC_OscConfig+0x470>)
 80022b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b8:	4a38      	ldr	r2, [pc, #224]	; (800239c <HAL_RCC_OscConfig+0x470>)
 80022ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	699b      	ldr	r3, [r3, #24]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	f000 80a1 	beq.w	800240c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022ca:	4b34      	ldr	r3, [pc, #208]	; (800239c <HAL_RCC_OscConfig+0x470>)
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f003 030c 	and.w	r3, r3, #12
 80022d2:	2b08      	cmp	r3, #8
 80022d4:	d05c      	beq.n	8002390 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d141      	bne.n	8002362 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022de:	4b31      	ldr	r3, [pc, #196]	; (80023a4 <HAL_RCC_OscConfig+0x478>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e4:	f7ff fd0c 	bl	8001d00 <HAL_GetTick>
 80022e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ea:	e008      	b.n	80022fe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022ec:	f7ff fd08 	bl	8001d00 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e087      	b.n	800240e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022fe:	4b27      	ldr	r3, [pc, #156]	; (800239c <HAL_RCC_OscConfig+0x470>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d1f0      	bne.n	80022ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	69da      	ldr	r2, [r3, #28]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a1b      	ldr	r3, [r3, #32]
 8002312:	431a      	orrs	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002318:	019b      	lsls	r3, r3, #6
 800231a:	431a      	orrs	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002320:	085b      	lsrs	r3, r3, #1
 8002322:	3b01      	subs	r3, #1
 8002324:	041b      	lsls	r3, r3, #16
 8002326:	431a      	orrs	r2, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232c:	061b      	lsls	r3, r3, #24
 800232e:	491b      	ldr	r1, [pc, #108]	; (800239c <HAL_RCC_OscConfig+0x470>)
 8002330:	4313      	orrs	r3, r2
 8002332:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002334:	4b1b      	ldr	r3, [pc, #108]	; (80023a4 <HAL_RCC_OscConfig+0x478>)
 8002336:	2201      	movs	r2, #1
 8002338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800233a:	f7ff fce1 	bl	8001d00 <HAL_GetTick>
 800233e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002340:	e008      	b.n	8002354 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002342:	f7ff fcdd 	bl	8001d00 <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	2b02      	cmp	r3, #2
 800234e:	d901      	bls.n	8002354 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e05c      	b.n	800240e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002354:	4b11      	ldr	r3, [pc, #68]	; (800239c <HAL_RCC_OscConfig+0x470>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d0f0      	beq.n	8002342 <HAL_RCC_OscConfig+0x416>
 8002360:	e054      	b.n	800240c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002362:	4b10      	ldr	r3, [pc, #64]	; (80023a4 <HAL_RCC_OscConfig+0x478>)
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002368:	f7ff fcca 	bl	8001d00 <HAL_GetTick>
 800236c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800236e:	e008      	b.n	8002382 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002370:	f7ff fcc6 	bl	8001d00 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b02      	cmp	r3, #2
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e045      	b.n	800240e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002382:	4b06      	ldr	r3, [pc, #24]	; (800239c <HAL_RCC_OscConfig+0x470>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1f0      	bne.n	8002370 <HAL_RCC_OscConfig+0x444>
 800238e:	e03d      	b.n	800240c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	2b01      	cmp	r3, #1
 8002396:	d107      	bne.n	80023a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e038      	b.n	800240e <HAL_RCC_OscConfig+0x4e2>
 800239c:	40023800 	.word	0x40023800
 80023a0:	40007000 	.word	0x40007000
 80023a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80023a8:	4b1b      	ldr	r3, [pc, #108]	; (8002418 <HAL_RCC_OscConfig+0x4ec>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d028      	beq.n	8002408 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d121      	bne.n	8002408 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d11a      	bne.n	8002408 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80023d8:	4013      	ands	r3, r2
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80023de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d111      	bne.n	8002408 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ee:	085b      	lsrs	r3, r3, #1
 80023f0:	3b01      	subs	r3, #1
 80023f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d107      	bne.n	8002408 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002402:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002404:	429a      	cmp	r2, r3
 8002406:	d001      	beq.n	800240c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e000      	b.n	800240e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3718      	adds	r7, #24
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	40023800 	.word	0x40023800

0800241c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d101      	bne.n	8002430 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e0cc      	b.n	80025ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002430:	4b68      	ldr	r3, [pc, #416]	; (80025d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0307 	and.w	r3, r3, #7
 8002438:	683a      	ldr	r2, [r7, #0]
 800243a:	429a      	cmp	r2, r3
 800243c:	d90c      	bls.n	8002458 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800243e:	4b65      	ldr	r3, [pc, #404]	; (80025d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002440:	683a      	ldr	r2, [r7, #0]
 8002442:	b2d2      	uxtb	r2, r2
 8002444:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002446:	4b63      	ldr	r3, [pc, #396]	; (80025d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0307 	and.w	r3, r3, #7
 800244e:	683a      	ldr	r2, [r7, #0]
 8002450:	429a      	cmp	r2, r3
 8002452:	d001      	beq.n	8002458 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e0b8      	b.n	80025ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0302 	and.w	r3, r3, #2
 8002460:	2b00      	cmp	r3, #0
 8002462:	d020      	beq.n	80024a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0304 	and.w	r3, r3, #4
 800246c:	2b00      	cmp	r3, #0
 800246e:	d005      	beq.n	800247c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002470:	4b59      	ldr	r3, [pc, #356]	; (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	4a58      	ldr	r2, [pc, #352]	; (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002476:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800247a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0308 	and.w	r3, r3, #8
 8002484:	2b00      	cmp	r3, #0
 8002486:	d005      	beq.n	8002494 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002488:	4b53      	ldr	r3, [pc, #332]	; (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	4a52      	ldr	r2, [pc, #328]	; (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 800248e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002492:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002494:	4b50      	ldr	r3, [pc, #320]	; (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	494d      	ldr	r1, [pc, #308]	; (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d044      	beq.n	800253c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d107      	bne.n	80024ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ba:	4b47      	ldr	r3, [pc, #284]	; (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d119      	bne.n	80024fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e07f      	b.n	80025ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d003      	beq.n	80024da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024d6:	2b03      	cmp	r3, #3
 80024d8:	d107      	bne.n	80024ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024da:	4b3f      	ldr	r3, [pc, #252]	; (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d109      	bne.n	80024fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e06f      	b.n	80025ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ea:	4b3b      	ldr	r3, [pc, #236]	; (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d101      	bne.n	80024fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e067      	b.n	80025ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024fa:	4b37      	ldr	r3, [pc, #220]	; (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f023 0203 	bic.w	r2, r3, #3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	4934      	ldr	r1, [pc, #208]	; (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002508:	4313      	orrs	r3, r2
 800250a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800250c:	f7ff fbf8 	bl	8001d00 <HAL_GetTick>
 8002510:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002512:	e00a      	b.n	800252a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002514:	f7ff fbf4 	bl	8001d00 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002522:	4293      	cmp	r3, r2
 8002524:	d901      	bls.n	800252a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e04f      	b.n	80025ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800252a:	4b2b      	ldr	r3, [pc, #172]	; (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f003 020c 	and.w	r2, r3, #12
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	429a      	cmp	r2, r3
 800253a:	d1eb      	bne.n	8002514 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800253c:	4b25      	ldr	r3, [pc, #148]	; (80025d4 <HAL_RCC_ClockConfig+0x1b8>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0307 	and.w	r3, r3, #7
 8002544:	683a      	ldr	r2, [r7, #0]
 8002546:	429a      	cmp	r2, r3
 8002548:	d20c      	bcs.n	8002564 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800254a:	4b22      	ldr	r3, [pc, #136]	; (80025d4 <HAL_RCC_ClockConfig+0x1b8>)
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	b2d2      	uxtb	r2, r2
 8002550:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002552:	4b20      	ldr	r3, [pc, #128]	; (80025d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0307 	and.w	r3, r3, #7
 800255a:	683a      	ldr	r2, [r7, #0]
 800255c:	429a      	cmp	r2, r3
 800255e:	d001      	beq.n	8002564 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e032      	b.n	80025ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0304 	and.w	r3, r3, #4
 800256c:	2b00      	cmp	r3, #0
 800256e:	d008      	beq.n	8002582 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002570:	4b19      	ldr	r3, [pc, #100]	; (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	4916      	ldr	r1, [pc, #88]	; (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 800257e:	4313      	orrs	r3, r2
 8002580:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0308 	and.w	r3, r3, #8
 800258a:	2b00      	cmp	r3, #0
 800258c:	d009      	beq.n	80025a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800258e:	4b12      	ldr	r3, [pc, #72]	; (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	00db      	lsls	r3, r3, #3
 800259c:	490e      	ldr	r1, [pc, #56]	; (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025a2:	f000 f821 	bl	80025e8 <HAL_RCC_GetSysClockFreq>
 80025a6:	4602      	mov	r2, r0
 80025a8:	4b0b      	ldr	r3, [pc, #44]	; (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	091b      	lsrs	r3, r3, #4
 80025ae:	f003 030f 	and.w	r3, r3, #15
 80025b2:	490a      	ldr	r1, [pc, #40]	; (80025dc <HAL_RCC_ClockConfig+0x1c0>)
 80025b4:	5ccb      	ldrb	r3, [r1, r3]
 80025b6:	fa22 f303 	lsr.w	r3, r2, r3
 80025ba:	4a09      	ldr	r2, [pc, #36]	; (80025e0 <HAL_RCC_ClockConfig+0x1c4>)
 80025bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80025be:	4b09      	ldr	r3, [pc, #36]	; (80025e4 <HAL_RCC_ClockConfig+0x1c8>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7ff fb58 	bl	8001c78 <HAL_InitTick>

  return HAL_OK;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	40023c00 	.word	0x40023c00
 80025d8:	40023800 	.word	0x40023800
 80025dc:	08005f9c 	.word	0x08005f9c
 80025e0:	20000000 	.word	0x20000000
 80025e4:	20000004 	.word	0x20000004

080025e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025ec:	b090      	sub	sp, #64	; 0x40
 80025ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80025f0:	2300      	movs	r3, #0
 80025f2:	637b      	str	r3, [r7, #52]	; 0x34
 80025f4:	2300      	movs	r3, #0
 80025f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025f8:	2300      	movs	r3, #0
 80025fa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80025fc:	2300      	movs	r3, #0
 80025fe:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002600:	4b59      	ldr	r3, [pc, #356]	; (8002768 <HAL_RCC_GetSysClockFreq+0x180>)
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f003 030c 	and.w	r3, r3, #12
 8002608:	2b08      	cmp	r3, #8
 800260a:	d00d      	beq.n	8002628 <HAL_RCC_GetSysClockFreq+0x40>
 800260c:	2b08      	cmp	r3, #8
 800260e:	f200 80a1 	bhi.w	8002754 <HAL_RCC_GetSysClockFreq+0x16c>
 8002612:	2b00      	cmp	r3, #0
 8002614:	d002      	beq.n	800261c <HAL_RCC_GetSysClockFreq+0x34>
 8002616:	2b04      	cmp	r3, #4
 8002618:	d003      	beq.n	8002622 <HAL_RCC_GetSysClockFreq+0x3a>
 800261a:	e09b      	b.n	8002754 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800261c:	4b53      	ldr	r3, [pc, #332]	; (800276c <HAL_RCC_GetSysClockFreq+0x184>)
 800261e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002620:	e09b      	b.n	800275a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002622:	4b53      	ldr	r3, [pc, #332]	; (8002770 <HAL_RCC_GetSysClockFreq+0x188>)
 8002624:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002626:	e098      	b.n	800275a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002628:	4b4f      	ldr	r3, [pc, #316]	; (8002768 <HAL_RCC_GetSysClockFreq+0x180>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002630:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002632:	4b4d      	ldr	r3, [pc, #308]	; (8002768 <HAL_RCC_GetSysClockFreq+0x180>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d028      	beq.n	8002690 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800263e:	4b4a      	ldr	r3, [pc, #296]	; (8002768 <HAL_RCC_GetSysClockFreq+0x180>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	099b      	lsrs	r3, r3, #6
 8002644:	2200      	movs	r2, #0
 8002646:	623b      	str	r3, [r7, #32]
 8002648:	627a      	str	r2, [r7, #36]	; 0x24
 800264a:	6a3b      	ldr	r3, [r7, #32]
 800264c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002650:	2100      	movs	r1, #0
 8002652:	4b47      	ldr	r3, [pc, #284]	; (8002770 <HAL_RCC_GetSysClockFreq+0x188>)
 8002654:	fb03 f201 	mul.w	r2, r3, r1
 8002658:	2300      	movs	r3, #0
 800265a:	fb00 f303 	mul.w	r3, r0, r3
 800265e:	4413      	add	r3, r2
 8002660:	4a43      	ldr	r2, [pc, #268]	; (8002770 <HAL_RCC_GetSysClockFreq+0x188>)
 8002662:	fba0 1202 	umull	r1, r2, r0, r2
 8002666:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002668:	460a      	mov	r2, r1
 800266a:	62ba      	str	r2, [r7, #40]	; 0x28
 800266c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800266e:	4413      	add	r3, r2
 8002670:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002674:	2200      	movs	r2, #0
 8002676:	61bb      	str	r3, [r7, #24]
 8002678:	61fa      	str	r2, [r7, #28]
 800267a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800267e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002682:	f7fe fa99 	bl	8000bb8 <__aeabi_uldivmod>
 8002686:	4602      	mov	r2, r0
 8002688:	460b      	mov	r3, r1
 800268a:	4613      	mov	r3, r2
 800268c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800268e:	e053      	b.n	8002738 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002690:	4b35      	ldr	r3, [pc, #212]	; (8002768 <HAL_RCC_GetSysClockFreq+0x180>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	099b      	lsrs	r3, r3, #6
 8002696:	2200      	movs	r2, #0
 8002698:	613b      	str	r3, [r7, #16]
 800269a:	617a      	str	r2, [r7, #20]
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80026a2:	f04f 0b00 	mov.w	fp, #0
 80026a6:	4652      	mov	r2, sl
 80026a8:	465b      	mov	r3, fp
 80026aa:	f04f 0000 	mov.w	r0, #0
 80026ae:	f04f 0100 	mov.w	r1, #0
 80026b2:	0159      	lsls	r1, r3, #5
 80026b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026b8:	0150      	lsls	r0, r2, #5
 80026ba:	4602      	mov	r2, r0
 80026bc:	460b      	mov	r3, r1
 80026be:	ebb2 080a 	subs.w	r8, r2, sl
 80026c2:	eb63 090b 	sbc.w	r9, r3, fp
 80026c6:	f04f 0200 	mov.w	r2, #0
 80026ca:	f04f 0300 	mov.w	r3, #0
 80026ce:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80026d2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80026d6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80026da:	ebb2 0408 	subs.w	r4, r2, r8
 80026de:	eb63 0509 	sbc.w	r5, r3, r9
 80026e2:	f04f 0200 	mov.w	r2, #0
 80026e6:	f04f 0300 	mov.w	r3, #0
 80026ea:	00eb      	lsls	r3, r5, #3
 80026ec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026f0:	00e2      	lsls	r2, r4, #3
 80026f2:	4614      	mov	r4, r2
 80026f4:	461d      	mov	r5, r3
 80026f6:	eb14 030a 	adds.w	r3, r4, sl
 80026fa:	603b      	str	r3, [r7, #0]
 80026fc:	eb45 030b 	adc.w	r3, r5, fp
 8002700:	607b      	str	r3, [r7, #4]
 8002702:	f04f 0200 	mov.w	r2, #0
 8002706:	f04f 0300 	mov.w	r3, #0
 800270a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800270e:	4629      	mov	r1, r5
 8002710:	028b      	lsls	r3, r1, #10
 8002712:	4621      	mov	r1, r4
 8002714:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002718:	4621      	mov	r1, r4
 800271a:	028a      	lsls	r2, r1, #10
 800271c:	4610      	mov	r0, r2
 800271e:	4619      	mov	r1, r3
 8002720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002722:	2200      	movs	r2, #0
 8002724:	60bb      	str	r3, [r7, #8]
 8002726:	60fa      	str	r2, [r7, #12]
 8002728:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800272c:	f7fe fa44 	bl	8000bb8 <__aeabi_uldivmod>
 8002730:	4602      	mov	r2, r0
 8002732:	460b      	mov	r3, r1
 8002734:	4613      	mov	r3, r2
 8002736:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002738:	4b0b      	ldr	r3, [pc, #44]	; (8002768 <HAL_RCC_GetSysClockFreq+0x180>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	0c1b      	lsrs	r3, r3, #16
 800273e:	f003 0303 	and.w	r3, r3, #3
 8002742:	3301      	adds	r3, #1
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002748:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800274a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800274c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002750:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002752:	e002      	b.n	800275a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002754:	4b05      	ldr	r3, [pc, #20]	; (800276c <HAL_RCC_GetSysClockFreq+0x184>)
 8002756:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002758:	bf00      	nop
    }
  }
  return sysclockfreq;
 800275a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800275c:	4618      	mov	r0, r3
 800275e:	3740      	adds	r7, #64	; 0x40
 8002760:	46bd      	mov	sp, r7
 8002762:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002766:	bf00      	nop
 8002768:	40023800 	.word	0x40023800
 800276c:	00f42400 	.word	0x00f42400
 8002770:	017d7840 	.word	0x017d7840

08002774 <LL_GPIO_SetPinMode>:
{
 8002774:	b480      	push	{r7}
 8002776:	b089      	sub	sp, #36	; 0x24
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	fa93 f3a3 	rbit	r3, r3
 800278e:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	fab3 f383 	clz	r3, r3
 8002796:	b2db      	uxtb	r3, r3
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	2103      	movs	r1, #3
 800279c:	fa01 f303 	lsl.w	r3, r1, r3
 80027a0:	43db      	mvns	r3, r3
 80027a2:	401a      	ands	r2, r3
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	fa93 f3a3 	rbit	r3, r3
 80027ae:	61bb      	str	r3, [r7, #24]
  return result;
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	fab3 f383 	clz	r3, r3
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	6879      	ldr	r1, [r7, #4]
 80027bc:	fa01 f303 	lsl.w	r3, r1, r3
 80027c0:	431a      	orrs	r2, r3
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	601a      	str	r2, [r3, #0]
}
 80027c6:	bf00      	nop
 80027c8:	3724      	adds	r7, #36	; 0x24
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr

080027d2 <LL_GPIO_SetPinOutputType>:
{
 80027d2:	b480      	push	{r7}
 80027d4:	b085      	sub	sp, #20
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	60f8      	str	r0, [r7, #12]
 80027da:	60b9      	str	r1, [r7, #8]
 80027dc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	685a      	ldr	r2, [r3, #4]
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	43db      	mvns	r3, r3
 80027e6:	401a      	ands	r2, r3
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	6879      	ldr	r1, [r7, #4]
 80027ec:	fb01 f303 	mul.w	r3, r1, r3
 80027f0:	431a      	orrs	r2, r3
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	605a      	str	r2, [r3, #4]
}
 80027f6:	bf00      	nop
 80027f8:	3714      	adds	r7, #20
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr

08002802 <LL_GPIO_SetPinSpeed>:
{
 8002802:	b480      	push	{r7}
 8002804:	b089      	sub	sp, #36	; 0x24
 8002806:	af00      	add	r7, sp, #0
 8002808:	60f8      	str	r0, [r7, #12]
 800280a:	60b9      	str	r1, [r7, #8]
 800280c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	689a      	ldr	r2, [r3, #8]
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	fa93 f3a3 	rbit	r3, r3
 800281c:	613b      	str	r3, [r7, #16]
  return result;
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	fab3 f383 	clz	r3, r3
 8002824:	b2db      	uxtb	r3, r3
 8002826:	005b      	lsls	r3, r3, #1
 8002828:	2103      	movs	r1, #3
 800282a:	fa01 f303 	lsl.w	r3, r1, r3
 800282e:	43db      	mvns	r3, r3
 8002830:	401a      	ands	r2, r3
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	fa93 f3a3 	rbit	r3, r3
 800283c:	61bb      	str	r3, [r7, #24]
  return result;
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	fab3 f383 	clz	r3, r3
 8002844:	b2db      	uxtb	r3, r3
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	6879      	ldr	r1, [r7, #4]
 800284a:	fa01 f303 	lsl.w	r3, r1, r3
 800284e:	431a      	orrs	r2, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	609a      	str	r2, [r3, #8]
}
 8002854:	bf00      	nop
 8002856:	3724      	adds	r7, #36	; 0x24
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <LL_GPIO_SetPinPull>:
{
 8002860:	b480      	push	{r7}
 8002862:	b089      	sub	sp, #36	; 0x24
 8002864:	af00      	add	r7, sp, #0
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	60b9      	str	r1, [r7, #8]
 800286a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	68da      	ldr	r2, [r3, #12]
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	fa93 f3a3 	rbit	r3, r3
 800287a:	613b      	str	r3, [r7, #16]
  return result;
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	fab3 f383 	clz	r3, r3
 8002882:	b2db      	uxtb	r3, r3
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	2103      	movs	r1, #3
 8002888:	fa01 f303 	lsl.w	r3, r1, r3
 800288c:	43db      	mvns	r3, r3
 800288e:	401a      	ands	r2, r3
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	fa93 f3a3 	rbit	r3, r3
 800289a:	61bb      	str	r3, [r7, #24]
  return result;
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	fab3 f383 	clz	r3, r3
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	6879      	ldr	r1, [r7, #4]
 80028a8:	fa01 f303 	lsl.w	r3, r1, r3
 80028ac:	431a      	orrs	r2, r3
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	60da      	str	r2, [r3, #12]
}
 80028b2:	bf00      	nop
 80028b4:	3724      	adds	r7, #36	; 0x24
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr

080028be <LL_GPIO_SetAFPin_0_7>:
{
 80028be:	b480      	push	{r7}
 80028c0:	b089      	sub	sp, #36	; 0x24
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	60f8      	str	r0, [r7, #12]
 80028c6:	60b9      	str	r1, [r7, #8]
 80028c8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6a1a      	ldr	r2, [r3, #32]
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	fa93 f3a3 	rbit	r3, r3
 80028d8:	613b      	str	r3, [r7, #16]
  return result;
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	fab3 f383 	clz	r3, r3
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	210f      	movs	r1, #15
 80028e6:	fa01 f303 	lsl.w	r3, r1, r3
 80028ea:	43db      	mvns	r3, r3
 80028ec:	401a      	ands	r2, r3
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	fa93 f3a3 	rbit	r3, r3
 80028f8:	61bb      	str	r3, [r7, #24]
  return result;
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	fab3 f383 	clz	r3, r3
 8002900:	b2db      	uxtb	r3, r3
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	6879      	ldr	r1, [r7, #4]
 8002906:	fa01 f303 	lsl.w	r3, r1, r3
 800290a:	431a      	orrs	r2, r3
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	621a      	str	r2, [r3, #32]
}
 8002910:	bf00      	nop
 8002912:	3724      	adds	r7, #36	; 0x24
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <LL_GPIO_SetAFPin_8_15>:
{
 800291c:	b480      	push	{r7}
 800291e:	b089      	sub	sp, #36	; 0x24
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	0a1b      	lsrs	r3, r3, #8
 8002930:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	fa93 f3a3 	rbit	r3, r3
 8002938:	613b      	str	r3, [r7, #16]
  return result;
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	fab3 f383 	clz	r3, r3
 8002940:	b2db      	uxtb	r3, r3
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	210f      	movs	r1, #15
 8002946:	fa01 f303 	lsl.w	r3, r1, r3
 800294a:	43db      	mvns	r3, r3
 800294c:	401a      	ands	r2, r3
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	0a1b      	lsrs	r3, r3, #8
 8002952:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	fa93 f3a3 	rbit	r3, r3
 800295a:	61bb      	str	r3, [r7, #24]
  return result;
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	fab3 f383 	clz	r3, r3
 8002962:	b2db      	uxtb	r3, r3
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	6879      	ldr	r1, [r7, #4]
 8002968:	fa01 f303 	lsl.w	r3, r1, r3
 800296c:	431a      	orrs	r2, r3
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002972:	bf00      	nop
 8002974:	3724      	adds	r7, #36	; 0x24
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr

0800297e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800297e:	b580      	push	{r7, lr}
 8002980:	b088      	sub	sp, #32
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
 8002986:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8002988:	2300      	movs	r3, #0
 800298a:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 800298c:	2300      	movs	r3, #0
 800298e:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	fa93 f3a3 	rbit	r3, r3
 800299c:	613b      	str	r3, [r7, #16]
  return result;
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	fab3 f383 	clz	r3, r3
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80029a8:	e050      	b.n	8002a4c <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	2101      	movs	r1, #1
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	fa01 f303 	lsl.w	r3, r1, r3
 80029b6:	4013      	ands	r3, r2
 80029b8:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d042      	beq.n	8002a46 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d003      	beq.n	80029d0 <LL_GPIO_Init+0x52>
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d10d      	bne.n	80029ec <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	461a      	mov	r2, r3
 80029d6:	69b9      	ldr	r1, [r7, #24]
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f7ff ff12 	bl	8002802 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	461a      	mov	r2, r3
 80029e4:	69b9      	ldr	r1, [r7, #24]
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f7ff fef3 	bl	80027d2 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	691b      	ldr	r3, [r3, #16]
 80029f0:	461a      	mov	r2, r3
 80029f2:	69b9      	ldr	r1, [r7, #24]
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f7ff ff33 	bl	8002860 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d11a      	bne.n	8002a38 <LL_GPIO_Init+0xba>
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	fa93 f3a3 	rbit	r3, r3
 8002a0c:	60bb      	str	r3, [r7, #8]
  return result;
 8002a0e:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8002a10:	fab3 f383 	clz	r3, r3
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	2b07      	cmp	r3, #7
 8002a18:	d807      	bhi.n	8002a2a <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	461a      	mov	r2, r3
 8002a20:	69b9      	ldr	r1, [r7, #24]
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f7ff ff4b 	bl	80028be <LL_GPIO_SetAFPin_0_7>
 8002a28:	e006      	b.n	8002a38 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	695b      	ldr	r3, [r3, #20]
 8002a2e:	461a      	mov	r2, r3
 8002a30:	69b9      	ldr	r1, [r7, #24]
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f7ff ff72 	bl	800291c <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	69b9      	ldr	r1, [r7, #24]
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f7ff fe97 	bl	8002774 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	3301      	adds	r3, #1
 8002a4a:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	fa22 f303 	lsr.w	r3, r2, r3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1a7      	bne.n	80029aa <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8002a5a:	2300      	movs	r3, #0
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3720      	adds	r7, #32
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <LL_I2C_Enable>:
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f043 0201 	orr.w	r2, r3, #1
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	601a      	str	r2, [r3, #0]
}
 8002a78:	bf00      	nop
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <LL_I2C_Disable>:
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f023 0201 	bic.w	r2, r3, #1
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	601a      	str	r2, [r3, #0]
}
 8002a98:	bf00      	nop
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <LL_I2C_ConfigFilters>:
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b085      	sub	sp, #20
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->FLTR, I2C_FLTR_ANOFF | I2C_FLTR_DNF, AnalogFilter | DigitalFilter);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab4:	f023 021f 	bic.w	r2, r3, #31
 8002ab8:	68b9      	ldr	r1, [r7, #8]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	430b      	orrs	r3, r1
 8002abe:	431a      	orrs	r2, r3
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002ac4:	bf00      	nop
 8002ac6:	3714      	adds	r7, #20
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <LL_I2C_SetOwnAddress1>:
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b085      	sub	sp, #20
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ae4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002ae8:	68b9      	ldr	r1, [r7, #8]
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	430a      	orrs	r2, r1
 8002aee:	431a      	orrs	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	609a      	str	r2, [r3, #8]
}
 8002af4:	bf00      	nop
 8002af6:	3714      	adds	r7, #20
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <LL_I2C_ConfigSpeed>:
{
 8002b00:	b480      	push	{r7}
 8002b02:	b087      	sub	sp, #28
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	607a      	str	r2, [r7, #4]
 8002b0c:	603b      	str	r3, [r7, #0]
  uint32_t freqrange = 0x0U;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	613b      	str	r3, [r7, #16]
  uint32_t clockconfig = 0x0U;
 8002b12:	2300      	movs	r3, #0
 8002b14:	617b      	str	r3, [r7, #20]
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	4a42      	ldr	r2, [pc, #264]	; (8002c24 <LL_I2C_ConfigSpeed+0x124>)
 8002b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b1e:	0c9b      	lsrs	r3, r3, #18
 8002b20:	613b      	str	r3, [r7, #16]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	431a      	orrs	r2, r3
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	605a      	str	r2, [r3, #4]
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6a1b      	ldr	r3, [r3, #32]
 8002b36:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	493a      	ldr	r1, [pc, #232]	; (8002c28 <LL_I2C_ConfigSpeed+0x128>)
 8002b3e:	428b      	cmp	r3, r1
 8002b40:	d802      	bhi.n	8002b48 <LL_I2C_ConfigSpeed+0x48>
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	3301      	adds	r3, #1
 8002b46:	e009      	b.n	8002b5c <LL_I2C_ConfigSpeed+0x5c>
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002b4e:	fb01 f303 	mul.w	r3, r1, r3
 8002b52:	4936      	ldr	r1, [pc, #216]	; (8002c2c <LL_I2C_ConfigSpeed+0x12c>)
 8002b54:	fba1 1303 	umull	r1, r3, r1, r3
 8002b58:	099b      	lsrs	r3, r3, #6
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	431a      	orrs	r2, r3
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	621a      	str	r2, [r3, #32]
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a30      	ldr	r2, [pc, #192]	; (8002c28 <LL_I2C_ConfigSpeed+0x128>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d939      	bls.n	8002bde <LL_I2C_ConfigSpeed+0xde>
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d117      	bne.n	8002ba0 <LL_I2C_ConfigSpeed+0xa0>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	4613      	mov	r3, r2
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	4413      	add	r3, r2
 8002b78:	68ba      	ldr	r2, [r7, #8]
 8002b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d009      	beq.n	8002b9a <LL_I2C_ConfigSpeed+0x9a>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	005b      	lsls	r3, r3, #1
 8002b8c:	4413      	add	r3, r2
 8002b8e:	68ba      	ldr	r2, [r7, #8]
 8002b90:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8002b94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b98:	e01d      	b.n	8002bd6 <LL_I2C_ConfigSpeed+0xd6>
 8002b9a:	f248 0301 	movw	r3, #32769	; 0x8001
 8002b9e:	e01a      	b.n	8002bd6 <LL_I2C_ConfigSpeed+0xd6>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	4413      	add	r3, r2
 8002ba8:	009a      	lsls	r2, r3, #2
 8002baa:	4413      	add	r3, r2
 8002bac:	68ba      	ldr	r2, [r7, #8]
 8002bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d00b      	beq.n	8002bd2 <LL_I2C_ConfigSpeed+0xd2>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	4413      	add	r3, r2
 8002bc2:	009a      	lsls	r2, r3, #2
 8002bc4:	4413      	add	r3, r2
 8002bc6:	68ba      	ldr	r2, [r7, #8]
 8002bc8:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8002bcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bd0:	e001      	b.n	8002bd6 <LL_I2C_ConfigSpeed+0xd6>
 8002bd2:	f248 0301 	movw	r3, #32769	; 0x8001
 8002bd6:	683a      	ldr	r2, [r7, #0]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	617b      	str	r3, [r7, #20]
 8002bdc:	e011      	b.n	8002c02 <LL_I2C_ConfigSpeed+0x102>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	005b      	lsls	r3, r3, #1
 8002be2:	68ba      	ldr	r2, [r7, #8]
 8002be4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002be8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002bec:	4013      	ands	r3, r2
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d005      	beq.n	8002bfe <LL_I2C_ConfigSpeed+0xfe>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8002bf6:	68ba      	ldr	r2, [r7, #8]
 8002bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bfc:	e000      	b.n	8002c00 <LL_I2C_ConfigSpeed+0x100>
 8002bfe:	2304      	movs	r3, #4
 8002c00:	617b      	str	r3, [r7, #20]
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	69db      	ldr	r3, [r3, #28]
 8002c06:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 8002c0a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002c0e:	697a      	ldr	r2, [r7, #20]
 8002c10:	431a      	orrs	r2, r3
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	61da      	str	r2, [r3, #28]
}
 8002c16:	bf00      	nop
 8002c18:	371c      	adds	r7, #28
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	431bde83 	.word	0x431bde83
 8002c28:	000186a0 	.word	0x000186a0
 8002c2c:	10624dd3 	.word	0x10624dd3

08002c30 <LL_I2C_SetMode>:
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f023 021a 	bic.w	r2, r3, #26
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	431a      	orrs	r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	601a      	str	r2, [r3, #0]
}
 8002c4a:	bf00      	nop
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr

08002c56 <LL_I2C_AcknowledgeNextData>:
{
 8002c56:	b480      	push	{r7}
 8002c58:	b083      	sub	sp, #12
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
 8002c5e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	431a      	orrs	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	601a      	str	r2, [r3, #0]
}
 8002c70:	bf00      	nop
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr

08002c7c <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b086      	sub	sp, #24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f7ff fefc 	bl	8002a84 <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8002c8c:	f107 0308 	add.w	r3, r7, #8
 8002c90:	4618      	mov	r0, r3
 8002c92:	f000 f89d 	bl	8002dd0 <LL_RCC_GetSystemClocksFreq>
  /*---------------------------- I2Cx FLTR Configuration -----------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_FLTR_ANFOFF bit
   * - DigitalFilter: I2C_FLTR_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	68d9      	ldr	r1, [r3, #12]
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f7ff feff 	bl	8002aa4 <LL_I2C_ConfigFilters>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 8002ca6:	6939      	ldr	r1, [r7, #16]
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685a      	ldr	r2, [r3, #4]
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f7ff ff25 	bl	8002b00 <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	6959      	ldr	r1, [r3, #20]
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	69db      	ldr	r3, [r3, #28]
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f7ff ff05 	bl	8002ad0 <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4619      	mov	r1, r3
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f7ff ffaf 	bl	8002c30 <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f7ff fec6 	bl	8002a64 <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	699b      	ldr	r3, [r3, #24]
 8002cdc:	4619      	mov	r1, r3
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f7ff ffb9 	bl	8002c56 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3718      	adds	r7, #24
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
	...

08002cf0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002cf4:	4b04      	ldr	r3, [pc, #16]	; (8002d08 <LL_RCC_GetSysClkSource+0x18>)
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f003 030c 	and.w	r3, r3, #12
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	40023800 	.word	0x40023800

08002d0c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002d10:	4b04      	ldr	r3, [pc, #16]	; (8002d24 <LL_RCC_GetAHBPrescaler+0x18>)
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	40023800 	.word	0x40023800

08002d28 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002d2c:	4b04      	ldr	r3, [pc, #16]	; (8002d40 <LL_RCC_GetAPB1Prescaler+0x18>)
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	40023800 	.word	0x40023800

08002d44 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002d48:	4b04      	ldr	r3, [pc, #16]	; (8002d5c <LL_RCC_GetAPB2Prescaler+0x18>)
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	40023800 	.word	0x40023800

08002d60 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002d64:	4b04      	ldr	r3, [pc, #16]	; (8002d78 <LL_RCC_PLL_GetMainSource+0x18>)
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	40023800 	.word	0x40023800

08002d7c <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002d80:	4b04      	ldr	r3, [pc, #16]	; (8002d94 <LL_RCC_PLL_GetN+0x18>)
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	099b      	lsrs	r3, r3, #6
 8002d86:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr
 8002d94:	40023800 	.word	0x40023800

08002d98 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8002d9c:	4b04      	ldr	r3, [pc, #16]	; (8002db0 <LL_RCC_PLL_GetP+0x18>)
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	40023800 	.word	0x40023800

08002db4 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002db8:	4b04      	ldr	r3, [pc, #16]	; (8002dcc <LL_RCC_PLL_GetDivider+0x18>)
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	40023800 	.word	0x40023800

08002dd0 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002dd8:	f000 f820 	bl	8002e1c <RCC_GetSystemClockFreq>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f000 f840 	bl	8002e6c <RCC_GetHCLKClockFreq>
 8002dec:	4602      	mov	r2, r0
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f000 f84e 	bl	8002e98 <RCC_GetPCLK1ClockFreq>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f000 f85a 	bl	8002ec0 <RCC_GetPCLK2ClockFreq>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	60da      	str	r2, [r3, #12]
}
 8002e12:	bf00      	nop
 8002e14:	3708      	adds	r7, #8
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
	...

08002e1c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8002e22:	2300      	movs	r3, #0
 8002e24:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002e26:	f7ff ff63 	bl	8002cf0 <LL_RCC_GetSysClkSource>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b08      	cmp	r3, #8
 8002e2e:	d00c      	beq.n	8002e4a <RCC_GetSystemClockFreq+0x2e>
 8002e30:	2b08      	cmp	r3, #8
 8002e32:	d80f      	bhi.n	8002e54 <RCC_GetSystemClockFreq+0x38>
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d002      	beq.n	8002e3e <RCC_GetSystemClockFreq+0x22>
 8002e38:	2b04      	cmp	r3, #4
 8002e3a:	d003      	beq.n	8002e44 <RCC_GetSystemClockFreq+0x28>
 8002e3c:	e00a      	b.n	8002e54 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8002e3e:	4b09      	ldr	r3, [pc, #36]	; (8002e64 <RCC_GetSystemClockFreq+0x48>)
 8002e40:	607b      	str	r3, [r7, #4]
      break;
 8002e42:	e00a      	b.n	8002e5a <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002e44:	4b08      	ldr	r3, [pc, #32]	; (8002e68 <RCC_GetSystemClockFreq+0x4c>)
 8002e46:	607b      	str	r3, [r7, #4]
      break;
 8002e48:	e007      	b.n	8002e5a <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8002e4a:	2008      	movs	r0, #8
 8002e4c:	f000 f84c 	bl	8002ee8 <RCC_PLL_GetFreqDomain_SYS>
 8002e50:	6078      	str	r0, [r7, #4]
      break;
 8002e52:	e002      	b.n	8002e5a <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8002e54:	4b03      	ldr	r3, [pc, #12]	; (8002e64 <RCC_GetSystemClockFreq+0x48>)
 8002e56:	607b      	str	r3, [r7, #4]
      break;
 8002e58:	bf00      	nop
  }

  return frequency;
 8002e5a:	687b      	ldr	r3, [r7, #4]
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3708      	adds	r7, #8
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	00f42400 	.word	0x00f42400
 8002e68:	017d7840 	.word	0x017d7840

08002e6c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002e74:	f7ff ff4a 	bl	8002d0c <LL_RCC_GetAHBPrescaler>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	091b      	lsrs	r3, r3, #4
 8002e7c:	f003 030f 	and.w	r3, r3, #15
 8002e80:	4a04      	ldr	r2, [pc, #16]	; (8002e94 <RCC_GetHCLKClockFreq+0x28>)
 8002e82:	5cd3      	ldrb	r3, [r2, r3]
 8002e84:	461a      	mov	r2, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	40d3      	lsrs	r3, r2
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3708      	adds	r7, #8
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	08005f9c 	.word	0x08005f9c

08002e98 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002ea0:	f7ff ff42 	bl	8002d28 <LL_RCC_GetAPB1Prescaler>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	0a9b      	lsrs	r3, r3, #10
 8002ea8:	4a04      	ldr	r2, [pc, #16]	; (8002ebc <RCC_GetPCLK1ClockFreq+0x24>)
 8002eaa:	5cd3      	ldrb	r3, [r2, r3]
 8002eac:	461a      	mov	r2, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	40d3      	lsrs	r3, r2
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3708      	adds	r7, #8
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	08005fac 	.word	0x08005fac

08002ec0 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002ec8:	f7ff ff3c 	bl	8002d44 <LL_RCC_GetAPB2Prescaler>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	0b5b      	lsrs	r3, r3, #13
 8002ed0:	4a04      	ldr	r2, [pc, #16]	; (8002ee4 <RCC_GetPCLK2ClockFreq+0x24>)
 8002ed2:	5cd3      	ldrb	r3, [r2, r3]
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	40d3      	lsrs	r3, r2
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3708      	adds	r7, #8
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	08005fac 	.word	0x08005fac

08002ee8 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8002ee8:	b590      	push	{r4, r7, lr}
 8002eea:	b087      	sub	sp, #28
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	617b      	str	r3, [r7, #20]
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	60fb      	str	r3, [r7, #12]
 8002ef8:	2300      	movs	r3, #0
 8002efa:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002efc:	f7ff ff30 	bl	8002d60 <LL_RCC_PLL_GetMainSource>
 8002f00:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d004      	beq.n	8002f12 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f0e:	d003      	beq.n	8002f18 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8002f10:	e005      	b.n	8002f1e <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8002f12:	4b12      	ldr	r3, [pc, #72]	; (8002f5c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002f14:	617b      	str	r3, [r7, #20]
      break;
 8002f16:	e005      	b.n	8002f24 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8002f18:	4b11      	ldr	r3, [pc, #68]	; (8002f60 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8002f1a:	617b      	str	r3, [r7, #20]
      break;
 8002f1c:	e002      	b.n	8002f24 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8002f1e:	4b0f      	ldr	r3, [pc, #60]	; (8002f5c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002f20:	617b      	str	r3, [r7, #20]
      break;
 8002f22:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2b08      	cmp	r3, #8
 8002f28:	d113      	bne.n	8002f52 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002f2a:	f7ff ff43 	bl	8002db4 <LL_RCC_PLL_GetDivider>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	fbb3 f4f2 	udiv	r4, r3, r2
 8002f36:	f7ff ff21 	bl	8002d7c <LL_RCC_PLL_GetN>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	fb03 f404 	mul.w	r4, r3, r4
 8002f40:	f7ff ff2a 	bl	8002d98 <LL_RCC_PLL_GetP>
 8002f44:	4603      	mov	r3, r0
 8002f46:	0c1b      	lsrs	r3, r3, #16
 8002f48:	3301      	adds	r3, #1
 8002f4a:	005b      	lsls	r3, r3, #1
 8002f4c:	fbb4 f3f3 	udiv	r3, r4, r3
 8002f50:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8002f52:	693b      	ldr	r3, [r7, #16]
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	371c      	adds	r7, #28
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd90      	pop	{r4, r7, pc}
 8002f5c:	00f42400 	.word	0x00f42400
 8002f60:	017d7840 	.word	0x017d7840

08002f64 <LL_USART_IsEnabled>:
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f78:	bf0c      	ite	eq
 8002f7a:	2301      	moveq	r3, #1
 8002f7c:	2300      	movne	r3, #0
 8002f7e:	b2db      	uxtb	r3, r3
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <LL_USART_SetStopBitsLength>:
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	431a      	orrs	r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	611a      	str	r2, [r3, #16]
}
 8002fa6:	bf00      	nop
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr

08002fb2 <LL_USART_SetHWFlowCtrl>:
{
 8002fb2:	b480      	push	{r7}
 8002fb4:	b083      	sub	sp, #12
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
 8002fba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	695b      	ldr	r3, [r3, #20]
 8002fc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	431a      	orrs	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	615a      	str	r2, [r3, #20]
}
 8002fcc:	bf00      	nop
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr

08002fd8 <LL_USART_SetBaudRate>:
{
 8002fd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fdc:	b0c0      	sub	sp, #256	; 0x100
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002fe4:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8002fe8:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8002fec:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ff4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ff8:	f040 810c 	bne.w	8003214 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002ffc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003000:	2200      	movs	r2, #0
 8003002:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003006:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800300a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800300e:	4622      	mov	r2, r4
 8003010:	462b      	mov	r3, r5
 8003012:	1891      	adds	r1, r2, r2
 8003014:	6639      	str	r1, [r7, #96]	; 0x60
 8003016:	415b      	adcs	r3, r3
 8003018:	667b      	str	r3, [r7, #100]	; 0x64
 800301a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800301e:	4621      	mov	r1, r4
 8003020:	eb12 0801 	adds.w	r8, r2, r1
 8003024:	4629      	mov	r1, r5
 8003026:	eb43 0901 	adc.w	r9, r3, r1
 800302a:	f04f 0200 	mov.w	r2, #0
 800302e:	f04f 0300 	mov.w	r3, #0
 8003032:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003036:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800303a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800303e:	4690      	mov	r8, r2
 8003040:	4699      	mov	r9, r3
 8003042:	4623      	mov	r3, r4
 8003044:	eb18 0303 	adds.w	r3, r8, r3
 8003048:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800304c:	462b      	mov	r3, r5
 800304e:	eb49 0303 	adc.w	r3, r9, r3
 8003052:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003056:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800305a:	2200      	movs	r2, #0
 800305c:	469a      	mov	sl, r3
 800305e:	4693      	mov	fp, r2
 8003060:	eb1a 030a 	adds.w	r3, sl, sl
 8003064:	65bb      	str	r3, [r7, #88]	; 0x58
 8003066:	eb4b 030b 	adc.w	r3, fp, fp
 800306a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800306c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003070:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003074:	f7fd fda0 	bl	8000bb8 <__aeabi_uldivmod>
 8003078:	4602      	mov	r2, r0
 800307a:	460b      	mov	r3, r1
 800307c:	4b64      	ldr	r3, [pc, #400]	; (8003210 <LL_USART_SetBaudRate+0x238>)
 800307e:	fba3 2302 	umull	r2, r3, r3, r2
 8003082:	095b      	lsrs	r3, r3, #5
 8003084:	b29b      	uxth	r3, r3
 8003086:	011b      	lsls	r3, r3, #4
 8003088:	b29c      	uxth	r4, r3
 800308a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800308e:	2200      	movs	r2, #0
 8003090:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003094:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003098:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 800309c:	4642      	mov	r2, r8
 800309e:	464b      	mov	r3, r9
 80030a0:	1891      	adds	r1, r2, r2
 80030a2:	6539      	str	r1, [r7, #80]	; 0x50
 80030a4:	415b      	adcs	r3, r3
 80030a6:	657b      	str	r3, [r7, #84]	; 0x54
 80030a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80030ac:	4641      	mov	r1, r8
 80030ae:	1851      	adds	r1, r2, r1
 80030b0:	64b9      	str	r1, [r7, #72]	; 0x48
 80030b2:	4649      	mov	r1, r9
 80030b4:	414b      	adcs	r3, r1
 80030b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030b8:	f04f 0200 	mov.w	r2, #0
 80030bc:	f04f 0300 	mov.w	r3, #0
 80030c0:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 80030c4:	4659      	mov	r1, fp
 80030c6:	00cb      	lsls	r3, r1, #3
 80030c8:	4651      	mov	r1, sl
 80030ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030ce:	4651      	mov	r1, sl
 80030d0:	00ca      	lsls	r2, r1, #3
 80030d2:	4610      	mov	r0, r2
 80030d4:	4619      	mov	r1, r3
 80030d6:	4603      	mov	r3, r0
 80030d8:	4642      	mov	r2, r8
 80030da:	189b      	adds	r3, r3, r2
 80030dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80030e0:	464b      	mov	r3, r9
 80030e2:	460a      	mov	r2, r1
 80030e4:	eb42 0303 	adc.w	r3, r2, r3
 80030e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80030ec:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80030f0:	2200      	movs	r2, #0
 80030f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80030f6:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80030fa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80030fe:	460b      	mov	r3, r1
 8003100:	18db      	adds	r3, r3, r3
 8003102:	643b      	str	r3, [r7, #64]	; 0x40
 8003104:	4613      	mov	r3, r2
 8003106:	eb42 0303 	adc.w	r3, r2, r3
 800310a:	647b      	str	r3, [r7, #68]	; 0x44
 800310c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003110:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8003114:	f7fd fd50 	bl	8000bb8 <__aeabi_uldivmod>
 8003118:	4602      	mov	r2, r0
 800311a:	460b      	mov	r3, r1
 800311c:	4611      	mov	r1, r2
 800311e:	4b3c      	ldr	r3, [pc, #240]	; (8003210 <LL_USART_SetBaudRate+0x238>)
 8003120:	fba3 2301 	umull	r2, r3, r3, r1
 8003124:	095b      	lsrs	r3, r3, #5
 8003126:	2264      	movs	r2, #100	; 0x64
 8003128:	fb02 f303 	mul.w	r3, r2, r3
 800312c:	1acb      	subs	r3, r1, r3
 800312e:	00db      	lsls	r3, r3, #3
 8003130:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003134:	4b36      	ldr	r3, [pc, #216]	; (8003210 <LL_USART_SetBaudRate+0x238>)
 8003136:	fba3 2302 	umull	r2, r3, r3, r2
 800313a:	095b      	lsrs	r3, r3, #5
 800313c:	b29b      	uxth	r3, r3
 800313e:	005b      	lsls	r3, r3, #1
 8003140:	b29b      	uxth	r3, r3
 8003142:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003146:	b29b      	uxth	r3, r3
 8003148:	4423      	add	r3, r4
 800314a:	b29c      	uxth	r4, r3
 800314c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003150:	2200      	movs	r2, #0
 8003152:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003156:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800315a:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 800315e:	4642      	mov	r2, r8
 8003160:	464b      	mov	r3, r9
 8003162:	1891      	adds	r1, r2, r2
 8003164:	63b9      	str	r1, [r7, #56]	; 0x38
 8003166:	415b      	adcs	r3, r3
 8003168:	63fb      	str	r3, [r7, #60]	; 0x3c
 800316a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800316e:	4641      	mov	r1, r8
 8003170:	1851      	adds	r1, r2, r1
 8003172:	6339      	str	r1, [r7, #48]	; 0x30
 8003174:	4649      	mov	r1, r9
 8003176:	414b      	adcs	r3, r1
 8003178:	637b      	str	r3, [r7, #52]	; 0x34
 800317a:	f04f 0200 	mov.w	r2, #0
 800317e:	f04f 0300 	mov.w	r3, #0
 8003182:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003186:	4659      	mov	r1, fp
 8003188:	00cb      	lsls	r3, r1, #3
 800318a:	4651      	mov	r1, sl
 800318c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003190:	4651      	mov	r1, sl
 8003192:	00ca      	lsls	r2, r1, #3
 8003194:	4610      	mov	r0, r2
 8003196:	4619      	mov	r1, r3
 8003198:	4603      	mov	r3, r0
 800319a:	4642      	mov	r2, r8
 800319c:	189b      	adds	r3, r3, r2
 800319e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80031a2:	464b      	mov	r3, r9
 80031a4:	460a      	mov	r2, r1
 80031a6:	eb42 0303 	adc.w	r3, r2, r3
 80031aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80031ae:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80031b2:	2200      	movs	r2, #0
 80031b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80031b8:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80031bc:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80031c0:	460b      	mov	r3, r1
 80031c2:	18db      	adds	r3, r3, r3
 80031c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80031c6:	4613      	mov	r3, r2
 80031c8:	eb42 0303 	adc.w	r3, r2, r3
 80031cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80031d2:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80031d6:	f7fd fcef 	bl	8000bb8 <__aeabi_uldivmod>
 80031da:	4602      	mov	r2, r0
 80031dc:	460b      	mov	r3, r1
 80031de:	4b0c      	ldr	r3, [pc, #48]	; (8003210 <LL_USART_SetBaudRate+0x238>)
 80031e0:	fba3 1302 	umull	r1, r3, r3, r2
 80031e4:	095b      	lsrs	r3, r3, #5
 80031e6:	2164      	movs	r1, #100	; 0x64
 80031e8:	fb01 f303 	mul.w	r3, r1, r3
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	00db      	lsls	r3, r3, #3
 80031f0:	3332      	adds	r3, #50	; 0x32
 80031f2:	4a07      	ldr	r2, [pc, #28]	; (8003210 <LL_USART_SetBaudRate+0x238>)
 80031f4:	fba2 2303 	umull	r2, r3, r2, r3
 80031f8:	095b      	lsrs	r3, r3, #5
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	f003 0307 	and.w	r3, r3, #7
 8003200:	b29b      	uxth	r3, r3
 8003202:	4423      	add	r3, r4
 8003204:	b29b      	uxth	r3, r3
 8003206:	461a      	mov	r2, r3
 8003208:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800320c:	609a      	str	r2, [r3, #8]
}
 800320e:	e108      	b.n	8003422 <LL_USART_SetBaudRate+0x44a>
 8003210:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8003214:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003218:	2200      	movs	r2, #0
 800321a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800321e:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003222:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8003226:	4642      	mov	r2, r8
 8003228:	464b      	mov	r3, r9
 800322a:	1891      	adds	r1, r2, r2
 800322c:	6239      	str	r1, [r7, #32]
 800322e:	415b      	adcs	r3, r3
 8003230:	627b      	str	r3, [r7, #36]	; 0x24
 8003232:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003236:	4641      	mov	r1, r8
 8003238:	1854      	adds	r4, r2, r1
 800323a:	4649      	mov	r1, r9
 800323c:	eb43 0501 	adc.w	r5, r3, r1
 8003240:	f04f 0200 	mov.w	r2, #0
 8003244:	f04f 0300 	mov.w	r3, #0
 8003248:	00eb      	lsls	r3, r5, #3
 800324a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800324e:	00e2      	lsls	r2, r4, #3
 8003250:	4614      	mov	r4, r2
 8003252:	461d      	mov	r5, r3
 8003254:	4643      	mov	r3, r8
 8003256:	18e3      	adds	r3, r4, r3
 8003258:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800325c:	464b      	mov	r3, r9
 800325e:	eb45 0303 	adc.w	r3, r5, r3
 8003262:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003266:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800326a:	2200      	movs	r2, #0
 800326c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003270:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003274:	f04f 0200 	mov.w	r2, #0
 8003278:	f04f 0300 	mov.w	r3, #0
 800327c:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8003280:	4629      	mov	r1, r5
 8003282:	008b      	lsls	r3, r1, #2
 8003284:	4621      	mov	r1, r4
 8003286:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800328a:	4621      	mov	r1, r4
 800328c:	008a      	lsls	r2, r1, #2
 800328e:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8003292:	f7fd fc91 	bl	8000bb8 <__aeabi_uldivmod>
 8003296:	4602      	mov	r2, r0
 8003298:	460b      	mov	r3, r1
 800329a:	4b65      	ldr	r3, [pc, #404]	; (8003430 <LL_USART_SetBaudRate+0x458>)
 800329c:	fba3 2302 	umull	r2, r3, r3, r2
 80032a0:	095b      	lsrs	r3, r3, #5
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	011b      	lsls	r3, r3, #4
 80032a6:	b29c      	uxth	r4, r3
 80032a8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80032ac:	2200      	movs	r2, #0
 80032ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80032b2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80032b6:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 80032ba:	4642      	mov	r2, r8
 80032bc:	464b      	mov	r3, r9
 80032be:	1891      	adds	r1, r2, r2
 80032c0:	61b9      	str	r1, [r7, #24]
 80032c2:	415b      	adcs	r3, r3
 80032c4:	61fb      	str	r3, [r7, #28]
 80032c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032ca:	4641      	mov	r1, r8
 80032cc:	1851      	adds	r1, r2, r1
 80032ce:	6139      	str	r1, [r7, #16]
 80032d0:	4649      	mov	r1, r9
 80032d2:	414b      	adcs	r3, r1
 80032d4:	617b      	str	r3, [r7, #20]
 80032d6:	f04f 0200 	mov.w	r2, #0
 80032da:	f04f 0300 	mov.w	r3, #0
 80032de:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80032e2:	4659      	mov	r1, fp
 80032e4:	00cb      	lsls	r3, r1, #3
 80032e6:	4651      	mov	r1, sl
 80032e8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032ec:	4651      	mov	r1, sl
 80032ee:	00ca      	lsls	r2, r1, #3
 80032f0:	4610      	mov	r0, r2
 80032f2:	4619      	mov	r1, r3
 80032f4:	4603      	mov	r3, r0
 80032f6:	4642      	mov	r2, r8
 80032f8:	189b      	adds	r3, r3, r2
 80032fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80032fe:	464b      	mov	r3, r9
 8003300:	460a      	mov	r2, r1
 8003302:	eb42 0303 	adc.w	r3, r2, r3
 8003306:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800330a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800330e:	2200      	movs	r2, #0
 8003310:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003314:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003318:	f04f 0200 	mov.w	r2, #0
 800331c:	f04f 0300 	mov.w	r3, #0
 8003320:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8003324:	4649      	mov	r1, r9
 8003326:	008b      	lsls	r3, r1, #2
 8003328:	4641      	mov	r1, r8
 800332a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800332e:	4641      	mov	r1, r8
 8003330:	008a      	lsls	r2, r1, #2
 8003332:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8003336:	f7fd fc3f 	bl	8000bb8 <__aeabi_uldivmod>
 800333a:	4602      	mov	r2, r0
 800333c:	460b      	mov	r3, r1
 800333e:	4611      	mov	r1, r2
 8003340:	4b3b      	ldr	r3, [pc, #236]	; (8003430 <LL_USART_SetBaudRate+0x458>)
 8003342:	fba3 2301 	umull	r2, r3, r3, r1
 8003346:	095b      	lsrs	r3, r3, #5
 8003348:	2264      	movs	r2, #100	; 0x64
 800334a:	fb02 f303 	mul.w	r3, r2, r3
 800334e:	1acb      	subs	r3, r1, r3
 8003350:	011b      	lsls	r3, r3, #4
 8003352:	3332      	adds	r3, #50	; 0x32
 8003354:	4a36      	ldr	r2, [pc, #216]	; (8003430 <LL_USART_SetBaudRate+0x458>)
 8003356:	fba2 2303 	umull	r2, r3, r2, r3
 800335a:	095b      	lsrs	r3, r3, #5
 800335c:	b29b      	uxth	r3, r3
 800335e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003362:	b29b      	uxth	r3, r3
 8003364:	4423      	add	r3, r4
 8003366:	b29c      	uxth	r4, r3
 8003368:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800336c:	2200      	movs	r2, #0
 800336e:	67bb      	str	r3, [r7, #120]	; 0x78
 8003370:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003372:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003376:	4642      	mov	r2, r8
 8003378:	464b      	mov	r3, r9
 800337a:	1891      	adds	r1, r2, r2
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	415b      	adcs	r3, r3
 8003380:	60fb      	str	r3, [r7, #12]
 8003382:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003386:	4641      	mov	r1, r8
 8003388:	1851      	adds	r1, r2, r1
 800338a:	6039      	str	r1, [r7, #0]
 800338c:	4649      	mov	r1, r9
 800338e:	414b      	adcs	r3, r1
 8003390:	607b      	str	r3, [r7, #4]
 8003392:	f04f 0200 	mov.w	r2, #0
 8003396:	f04f 0300 	mov.w	r3, #0
 800339a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800339e:	4659      	mov	r1, fp
 80033a0:	00cb      	lsls	r3, r1, #3
 80033a2:	4651      	mov	r1, sl
 80033a4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033a8:	4651      	mov	r1, sl
 80033aa:	00ca      	lsls	r2, r1, #3
 80033ac:	4610      	mov	r0, r2
 80033ae:	4619      	mov	r1, r3
 80033b0:	4603      	mov	r3, r0
 80033b2:	4642      	mov	r2, r8
 80033b4:	189b      	adds	r3, r3, r2
 80033b6:	673b      	str	r3, [r7, #112]	; 0x70
 80033b8:	464b      	mov	r3, r9
 80033ba:	460a      	mov	r2, r1
 80033bc:	eb42 0303 	adc.w	r3, r2, r3
 80033c0:	677b      	str	r3, [r7, #116]	; 0x74
 80033c2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80033c6:	2200      	movs	r2, #0
 80033c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80033ca:	66fa      	str	r2, [r7, #108]	; 0x6c
 80033cc:	f04f 0200 	mov.w	r2, #0
 80033d0:	f04f 0300 	mov.w	r3, #0
 80033d4:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 80033d8:	4649      	mov	r1, r9
 80033da:	008b      	lsls	r3, r1, #2
 80033dc:	4641      	mov	r1, r8
 80033de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033e2:	4641      	mov	r1, r8
 80033e4:	008a      	lsls	r2, r1, #2
 80033e6:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80033ea:	f7fd fbe5 	bl	8000bb8 <__aeabi_uldivmod>
 80033ee:	4602      	mov	r2, r0
 80033f0:	460b      	mov	r3, r1
 80033f2:	4b0f      	ldr	r3, [pc, #60]	; (8003430 <LL_USART_SetBaudRate+0x458>)
 80033f4:	fba3 1302 	umull	r1, r3, r3, r2
 80033f8:	095b      	lsrs	r3, r3, #5
 80033fa:	2164      	movs	r1, #100	; 0x64
 80033fc:	fb01 f303 	mul.w	r3, r1, r3
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	011b      	lsls	r3, r3, #4
 8003404:	3332      	adds	r3, #50	; 0x32
 8003406:	4a0a      	ldr	r2, [pc, #40]	; (8003430 <LL_USART_SetBaudRate+0x458>)
 8003408:	fba2 2303 	umull	r2, r3, r2, r3
 800340c:	095b      	lsrs	r3, r3, #5
 800340e:	b29b      	uxth	r3, r3
 8003410:	f003 030f 	and.w	r3, r3, #15
 8003414:	b29b      	uxth	r3, r3
 8003416:	4423      	add	r3, r4
 8003418:	b29b      	uxth	r3, r3
 800341a:	461a      	mov	r2, r3
 800341c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003420:	609a      	str	r2, [r3, #8]
}
 8003422:	bf00      	nop
 8003424:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003428:	46bd      	mov	sp, r7
 800342a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800342e:	bf00      	nop
 8003430:	51eb851f 	.word	0x51eb851f

08003434 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b088      	sub	sp, #32
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8003442:	2300      	movs	r3, #0
 8003444:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f7ff fd8c 	bl	8002f64 <LL_USART_IsEnabled>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d149      	bne.n	80034e6 <LL_USART_Init+0xb2>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800345a:	f023 030c 	bic.w	r3, r3, #12
 800345e:	683a      	ldr	r2, [r7, #0]
 8003460:	6851      	ldr	r1, [r2, #4]
 8003462:	683a      	ldr	r2, [r7, #0]
 8003464:	68d2      	ldr	r2, [r2, #12]
 8003466:	4311      	orrs	r1, r2
 8003468:	683a      	ldr	r2, [r7, #0]
 800346a:	6912      	ldr	r2, [r2, #16]
 800346c:	4311      	orrs	r1, r2
 800346e:	683a      	ldr	r2, [r7, #0]
 8003470:	6992      	ldr	r2, [r2, #24]
 8003472:	430a      	orrs	r2, r1
 8003474:	431a      	orrs	r2, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	4619      	mov	r1, r3
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f7ff fd83 	bl	8002f8c <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	695b      	ldr	r3, [r3, #20]
 800348a:	4619      	mov	r1, r3
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f7ff fd90 	bl	8002fb2 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8003492:	f107 0308 	add.w	r3, r7, #8
 8003496:	4618      	mov	r0, r3
 8003498:	f7ff fc9a 	bl	8002dd0 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	4a14      	ldr	r2, [pc, #80]	; (80034f0 <LL_USART_Init+0xbc>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d102      	bne.n	80034aa <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	61bb      	str	r3, [r7, #24]
 80034a8:	e00c      	b.n	80034c4 <LL_USART_Init+0x90>
    }
    else if (USARTx == USART2)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a11      	ldr	r2, [pc, #68]	; (80034f4 <LL_USART_Init+0xc0>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d102      	bne.n	80034b8 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	61bb      	str	r3, [r7, #24]
 80034b6:	e005      	b.n	80034c4 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4a0f      	ldr	r2, [pc, #60]	; (80034f8 <LL_USART_Init+0xc4>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d101      	bne.n	80034c4 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00d      	beq.n	80034e6 <LL_USART_Init+0xb2>
        && (USART_InitStruct->BaudRate != 0U))
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d009      	beq.n	80034e6 <LL_USART_Init+0xb2>
    {
      status = SUCCESS;
 80034d2:	2300      	movs	r3, #0
 80034d4:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	699a      	ldr	r2, [r3, #24]
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	69b9      	ldr	r1, [r7, #24]
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f7ff fd79 	bl	8002fd8 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80034e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3720      	adds	r7, #32
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	40011000 	.word	0x40011000
 80034f4:	40004400 	.word	0x40004400
 80034f8:	40011400 	.word	0x40011400

080034fc <__cvt>:
 80034fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003500:	ec55 4b10 	vmov	r4, r5, d0
 8003504:	2d00      	cmp	r5, #0
 8003506:	460e      	mov	r6, r1
 8003508:	4619      	mov	r1, r3
 800350a:	462b      	mov	r3, r5
 800350c:	bfbb      	ittet	lt
 800350e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003512:	461d      	movlt	r5, r3
 8003514:	2300      	movge	r3, #0
 8003516:	232d      	movlt	r3, #45	; 0x2d
 8003518:	700b      	strb	r3, [r1, #0]
 800351a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800351c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003520:	4691      	mov	r9, r2
 8003522:	f023 0820 	bic.w	r8, r3, #32
 8003526:	bfbc      	itt	lt
 8003528:	4622      	movlt	r2, r4
 800352a:	4614      	movlt	r4, r2
 800352c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003530:	d005      	beq.n	800353e <__cvt+0x42>
 8003532:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003536:	d100      	bne.n	800353a <__cvt+0x3e>
 8003538:	3601      	adds	r6, #1
 800353a:	2102      	movs	r1, #2
 800353c:	e000      	b.n	8003540 <__cvt+0x44>
 800353e:	2103      	movs	r1, #3
 8003540:	ab03      	add	r3, sp, #12
 8003542:	9301      	str	r3, [sp, #4]
 8003544:	ab02      	add	r3, sp, #8
 8003546:	9300      	str	r3, [sp, #0]
 8003548:	ec45 4b10 	vmov	d0, r4, r5
 800354c:	4653      	mov	r3, sl
 800354e:	4632      	mov	r2, r6
 8003550:	f000 ff36 	bl	80043c0 <_dtoa_r>
 8003554:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003558:	4607      	mov	r7, r0
 800355a:	d102      	bne.n	8003562 <__cvt+0x66>
 800355c:	f019 0f01 	tst.w	r9, #1
 8003560:	d022      	beq.n	80035a8 <__cvt+0xac>
 8003562:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003566:	eb07 0906 	add.w	r9, r7, r6
 800356a:	d110      	bne.n	800358e <__cvt+0x92>
 800356c:	783b      	ldrb	r3, [r7, #0]
 800356e:	2b30      	cmp	r3, #48	; 0x30
 8003570:	d10a      	bne.n	8003588 <__cvt+0x8c>
 8003572:	2200      	movs	r2, #0
 8003574:	2300      	movs	r3, #0
 8003576:	4620      	mov	r0, r4
 8003578:	4629      	mov	r1, r5
 800357a:	f7fd faad 	bl	8000ad8 <__aeabi_dcmpeq>
 800357e:	b918      	cbnz	r0, 8003588 <__cvt+0x8c>
 8003580:	f1c6 0601 	rsb	r6, r6, #1
 8003584:	f8ca 6000 	str.w	r6, [sl]
 8003588:	f8da 3000 	ldr.w	r3, [sl]
 800358c:	4499      	add	r9, r3
 800358e:	2200      	movs	r2, #0
 8003590:	2300      	movs	r3, #0
 8003592:	4620      	mov	r0, r4
 8003594:	4629      	mov	r1, r5
 8003596:	f7fd fa9f 	bl	8000ad8 <__aeabi_dcmpeq>
 800359a:	b108      	cbz	r0, 80035a0 <__cvt+0xa4>
 800359c:	f8cd 900c 	str.w	r9, [sp, #12]
 80035a0:	2230      	movs	r2, #48	; 0x30
 80035a2:	9b03      	ldr	r3, [sp, #12]
 80035a4:	454b      	cmp	r3, r9
 80035a6:	d307      	bcc.n	80035b8 <__cvt+0xbc>
 80035a8:	9b03      	ldr	r3, [sp, #12]
 80035aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80035ac:	1bdb      	subs	r3, r3, r7
 80035ae:	4638      	mov	r0, r7
 80035b0:	6013      	str	r3, [r2, #0]
 80035b2:	b004      	add	sp, #16
 80035b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035b8:	1c59      	adds	r1, r3, #1
 80035ba:	9103      	str	r1, [sp, #12]
 80035bc:	701a      	strb	r2, [r3, #0]
 80035be:	e7f0      	b.n	80035a2 <__cvt+0xa6>

080035c0 <__exponent>:
 80035c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80035c2:	4603      	mov	r3, r0
 80035c4:	2900      	cmp	r1, #0
 80035c6:	bfb8      	it	lt
 80035c8:	4249      	neglt	r1, r1
 80035ca:	f803 2b02 	strb.w	r2, [r3], #2
 80035ce:	bfb4      	ite	lt
 80035d0:	222d      	movlt	r2, #45	; 0x2d
 80035d2:	222b      	movge	r2, #43	; 0x2b
 80035d4:	2909      	cmp	r1, #9
 80035d6:	7042      	strb	r2, [r0, #1]
 80035d8:	dd2a      	ble.n	8003630 <__exponent+0x70>
 80035da:	f10d 0207 	add.w	r2, sp, #7
 80035de:	4617      	mov	r7, r2
 80035e0:	260a      	movs	r6, #10
 80035e2:	4694      	mov	ip, r2
 80035e4:	fb91 f5f6 	sdiv	r5, r1, r6
 80035e8:	fb06 1415 	mls	r4, r6, r5, r1
 80035ec:	3430      	adds	r4, #48	; 0x30
 80035ee:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80035f2:	460c      	mov	r4, r1
 80035f4:	2c63      	cmp	r4, #99	; 0x63
 80035f6:	f102 32ff 	add.w	r2, r2, #4294967295
 80035fa:	4629      	mov	r1, r5
 80035fc:	dcf1      	bgt.n	80035e2 <__exponent+0x22>
 80035fe:	3130      	adds	r1, #48	; 0x30
 8003600:	f1ac 0402 	sub.w	r4, ip, #2
 8003604:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003608:	1c41      	adds	r1, r0, #1
 800360a:	4622      	mov	r2, r4
 800360c:	42ba      	cmp	r2, r7
 800360e:	d30a      	bcc.n	8003626 <__exponent+0x66>
 8003610:	f10d 0209 	add.w	r2, sp, #9
 8003614:	eba2 020c 	sub.w	r2, r2, ip
 8003618:	42bc      	cmp	r4, r7
 800361a:	bf88      	it	hi
 800361c:	2200      	movhi	r2, #0
 800361e:	4413      	add	r3, r2
 8003620:	1a18      	subs	r0, r3, r0
 8003622:	b003      	add	sp, #12
 8003624:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003626:	f812 5b01 	ldrb.w	r5, [r2], #1
 800362a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800362e:	e7ed      	b.n	800360c <__exponent+0x4c>
 8003630:	2330      	movs	r3, #48	; 0x30
 8003632:	3130      	adds	r1, #48	; 0x30
 8003634:	7083      	strb	r3, [r0, #2]
 8003636:	70c1      	strb	r1, [r0, #3]
 8003638:	1d03      	adds	r3, r0, #4
 800363a:	e7f1      	b.n	8003620 <__exponent+0x60>

0800363c <_printf_float>:
 800363c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003640:	ed2d 8b02 	vpush	{d8}
 8003644:	b08d      	sub	sp, #52	; 0x34
 8003646:	460c      	mov	r4, r1
 8003648:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800364c:	4616      	mov	r6, r2
 800364e:	461f      	mov	r7, r3
 8003650:	4605      	mov	r5, r0
 8003652:	f000 fdb7 	bl	80041c4 <_localeconv_r>
 8003656:	f8d0 a000 	ldr.w	sl, [r0]
 800365a:	4650      	mov	r0, sl
 800365c:	f7fc fe10 	bl	8000280 <strlen>
 8003660:	2300      	movs	r3, #0
 8003662:	930a      	str	r3, [sp, #40]	; 0x28
 8003664:	6823      	ldr	r3, [r4, #0]
 8003666:	9305      	str	r3, [sp, #20]
 8003668:	f8d8 3000 	ldr.w	r3, [r8]
 800366c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003670:	3307      	adds	r3, #7
 8003672:	f023 0307 	bic.w	r3, r3, #7
 8003676:	f103 0208 	add.w	r2, r3, #8
 800367a:	f8c8 2000 	str.w	r2, [r8]
 800367e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003682:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003686:	9307      	str	r3, [sp, #28]
 8003688:	f8cd 8018 	str.w	r8, [sp, #24]
 800368c:	ee08 0a10 	vmov	s16, r0
 8003690:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8003694:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003698:	4b9e      	ldr	r3, [pc, #632]	; (8003914 <_printf_float+0x2d8>)
 800369a:	f04f 32ff 	mov.w	r2, #4294967295
 800369e:	f7fd fa4d 	bl	8000b3c <__aeabi_dcmpun>
 80036a2:	bb88      	cbnz	r0, 8003708 <_printf_float+0xcc>
 80036a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80036a8:	4b9a      	ldr	r3, [pc, #616]	; (8003914 <_printf_float+0x2d8>)
 80036aa:	f04f 32ff 	mov.w	r2, #4294967295
 80036ae:	f7fd fa27 	bl	8000b00 <__aeabi_dcmple>
 80036b2:	bb48      	cbnz	r0, 8003708 <_printf_float+0xcc>
 80036b4:	2200      	movs	r2, #0
 80036b6:	2300      	movs	r3, #0
 80036b8:	4640      	mov	r0, r8
 80036ba:	4649      	mov	r1, r9
 80036bc:	f7fd fa16 	bl	8000aec <__aeabi_dcmplt>
 80036c0:	b110      	cbz	r0, 80036c8 <_printf_float+0x8c>
 80036c2:	232d      	movs	r3, #45	; 0x2d
 80036c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036c8:	4a93      	ldr	r2, [pc, #588]	; (8003918 <_printf_float+0x2dc>)
 80036ca:	4b94      	ldr	r3, [pc, #592]	; (800391c <_printf_float+0x2e0>)
 80036cc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80036d0:	bf94      	ite	ls
 80036d2:	4690      	movls	r8, r2
 80036d4:	4698      	movhi	r8, r3
 80036d6:	2303      	movs	r3, #3
 80036d8:	6123      	str	r3, [r4, #16]
 80036da:	9b05      	ldr	r3, [sp, #20]
 80036dc:	f023 0304 	bic.w	r3, r3, #4
 80036e0:	6023      	str	r3, [r4, #0]
 80036e2:	f04f 0900 	mov.w	r9, #0
 80036e6:	9700      	str	r7, [sp, #0]
 80036e8:	4633      	mov	r3, r6
 80036ea:	aa0b      	add	r2, sp, #44	; 0x2c
 80036ec:	4621      	mov	r1, r4
 80036ee:	4628      	mov	r0, r5
 80036f0:	f000 f9da 	bl	8003aa8 <_printf_common>
 80036f4:	3001      	adds	r0, #1
 80036f6:	f040 8090 	bne.w	800381a <_printf_float+0x1de>
 80036fa:	f04f 30ff 	mov.w	r0, #4294967295
 80036fe:	b00d      	add	sp, #52	; 0x34
 8003700:	ecbd 8b02 	vpop	{d8}
 8003704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003708:	4642      	mov	r2, r8
 800370a:	464b      	mov	r3, r9
 800370c:	4640      	mov	r0, r8
 800370e:	4649      	mov	r1, r9
 8003710:	f7fd fa14 	bl	8000b3c <__aeabi_dcmpun>
 8003714:	b140      	cbz	r0, 8003728 <_printf_float+0xec>
 8003716:	464b      	mov	r3, r9
 8003718:	2b00      	cmp	r3, #0
 800371a:	bfbc      	itt	lt
 800371c:	232d      	movlt	r3, #45	; 0x2d
 800371e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003722:	4a7f      	ldr	r2, [pc, #508]	; (8003920 <_printf_float+0x2e4>)
 8003724:	4b7f      	ldr	r3, [pc, #508]	; (8003924 <_printf_float+0x2e8>)
 8003726:	e7d1      	b.n	80036cc <_printf_float+0x90>
 8003728:	6863      	ldr	r3, [r4, #4]
 800372a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800372e:	9206      	str	r2, [sp, #24]
 8003730:	1c5a      	adds	r2, r3, #1
 8003732:	d13f      	bne.n	80037b4 <_printf_float+0x178>
 8003734:	2306      	movs	r3, #6
 8003736:	6063      	str	r3, [r4, #4]
 8003738:	9b05      	ldr	r3, [sp, #20]
 800373a:	6861      	ldr	r1, [r4, #4]
 800373c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003740:	2300      	movs	r3, #0
 8003742:	9303      	str	r3, [sp, #12]
 8003744:	ab0a      	add	r3, sp, #40	; 0x28
 8003746:	e9cd b301 	strd	fp, r3, [sp, #4]
 800374a:	ab09      	add	r3, sp, #36	; 0x24
 800374c:	ec49 8b10 	vmov	d0, r8, r9
 8003750:	9300      	str	r3, [sp, #0]
 8003752:	6022      	str	r2, [r4, #0]
 8003754:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003758:	4628      	mov	r0, r5
 800375a:	f7ff fecf 	bl	80034fc <__cvt>
 800375e:	9b06      	ldr	r3, [sp, #24]
 8003760:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003762:	2b47      	cmp	r3, #71	; 0x47
 8003764:	4680      	mov	r8, r0
 8003766:	d108      	bne.n	800377a <_printf_float+0x13e>
 8003768:	1cc8      	adds	r0, r1, #3
 800376a:	db02      	blt.n	8003772 <_printf_float+0x136>
 800376c:	6863      	ldr	r3, [r4, #4]
 800376e:	4299      	cmp	r1, r3
 8003770:	dd41      	ble.n	80037f6 <_printf_float+0x1ba>
 8003772:	f1ab 0302 	sub.w	r3, fp, #2
 8003776:	fa5f fb83 	uxtb.w	fp, r3
 800377a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800377e:	d820      	bhi.n	80037c2 <_printf_float+0x186>
 8003780:	3901      	subs	r1, #1
 8003782:	465a      	mov	r2, fp
 8003784:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003788:	9109      	str	r1, [sp, #36]	; 0x24
 800378a:	f7ff ff19 	bl	80035c0 <__exponent>
 800378e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003790:	1813      	adds	r3, r2, r0
 8003792:	2a01      	cmp	r2, #1
 8003794:	4681      	mov	r9, r0
 8003796:	6123      	str	r3, [r4, #16]
 8003798:	dc02      	bgt.n	80037a0 <_printf_float+0x164>
 800379a:	6822      	ldr	r2, [r4, #0]
 800379c:	07d2      	lsls	r2, r2, #31
 800379e:	d501      	bpl.n	80037a4 <_printf_float+0x168>
 80037a0:	3301      	adds	r3, #1
 80037a2:	6123      	str	r3, [r4, #16]
 80037a4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d09c      	beq.n	80036e6 <_printf_float+0xaa>
 80037ac:	232d      	movs	r3, #45	; 0x2d
 80037ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037b2:	e798      	b.n	80036e6 <_printf_float+0xaa>
 80037b4:	9a06      	ldr	r2, [sp, #24]
 80037b6:	2a47      	cmp	r2, #71	; 0x47
 80037b8:	d1be      	bne.n	8003738 <_printf_float+0xfc>
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d1bc      	bne.n	8003738 <_printf_float+0xfc>
 80037be:	2301      	movs	r3, #1
 80037c0:	e7b9      	b.n	8003736 <_printf_float+0xfa>
 80037c2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80037c6:	d118      	bne.n	80037fa <_printf_float+0x1be>
 80037c8:	2900      	cmp	r1, #0
 80037ca:	6863      	ldr	r3, [r4, #4]
 80037cc:	dd0b      	ble.n	80037e6 <_printf_float+0x1aa>
 80037ce:	6121      	str	r1, [r4, #16]
 80037d0:	b913      	cbnz	r3, 80037d8 <_printf_float+0x19c>
 80037d2:	6822      	ldr	r2, [r4, #0]
 80037d4:	07d0      	lsls	r0, r2, #31
 80037d6:	d502      	bpl.n	80037de <_printf_float+0x1a2>
 80037d8:	3301      	adds	r3, #1
 80037da:	440b      	add	r3, r1
 80037dc:	6123      	str	r3, [r4, #16]
 80037de:	65a1      	str	r1, [r4, #88]	; 0x58
 80037e0:	f04f 0900 	mov.w	r9, #0
 80037e4:	e7de      	b.n	80037a4 <_printf_float+0x168>
 80037e6:	b913      	cbnz	r3, 80037ee <_printf_float+0x1b2>
 80037e8:	6822      	ldr	r2, [r4, #0]
 80037ea:	07d2      	lsls	r2, r2, #31
 80037ec:	d501      	bpl.n	80037f2 <_printf_float+0x1b6>
 80037ee:	3302      	adds	r3, #2
 80037f0:	e7f4      	b.n	80037dc <_printf_float+0x1a0>
 80037f2:	2301      	movs	r3, #1
 80037f4:	e7f2      	b.n	80037dc <_printf_float+0x1a0>
 80037f6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80037fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80037fc:	4299      	cmp	r1, r3
 80037fe:	db05      	blt.n	800380c <_printf_float+0x1d0>
 8003800:	6823      	ldr	r3, [r4, #0]
 8003802:	6121      	str	r1, [r4, #16]
 8003804:	07d8      	lsls	r0, r3, #31
 8003806:	d5ea      	bpl.n	80037de <_printf_float+0x1a2>
 8003808:	1c4b      	adds	r3, r1, #1
 800380a:	e7e7      	b.n	80037dc <_printf_float+0x1a0>
 800380c:	2900      	cmp	r1, #0
 800380e:	bfd4      	ite	le
 8003810:	f1c1 0202 	rsble	r2, r1, #2
 8003814:	2201      	movgt	r2, #1
 8003816:	4413      	add	r3, r2
 8003818:	e7e0      	b.n	80037dc <_printf_float+0x1a0>
 800381a:	6823      	ldr	r3, [r4, #0]
 800381c:	055a      	lsls	r2, r3, #21
 800381e:	d407      	bmi.n	8003830 <_printf_float+0x1f4>
 8003820:	6923      	ldr	r3, [r4, #16]
 8003822:	4642      	mov	r2, r8
 8003824:	4631      	mov	r1, r6
 8003826:	4628      	mov	r0, r5
 8003828:	47b8      	blx	r7
 800382a:	3001      	adds	r0, #1
 800382c:	d12c      	bne.n	8003888 <_printf_float+0x24c>
 800382e:	e764      	b.n	80036fa <_printf_float+0xbe>
 8003830:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003834:	f240 80e0 	bls.w	80039f8 <_printf_float+0x3bc>
 8003838:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800383c:	2200      	movs	r2, #0
 800383e:	2300      	movs	r3, #0
 8003840:	f7fd f94a 	bl	8000ad8 <__aeabi_dcmpeq>
 8003844:	2800      	cmp	r0, #0
 8003846:	d034      	beq.n	80038b2 <_printf_float+0x276>
 8003848:	4a37      	ldr	r2, [pc, #220]	; (8003928 <_printf_float+0x2ec>)
 800384a:	2301      	movs	r3, #1
 800384c:	4631      	mov	r1, r6
 800384e:	4628      	mov	r0, r5
 8003850:	47b8      	blx	r7
 8003852:	3001      	adds	r0, #1
 8003854:	f43f af51 	beq.w	80036fa <_printf_float+0xbe>
 8003858:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800385c:	429a      	cmp	r2, r3
 800385e:	db02      	blt.n	8003866 <_printf_float+0x22a>
 8003860:	6823      	ldr	r3, [r4, #0]
 8003862:	07d8      	lsls	r0, r3, #31
 8003864:	d510      	bpl.n	8003888 <_printf_float+0x24c>
 8003866:	ee18 3a10 	vmov	r3, s16
 800386a:	4652      	mov	r2, sl
 800386c:	4631      	mov	r1, r6
 800386e:	4628      	mov	r0, r5
 8003870:	47b8      	blx	r7
 8003872:	3001      	adds	r0, #1
 8003874:	f43f af41 	beq.w	80036fa <_printf_float+0xbe>
 8003878:	f04f 0800 	mov.w	r8, #0
 800387c:	f104 091a 	add.w	r9, r4, #26
 8003880:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003882:	3b01      	subs	r3, #1
 8003884:	4543      	cmp	r3, r8
 8003886:	dc09      	bgt.n	800389c <_printf_float+0x260>
 8003888:	6823      	ldr	r3, [r4, #0]
 800388a:	079b      	lsls	r3, r3, #30
 800388c:	f100 8107 	bmi.w	8003a9e <_printf_float+0x462>
 8003890:	68e0      	ldr	r0, [r4, #12]
 8003892:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003894:	4298      	cmp	r0, r3
 8003896:	bfb8      	it	lt
 8003898:	4618      	movlt	r0, r3
 800389a:	e730      	b.n	80036fe <_printf_float+0xc2>
 800389c:	2301      	movs	r3, #1
 800389e:	464a      	mov	r2, r9
 80038a0:	4631      	mov	r1, r6
 80038a2:	4628      	mov	r0, r5
 80038a4:	47b8      	blx	r7
 80038a6:	3001      	adds	r0, #1
 80038a8:	f43f af27 	beq.w	80036fa <_printf_float+0xbe>
 80038ac:	f108 0801 	add.w	r8, r8, #1
 80038b0:	e7e6      	b.n	8003880 <_printf_float+0x244>
 80038b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	dc39      	bgt.n	800392c <_printf_float+0x2f0>
 80038b8:	4a1b      	ldr	r2, [pc, #108]	; (8003928 <_printf_float+0x2ec>)
 80038ba:	2301      	movs	r3, #1
 80038bc:	4631      	mov	r1, r6
 80038be:	4628      	mov	r0, r5
 80038c0:	47b8      	blx	r7
 80038c2:	3001      	adds	r0, #1
 80038c4:	f43f af19 	beq.w	80036fa <_printf_float+0xbe>
 80038c8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80038cc:	4313      	orrs	r3, r2
 80038ce:	d102      	bne.n	80038d6 <_printf_float+0x29a>
 80038d0:	6823      	ldr	r3, [r4, #0]
 80038d2:	07d9      	lsls	r1, r3, #31
 80038d4:	d5d8      	bpl.n	8003888 <_printf_float+0x24c>
 80038d6:	ee18 3a10 	vmov	r3, s16
 80038da:	4652      	mov	r2, sl
 80038dc:	4631      	mov	r1, r6
 80038de:	4628      	mov	r0, r5
 80038e0:	47b8      	blx	r7
 80038e2:	3001      	adds	r0, #1
 80038e4:	f43f af09 	beq.w	80036fa <_printf_float+0xbe>
 80038e8:	f04f 0900 	mov.w	r9, #0
 80038ec:	f104 0a1a 	add.w	sl, r4, #26
 80038f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038f2:	425b      	negs	r3, r3
 80038f4:	454b      	cmp	r3, r9
 80038f6:	dc01      	bgt.n	80038fc <_printf_float+0x2c0>
 80038f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80038fa:	e792      	b.n	8003822 <_printf_float+0x1e6>
 80038fc:	2301      	movs	r3, #1
 80038fe:	4652      	mov	r2, sl
 8003900:	4631      	mov	r1, r6
 8003902:	4628      	mov	r0, r5
 8003904:	47b8      	blx	r7
 8003906:	3001      	adds	r0, #1
 8003908:	f43f aef7 	beq.w	80036fa <_printf_float+0xbe>
 800390c:	f109 0901 	add.w	r9, r9, #1
 8003910:	e7ee      	b.n	80038f0 <_printf_float+0x2b4>
 8003912:	bf00      	nop
 8003914:	7fefffff 	.word	0x7fefffff
 8003918:	08005fb4 	.word	0x08005fb4
 800391c:	08005fb8 	.word	0x08005fb8
 8003920:	08005fbc 	.word	0x08005fbc
 8003924:	08005fc0 	.word	0x08005fc0
 8003928:	08005fc4 	.word	0x08005fc4
 800392c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800392e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003930:	429a      	cmp	r2, r3
 8003932:	bfa8      	it	ge
 8003934:	461a      	movge	r2, r3
 8003936:	2a00      	cmp	r2, #0
 8003938:	4691      	mov	r9, r2
 800393a:	dc37      	bgt.n	80039ac <_printf_float+0x370>
 800393c:	f04f 0b00 	mov.w	fp, #0
 8003940:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003944:	f104 021a 	add.w	r2, r4, #26
 8003948:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800394a:	9305      	str	r3, [sp, #20]
 800394c:	eba3 0309 	sub.w	r3, r3, r9
 8003950:	455b      	cmp	r3, fp
 8003952:	dc33      	bgt.n	80039bc <_printf_float+0x380>
 8003954:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003958:	429a      	cmp	r2, r3
 800395a:	db3b      	blt.n	80039d4 <_printf_float+0x398>
 800395c:	6823      	ldr	r3, [r4, #0]
 800395e:	07da      	lsls	r2, r3, #31
 8003960:	d438      	bmi.n	80039d4 <_printf_float+0x398>
 8003962:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8003966:	eba2 0903 	sub.w	r9, r2, r3
 800396a:	9b05      	ldr	r3, [sp, #20]
 800396c:	1ad2      	subs	r2, r2, r3
 800396e:	4591      	cmp	r9, r2
 8003970:	bfa8      	it	ge
 8003972:	4691      	movge	r9, r2
 8003974:	f1b9 0f00 	cmp.w	r9, #0
 8003978:	dc35      	bgt.n	80039e6 <_printf_float+0x3aa>
 800397a:	f04f 0800 	mov.w	r8, #0
 800397e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003982:	f104 0a1a 	add.w	sl, r4, #26
 8003986:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800398a:	1a9b      	subs	r3, r3, r2
 800398c:	eba3 0309 	sub.w	r3, r3, r9
 8003990:	4543      	cmp	r3, r8
 8003992:	f77f af79 	ble.w	8003888 <_printf_float+0x24c>
 8003996:	2301      	movs	r3, #1
 8003998:	4652      	mov	r2, sl
 800399a:	4631      	mov	r1, r6
 800399c:	4628      	mov	r0, r5
 800399e:	47b8      	blx	r7
 80039a0:	3001      	adds	r0, #1
 80039a2:	f43f aeaa 	beq.w	80036fa <_printf_float+0xbe>
 80039a6:	f108 0801 	add.w	r8, r8, #1
 80039aa:	e7ec      	b.n	8003986 <_printf_float+0x34a>
 80039ac:	4613      	mov	r3, r2
 80039ae:	4631      	mov	r1, r6
 80039b0:	4642      	mov	r2, r8
 80039b2:	4628      	mov	r0, r5
 80039b4:	47b8      	blx	r7
 80039b6:	3001      	adds	r0, #1
 80039b8:	d1c0      	bne.n	800393c <_printf_float+0x300>
 80039ba:	e69e      	b.n	80036fa <_printf_float+0xbe>
 80039bc:	2301      	movs	r3, #1
 80039be:	4631      	mov	r1, r6
 80039c0:	4628      	mov	r0, r5
 80039c2:	9205      	str	r2, [sp, #20]
 80039c4:	47b8      	blx	r7
 80039c6:	3001      	adds	r0, #1
 80039c8:	f43f ae97 	beq.w	80036fa <_printf_float+0xbe>
 80039cc:	9a05      	ldr	r2, [sp, #20]
 80039ce:	f10b 0b01 	add.w	fp, fp, #1
 80039d2:	e7b9      	b.n	8003948 <_printf_float+0x30c>
 80039d4:	ee18 3a10 	vmov	r3, s16
 80039d8:	4652      	mov	r2, sl
 80039da:	4631      	mov	r1, r6
 80039dc:	4628      	mov	r0, r5
 80039de:	47b8      	blx	r7
 80039e0:	3001      	adds	r0, #1
 80039e2:	d1be      	bne.n	8003962 <_printf_float+0x326>
 80039e4:	e689      	b.n	80036fa <_printf_float+0xbe>
 80039e6:	9a05      	ldr	r2, [sp, #20]
 80039e8:	464b      	mov	r3, r9
 80039ea:	4442      	add	r2, r8
 80039ec:	4631      	mov	r1, r6
 80039ee:	4628      	mov	r0, r5
 80039f0:	47b8      	blx	r7
 80039f2:	3001      	adds	r0, #1
 80039f4:	d1c1      	bne.n	800397a <_printf_float+0x33e>
 80039f6:	e680      	b.n	80036fa <_printf_float+0xbe>
 80039f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80039fa:	2a01      	cmp	r2, #1
 80039fc:	dc01      	bgt.n	8003a02 <_printf_float+0x3c6>
 80039fe:	07db      	lsls	r3, r3, #31
 8003a00:	d53a      	bpl.n	8003a78 <_printf_float+0x43c>
 8003a02:	2301      	movs	r3, #1
 8003a04:	4642      	mov	r2, r8
 8003a06:	4631      	mov	r1, r6
 8003a08:	4628      	mov	r0, r5
 8003a0a:	47b8      	blx	r7
 8003a0c:	3001      	adds	r0, #1
 8003a0e:	f43f ae74 	beq.w	80036fa <_printf_float+0xbe>
 8003a12:	ee18 3a10 	vmov	r3, s16
 8003a16:	4652      	mov	r2, sl
 8003a18:	4631      	mov	r1, r6
 8003a1a:	4628      	mov	r0, r5
 8003a1c:	47b8      	blx	r7
 8003a1e:	3001      	adds	r0, #1
 8003a20:	f43f ae6b 	beq.w	80036fa <_printf_float+0xbe>
 8003a24:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003a28:	2200      	movs	r2, #0
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8003a30:	f7fd f852 	bl	8000ad8 <__aeabi_dcmpeq>
 8003a34:	b9d8      	cbnz	r0, 8003a6e <_printf_float+0x432>
 8003a36:	f10a 33ff 	add.w	r3, sl, #4294967295
 8003a3a:	f108 0201 	add.w	r2, r8, #1
 8003a3e:	4631      	mov	r1, r6
 8003a40:	4628      	mov	r0, r5
 8003a42:	47b8      	blx	r7
 8003a44:	3001      	adds	r0, #1
 8003a46:	d10e      	bne.n	8003a66 <_printf_float+0x42a>
 8003a48:	e657      	b.n	80036fa <_printf_float+0xbe>
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	4652      	mov	r2, sl
 8003a4e:	4631      	mov	r1, r6
 8003a50:	4628      	mov	r0, r5
 8003a52:	47b8      	blx	r7
 8003a54:	3001      	adds	r0, #1
 8003a56:	f43f ae50 	beq.w	80036fa <_printf_float+0xbe>
 8003a5a:	f108 0801 	add.w	r8, r8, #1
 8003a5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003a60:	3b01      	subs	r3, #1
 8003a62:	4543      	cmp	r3, r8
 8003a64:	dcf1      	bgt.n	8003a4a <_printf_float+0x40e>
 8003a66:	464b      	mov	r3, r9
 8003a68:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003a6c:	e6da      	b.n	8003824 <_printf_float+0x1e8>
 8003a6e:	f04f 0800 	mov.w	r8, #0
 8003a72:	f104 0a1a 	add.w	sl, r4, #26
 8003a76:	e7f2      	b.n	8003a5e <_printf_float+0x422>
 8003a78:	2301      	movs	r3, #1
 8003a7a:	4642      	mov	r2, r8
 8003a7c:	e7df      	b.n	8003a3e <_printf_float+0x402>
 8003a7e:	2301      	movs	r3, #1
 8003a80:	464a      	mov	r2, r9
 8003a82:	4631      	mov	r1, r6
 8003a84:	4628      	mov	r0, r5
 8003a86:	47b8      	blx	r7
 8003a88:	3001      	adds	r0, #1
 8003a8a:	f43f ae36 	beq.w	80036fa <_printf_float+0xbe>
 8003a8e:	f108 0801 	add.w	r8, r8, #1
 8003a92:	68e3      	ldr	r3, [r4, #12]
 8003a94:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003a96:	1a5b      	subs	r3, r3, r1
 8003a98:	4543      	cmp	r3, r8
 8003a9a:	dcf0      	bgt.n	8003a7e <_printf_float+0x442>
 8003a9c:	e6f8      	b.n	8003890 <_printf_float+0x254>
 8003a9e:	f04f 0800 	mov.w	r8, #0
 8003aa2:	f104 0919 	add.w	r9, r4, #25
 8003aa6:	e7f4      	b.n	8003a92 <_printf_float+0x456>

08003aa8 <_printf_common>:
 8003aa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003aac:	4616      	mov	r6, r2
 8003aae:	4699      	mov	r9, r3
 8003ab0:	688a      	ldr	r2, [r1, #8]
 8003ab2:	690b      	ldr	r3, [r1, #16]
 8003ab4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	bfb8      	it	lt
 8003abc:	4613      	movlt	r3, r2
 8003abe:	6033      	str	r3, [r6, #0]
 8003ac0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ac4:	4607      	mov	r7, r0
 8003ac6:	460c      	mov	r4, r1
 8003ac8:	b10a      	cbz	r2, 8003ace <_printf_common+0x26>
 8003aca:	3301      	adds	r3, #1
 8003acc:	6033      	str	r3, [r6, #0]
 8003ace:	6823      	ldr	r3, [r4, #0]
 8003ad0:	0699      	lsls	r1, r3, #26
 8003ad2:	bf42      	ittt	mi
 8003ad4:	6833      	ldrmi	r3, [r6, #0]
 8003ad6:	3302      	addmi	r3, #2
 8003ad8:	6033      	strmi	r3, [r6, #0]
 8003ada:	6825      	ldr	r5, [r4, #0]
 8003adc:	f015 0506 	ands.w	r5, r5, #6
 8003ae0:	d106      	bne.n	8003af0 <_printf_common+0x48>
 8003ae2:	f104 0a19 	add.w	sl, r4, #25
 8003ae6:	68e3      	ldr	r3, [r4, #12]
 8003ae8:	6832      	ldr	r2, [r6, #0]
 8003aea:	1a9b      	subs	r3, r3, r2
 8003aec:	42ab      	cmp	r3, r5
 8003aee:	dc26      	bgt.n	8003b3e <_printf_common+0x96>
 8003af0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003af4:	1e13      	subs	r3, r2, #0
 8003af6:	6822      	ldr	r2, [r4, #0]
 8003af8:	bf18      	it	ne
 8003afa:	2301      	movne	r3, #1
 8003afc:	0692      	lsls	r2, r2, #26
 8003afe:	d42b      	bmi.n	8003b58 <_printf_common+0xb0>
 8003b00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b04:	4649      	mov	r1, r9
 8003b06:	4638      	mov	r0, r7
 8003b08:	47c0      	blx	r8
 8003b0a:	3001      	adds	r0, #1
 8003b0c:	d01e      	beq.n	8003b4c <_printf_common+0xa4>
 8003b0e:	6823      	ldr	r3, [r4, #0]
 8003b10:	6922      	ldr	r2, [r4, #16]
 8003b12:	f003 0306 	and.w	r3, r3, #6
 8003b16:	2b04      	cmp	r3, #4
 8003b18:	bf02      	ittt	eq
 8003b1a:	68e5      	ldreq	r5, [r4, #12]
 8003b1c:	6833      	ldreq	r3, [r6, #0]
 8003b1e:	1aed      	subeq	r5, r5, r3
 8003b20:	68a3      	ldr	r3, [r4, #8]
 8003b22:	bf0c      	ite	eq
 8003b24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b28:	2500      	movne	r5, #0
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	bfc4      	itt	gt
 8003b2e:	1a9b      	subgt	r3, r3, r2
 8003b30:	18ed      	addgt	r5, r5, r3
 8003b32:	2600      	movs	r6, #0
 8003b34:	341a      	adds	r4, #26
 8003b36:	42b5      	cmp	r5, r6
 8003b38:	d11a      	bne.n	8003b70 <_printf_common+0xc8>
 8003b3a:	2000      	movs	r0, #0
 8003b3c:	e008      	b.n	8003b50 <_printf_common+0xa8>
 8003b3e:	2301      	movs	r3, #1
 8003b40:	4652      	mov	r2, sl
 8003b42:	4649      	mov	r1, r9
 8003b44:	4638      	mov	r0, r7
 8003b46:	47c0      	blx	r8
 8003b48:	3001      	adds	r0, #1
 8003b4a:	d103      	bne.n	8003b54 <_printf_common+0xac>
 8003b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b54:	3501      	adds	r5, #1
 8003b56:	e7c6      	b.n	8003ae6 <_printf_common+0x3e>
 8003b58:	18e1      	adds	r1, r4, r3
 8003b5a:	1c5a      	adds	r2, r3, #1
 8003b5c:	2030      	movs	r0, #48	; 0x30
 8003b5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003b62:	4422      	add	r2, r4
 8003b64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003b68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003b6c:	3302      	adds	r3, #2
 8003b6e:	e7c7      	b.n	8003b00 <_printf_common+0x58>
 8003b70:	2301      	movs	r3, #1
 8003b72:	4622      	mov	r2, r4
 8003b74:	4649      	mov	r1, r9
 8003b76:	4638      	mov	r0, r7
 8003b78:	47c0      	blx	r8
 8003b7a:	3001      	adds	r0, #1
 8003b7c:	d0e6      	beq.n	8003b4c <_printf_common+0xa4>
 8003b7e:	3601      	adds	r6, #1
 8003b80:	e7d9      	b.n	8003b36 <_printf_common+0x8e>
	...

08003b84 <_printf_i>:
 8003b84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b88:	7e0f      	ldrb	r7, [r1, #24]
 8003b8a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003b8c:	2f78      	cmp	r7, #120	; 0x78
 8003b8e:	4691      	mov	r9, r2
 8003b90:	4680      	mov	r8, r0
 8003b92:	460c      	mov	r4, r1
 8003b94:	469a      	mov	sl, r3
 8003b96:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003b9a:	d807      	bhi.n	8003bac <_printf_i+0x28>
 8003b9c:	2f62      	cmp	r7, #98	; 0x62
 8003b9e:	d80a      	bhi.n	8003bb6 <_printf_i+0x32>
 8003ba0:	2f00      	cmp	r7, #0
 8003ba2:	f000 80d4 	beq.w	8003d4e <_printf_i+0x1ca>
 8003ba6:	2f58      	cmp	r7, #88	; 0x58
 8003ba8:	f000 80c0 	beq.w	8003d2c <_printf_i+0x1a8>
 8003bac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003bb0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003bb4:	e03a      	b.n	8003c2c <_printf_i+0xa8>
 8003bb6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003bba:	2b15      	cmp	r3, #21
 8003bbc:	d8f6      	bhi.n	8003bac <_printf_i+0x28>
 8003bbe:	a101      	add	r1, pc, #4	; (adr r1, 8003bc4 <_printf_i+0x40>)
 8003bc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003bc4:	08003c1d 	.word	0x08003c1d
 8003bc8:	08003c31 	.word	0x08003c31
 8003bcc:	08003bad 	.word	0x08003bad
 8003bd0:	08003bad 	.word	0x08003bad
 8003bd4:	08003bad 	.word	0x08003bad
 8003bd8:	08003bad 	.word	0x08003bad
 8003bdc:	08003c31 	.word	0x08003c31
 8003be0:	08003bad 	.word	0x08003bad
 8003be4:	08003bad 	.word	0x08003bad
 8003be8:	08003bad 	.word	0x08003bad
 8003bec:	08003bad 	.word	0x08003bad
 8003bf0:	08003d35 	.word	0x08003d35
 8003bf4:	08003c5d 	.word	0x08003c5d
 8003bf8:	08003cef 	.word	0x08003cef
 8003bfc:	08003bad 	.word	0x08003bad
 8003c00:	08003bad 	.word	0x08003bad
 8003c04:	08003d57 	.word	0x08003d57
 8003c08:	08003bad 	.word	0x08003bad
 8003c0c:	08003c5d 	.word	0x08003c5d
 8003c10:	08003bad 	.word	0x08003bad
 8003c14:	08003bad 	.word	0x08003bad
 8003c18:	08003cf7 	.word	0x08003cf7
 8003c1c:	682b      	ldr	r3, [r5, #0]
 8003c1e:	1d1a      	adds	r2, r3, #4
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	602a      	str	r2, [r5, #0]
 8003c24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e09f      	b.n	8003d70 <_printf_i+0x1ec>
 8003c30:	6820      	ldr	r0, [r4, #0]
 8003c32:	682b      	ldr	r3, [r5, #0]
 8003c34:	0607      	lsls	r7, r0, #24
 8003c36:	f103 0104 	add.w	r1, r3, #4
 8003c3a:	6029      	str	r1, [r5, #0]
 8003c3c:	d501      	bpl.n	8003c42 <_printf_i+0xbe>
 8003c3e:	681e      	ldr	r6, [r3, #0]
 8003c40:	e003      	b.n	8003c4a <_printf_i+0xc6>
 8003c42:	0646      	lsls	r6, r0, #25
 8003c44:	d5fb      	bpl.n	8003c3e <_printf_i+0xba>
 8003c46:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003c4a:	2e00      	cmp	r6, #0
 8003c4c:	da03      	bge.n	8003c56 <_printf_i+0xd2>
 8003c4e:	232d      	movs	r3, #45	; 0x2d
 8003c50:	4276      	negs	r6, r6
 8003c52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c56:	485a      	ldr	r0, [pc, #360]	; (8003dc0 <_printf_i+0x23c>)
 8003c58:	230a      	movs	r3, #10
 8003c5a:	e012      	b.n	8003c82 <_printf_i+0xfe>
 8003c5c:	682b      	ldr	r3, [r5, #0]
 8003c5e:	6820      	ldr	r0, [r4, #0]
 8003c60:	1d19      	adds	r1, r3, #4
 8003c62:	6029      	str	r1, [r5, #0]
 8003c64:	0605      	lsls	r5, r0, #24
 8003c66:	d501      	bpl.n	8003c6c <_printf_i+0xe8>
 8003c68:	681e      	ldr	r6, [r3, #0]
 8003c6a:	e002      	b.n	8003c72 <_printf_i+0xee>
 8003c6c:	0641      	lsls	r1, r0, #25
 8003c6e:	d5fb      	bpl.n	8003c68 <_printf_i+0xe4>
 8003c70:	881e      	ldrh	r6, [r3, #0]
 8003c72:	4853      	ldr	r0, [pc, #332]	; (8003dc0 <_printf_i+0x23c>)
 8003c74:	2f6f      	cmp	r7, #111	; 0x6f
 8003c76:	bf0c      	ite	eq
 8003c78:	2308      	moveq	r3, #8
 8003c7a:	230a      	movne	r3, #10
 8003c7c:	2100      	movs	r1, #0
 8003c7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003c82:	6865      	ldr	r5, [r4, #4]
 8003c84:	60a5      	str	r5, [r4, #8]
 8003c86:	2d00      	cmp	r5, #0
 8003c88:	bfa2      	ittt	ge
 8003c8a:	6821      	ldrge	r1, [r4, #0]
 8003c8c:	f021 0104 	bicge.w	r1, r1, #4
 8003c90:	6021      	strge	r1, [r4, #0]
 8003c92:	b90e      	cbnz	r6, 8003c98 <_printf_i+0x114>
 8003c94:	2d00      	cmp	r5, #0
 8003c96:	d04b      	beq.n	8003d30 <_printf_i+0x1ac>
 8003c98:	4615      	mov	r5, r2
 8003c9a:	fbb6 f1f3 	udiv	r1, r6, r3
 8003c9e:	fb03 6711 	mls	r7, r3, r1, r6
 8003ca2:	5dc7      	ldrb	r7, [r0, r7]
 8003ca4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003ca8:	4637      	mov	r7, r6
 8003caa:	42bb      	cmp	r3, r7
 8003cac:	460e      	mov	r6, r1
 8003cae:	d9f4      	bls.n	8003c9a <_printf_i+0x116>
 8003cb0:	2b08      	cmp	r3, #8
 8003cb2:	d10b      	bne.n	8003ccc <_printf_i+0x148>
 8003cb4:	6823      	ldr	r3, [r4, #0]
 8003cb6:	07de      	lsls	r6, r3, #31
 8003cb8:	d508      	bpl.n	8003ccc <_printf_i+0x148>
 8003cba:	6923      	ldr	r3, [r4, #16]
 8003cbc:	6861      	ldr	r1, [r4, #4]
 8003cbe:	4299      	cmp	r1, r3
 8003cc0:	bfde      	ittt	le
 8003cc2:	2330      	movle	r3, #48	; 0x30
 8003cc4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003cc8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003ccc:	1b52      	subs	r2, r2, r5
 8003cce:	6122      	str	r2, [r4, #16]
 8003cd0:	f8cd a000 	str.w	sl, [sp]
 8003cd4:	464b      	mov	r3, r9
 8003cd6:	aa03      	add	r2, sp, #12
 8003cd8:	4621      	mov	r1, r4
 8003cda:	4640      	mov	r0, r8
 8003cdc:	f7ff fee4 	bl	8003aa8 <_printf_common>
 8003ce0:	3001      	adds	r0, #1
 8003ce2:	d14a      	bne.n	8003d7a <_printf_i+0x1f6>
 8003ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ce8:	b004      	add	sp, #16
 8003cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cee:	6823      	ldr	r3, [r4, #0]
 8003cf0:	f043 0320 	orr.w	r3, r3, #32
 8003cf4:	6023      	str	r3, [r4, #0]
 8003cf6:	4833      	ldr	r0, [pc, #204]	; (8003dc4 <_printf_i+0x240>)
 8003cf8:	2778      	movs	r7, #120	; 0x78
 8003cfa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003cfe:	6823      	ldr	r3, [r4, #0]
 8003d00:	6829      	ldr	r1, [r5, #0]
 8003d02:	061f      	lsls	r7, r3, #24
 8003d04:	f851 6b04 	ldr.w	r6, [r1], #4
 8003d08:	d402      	bmi.n	8003d10 <_printf_i+0x18c>
 8003d0a:	065f      	lsls	r7, r3, #25
 8003d0c:	bf48      	it	mi
 8003d0e:	b2b6      	uxthmi	r6, r6
 8003d10:	07df      	lsls	r7, r3, #31
 8003d12:	bf48      	it	mi
 8003d14:	f043 0320 	orrmi.w	r3, r3, #32
 8003d18:	6029      	str	r1, [r5, #0]
 8003d1a:	bf48      	it	mi
 8003d1c:	6023      	strmi	r3, [r4, #0]
 8003d1e:	b91e      	cbnz	r6, 8003d28 <_printf_i+0x1a4>
 8003d20:	6823      	ldr	r3, [r4, #0]
 8003d22:	f023 0320 	bic.w	r3, r3, #32
 8003d26:	6023      	str	r3, [r4, #0]
 8003d28:	2310      	movs	r3, #16
 8003d2a:	e7a7      	b.n	8003c7c <_printf_i+0xf8>
 8003d2c:	4824      	ldr	r0, [pc, #144]	; (8003dc0 <_printf_i+0x23c>)
 8003d2e:	e7e4      	b.n	8003cfa <_printf_i+0x176>
 8003d30:	4615      	mov	r5, r2
 8003d32:	e7bd      	b.n	8003cb0 <_printf_i+0x12c>
 8003d34:	682b      	ldr	r3, [r5, #0]
 8003d36:	6826      	ldr	r6, [r4, #0]
 8003d38:	6961      	ldr	r1, [r4, #20]
 8003d3a:	1d18      	adds	r0, r3, #4
 8003d3c:	6028      	str	r0, [r5, #0]
 8003d3e:	0635      	lsls	r5, r6, #24
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	d501      	bpl.n	8003d48 <_printf_i+0x1c4>
 8003d44:	6019      	str	r1, [r3, #0]
 8003d46:	e002      	b.n	8003d4e <_printf_i+0x1ca>
 8003d48:	0670      	lsls	r0, r6, #25
 8003d4a:	d5fb      	bpl.n	8003d44 <_printf_i+0x1c0>
 8003d4c:	8019      	strh	r1, [r3, #0]
 8003d4e:	2300      	movs	r3, #0
 8003d50:	6123      	str	r3, [r4, #16]
 8003d52:	4615      	mov	r5, r2
 8003d54:	e7bc      	b.n	8003cd0 <_printf_i+0x14c>
 8003d56:	682b      	ldr	r3, [r5, #0]
 8003d58:	1d1a      	adds	r2, r3, #4
 8003d5a:	602a      	str	r2, [r5, #0]
 8003d5c:	681d      	ldr	r5, [r3, #0]
 8003d5e:	6862      	ldr	r2, [r4, #4]
 8003d60:	2100      	movs	r1, #0
 8003d62:	4628      	mov	r0, r5
 8003d64:	f7fc fa3c 	bl	80001e0 <memchr>
 8003d68:	b108      	cbz	r0, 8003d6e <_printf_i+0x1ea>
 8003d6a:	1b40      	subs	r0, r0, r5
 8003d6c:	6060      	str	r0, [r4, #4]
 8003d6e:	6863      	ldr	r3, [r4, #4]
 8003d70:	6123      	str	r3, [r4, #16]
 8003d72:	2300      	movs	r3, #0
 8003d74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d78:	e7aa      	b.n	8003cd0 <_printf_i+0x14c>
 8003d7a:	6923      	ldr	r3, [r4, #16]
 8003d7c:	462a      	mov	r2, r5
 8003d7e:	4649      	mov	r1, r9
 8003d80:	4640      	mov	r0, r8
 8003d82:	47d0      	blx	sl
 8003d84:	3001      	adds	r0, #1
 8003d86:	d0ad      	beq.n	8003ce4 <_printf_i+0x160>
 8003d88:	6823      	ldr	r3, [r4, #0]
 8003d8a:	079b      	lsls	r3, r3, #30
 8003d8c:	d413      	bmi.n	8003db6 <_printf_i+0x232>
 8003d8e:	68e0      	ldr	r0, [r4, #12]
 8003d90:	9b03      	ldr	r3, [sp, #12]
 8003d92:	4298      	cmp	r0, r3
 8003d94:	bfb8      	it	lt
 8003d96:	4618      	movlt	r0, r3
 8003d98:	e7a6      	b.n	8003ce8 <_printf_i+0x164>
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	4632      	mov	r2, r6
 8003d9e:	4649      	mov	r1, r9
 8003da0:	4640      	mov	r0, r8
 8003da2:	47d0      	blx	sl
 8003da4:	3001      	adds	r0, #1
 8003da6:	d09d      	beq.n	8003ce4 <_printf_i+0x160>
 8003da8:	3501      	adds	r5, #1
 8003daa:	68e3      	ldr	r3, [r4, #12]
 8003dac:	9903      	ldr	r1, [sp, #12]
 8003dae:	1a5b      	subs	r3, r3, r1
 8003db0:	42ab      	cmp	r3, r5
 8003db2:	dcf2      	bgt.n	8003d9a <_printf_i+0x216>
 8003db4:	e7eb      	b.n	8003d8e <_printf_i+0x20a>
 8003db6:	2500      	movs	r5, #0
 8003db8:	f104 0619 	add.w	r6, r4, #25
 8003dbc:	e7f5      	b.n	8003daa <_printf_i+0x226>
 8003dbe:	bf00      	nop
 8003dc0:	08005fc6 	.word	0x08005fc6
 8003dc4:	08005fd7 	.word	0x08005fd7

08003dc8 <std>:
 8003dc8:	2300      	movs	r3, #0
 8003dca:	b510      	push	{r4, lr}
 8003dcc:	4604      	mov	r4, r0
 8003dce:	e9c0 3300 	strd	r3, r3, [r0]
 8003dd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003dd6:	6083      	str	r3, [r0, #8]
 8003dd8:	8181      	strh	r1, [r0, #12]
 8003dda:	6643      	str	r3, [r0, #100]	; 0x64
 8003ddc:	81c2      	strh	r2, [r0, #14]
 8003dde:	6183      	str	r3, [r0, #24]
 8003de0:	4619      	mov	r1, r3
 8003de2:	2208      	movs	r2, #8
 8003de4:	305c      	adds	r0, #92	; 0x5c
 8003de6:	f000 f9e5 	bl	80041b4 <memset>
 8003dea:	4b05      	ldr	r3, [pc, #20]	; (8003e00 <std+0x38>)
 8003dec:	6263      	str	r3, [r4, #36]	; 0x24
 8003dee:	4b05      	ldr	r3, [pc, #20]	; (8003e04 <std+0x3c>)
 8003df0:	62a3      	str	r3, [r4, #40]	; 0x28
 8003df2:	4b05      	ldr	r3, [pc, #20]	; (8003e08 <std+0x40>)
 8003df4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003df6:	4b05      	ldr	r3, [pc, #20]	; (8003e0c <std+0x44>)
 8003df8:	6224      	str	r4, [r4, #32]
 8003dfa:	6323      	str	r3, [r4, #48]	; 0x30
 8003dfc:	bd10      	pop	{r4, pc}
 8003dfe:	bf00      	nop
 8003e00:	08004005 	.word	0x08004005
 8003e04:	08004027 	.word	0x08004027
 8003e08:	0800405f 	.word	0x0800405f
 8003e0c:	08004083 	.word	0x08004083

08003e10 <stdio_exit_handler>:
 8003e10:	4a02      	ldr	r2, [pc, #8]	; (8003e1c <stdio_exit_handler+0xc>)
 8003e12:	4903      	ldr	r1, [pc, #12]	; (8003e20 <stdio_exit_handler+0x10>)
 8003e14:	4803      	ldr	r0, [pc, #12]	; (8003e24 <stdio_exit_handler+0x14>)
 8003e16:	f000 b869 	b.w	8003eec <_fwalk_sglue>
 8003e1a:	bf00      	nop
 8003e1c:	2000000c 	.word	0x2000000c
 8003e20:	08005c31 	.word	0x08005c31
 8003e24:	20000018 	.word	0x20000018

08003e28 <cleanup_stdio>:
 8003e28:	6841      	ldr	r1, [r0, #4]
 8003e2a:	4b0c      	ldr	r3, [pc, #48]	; (8003e5c <cleanup_stdio+0x34>)
 8003e2c:	4299      	cmp	r1, r3
 8003e2e:	b510      	push	{r4, lr}
 8003e30:	4604      	mov	r4, r0
 8003e32:	d001      	beq.n	8003e38 <cleanup_stdio+0x10>
 8003e34:	f001 fefc 	bl	8005c30 <_fflush_r>
 8003e38:	68a1      	ldr	r1, [r4, #8]
 8003e3a:	4b09      	ldr	r3, [pc, #36]	; (8003e60 <cleanup_stdio+0x38>)
 8003e3c:	4299      	cmp	r1, r3
 8003e3e:	d002      	beq.n	8003e46 <cleanup_stdio+0x1e>
 8003e40:	4620      	mov	r0, r4
 8003e42:	f001 fef5 	bl	8005c30 <_fflush_r>
 8003e46:	68e1      	ldr	r1, [r4, #12]
 8003e48:	4b06      	ldr	r3, [pc, #24]	; (8003e64 <cleanup_stdio+0x3c>)
 8003e4a:	4299      	cmp	r1, r3
 8003e4c:	d004      	beq.n	8003e58 <cleanup_stdio+0x30>
 8003e4e:	4620      	mov	r0, r4
 8003e50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e54:	f001 beec 	b.w	8005c30 <_fflush_r>
 8003e58:	bd10      	pop	{r4, pc}
 8003e5a:	bf00      	nop
 8003e5c:	20000208 	.word	0x20000208
 8003e60:	20000270 	.word	0x20000270
 8003e64:	200002d8 	.word	0x200002d8

08003e68 <global_stdio_init.part.0>:
 8003e68:	b510      	push	{r4, lr}
 8003e6a:	4b0b      	ldr	r3, [pc, #44]	; (8003e98 <global_stdio_init.part.0+0x30>)
 8003e6c:	4c0b      	ldr	r4, [pc, #44]	; (8003e9c <global_stdio_init.part.0+0x34>)
 8003e6e:	4a0c      	ldr	r2, [pc, #48]	; (8003ea0 <global_stdio_init.part.0+0x38>)
 8003e70:	601a      	str	r2, [r3, #0]
 8003e72:	4620      	mov	r0, r4
 8003e74:	2200      	movs	r2, #0
 8003e76:	2104      	movs	r1, #4
 8003e78:	f7ff ffa6 	bl	8003dc8 <std>
 8003e7c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003e80:	2201      	movs	r2, #1
 8003e82:	2109      	movs	r1, #9
 8003e84:	f7ff ffa0 	bl	8003dc8 <std>
 8003e88:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003e8c:	2202      	movs	r2, #2
 8003e8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e92:	2112      	movs	r1, #18
 8003e94:	f7ff bf98 	b.w	8003dc8 <std>
 8003e98:	20000340 	.word	0x20000340
 8003e9c:	20000208 	.word	0x20000208
 8003ea0:	08003e11 	.word	0x08003e11

08003ea4 <__sfp_lock_acquire>:
 8003ea4:	4801      	ldr	r0, [pc, #4]	; (8003eac <__sfp_lock_acquire+0x8>)
 8003ea6:	f000 ba01 	b.w	80042ac <__retarget_lock_acquire_recursive>
 8003eaa:	bf00      	nop
 8003eac:	20000349 	.word	0x20000349

08003eb0 <__sfp_lock_release>:
 8003eb0:	4801      	ldr	r0, [pc, #4]	; (8003eb8 <__sfp_lock_release+0x8>)
 8003eb2:	f000 b9fc 	b.w	80042ae <__retarget_lock_release_recursive>
 8003eb6:	bf00      	nop
 8003eb8:	20000349 	.word	0x20000349

08003ebc <__sinit>:
 8003ebc:	b510      	push	{r4, lr}
 8003ebe:	4604      	mov	r4, r0
 8003ec0:	f7ff fff0 	bl	8003ea4 <__sfp_lock_acquire>
 8003ec4:	6a23      	ldr	r3, [r4, #32]
 8003ec6:	b11b      	cbz	r3, 8003ed0 <__sinit+0x14>
 8003ec8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ecc:	f7ff bff0 	b.w	8003eb0 <__sfp_lock_release>
 8003ed0:	4b04      	ldr	r3, [pc, #16]	; (8003ee4 <__sinit+0x28>)
 8003ed2:	6223      	str	r3, [r4, #32]
 8003ed4:	4b04      	ldr	r3, [pc, #16]	; (8003ee8 <__sinit+0x2c>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d1f5      	bne.n	8003ec8 <__sinit+0xc>
 8003edc:	f7ff ffc4 	bl	8003e68 <global_stdio_init.part.0>
 8003ee0:	e7f2      	b.n	8003ec8 <__sinit+0xc>
 8003ee2:	bf00      	nop
 8003ee4:	08003e29 	.word	0x08003e29
 8003ee8:	20000340 	.word	0x20000340

08003eec <_fwalk_sglue>:
 8003eec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ef0:	4607      	mov	r7, r0
 8003ef2:	4688      	mov	r8, r1
 8003ef4:	4614      	mov	r4, r2
 8003ef6:	2600      	movs	r6, #0
 8003ef8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003efc:	f1b9 0901 	subs.w	r9, r9, #1
 8003f00:	d505      	bpl.n	8003f0e <_fwalk_sglue+0x22>
 8003f02:	6824      	ldr	r4, [r4, #0]
 8003f04:	2c00      	cmp	r4, #0
 8003f06:	d1f7      	bne.n	8003ef8 <_fwalk_sglue+0xc>
 8003f08:	4630      	mov	r0, r6
 8003f0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f0e:	89ab      	ldrh	r3, [r5, #12]
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d907      	bls.n	8003f24 <_fwalk_sglue+0x38>
 8003f14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003f18:	3301      	adds	r3, #1
 8003f1a:	d003      	beq.n	8003f24 <_fwalk_sglue+0x38>
 8003f1c:	4629      	mov	r1, r5
 8003f1e:	4638      	mov	r0, r7
 8003f20:	47c0      	blx	r8
 8003f22:	4306      	orrs	r6, r0
 8003f24:	3568      	adds	r5, #104	; 0x68
 8003f26:	e7e9      	b.n	8003efc <_fwalk_sglue+0x10>

08003f28 <iprintf>:
 8003f28:	b40f      	push	{r0, r1, r2, r3}
 8003f2a:	b507      	push	{r0, r1, r2, lr}
 8003f2c:	4906      	ldr	r1, [pc, #24]	; (8003f48 <iprintf+0x20>)
 8003f2e:	ab04      	add	r3, sp, #16
 8003f30:	6808      	ldr	r0, [r1, #0]
 8003f32:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f36:	6881      	ldr	r1, [r0, #8]
 8003f38:	9301      	str	r3, [sp, #4]
 8003f3a:	f001 fcd9 	bl	80058f0 <_vfiprintf_r>
 8003f3e:	b003      	add	sp, #12
 8003f40:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f44:	b004      	add	sp, #16
 8003f46:	4770      	bx	lr
 8003f48:	20000064 	.word	0x20000064

08003f4c <_puts_r>:
 8003f4c:	6a03      	ldr	r3, [r0, #32]
 8003f4e:	b570      	push	{r4, r5, r6, lr}
 8003f50:	6884      	ldr	r4, [r0, #8]
 8003f52:	4605      	mov	r5, r0
 8003f54:	460e      	mov	r6, r1
 8003f56:	b90b      	cbnz	r3, 8003f5c <_puts_r+0x10>
 8003f58:	f7ff ffb0 	bl	8003ebc <__sinit>
 8003f5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003f5e:	07db      	lsls	r3, r3, #31
 8003f60:	d405      	bmi.n	8003f6e <_puts_r+0x22>
 8003f62:	89a3      	ldrh	r3, [r4, #12]
 8003f64:	0598      	lsls	r0, r3, #22
 8003f66:	d402      	bmi.n	8003f6e <_puts_r+0x22>
 8003f68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f6a:	f000 f99f 	bl	80042ac <__retarget_lock_acquire_recursive>
 8003f6e:	89a3      	ldrh	r3, [r4, #12]
 8003f70:	0719      	lsls	r1, r3, #28
 8003f72:	d513      	bpl.n	8003f9c <_puts_r+0x50>
 8003f74:	6923      	ldr	r3, [r4, #16]
 8003f76:	b18b      	cbz	r3, 8003f9c <_puts_r+0x50>
 8003f78:	3e01      	subs	r6, #1
 8003f7a:	68a3      	ldr	r3, [r4, #8]
 8003f7c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003f80:	3b01      	subs	r3, #1
 8003f82:	60a3      	str	r3, [r4, #8]
 8003f84:	b9e9      	cbnz	r1, 8003fc2 <_puts_r+0x76>
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	da2e      	bge.n	8003fe8 <_puts_r+0x9c>
 8003f8a:	4622      	mov	r2, r4
 8003f8c:	210a      	movs	r1, #10
 8003f8e:	4628      	mov	r0, r5
 8003f90:	f000 f87b 	bl	800408a <__swbuf_r>
 8003f94:	3001      	adds	r0, #1
 8003f96:	d007      	beq.n	8003fa8 <_puts_r+0x5c>
 8003f98:	250a      	movs	r5, #10
 8003f9a:	e007      	b.n	8003fac <_puts_r+0x60>
 8003f9c:	4621      	mov	r1, r4
 8003f9e:	4628      	mov	r0, r5
 8003fa0:	f000 f8b0 	bl	8004104 <__swsetup_r>
 8003fa4:	2800      	cmp	r0, #0
 8003fa6:	d0e7      	beq.n	8003f78 <_puts_r+0x2c>
 8003fa8:	f04f 35ff 	mov.w	r5, #4294967295
 8003fac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003fae:	07da      	lsls	r2, r3, #31
 8003fb0:	d405      	bmi.n	8003fbe <_puts_r+0x72>
 8003fb2:	89a3      	ldrh	r3, [r4, #12]
 8003fb4:	059b      	lsls	r3, r3, #22
 8003fb6:	d402      	bmi.n	8003fbe <_puts_r+0x72>
 8003fb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003fba:	f000 f978 	bl	80042ae <__retarget_lock_release_recursive>
 8003fbe:	4628      	mov	r0, r5
 8003fc0:	bd70      	pop	{r4, r5, r6, pc}
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	da04      	bge.n	8003fd0 <_puts_r+0x84>
 8003fc6:	69a2      	ldr	r2, [r4, #24]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	dc06      	bgt.n	8003fda <_puts_r+0x8e>
 8003fcc:	290a      	cmp	r1, #10
 8003fce:	d004      	beq.n	8003fda <_puts_r+0x8e>
 8003fd0:	6823      	ldr	r3, [r4, #0]
 8003fd2:	1c5a      	adds	r2, r3, #1
 8003fd4:	6022      	str	r2, [r4, #0]
 8003fd6:	7019      	strb	r1, [r3, #0]
 8003fd8:	e7cf      	b.n	8003f7a <_puts_r+0x2e>
 8003fda:	4622      	mov	r2, r4
 8003fdc:	4628      	mov	r0, r5
 8003fde:	f000 f854 	bl	800408a <__swbuf_r>
 8003fe2:	3001      	adds	r0, #1
 8003fe4:	d1c9      	bne.n	8003f7a <_puts_r+0x2e>
 8003fe6:	e7df      	b.n	8003fa8 <_puts_r+0x5c>
 8003fe8:	6823      	ldr	r3, [r4, #0]
 8003fea:	250a      	movs	r5, #10
 8003fec:	1c5a      	adds	r2, r3, #1
 8003fee:	6022      	str	r2, [r4, #0]
 8003ff0:	701d      	strb	r5, [r3, #0]
 8003ff2:	e7db      	b.n	8003fac <_puts_r+0x60>

08003ff4 <puts>:
 8003ff4:	4b02      	ldr	r3, [pc, #8]	; (8004000 <puts+0xc>)
 8003ff6:	4601      	mov	r1, r0
 8003ff8:	6818      	ldr	r0, [r3, #0]
 8003ffa:	f7ff bfa7 	b.w	8003f4c <_puts_r>
 8003ffe:	bf00      	nop
 8004000:	20000064 	.word	0x20000064

08004004 <__sread>:
 8004004:	b510      	push	{r4, lr}
 8004006:	460c      	mov	r4, r1
 8004008:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800400c:	f000 f900 	bl	8004210 <_read_r>
 8004010:	2800      	cmp	r0, #0
 8004012:	bfab      	itete	ge
 8004014:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004016:	89a3      	ldrhlt	r3, [r4, #12]
 8004018:	181b      	addge	r3, r3, r0
 800401a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800401e:	bfac      	ite	ge
 8004020:	6563      	strge	r3, [r4, #84]	; 0x54
 8004022:	81a3      	strhlt	r3, [r4, #12]
 8004024:	bd10      	pop	{r4, pc}

08004026 <__swrite>:
 8004026:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800402a:	461f      	mov	r7, r3
 800402c:	898b      	ldrh	r3, [r1, #12]
 800402e:	05db      	lsls	r3, r3, #23
 8004030:	4605      	mov	r5, r0
 8004032:	460c      	mov	r4, r1
 8004034:	4616      	mov	r6, r2
 8004036:	d505      	bpl.n	8004044 <__swrite+0x1e>
 8004038:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800403c:	2302      	movs	r3, #2
 800403e:	2200      	movs	r2, #0
 8004040:	f000 f8d4 	bl	80041ec <_lseek_r>
 8004044:	89a3      	ldrh	r3, [r4, #12]
 8004046:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800404a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800404e:	81a3      	strh	r3, [r4, #12]
 8004050:	4632      	mov	r2, r6
 8004052:	463b      	mov	r3, r7
 8004054:	4628      	mov	r0, r5
 8004056:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800405a:	f000 b8eb 	b.w	8004234 <_write_r>

0800405e <__sseek>:
 800405e:	b510      	push	{r4, lr}
 8004060:	460c      	mov	r4, r1
 8004062:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004066:	f000 f8c1 	bl	80041ec <_lseek_r>
 800406a:	1c43      	adds	r3, r0, #1
 800406c:	89a3      	ldrh	r3, [r4, #12]
 800406e:	bf15      	itete	ne
 8004070:	6560      	strne	r0, [r4, #84]	; 0x54
 8004072:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004076:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800407a:	81a3      	strheq	r3, [r4, #12]
 800407c:	bf18      	it	ne
 800407e:	81a3      	strhne	r3, [r4, #12]
 8004080:	bd10      	pop	{r4, pc}

08004082 <__sclose>:
 8004082:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004086:	f000 b8a1 	b.w	80041cc <_close_r>

0800408a <__swbuf_r>:
 800408a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800408c:	460e      	mov	r6, r1
 800408e:	4614      	mov	r4, r2
 8004090:	4605      	mov	r5, r0
 8004092:	b118      	cbz	r0, 800409c <__swbuf_r+0x12>
 8004094:	6a03      	ldr	r3, [r0, #32]
 8004096:	b90b      	cbnz	r3, 800409c <__swbuf_r+0x12>
 8004098:	f7ff ff10 	bl	8003ebc <__sinit>
 800409c:	69a3      	ldr	r3, [r4, #24]
 800409e:	60a3      	str	r3, [r4, #8]
 80040a0:	89a3      	ldrh	r3, [r4, #12]
 80040a2:	071a      	lsls	r2, r3, #28
 80040a4:	d525      	bpl.n	80040f2 <__swbuf_r+0x68>
 80040a6:	6923      	ldr	r3, [r4, #16]
 80040a8:	b31b      	cbz	r3, 80040f2 <__swbuf_r+0x68>
 80040aa:	6823      	ldr	r3, [r4, #0]
 80040ac:	6922      	ldr	r2, [r4, #16]
 80040ae:	1a98      	subs	r0, r3, r2
 80040b0:	6963      	ldr	r3, [r4, #20]
 80040b2:	b2f6      	uxtb	r6, r6
 80040b4:	4283      	cmp	r3, r0
 80040b6:	4637      	mov	r7, r6
 80040b8:	dc04      	bgt.n	80040c4 <__swbuf_r+0x3a>
 80040ba:	4621      	mov	r1, r4
 80040bc:	4628      	mov	r0, r5
 80040be:	f001 fdb7 	bl	8005c30 <_fflush_r>
 80040c2:	b9e0      	cbnz	r0, 80040fe <__swbuf_r+0x74>
 80040c4:	68a3      	ldr	r3, [r4, #8]
 80040c6:	3b01      	subs	r3, #1
 80040c8:	60a3      	str	r3, [r4, #8]
 80040ca:	6823      	ldr	r3, [r4, #0]
 80040cc:	1c5a      	adds	r2, r3, #1
 80040ce:	6022      	str	r2, [r4, #0]
 80040d0:	701e      	strb	r6, [r3, #0]
 80040d2:	6962      	ldr	r2, [r4, #20]
 80040d4:	1c43      	adds	r3, r0, #1
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d004      	beq.n	80040e4 <__swbuf_r+0x5a>
 80040da:	89a3      	ldrh	r3, [r4, #12]
 80040dc:	07db      	lsls	r3, r3, #31
 80040de:	d506      	bpl.n	80040ee <__swbuf_r+0x64>
 80040e0:	2e0a      	cmp	r6, #10
 80040e2:	d104      	bne.n	80040ee <__swbuf_r+0x64>
 80040e4:	4621      	mov	r1, r4
 80040e6:	4628      	mov	r0, r5
 80040e8:	f001 fda2 	bl	8005c30 <_fflush_r>
 80040ec:	b938      	cbnz	r0, 80040fe <__swbuf_r+0x74>
 80040ee:	4638      	mov	r0, r7
 80040f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040f2:	4621      	mov	r1, r4
 80040f4:	4628      	mov	r0, r5
 80040f6:	f000 f805 	bl	8004104 <__swsetup_r>
 80040fa:	2800      	cmp	r0, #0
 80040fc:	d0d5      	beq.n	80040aa <__swbuf_r+0x20>
 80040fe:	f04f 37ff 	mov.w	r7, #4294967295
 8004102:	e7f4      	b.n	80040ee <__swbuf_r+0x64>

08004104 <__swsetup_r>:
 8004104:	b538      	push	{r3, r4, r5, lr}
 8004106:	4b2a      	ldr	r3, [pc, #168]	; (80041b0 <__swsetup_r+0xac>)
 8004108:	4605      	mov	r5, r0
 800410a:	6818      	ldr	r0, [r3, #0]
 800410c:	460c      	mov	r4, r1
 800410e:	b118      	cbz	r0, 8004118 <__swsetup_r+0x14>
 8004110:	6a03      	ldr	r3, [r0, #32]
 8004112:	b90b      	cbnz	r3, 8004118 <__swsetup_r+0x14>
 8004114:	f7ff fed2 	bl	8003ebc <__sinit>
 8004118:	89a3      	ldrh	r3, [r4, #12]
 800411a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800411e:	0718      	lsls	r0, r3, #28
 8004120:	d422      	bmi.n	8004168 <__swsetup_r+0x64>
 8004122:	06d9      	lsls	r1, r3, #27
 8004124:	d407      	bmi.n	8004136 <__swsetup_r+0x32>
 8004126:	2309      	movs	r3, #9
 8004128:	602b      	str	r3, [r5, #0]
 800412a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800412e:	81a3      	strh	r3, [r4, #12]
 8004130:	f04f 30ff 	mov.w	r0, #4294967295
 8004134:	e034      	b.n	80041a0 <__swsetup_r+0x9c>
 8004136:	0758      	lsls	r0, r3, #29
 8004138:	d512      	bpl.n	8004160 <__swsetup_r+0x5c>
 800413a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800413c:	b141      	cbz	r1, 8004150 <__swsetup_r+0x4c>
 800413e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004142:	4299      	cmp	r1, r3
 8004144:	d002      	beq.n	800414c <__swsetup_r+0x48>
 8004146:	4628      	mov	r0, r5
 8004148:	f000 ff2c 	bl	8004fa4 <_free_r>
 800414c:	2300      	movs	r3, #0
 800414e:	6363      	str	r3, [r4, #52]	; 0x34
 8004150:	89a3      	ldrh	r3, [r4, #12]
 8004152:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004156:	81a3      	strh	r3, [r4, #12]
 8004158:	2300      	movs	r3, #0
 800415a:	6063      	str	r3, [r4, #4]
 800415c:	6923      	ldr	r3, [r4, #16]
 800415e:	6023      	str	r3, [r4, #0]
 8004160:	89a3      	ldrh	r3, [r4, #12]
 8004162:	f043 0308 	orr.w	r3, r3, #8
 8004166:	81a3      	strh	r3, [r4, #12]
 8004168:	6923      	ldr	r3, [r4, #16]
 800416a:	b94b      	cbnz	r3, 8004180 <__swsetup_r+0x7c>
 800416c:	89a3      	ldrh	r3, [r4, #12]
 800416e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004172:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004176:	d003      	beq.n	8004180 <__swsetup_r+0x7c>
 8004178:	4621      	mov	r1, r4
 800417a:	4628      	mov	r0, r5
 800417c:	f001 fda6 	bl	8005ccc <__smakebuf_r>
 8004180:	89a0      	ldrh	r0, [r4, #12]
 8004182:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004186:	f010 0301 	ands.w	r3, r0, #1
 800418a:	d00a      	beq.n	80041a2 <__swsetup_r+0x9e>
 800418c:	2300      	movs	r3, #0
 800418e:	60a3      	str	r3, [r4, #8]
 8004190:	6963      	ldr	r3, [r4, #20]
 8004192:	425b      	negs	r3, r3
 8004194:	61a3      	str	r3, [r4, #24]
 8004196:	6923      	ldr	r3, [r4, #16]
 8004198:	b943      	cbnz	r3, 80041ac <__swsetup_r+0xa8>
 800419a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800419e:	d1c4      	bne.n	800412a <__swsetup_r+0x26>
 80041a0:	bd38      	pop	{r3, r4, r5, pc}
 80041a2:	0781      	lsls	r1, r0, #30
 80041a4:	bf58      	it	pl
 80041a6:	6963      	ldrpl	r3, [r4, #20]
 80041a8:	60a3      	str	r3, [r4, #8]
 80041aa:	e7f4      	b.n	8004196 <__swsetup_r+0x92>
 80041ac:	2000      	movs	r0, #0
 80041ae:	e7f7      	b.n	80041a0 <__swsetup_r+0x9c>
 80041b0:	20000064 	.word	0x20000064

080041b4 <memset>:
 80041b4:	4402      	add	r2, r0
 80041b6:	4603      	mov	r3, r0
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d100      	bne.n	80041be <memset+0xa>
 80041bc:	4770      	bx	lr
 80041be:	f803 1b01 	strb.w	r1, [r3], #1
 80041c2:	e7f9      	b.n	80041b8 <memset+0x4>

080041c4 <_localeconv_r>:
 80041c4:	4800      	ldr	r0, [pc, #0]	; (80041c8 <_localeconv_r+0x4>)
 80041c6:	4770      	bx	lr
 80041c8:	20000158 	.word	0x20000158

080041cc <_close_r>:
 80041cc:	b538      	push	{r3, r4, r5, lr}
 80041ce:	4d06      	ldr	r5, [pc, #24]	; (80041e8 <_close_r+0x1c>)
 80041d0:	2300      	movs	r3, #0
 80041d2:	4604      	mov	r4, r0
 80041d4:	4608      	mov	r0, r1
 80041d6:	602b      	str	r3, [r5, #0]
 80041d8:	f7fd fb45 	bl	8001866 <_close>
 80041dc:	1c43      	adds	r3, r0, #1
 80041de:	d102      	bne.n	80041e6 <_close_r+0x1a>
 80041e0:	682b      	ldr	r3, [r5, #0]
 80041e2:	b103      	cbz	r3, 80041e6 <_close_r+0x1a>
 80041e4:	6023      	str	r3, [r4, #0]
 80041e6:	bd38      	pop	{r3, r4, r5, pc}
 80041e8:	20000344 	.word	0x20000344

080041ec <_lseek_r>:
 80041ec:	b538      	push	{r3, r4, r5, lr}
 80041ee:	4d07      	ldr	r5, [pc, #28]	; (800420c <_lseek_r+0x20>)
 80041f0:	4604      	mov	r4, r0
 80041f2:	4608      	mov	r0, r1
 80041f4:	4611      	mov	r1, r2
 80041f6:	2200      	movs	r2, #0
 80041f8:	602a      	str	r2, [r5, #0]
 80041fa:	461a      	mov	r2, r3
 80041fc:	f7fd fb5a 	bl	80018b4 <_lseek>
 8004200:	1c43      	adds	r3, r0, #1
 8004202:	d102      	bne.n	800420a <_lseek_r+0x1e>
 8004204:	682b      	ldr	r3, [r5, #0]
 8004206:	b103      	cbz	r3, 800420a <_lseek_r+0x1e>
 8004208:	6023      	str	r3, [r4, #0]
 800420a:	bd38      	pop	{r3, r4, r5, pc}
 800420c:	20000344 	.word	0x20000344

08004210 <_read_r>:
 8004210:	b538      	push	{r3, r4, r5, lr}
 8004212:	4d07      	ldr	r5, [pc, #28]	; (8004230 <_read_r+0x20>)
 8004214:	4604      	mov	r4, r0
 8004216:	4608      	mov	r0, r1
 8004218:	4611      	mov	r1, r2
 800421a:	2200      	movs	r2, #0
 800421c:	602a      	str	r2, [r5, #0]
 800421e:	461a      	mov	r2, r3
 8004220:	f7fd fb04 	bl	800182c <_read>
 8004224:	1c43      	adds	r3, r0, #1
 8004226:	d102      	bne.n	800422e <_read_r+0x1e>
 8004228:	682b      	ldr	r3, [r5, #0]
 800422a:	b103      	cbz	r3, 800422e <_read_r+0x1e>
 800422c:	6023      	str	r3, [r4, #0]
 800422e:	bd38      	pop	{r3, r4, r5, pc}
 8004230:	20000344 	.word	0x20000344

08004234 <_write_r>:
 8004234:	b538      	push	{r3, r4, r5, lr}
 8004236:	4d07      	ldr	r5, [pc, #28]	; (8004254 <_write_r+0x20>)
 8004238:	4604      	mov	r4, r0
 800423a:	4608      	mov	r0, r1
 800423c:	4611      	mov	r1, r2
 800423e:	2200      	movs	r2, #0
 8004240:	602a      	str	r2, [r5, #0]
 8004242:	461a      	mov	r2, r3
 8004244:	f7fd f96e 	bl	8001524 <_write>
 8004248:	1c43      	adds	r3, r0, #1
 800424a:	d102      	bne.n	8004252 <_write_r+0x1e>
 800424c:	682b      	ldr	r3, [r5, #0]
 800424e:	b103      	cbz	r3, 8004252 <_write_r+0x1e>
 8004250:	6023      	str	r3, [r4, #0]
 8004252:	bd38      	pop	{r3, r4, r5, pc}
 8004254:	20000344 	.word	0x20000344

08004258 <__errno>:
 8004258:	4b01      	ldr	r3, [pc, #4]	; (8004260 <__errno+0x8>)
 800425a:	6818      	ldr	r0, [r3, #0]
 800425c:	4770      	bx	lr
 800425e:	bf00      	nop
 8004260:	20000064 	.word	0x20000064

08004264 <__libc_init_array>:
 8004264:	b570      	push	{r4, r5, r6, lr}
 8004266:	4d0d      	ldr	r5, [pc, #52]	; (800429c <__libc_init_array+0x38>)
 8004268:	4c0d      	ldr	r4, [pc, #52]	; (80042a0 <__libc_init_array+0x3c>)
 800426a:	1b64      	subs	r4, r4, r5
 800426c:	10a4      	asrs	r4, r4, #2
 800426e:	2600      	movs	r6, #0
 8004270:	42a6      	cmp	r6, r4
 8004272:	d109      	bne.n	8004288 <__libc_init_array+0x24>
 8004274:	4d0b      	ldr	r5, [pc, #44]	; (80042a4 <__libc_init_array+0x40>)
 8004276:	4c0c      	ldr	r4, [pc, #48]	; (80042a8 <__libc_init_array+0x44>)
 8004278:	f001 fe56 	bl	8005f28 <_init>
 800427c:	1b64      	subs	r4, r4, r5
 800427e:	10a4      	asrs	r4, r4, #2
 8004280:	2600      	movs	r6, #0
 8004282:	42a6      	cmp	r6, r4
 8004284:	d105      	bne.n	8004292 <__libc_init_array+0x2e>
 8004286:	bd70      	pop	{r4, r5, r6, pc}
 8004288:	f855 3b04 	ldr.w	r3, [r5], #4
 800428c:	4798      	blx	r3
 800428e:	3601      	adds	r6, #1
 8004290:	e7ee      	b.n	8004270 <__libc_init_array+0xc>
 8004292:	f855 3b04 	ldr.w	r3, [r5], #4
 8004296:	4798      	blx	r3
 8004298:	3601      	adds	r6, #1
 800429a:	e7f2      	b.n	8004282 <__libc_init_array+0x1e>
 800429c:	0800632c 	.word	0x0800632c
 80042a0:	0800632c 	.word	0x0800632c
 80042a4:	0800632c 	.word	0x0800632c
 80042a8:	08006330 	.word	0x08006330

080042ac <__retarget_lock_acquire_recursive>:
 80042ac:	4770      	bx	lr

080042ae <__retarget_lock_release_recursive>:
 80042ae:	4770      	bx	lr

080042b0 <quorem>:
 80042b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042b4:	6903      	ldr	r3, [r0, #16]
 80042b6:	690c      	ldr	r4, [r1, #16]
 80042b8:	42a3      	cmp	r3, r4
 80042ba:	4607      	mov	r7, r0
 80042bc:	db7e      	blt.n	80043bc <quorem+0x10c>
 80042be:	3c01      	subs	r4, #1
 80042c0:	f101 0814 	add.w	r8, r1, #20
 80042c4:	f100 0514 	add.w	r5, r0, #20
 80042c8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80042cc:	9301      	str	r3, [sp, #4]
 80042ce:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80042d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80042d6:	3301      	adds	r3, #1
 80042d8:	429a      	cmp	r2, r3
 80042da:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80042de:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80042e2:	fbb2 f6f3 	udiv	r6, r2, r3
 80042e6:	d331      	bcc.n	800434c <quorem+0x9c>
 80042e8:	f04f 0e00 	mov.w	lr, #0
 80042ec:	4640      	mov	r0, r8
 80042ee:	46ac      	mov	ip, r5
 80042f0:	46f2      	mov	sl, lr
 80042f2:	f850 2b04 	ldr.w	r2, [r0], #4
 80042f6:	b293      	uxth	r3, r2
 80042f8:	fb06 e303 	mla	r3, r6, r3, lr
 80042fc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004300:	0c1a      	lsrs	r2, r3, #16
 8004302:	b29b      	uxth	r3, r3
 8004304:	ebaa 0303 	sub.w	r3, sl, r3
 8004308:	f8dc a000 	ldr.w	sl, [ip]
 800430c:	fa13 f38a 	uxtah	r3, r3, sl
 8004310:	fb06 220e 	mla	r2, r6, lr, r2
 8004314:	9300      	str	r3, [sp, #0]
 8004316:	9b00      	ldr	r3, [sp, #0]
 8004318:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800431c:	b292      	uxth	r2, r2
 800431e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004322:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004326:	f8bd 3000 	ldrh.w	r3, [sp]
 800432a:	4581      	cmp	r9, r0
 800432c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004330:	f84c 3b04 	str.w	r3, [ip], #4
 8004334:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004338:	d2db      	bcs.n	80042f2 <quorem+0x42>
 800433a:	f855 300b 	ldr.w	r3, [r5, fp]
 800433e:	b92b      	cbnz	r3, 800434c <quorem+0x9c>
 8004340:	9b01      	ldr	r3, [sp, #4]
 8004342:	3b04      	subs	r3, #4
 8004344:	429d      	cmp	r5, r3
 8004346:	461a      	mov	r2, r3
 8004348:	d32c      	bcc.n	80043a4 <quorem+0xf4>
 800434a:	613c      	str	r4, [r7, #16]
 800434c:	4638      	mov	r0, r7
 800434e:	f001 f9a5 	bl	800569c <__mcmp>
 8004352:	2800      	cmp	r0, #0
 8004354:	db22      	blt.n	800439c <quorem+0xec>
 8004356:	3601      	adds	r6, #1
 8004358:	4629      	mov	r1, r5
 800435a:	2000      	movs	r0, #0
 800435c:	f858 2b04 	ldr.w	r2, [r8], #4
 8004360:	f8d1 c000 	ldr.w	ip, [r1]
 8004364:	b293      	uxth	r3, r2
 8004366:	1ac3      	subs	r3, r0, r3
 8004368:	0c12      	lsrs	r2, r2, #16
 800436a:	fa13 f38c 	uxtah	r3, r3, ip
 800436e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8004372:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004376:	b29b      	uxth	r3, r3
 8004378:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800437c:	45c1      	cmp	r9, r8
 800437e:	f841 3b04 	str.w	r3, [r1], #4
 8004382:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004386:	d2e9      	bcs.n	800435c <quorem+0xac>
 8004388:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800438c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004390:	b922      	cbnz	r2, 800439c <quorem+0xec>
 8004392:	3b04      	subs	r3, #4
 8004394:	429d      	cmp	r5, r3
 8004396:	461a      	mov	r2, r3
 8004398:	d30a      	bcc.n	80043b0 <quorem+0x100>
 800439a:	613c      	str	r4, [r7, #16]
 800439c:	4630      	mov	r0, r6
 800439e:	b003      	add	sp, #12
 80043a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043a4:	6812      	ldr	r2, [r2, #0]
 80043a6:	3b04      	subs	r3, #4
 80043a8:	2a00      	cmp	r2, #0
 80043aa:	d1ce      	bne.n	800434a <quorem+0x9a>
 80043ac:	3c01      	subs	r4, #1
 80043ae:	e7c9      	b.n	8004344 <quorem+0x94>
 80043b0:	6812      	ldr	r2, [r2, #0]
 80043b2:	3b04      	subs	r3, #4
 80043b4:	2a00      	cmp	r2, #0
 80043b6:	d1f0      	bne.n	800439a <quorem+0xea>
 80043b8:	3c01      	subs	r4, #1
 80043ba:	e7eb      	b.n	8004394 <quorem+0xe4>
 80043bc:	2000      	movs	r0, #0
 80043be:	e7ee      	b.n	800439e <quorem+0xee>

080043c0 <_dtoa_r>:
 80043c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043c4:	ed2d 8b04 	vpush	{d8-d9}
 80043c8:	69c5      	ldr	r5, [r0, #28]
 80043ca:	b093      	sub	sp, #76	; 0x4c
 80043cc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80043d0:	ec57 6b10 	vmov	r6, r7, d0
 80043d4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80043d8:	9107      	str	r1, [sp, #28]
 80043da:	4604      	mov	r4, r0
 80043dc:	920a      	str	r2, [sp, #40]	; 0x28
 80043de:	930d      	str	r3, [sp, #52]	; 0x34
 80043e0:	b975      	cbnz	r5, 8004400 <_dtoa_r+0x40>
 80043e2:	2010      	movs	r0, #16
 80043e4:	f000 fe2a 	bl	800503c <malloc>
 80043e8:	4602      	mov	r2, r0
 80043ea:	61e0      	str	r0, [r4, #28]
 80043ec:	b920      	cbnz	r0, 80043f8 <_dtoa_r+0x38>
 80043ee:	4bae      	ldr	r3, [pc, #696]	; (80046a8 <_dtoa_r+0x2e8>)
 80043f0:	21ef      	movs	r1, #239	; 0xef
 80043f2:	48ae      	ldr	r0, [pc, #696]	; (80046ac <_dtoa_r+0x2ec>)
 80043f4:	f001 fce6 	bl	8005dc4 <__assert_func>
 80043f8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80043fc:	6005      	str	r5, [r0, #0]
 80043fe:	60c5      	str	r5, [r0, #12]
 8004400:	69e3      	ldr	r3, [r4, #28]
 8004402:	6819      	ldr	r1, [r3, #0]
 8004404:	b151      	cbz	r1, 800441c <_dtoa_r+0x5c>
 8004406:	685a      	ldr	r2, [r3, #4]
 8004408:	604a      	str	r2, [r1, #4]
 800440a:	2301      	movs	r3, #1
 800440c:	4093      	lsls	r3, r2
 800440e:	608b      	str	r3, [r1, #8]
 8004410:	4620      	mov	r0, r4
 8004412:	f000 ff07 	bl	8005224 <_Bfree>
 8004416:	69e3      	ldr	r3, [r4, #28]
 8004418:	2200      	movs	r2, #0
 800441a:	601a      	str	r2, [r3, #0]
 800441c:	1e3b      	subs	r3, r7, #0
 800441e:	bfbb      	ittet	lt
 8004420:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004424:	9303      	strlt	r3, [sp, #12]
 8004426:	2300      	movge	r3, #0
 8004428:	2201      	movlt	r2, #1
 800442a:	bfac      	ite	ge
 800442c:	f8c8 3000 	strge.w	r3, [r8]
 8004430:	f8c8 2000 	strlt.w	r2, [r8]
 8004434:	4b9e      	ldr	r3, [pc, #632]	; (80046b0 <_dtoa_r+0x2f0>)
 8004436:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800443a:	ea33 0308 	bics.w	r3, r3, r8
 800443e:	d11b      	bne.n	8004478 <_dtoa_r+0xb8>
 8004440:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004442:	f242 730f 	movw	r3, #9999	; 0x270f
 8004446:	6013      	str	r3, [r2, #0]
 8004448:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800444c:	4333      	orrs	r3, r6
 800444e:	f000 8593 	beq.w	8004f78 <_dtoa_r+0xbb8>
 8004452:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004454:	b963      	cbnz	r3, 8004470 <_dtoa_r+0xb0>
 8004456:	4b97      	ldr	r3, [pc, #604]	; (80046b4 <_dtoa_r+0x2f4>)
 8004458:	e027      	b.n	80044aa <_dtoa_r+0xea>
 800445a:	4b97      	ldr	r3, [pc, #604]	; (80046b8 <_dtoa_r+0x2f8>)
 800445c:	9300      	str	r3, [sp, #0]
 800445e:	3308      	adds	r3, #8
 8004460:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004462:	6013      	str	r3, [r2, #0]
 8004464:	9800      	ldr	r0, [sp, #0]
 8004466:	b013      	add	sp, #76	; 0x4c
 8004468:	ecbd 8b04 	vpop	{d8-d9}
 800446c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004470:	4b90      	ldr	r3, [pc, #576]	; (80046b4 <_dtoa_r+0x2f4>)
 8004472:	9300      	str	r3, [sp, #0]
 8004474:	3303      	adds	r3, #3
 8004476:	e7f3      	b.n	8004460 <_dtoa_r+0xa0>
 8004478:	ed9d 7b02 	vldr	d7, [sp, #8]
 800447c:	2200      	movs	r2, #0
 800447e:	ec51 0b17 	vmov	r0, r1, d7
 8004482:	eeb0 8a47 	vmov.f32	s16, s14
 8004486:	eef0 8a67 	vmov.f32	s17, s15
 800448a:	2300      	movs	r3, #0
 800448c:	f7fc fb24 	bl	8000ad8 <__aeabi_dcmpeq>
 8004490:	4681      	mov	r9, r0
 8004492:	b160      	cbz	r0, 80044ae <_dtoa_r+0xee>
 8004494:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004496:	2301      	movs	r3, #1
 8004498:	6013      	str	r3, [r2, #0]
 800449a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800449c:	2b00      	cmp	r3, #0
 800449e:	f000 8568 	beq.w	8004f72 <_dtoa_r+0xbb2>
 80044a2:	4b86      	ldr	r3, [pc, #536]	; (80046bc <_dtoa_r+0x2fc>)
 80044a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80044a6:	6013      	str	r3, [r2, #0]
 80044a8:	3b01      	subs	r3, #1
 80044aa:	9300      	str	r3, [sp, #0]
 80044ac:	e7da      	b.n	8004464 <_dtoa_r+0xa4>
 80044ae:	aa10      	add	r2, sp, #64	; 0x40
 80044b0:	a911      	add	r1, sp, #68	; 0x44
 80044b2:	4620      	mov	r0, r4
 80044b4:	eeb0 0a48 	vmov.f32	s0, s16
 80044b8:	eef0 0a68 	vmov.f32	s1, s17
 80044bc:	f001 f994 	bl	80057e8 <__d2b>
 80044c0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80044c4:	4682      	mov	sl, r0
 80044c6:	2d00      	cmp	r5, #0
 80044c8:	d07f      	beq.n	80045ca <_dtoa_r+0x20a>
 80044ca:	ee18 3a90 	vmov	r3, s17
 80044ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80044d2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80044d6:	ec51 0b18 	vmov	r0, r1, d8
 80044da:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80044de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80044e2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80044e6:	4619      	mov	r1, r3
 80044e8:	2200      	movs	r2, #0
 80044ea:	4b75      	ldr	r3, [pc, #468]	; (80046c0 <_dtoa_r+0x300>)
 80044ec:	f7fb fed4 	bl	8000298 <__aeabi_dsub>
 80044f0:	a367      	add	r3, pc, #412	; (adr r3, 8004690 <_dtoa_r+0x2d0>)
 80044f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044f6:	f7fc f887 	bl	8000608 <__aeabi_dmul>
 80044fa:	a367      	add	r3, pc, #412	; (adr r3, 8004698 <_dtoa_r+0x2d8>)
 80044fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004500:	f7fb fecc 	bl	800029c <__adddf3>
 8004504:	4606      	mov	r6, r0
 8004506:	4628      	mov	r0, r5
 8004508:	460f      	mov	r7, r1
 800450a:	f7fc f813 	bl	8000534 <__aeabi_i2d>
 800450e:	a364      	add	r3, pc, #400	; (adr r3, 80046a0 <_dtoa_r+0x2e0>)
 8004510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004514:	f7fc f878 	bl	8000608 <__aeabi_dmul>
 8004518:	4602      	mov	r2, r0
 800451a:	460b      	mov	r3, r1
 800451c:	4630      	mov	r0, r6
 800451e:	4639      	mov	r1, r7
 8004520:	f7fb febc 	bl	800029c <__adddf3>
 8004524:	4606      	mov	r6, r0
 8004526:	460f      	mov	r7, r1
 8004528:	f7fc fb1e 	bl	8000b68 <__aeabi_d2iz>
 800452c:	2200      	movs	r2, #0
 800452e:	4683      	mov	fp, r0
 8004530:	2300      	movs	r3, #0
 8004532:	4630      	mov	r0, r6
 8004534:	4639      	mov	r1, r7
 8004536:	f7fc fad9 	bl	8000aec <__aeabi_dcmplt>
 800453a:	b148      	cbz	r0, 8004550 <_dtoa_r+0x190>
 800453c:	4658      	mov	r0, fp
 800453e:	f7fb fff9 	bl	8000534 <__aeabi_i2d>
 8004542:	4632      	mov	r2, r6
 8004544:	463b      	mov	r3, r7
 8004546:	f7fc fac7 	bl	8000ad8 <__aeabi_dcmpeq>
 800454a:	b908      	cbnz	r0, 8004550 <_dtoa_r+0x190>
 800454c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004550:	f1bb 0f16 	cmp.w	fp, #22
 8004554:	d857      	bhi.n	8004606 <_dtoa_r+0x246>
 8004556:	4b5b      	ldr	r3, [pc, #364]	; (80046c4 <_dtoa_r+0x304>)
 8004558:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800455c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004560:	ec51 0b18 	vmov	r0, r1, d8
 8004564:	f7fc fac2 	bl	8000aec <__aeabi_dcmplt>
 8004568:	2800      	cmp	r0, #0
 800456a:	d04e      	beq.n	800460a <_dtoa_r+0x24a>
 800456c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004570:	2300      	movs	r3, #0
 8004572:	930c      	str	r3, [sp, #48]	; 0x30
 8004574:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004576:	1b5b      	subs	r3, r3, r5
 8004578:	1e5a      	subs	r2, r3, #1
 800457a:	bf45      	ittet	mi
 800457c:	f1c3 0301 	rsbmi	r3, r3, #1
 8004580:	9305      	strmi	r3, [sp, #20]
 8004582:	2300      	movpl	r3, #0
 8004584:	2300      	movmi	r3, #0
 8004586:	9206      	str	r2, [sp, #24]
 8004588:	bf54      	ite	pl
 800458a:	9305      	strpl	r3, [sp, #20]
 800458c:	9306      	strmi	r3, [sp, #24]
 800458e:	f1bb 0f00 	cmp.w	fp, #0
 8004592:	db3c      	blt.n	800460e <_dtoa_r+0x24e>
 8004594:	9b06      	ldr	r3, [sp, #24]
 8004596:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800459a:	445b      	add	r3, fp
 800459c:	9306      	str	r3, [sp, #24]
 800459e:	2300      	movs	r3, #0
 80045a0:	9308      	str	r3, [sp, #32]
 80045a2:	9b07      	ldr	r3, [sp, #28]
 80045a4:	2b09      	cmp	r3, #9
 80045a6:	d868      	bhi.n	800467a <_dtoa_r+0x2ba>
 80045a8:	2b05      	cmp	r3, #5
 80045aa:	bfc4      	itt	gt
 80045ac:	3b04      	subgt	r3, #4
 80045ae:	9307      	strgt	r3, [sp, #28]
 80045b0:	9b07      	ldr	r3, [sp, #28]
 80045b2:	f1a3 0302 	sub.w	r3, r3, #2
 80045b6:	bfcc      	ite	gt
 80045b8:	2500      	movgt	r5, #0
 80045ba:	2501      	movle	r5, #1
 80045bc:	2b03      	cmp	r3, #3
 80045be:	f200 8085 	bhi.w	80046cc <_dtoa_r+0x30c>
 80045c2:	e8df f003 	tbb	[pc, r3]
 80045c6:	3b2e      	.short	0x3b2e
 80045c8:	5839      	.short	0x5839
 80045ca:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80045ce:	441d      	add	r5, r3
 80045d0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80045d4:	2b20      	cmp	r3, #32
 80045d6:	bfc1      	itttt	gt
 80045d8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80045dc:	fa08 f803 	lslgt.w	r8, r8, r3
 80045e0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80045e4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80045e8:	bfd6      	itet	le
 80045ea:	f1c3 0320 	rsble	r3, r3, #32
 80045ee:	ea48 0003 	orrgt.w	r0, r8, r3
 80045f2:	fa06 f003 	lslle.w	r0, r6, r3
 80045f6:	f7fb ff8d 	bl	8000514 <__aeabi_ui2d>
 80045fa:	2201      	movs	r2, #1
 80045fc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8004600:	3d01      	subs	r5, #1
 8004602:	920e      	str	r2, [sp, #56]	; 0x38
 8004604:	e76f      	b.n	80044e6 <_dtoa_r+0x126>
 8004606:	2301      	movs	r3, #1
 8004608:	e7b3      	b.n	8004572 <_dtoa_r+0x1b2>
 800460a:	900c      	str	r0, [sp, #48]	; 0x30
 800460c:	e7b2      	b.n	8004574 <_dtoa_r+0x1b4>
 800460e:	9b05      	ldr	r3, [sp, #20]
 8004610:	eba3 030b 	sub.w	r3, r3, fp
 8004614:	9305      	str	r3, [sp, #20]
 8004616:	f1cb 0300 	rsb	r3, fp, #0
 800461a:	9308      	str	r3, [sp, #32]
 800461c:	2300      	movs	r3, #0
 800461e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004620:	e7bf      	b.n	80045a2 <_dtoa_r+0x1e2>
 8004622:	2300      	movs	r3, #0
 8004624:	9309      	str	r3, [sp, #36]	; 0x24
 8004626:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004628:	2b00      	cmp	r3, #0
 800462a:	dc52      	bgt.n	80046d2 <_dtoa_r+0x312>
 800462c:	2301      	movs	r3, #1
 800462e:	9301      	str	r3, [sp, #4]
 8004630:	9304      	str	r3, [sp, #16]
 8004632:	461a      	mov	r2, r3
 8004634:	920a      	str	r2, [sp, #40]	; 0x28
 8004636:	e00b      	b.n	8004650 <_dtoa_r+0x290>
 8004638:	2301      	movs	r3, #1
 800463a:	e7f3      	b.n	8004624 <_dtoa_r+0x264>
 800463c:	2300      	movs	r3, #0
 800463e:	9309      	str	r3, [sp, #36]	; 0x24
 8004640:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004642:	445b      	add	r3, fp
 8004644:	9301      	str	r3, [sp, #4]
 8004646:	3301      	adds	r3, #1
 8004648:	2b01      	cmp	r3, #1
 800464a:	9304      	str	r3, [sp, #16]
 800464c:	bfb8      	it	lt
 800464e:	2301      	movlt	r3, #1
 8004650:	69e0      	ldr	r0, [r4, #28]
 8004652:	2100      	movs	r1, #0
 8004654:	2204      	movs	r2, #4
 8004656:	f102 0614 	add.w	r6, r2, #20
 800465a:	429e      	cmp	r6, r3
 800465c:	d93d      	bls.n	80046da <_dtoa_r+0x31a>
 800465e:	6041      	str	r1, [r0, #4]
 8004660:	4620      	mov	r0, r4
 8004662:	f000 fd9f 	bl	80051a4 <_Balloc>
 8004666:	9000      	str	r0, [sp, #0]
 8004668:	2800      	cmp	r0, #0
 800466a:	d139      	bne.n	80046e0 <_dtoa_r+0x320>
 800466c:	4b16      	ldr	r3, [pc, #88]	; (80046c8 <_dtoa_r+0x308>)
 800466e:	4602      	mov	r2, r0
 8004670:	f240 11af 	movw	r1, #431	; 0x1af
 8004674:	e6bd      	b.n	80043f2 <_dtoa_r+0x32>
 8004676:	2301      	movs	r3, #1
 8004678:	e7e1      	b.n	800463e <_dtoa_r+0x27e>
 800467a:	2501      	movs	r5, #1
 800467c:	2300      	movs	r3, #0
 800467e:	9307      	str	r3, [sp, #28]
 8004680:	9509      	str	r5, [sp, #36]	; 0x24
 8004682:	f04f 33ff 	mov.w	r3, #4294967295
 8004686:	9301      	str	r3, [sp, #4]
 8004688:	9304      	str	r3, [sp, #16]
 800468a:	2200      	movs	r2, #0
 800468c:	2312      	movs	r3, #18
 800468e:	e7d1      	b.n	8004634 <_dtoa_r+0x274>
 8004690:	636f4361 	.word	0x636f4361
 8004694:	3fd287a7 	.word	0x3fd287a7
 8004698:	8b60c8b3 	.word	0x8b60c8b3
 800469c:	3fc68a28 	.word	0x3fc68a28
 80046a0:	509f79fb 	.word	0x509f79fb
 80046a4:	3fd34413 	.word	0x3fd34413
 80046a8:	08005ff5 	.word	0x08005ff5
 80046ac:	0800600c 	.word	0x0800600c
 80046b0:	7ff00000 	.word	0x7ff00000
 80046b4:	08005ff1 	.word	0x08005ff1
 80046b8:	08005fe8 	.word	0x08005fe8
 80046bc:	08005fc5 	.word	0x08005fc5
 80046c0:	3ff80000 	.word	0x3ff80000
 80046c4:	080060f8 	.word	0x080060f8
 80046c8:	08006064 	.word	0x08006064
 80046cc:	2301      	movs	r3, #1
 80046ce:	9309      	str	r3, [sp, #36]	; 0x24
 80046d0:	e7d7      	b.n	8004682 <_dtoa_r+0x2c2>
 80046d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80046d4:	9301      	str	r3, [sp, #4]
 80046d6:	9304      	str	r3, [sp, #16]
 80046d8:	e7ba      	b.n	8004650 <_dtoa_r+0x290>
 80046da:	3101      	adds	r1, #1
 80046dc:	0052      	lsls	r2, r2, #1
 80046de:	e7ba      	b.n	8004656 <_dtoa_r+0x296>
 80046e0:	69e3      	ldr	r3, [r4, #28]
 80046e2:	9a00      	ldr	r2, [sp, #0]
 80046e4:	601a      	str	r2, [r3, #0]
 80046e6:	9b04      	ldr	r3, [sp, #16]
 80046e8:	2b0e      	cmp	r3, #14
 80046ea:	f200 80a8 	bhi.w	800483e <_dtoa_r+0x47e>
 80046ee:	2d00      	cmp	r5, #0
 80046f0:	f000 80a5 	beq.w	800483e <_dtoa_r+0x47e>
 80046f4:	f1bb 0f00 	cmp.w	fp, #0
 80046f8:	dd38      	ble.n	800476c <_dtoa_r+0x3ac>
 80046fa:	4bc0      	ldr	r3, [pc, #768]	; (80049fc <_dtoa_r+0x63c>)
 80046fc:	f00b 020f 	and.w	r2, fp, #15
 8004700:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004704:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8004708:	e9d3 6700 	ldrd	r6, r7, [r3]
 800470c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8004710:	d019      	beq.n	8004746 <_dtoa_r+0x386>
 8004712:	4bbb      	ldr	r3, [pc, #748]	; (8004a00 <_dtoa_r+0x640>)
 8004714:	ec51 0b18 	vmov	r0, r1, d8
 8004718:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800471c:	f7fc f89e 	bl	800085c <__aeabi_ddiv>
 8004720:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004724:	f008 080f 	and.w	r8, r8, #15
 8004728:	2503      	movs	r5, #3
 800472a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8004a00 <_dtoa_r+0x640>
 800472e:	f1b8 0f00 	cmp.w	r8, #0
 8004732:	d10a      	bne.n	800474a <_dtoa_r+0x38a>
 8004734:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004738:	4632      	mov	r2, r6
 800473a:	463b      	mov	r3, r7
 800473c:	f7fc f88e 	bl	800085c <__aeabi_ddiv>
 8004740:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004744:	e02b      	b.n	800479e <_dtoa_r+0x3de>
 8004746:	2502      	movs	r5, #2
 8004748:	e7ef      	b.n	800472a <_dtoa_r+0x36a>
 800474a:	f018 0f01 	tst.w	r8, #1
 800474e:	d008      	beq.n	8004762 <_dtoa_r+0x3a2>
 8004750:	4630      	mov	r0, r6
 8004752:	4639      	mov	r1, r7
 8004754:	e9d9 2300 	ldrd	r2, r3, [r9]
 8004758:	f7fb ff56 	bl	8000608 <__aeabi_dmul>
 800475c:	3501      	adds	r5, #1
 800475e:	4606      	mov	r6, r0
 8004760:	460f      	mov	r7, r1
 8004762:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004766:	f109 0908 	add.w	r9, r9, #8
 800476a:	e7e0      	b.n	800472e <_dtoa_r+0x36e>
 800476c:	f000 809f 	beq.w	80048ae <_dtoa_r+0x4ee>
 8004770:	f1cb 0600 	rsb	r6, fp, #0
 8004774:	4ba1      	ldr	r3, [pc, #644]	; (80049fc <_dtoa_r+0x63c>)
 8004776:	4fa2      	ldr	r7, [pc, #648]	; (8004a00 <_dtoa_r+0x640>)
 8004778:	f006 020f 	and.w	r2, r6, #15
 800477c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004784:	ec51 0b18 	vmov	r0, r1, d8
 8004788:	f7fb ff3e 	bl	8000608 <__aeabi_dmul>
 800478c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004790:	1136      	asrs	r6, r6, #4
 8004792:	2300      	movs	r3, #0
 8004794:	2502      	movs	r5, #2
 8004796:	2e00      	cmp	r6, #0
 8004798:	d17e      	bne.n	8004898 <_dtoa_r+0x4d8>
 800479a:	2b00      	cmp	r3, #0
 800479c:	d1d0      	bne.n	8004740 <_dtoa_r+0x380>
 800479e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80047a0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	f000 8084 	beq.w	80048b2 <_dtoa_r+0x4f2>
 80047aa:	4b96      	ldr	r3, [pc, #600]	; (8004a04 <_dtoa_r+0x644>)
 80047ac:	2200      	movs	r2, #0
 80047ae:	4640      	mov	r0, r8
 80047b0:	4649      	mov	r1, r9
 80047b2:	f7fc f99b 	bl	8000aec <__aeabi_dcmplt>
 80047b6:	2800      	cmp	r0, #0
 80047b8:	d07b      	beq.n	80048b2 <_dtoa_r+0x4f2>
 80047ba:	9b04      	ldr	r3, [sp, #16]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d078      	beq.n	80048b2 <_dtoa_r+0x4f2>
 80047c0:	9b01      	ldr	r3, [sp, #4]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	dd39      	ble.n	800483a <_dtoa_r+0x47a>
 80047c6:	4b90      	ldr	r3, [pc, #576]	; (8004a08 <_dtoa_r+0x648>)
 80047c8:	2200      	movs	r2, #0
 80047ca:	4640      	mov	r0, r8
 80047cc:	4649      	mov	r1, r9
 80047ce:	f7fb ff1b 	bl	8000608 <__aeabi_dmul>
 80047d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80047d6:	9e01      	ldr	r6, [sp, #4]
 80047d8:	f10b 37ff 	add.w	r7, fp, #4294967295
 80047dc:	3501      	adds	r5, #1
 80047de:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80047e2:	4628      	mov	r0, r5
 80047e4:	f7fb fea6 	bl	8000534 <__aeabi_i2d>
 80047e8:	4642      	mov	r2, r8
 80047ea:	464b      	mov	r3, r9
 80047ec:	f7fb ff0c 	bl	8000608 <__aeabi_dmul>
 80047f0:	4b86      	ldr	r3, [pc, #536]	; (8004a0c <_dtoa_r+0x64c>)
 80047f2:	2200      	movs	r2, #0
 80047f4:	f7fb fd52 	bl	800029c <__adddf3>
 80047f8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80047fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004800:	9303      	str	r3, [sp, #12]
 8004802:	2e00      	cmp	r6, #0
 8004804:	d158      	bne.n	80048b8 <_dtoa_r+0x4f8>
 8004806:	4b82      	ldr	r3, [pc, #520]	; (8004a10 <_dtoa_r+0x650>)
 8004808:	2200      	movs	r2, #0
 800480a:	4640      	mov	r0, r8
 800480c:	4649      	mov	r1, r9
 800480e:	f7fb fd43 	bl	8000298 <__aeabi_dsub>
 8004812:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004816:	4680      	mov	r8, r0
 8004818:	4689      	mov	r9, r1
 800481a:	f7fc f985 	bl	8000b28 <__aeabi_dcmpgt>
 800481e:	2800      	cmp	r0, #0
 8004820:	f040 8296 	bne.w	8004d50 <_dtoa_r+0x990>
 8004824:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8004828:	4640      	mov	r0, r8
 800482a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800482e:	4649      	mov	r1, r9
 8004830:	f7fc f95c 	bl	8000aec <__aeabi_dcmplt>
 8004834:	2800      	cmp	r0, #0
 8004836:	f040 8289 	bne.w	8004d4c <_dtoa_r+0x98c>
 800483a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800483e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004840:	2b00      	cmp	r3, #0
 8004842:	f2c0 814e 	blt.w	8004ae2 <_dtoa_r+0x722>
 8004846:	f1bb 0f0e 	cmp.w	fp, #14
 800484a:	f300 814a 	bgt.w	8004ae2 <_dtoa_r+0x722>
 800484e:	4b6b      	ldr	r3, [pc, #428]	; (80049fc <_dtoa_r+0x63c>)
 8004850:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004854:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004858:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800485a:	2b00      	cmp	r3, #0
 800485c:	f280 80dc 	bge.w	8004a18 <_dtoa_r+0x658>
 8004860:	9b04      	ldr	r3, [sp, #16]
 8004862:	2b00      	cmp	r3, #0
 8004864:	f300 80d8 	bgt.w	8004a18 <_dtoa_r+0x658>
 8004868:	f040 826f 	bne.w	8004d4a <_dtoa_r+0x98a>
 800486c:	4b68      	ldr	r3, [pc, #416]	; (8004a10 <_dtoa_r+0x650>)
 800486e:	2200      	movs	r2, #0
 8004870:	4640      	mov	r0, r8
 8004872:	4649      	mov	r1, r9
 8004874:	f7fb fec8 	bl	8000608 <__aeabi_dmul>
 8004878:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800487c:	f7fc f94a 	bl	8000b14 <__aeabi_dcmpge>
 8004880:	9e04      	ldr	r6, [sp, #16]
 8004882:	4637      	mov	r7, r6
 8004884:	2800      	cmp	r0, #0
 8004886:	f040 8245 	bne.w	8004d14 <_dtoa_r+0x954>
 800488a:	9d00      	ldr	r5, [sp, #0]
 800488c:	2331      	movs	r3, #49	; 0x31
 800488e:	f805 3b01 	strb.w	r3, [r5], #1
 8004892:	f10b 0b01 	add.w	fp, fp, #1
 8004896:	e241      	b.n	8004d1c <_dtoa_r+0x95c>
 8004898:	07f2      	lsls	r2, r6, #31
 800489a:	d505      	bpl.n	80048a8 <_dtoa_r+0x4e8>
 800489c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048a0:	f7fb feb2 	bl	8000608 <__aeabi_dmul>
 80048a4:	3501      	adds	r5, #1
 80048a6:	2301      	movs	r3, #1
 80048a8:	1076      	asrs	r6, r6, #1
 80048aa:	3708      	adds	r7, #8
 80048ac:	e773      	b.n	8004796 <_dtoa_r+0x3d6>
 80048ae:	2502      	movs	r5, #2
 80048b0:	e775      	b.n	800479e <_dtoa_r+0x3de>
 80048b2:	9e04      	ldr	r6, [sp, #16]
 80048b4:	465f      	mov	r7, fp
 80048b6:	e792      	b.n	80047de <_dtoa_r+0x41e>
 80048b8:	9900      	ldr	r1, [sp, #0]
 80048ba:	4b50      	ldr	r3, [pc, #320]	; (80049fc <_dtoa_r+0x63c>)
 80048bc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80048c0:	4431      	add	r1, r6
 80048c2:	9102      	str	r1, [sp, #8]
 80048c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80048c6:	eeb0 9a47 	vmov.f32	s18, s14
 80048ca:	eef0 9a67 	vmov.f32	s19, s15
 80048ce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80048d2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80048d6:	2900      	cmp	r1, #0
 80048d8:	d044      	beq.n	8004964 <_dtoa_r+0x5a4>
 80048da:	494e      	ldr	r1, [pc, #312]	; (8004a14 <_dtoa_r+0x654>)
 80048dc:	2000      	movs	r0, #0
 80048de:	f7fb ffbd 	bl	800085c <__aeabi_ddiv>
 80048e2:	ec53 2b19 	vmov	r2, r3, d9
 80048e6:	f7fb fcd7 	bl	8000298 <__aeabi_dsub>
 80048ea:	9d00      	ldr	r5, [sp, #0]
 80048ec:	ec41 0b19 	vmov	d9, r0, r1
 80048f0:	4649      	mov	r1, r9
 80048f2:	4640      	mov	r0, r8
 80048f4:	f7fc f938 	bl	8000b68 <__aeabi_d2iz>
 80048f8:	4606      	mov	r6, r0
 80048fa:	f7fb fe1b 	bl	8000534 <__aeabi_i2d>
 80048fe:	4602      	mov	r2, r0
 8004900:	460b      	mov	r3, r1
 8004902:	4640      	mov	r0, r8
 8004904:	4649      	mov	r1, r9
 8004906:	f7fb fcc7 	bl	8000298 <__aeabi_dsub>
 800490a:	3630      	adds	r6, #48	; 0x30
 800490c:	f805 6b01 	strb.w	r6, [r5], #1
 8004910:	ec53 2b19 	vmov	r2, r3, d9
 8004914:	4680      	mov	r8, r0
 8004916:	4689      	mov	r9, r1
 8004918:	f7fc f8e8 	bl	8000aec <__aeabi_dcmplt>
 800491c:	2800      	cmp	r0, #0
 800491e:	d164      	bne.n	80049ea <_dtoa_r+0x62a>
 8004920:	4642      	mov	r2, r8
 8004922:	464b      	mov	r3, r9
 8004924:	4937      	ldr	r1, [pc, #220]	; (8004a04 <_dtoa_r+0x644>)
 8004926:	2000      	movs	r0, #0
 8004928:	f7fb fcb6 	bl	8000298 <__aeabi_dsub>
 800492c:	ec53 2b19 	vmov	r2, r3, d9
 8004930:	f7fc f8dc 	bl	8000aec <__aeabi_dcmplt>
 8004934:	2800      	cmp	r0, #0
 8004936:	f040 80b6 	bne.w	8004aa6 <_dtoa_r+0x6e6>
 800493a:	9b02      	ldr	r3, [sp, #8]
 800493c:	429d      	cmp	r5, r3
 800493e:	f43f af7c 	beq.w	800483a <_dtoa_r+0x47a>
 8004942:	4b31      	ldr	r3, [pc, #196]	; (8004a08 <_dtoa_r+0x648>)
 8004944:	ec51 0b19 	vmov	r0, r1, d9
 8004948:	2200      	movs	r2, #0
 800494a:	f7fb fe5d 	bl	8000608 <__aeabi_dmul>
 800494e:	4b2e      	ldr	r3, [pc, #184]	; (8004a08 <_dtoa_r+0x648>)
 8004950:	ec41 0b19 	vmov	d9, r0, r1
 8004954:	2200      	movs	r2, #0
 8004956:	4640      	mov	r0, r8
 8004958:	4649      	mov	r1, r9
 800495a:	f7fb fe55 	bl	8000608 <__aeabi_dmul>
 800495e:	4680      	mov	r8, r0
 8004960:	4689      	mov	r9, r1
 8004962:	e7c5      	b.n	80048f0 <_dtoa_r+0x530>
 8004964:	ec51 0b17 	vmov	r0, r1, d7
 8004968:	f7fb fe4e 	bl	8000608 <__aeabi_dmul>
 800496c:	9b02      	ldr	r3, [sp, #8]
 800496e:	9d00      	ldr	r5, [sp, #0]
 8004970:	930f      	str	r3, [sp, #60]	; 0x3c
 8004972:	ec41 0b19 	vmov	d9, r0, r1
 8004976:	4649      	mov	r1, r9
 8004978:	4640      	mov	r0, r8
 800497a:	f7fc f8f5 	bl	8000b68 <__aeabi_d2iz>
 800497e:	4606      	mov	r6, r0
 8004980:	f7fb fdd8 	bl	8000534 <__aeabi_i2d>
 8004984:	3630      	adds	r6, #48	; 0x30
 8004986:	4602      	mov	r2, r0
 8004988:	460b      	mov	r3, r1
 800498a:	4640      	mov	r0, r8
 800498c:	4649      	mov	r1, r9
 800498e:	f7fb fc83 	bl	8000298 <__aeabi_dsub>
 8004992:	f805 6b01 	strb.w	r6, [r5], #1
 8004996:	9b02      	ldr	r3, [sp, #8]
 8004998:	429d      	cmp	r5, r3
 800499a:	4680      	mov	r8, r0
 800499c:	4689      	mov	r9, r1
 800499e:	f04f 0200 	mov.w	r2, #0
 80049a2:	d124      	bne.n	80049ee <_dtoa_r+0x62e>
 80049a4:	4b1b      	ldr	r3, [pc, #108]	; (8004a14 <_dtoa_r+0x654>)
 80049a6:	ec51 0b19 	vmov	r0, r1, d9
 80049aa:	f7fb fc77 	bl	800029c <__adddf3>
 80049ae:	4602      	mov	r2, r0
 80049b0:	460b      	mov	r3, r1
 80049b2:	4640      	mov	r0, r8
 80049b4:	4649      	mov	r1, r9
 80049b6:	f7fc f8b7 	bl	8000b28 <__aeabi_dcmpgt>
 80049ba:	2800      	cmp	r0, #0
 80049bc:	d173      	bne.n	8004aa6 <_dtoa_r+0x6e6>
 80049be:	ec53 2b19 	vmov	r2, r3, d9
 80049c2:	4914      	ldr	r1, [pc, #80]	; (8004a14 <_dtoa_r+0x654>)
 80049c4:	2000      	movs	r0, #0
 80049c6:	f7fb fc67 	bl	8000298 <__aeabi_dsub>
 80049ca:	4602      	mov	r2, r0
 80049cc:	460b      	mov	r3, r1
 80049ce:	4640      	mov	r0, r8
 80049d0:	4649      	mov	r1, r9
 80049d2:	f7fc f88b 	bl	8000aec <__aeabi_dcmplt>
 80049d6:	2800      	cmp	r0, #0
 80049d8:	f43f af2f 	beq.w	800483a <_dtoa_r+0x47a>
 80049dc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80049de:	1e6b      	subs	r3, r5, #1
 80049e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80049e2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80049e6:	2b30      	cmp	r3, #48	; 0x30
 80049e8:	d0f8      	beq.n	80049dc <_dtoa_r+0x61c>
 80049ea:	46bb      	mov	fp, r7
 80049ec:	e04a      	b.n	8004a84 <_dtoa_r+0x6c4>
 80049ee:	4b06      	ldr	r3, [pc, #24]	; (8004a08 <_dtoa_r+0x648>)
 80049f0:	f7fb fe0a 	bl	8000608 <__aeabi_dmul>
 80049f4:	4680      	mov	r8, r0
 80049f6:	4689      	mov	r9, r1
 80049f8:	e7bd      	b.n	8004976 <_dtoa_r+0x5b6>
 80049fa:	bf00      	nop
 80049fc:	080060f8 	.word	0x080060f8
 8004a00:	080060d0 	.word	0x080060d0
 8004a04:	3ff00000 	.word	0x3ff00000
 8004a08:	40240000 	.word	0x40240000
 8004a0c:	401c0000 	.word	0x401c0000
 8004a10:	40140000 	.word	0x40140000
 8004a14:	3fe00000 	.word	0x3fe00000
 8004a18:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004a1c:	9d00      	ldr	r5, [sp, #0]
 8004a1e:	4642      	mov	r2, r8
 8004a20:	464b      	mov	r3, r9
 8004a22:	4630      	mov	r0, r6
 8004a24:	4639      	mov	r1, r7
 8004a26:	f7fb ff19 	bl	800085c <__aeabi_ddiv>
 8004a2a:	f7fc f89d 	bl	8000b68 <__aeabi_d2iz>
 8004a2e:	9001      	str	r0, [sp, #4]
 8004a30:	f7fb fd80 	bl	8000534 <__aeabi_i2d>
 8004a34:	4642      	mov	r2, r8
 8004a36:	464b      	mov	r3, r9
 8004a38:	f7fb fde6 	bl	8000608 <__aeabi_dmul>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	460b      	mov	r3, r1
 8004a40:	4630      	mov	r0, r6
 8004a42:	4639      	mov	r1, r7
 8004a44:	f7fb fc28 	bl	8000298 <__aeabi_dsub>
 8004a48:	9e01      	ldr	r6, [sp, #4]
 8004a4a:	9f04      	ldr	r7, [sp, #16]
 8004a4c:	3630      	adds	r6, #48	; 0x30
 8004a4e:	f805 6b01 	strb.w	r6, [r5], #1
 8004a52:	9e00      	ldr	r6, [sp, #0]
 8004a54:	1bae      	subs	r6, r5, r6
 8004a56:	42b7      	cmp	r7, r6
 8004a58:	4602      	mov	r2, r0
 8004a5a:	460b      	mov	r3, r1
 8004a5c:	d134      	bne.n	8004ac8 <_dtoa_r+0x708>
 8004a5e:	f7fb fc1d 	bl	800029c <__adddf3>
 8004a62:	4642      	mov	r2, r8
 8004a64:	464b      	mov	r3, r9
 8004a66:	4606      	mov	r6, r0
 8004a68:	460f      	mov	r7, r1
 8004a6a:	f7fc f85d 	bl	8000b28 <__aeabi_dcmpgt>
 8004a6e:	b9c8      	cbnz	r0, 8004aa4 <_dtoa_r+0x6e4>
 8004a70:	4642      	mov	r2, r8
 8004a72:	464b      	mov	r3, r9
 8004a74:	4630      	mov	r0, r6
 8004a76:	4639      	mov	r1, r7
 8004a78:	f7fc f82e 	bl	8000ad8 <__aeabi_dcmpeq>
 8004a7c:	b110      	cbz	r0, 8004a84 <_dtoa_r+0x6c4>
 8004a7e:	9b01      	ldr	r3, [sp, #4]
 8004a80:	07db      	lsls	r3, r3, #31
 8004a82:	d40f      	bmi.n	8004aa4 <_dtoa_r+0x6e4>
 8004a84:	4651      	mov	r1, sl
 8004a86:	4620      	mov	r0, r4
 8004a88:	f000 fbcc 	bl	8005224 <_Bfree>
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004a90:	702b      	strb	r3, [r5, #0]
 8004a92:	f10b 0301 	add.w	r3, fp, #1
 8004a96:	6013      	str	r3, [r2, #0]
 8004a98:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	f43f ace2 	beq.w	8004464 <_dtoa_r+0xa4>
 8004aa0:	601d      	str	r5, [r3, #0]
 8004aa2:	e4df      	b.n	8004464 <_dtoa_r+0xa4>
 8004aa4:	465f      	mov	r7, fp
 8004aa6:	462b      	mov	r3, r5
 8004aa8:	461d      	mov	r5, r3
 8004aaa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004aae:	2a39      	cmp	r2, #57	; 0x39
 8004ab0:	d106      	bne.n	8004ac0 <_dtoa_r+0x700>
 8004ab2:	9a00      	ldr	r2, [sp, #0]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d1f7      	bne.n	8004aa8 <_dtoa_r+0x6e8>
 8004ab8:	9900      	ldr	r1, [sp, #0]
 8004aba:	2230      	movs	r2, #48	; 0x30
 8004abc:	3701      	adds	r7, #1
 8004abe:	700a      	strb	r2, [r1, #0]
 8004ac0:	781a      	ldrb	r2, [r3, #0]
 8004ac2:	3201      	adds	r2, #1
 8004ac4:	701a      	strb	r2, [r3, #0]
 8004ac6:	e790      	b.n	80049ea <_dtoa_r+0x62a>
 8004ac8:	4ba3      	ldr	r3, [pc, #652]	; (8004d58 <_dtoa_r+0x998>)
 8004aca:	2200      	movs	r2, #0
 8004acc:	f7fb fd9c 	bl	8000608 <__aeabi_dmul>
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	4606      	mov	r6, r0
 8004ad6:	460f      	mov	r7, r1
 8004ad8:	f7fb fffe 	bl	8000ad8 <__aeabi_dcmpeq>
 8004adc:	2800      	cmp	r0, #0
 8004ade:	d09e      	beq.n	8004a1e <_dtoa_r+0x65e>
 8004ae0:	e7d0      	b.n	8004a84 <_dtoa_r+0x6c4>
 8004ae2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ae4:	2a00      	cmp	r2, #0
 8004ae6:	f000 80ca 	beq.w	8004c7e <_dtoa_r+0x8be>
 8004aea:	9a07      	ldr	r2, [sp, #28]
 8004aec:	2a01      	cmp	r2, #1
 8004aee:	f300 80ad 	bgt.w	8004c4c <_dtoa_r+0x88c>
 8004af2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004af4:	2a00      	cmp	r2, #0
 8004af6:	f000 80a5 	beq.w	8004c44 <_dtoa_r+0x884>
 8004afa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004afe:	9e08      	ldr	r6, [sp, #32]
 8004b00:	9d05      	ldr	r5, [sp, #20]
 8004b02:	9a05      	ldr	r2, [sp, #20]
 8004b04:	441a      	add	r2, r3
 8004b06:	9205      	str	r2, [sp, #20]
 8004b08:	9a06      	ldr	r2, [sp, #24]
 8004b0a:	2101      	movs	r1, #1
 8004b0c:	441a      	add	r2, r3
 8004b0e:	4620      	mov	r0, r4
 8004b10:	9206      	str	r2, [sp, #24]
 8004b12:	f000 fc3d 	bl	8005390 <__i2b>
 8004b16:	4607      	mov	r7, r0
 8004b18:	b165      	cbz	r5, 8004b34 <_dtoa_r+0x774>
 8004b1a:	9b06      	ldr	r3, [sp, #24]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	dd09      	ble.n	8004b34 <_dtoa_r+0x774>
 8004b20:	42ab      	cmp	r3, r5
 8004b22:	9a05      	ldr	r2, [sp, #20]
 8004b24:	bfa8      	it	ge
 8004b26:	462b      	movge	r3, r5
 8004b28:	1ad2      	subs	r2, r2, r3
 8004b2a:	9205      	str	r2, [sp, #20]
 8004b2c:	9a06      	ldr	r2, [sp, #24]
 8004b2e:	1aed      	subs	r5, r5, r3
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	9306      	str	r3, [sp, #24]
 8004b34:	9b08      	ldr	r3, [sp, #32]
 8004b36:	b1f3      	cbz	r3, 8004b76 <_dtoa_r+0x7b6>
 8004b38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	f000 80a3 	beq.w	8004c86 <_dtoa_r+0x8c6>
 8004b40:	2e00      	cmp	r6, #0
 8004b42:	dd10      	ble.n	8004b66 <_dtoa_r+0x7a6>
 8004b44:	4639      	mov	r1, r7
 8004b46:	4632      	mov	r2, r6
 8004b48:	4620      	mov	r0, r4
 8004b4a:	f000 fce1 	bl	8005510 <__pow5mult>
 8004b4e:	4652      	mov	r2, sl
 8004b50:	4601      	mov	r1, r0
 8004b52:	4607      	mov	r7, r0
 8004b54:	4620      	mov	r0, r4
 8004b56:	f000 fc31 	bl	80053bc <__multiply>
 8004b5a:	4651      	mov	r1, sl
 8004b5c:	4680      	mov	r8, r0
 8004b5e:	4620      	mov	r0, r4
 8004b60:	f000 fb60 	bl	8005224 <_Bfree>
 8004b64:	46c2      	mov	sl, r8
 8004b66:	9b08      	ldr	r3, [sp, #32]
 8004b68:	1b9a      	subs	r2, r3, r6
 8004b6a:	d004      	beq.n	8004b76 <_dtoa_r+0x7b6>
 8004b6c:	4651      	mov	r1, sl
 8004b6e:	4620      	mov	r0, r4
 8004b70:	f000 fcce 	bl	8005510 <__pow5mult>
 8004b74:	4682      	mov	sl, r0
 8004b76:	2101      	movs	r1, #1
 8004b78:	4620      	mov	r0, r4
 8004b7a:	f000 fc09 	bl	8005390 <__i2b>
 8004b7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	4606      	mov	r6, r0
 8004b84:	f340 8081 	ble.w	8004c8a <_dtoa_r+0x8ca>
 8004b88:	461a      	mov	r2, r3
 8004b8a:	4601      	mov	r1, r0
 8004b8c:	4620      	mov	r0, r4
 8004b8e:	f000 fcbf 	bl	8005510 <__pow5mult>
 8004b92:	9b07      	ldr	r3, [sp, #28]
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	4606      	mov	r6, r0
 8004b98:	dd7a      	ble.n	8004c90 <_dtoa_r+0x8d0>
 8004b9a:	f04f 0800 	mov.w	r8, #0
 8004b9e:	6933      	ldr	r3, [r6, #16]
 8004ba0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004ba4:	6918      	ldr	r0, [r3, #16]
 8004ba6:	f000 fba5 	bl	80052f4 <__hi0bits>
 8004baa:	f1c0 0020 	rsb	r0, r0, #32
 8004bae:	9b06      	ldr	r3, [sp, #24]
 8004bb0:	4418      	add	r0, r3
 8004bb2:	f010 001f 	ands.w	r0, r0, #31
 8004bb6:	f000 8094 	beq.w	8004ce2 <_dtoa_r+0x922>
 8004bba:	f1c0 0320 	rsb	r3, r0, #32
 8004bbe:	2b04      	cmp	r3, #4
 8004bc0:	f340 8085 	ble.w	8004cce <_dtoa_r+0x90e>
 8004bc4:	9b05      	ldr	r3, [sp, #20]
 8004bc6:	f1c0 001c 	rsb	r0, r0, #28
 8004bca:	4403      	add	r3, r0
 8004bcc:	9305      	str	r3, [sp, #20]
 8004bce:	9b06      	ldr	r3, [sp, #24]
 8004bd0:	4403      	add	r3, r0
 8004bd2:	4405      	add	r5, r0
 8004bd4:	9306      	str	r3, [sp, #24]
 8004bd6:	9b05      	ldr	r3, [sp, #20]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	dd05      	ble.n	8004be8 <_dtoa_r+0x828>
 8004bdc:	4651      	mov	r1, sl
 8004bde:	461a      	mov	r2, r3
 8004be0:	4620      	mov	r0, r4
 8004be2:	f000 fcef 	bl	80055c4 <__lshift>
 8004be6:	4682      	mov	sl, r0
 8004be8:	9b06      	ldr	r3, [sp, #24]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	dd05      	ble.n	8004bfa <_dtoa_r+0x83a>
 8004bee:	4631      	mov	r1, r6
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	4620      	mov	r0, r4
 8004bf4:	f000 fce6 	bl	80055c4 <__lshift>
 8004bf8:	4606      	mov	r6, r0
 8004bfa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d072      	beq.n	8004ce6 <_dtoa_r+0x926>
 8004c00:	4631      	mov	r1, r6
 8004c02:	4650      	mov	r0, sl
 8004c04:	f000 fd4a 	bl	800569c <__mcmp>
 8004c08:	2800      	cmp	r0, #0
 8004c0a:	da6c      	bge.n	8004ce6 <_dtoa_r+0x926>
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	4651      	mov	r1, sl
 8004c10:	220a      	movs	r2, #10
 8004c12:	4620      	mov	r0, r4
 8004c14:	f000 fb28 	bl	8005268 <__multadd>
 8004c18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c1a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004c1e:	4682      	mov	sl, r0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	f000 81b0 	beq.w	8004f86 <_dtoa_r+0xbc6>
 8004c26:	2300      	movs	r3, #0
 8004c28:	4639      	mov	r1, r7
 8004c2a:	220a      	movs	r2, #10
 8004c2c:	4620      	mov	r0, r4
 8004c2e:	f000 fb1b 	bl	8005268 <__multadd>
 8004c32:	9b01      	ldr	r3, [sp, #4]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	4607      	mov	r7, r0
 8004c38:	f300 8096 	bgt.w	8004d68 <_dtoa_r+0x9a8>
 8004c3c:	9b07      	ldr	r3, [sp, #28]
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	dc59      	bgt.n	8004cf6 <_dtoa_r+0x936>
 8004c42:	e091      	b.n	8004d68 <_dtoa_r+0x9a8>
 8004c44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004c46:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004c4a:	e758      	b.n	8004afe <_dtoa_r+0x73e>
 8004c4c:	9b04      	ldr	r3, [sp, #16]
 8004c4e:	1e5e      	subs	r6, r3, #1
 8004c50:	9b08      	ldr	r3, [sp, #32]
 8004c52:	42b3      	cmp	r3, r6
 8004c54:	bfbf      	itttt	lt
 8004c56:	9b08      	ldrlt	r3, [sp, #32]
 8004c58:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8004c5a:	9608      	strlt	r6, [sp, #32]
 8004c5c:	1af3      	sublt	r3, r6, r3
 8004c5e:	bfb4      	ite	lt
 8004c60:	18d2      	addlt	r2, r2, r3
 8004c62:	1b9e      	subge	r6, r3, r6
 8004c64:	9b04      	ldr	r3, [sp, #16]
 8004c66:	bfbc      	itt	lt
 8004c68:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8004c6a:	2600      	movlt	r6, #0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	bfb7      	itett	lt
 8004c70:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8004c74:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8004c78:	1a9d      	sublt	r5, r3, r2
 8004c7a:	2300      	movlt	r3, #0
 8004c7c:	e741      	b.n	8004b02 <_dtoa_r+0x742>
 8004c7e:	9e08      	ldr	r6, [sp, #32]
 8004c80:	9d05      	ldr	r5, [sp, #20]
 8004c82:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004c84:	e748      	b.n	8004b18 <_dtoa_r+0x758>
 8004c86:	9a08      	ldr	r2, [sp, #32]
 8004c88:	e770      	b.n	8004b6c <_dtoa_r+0x7ac>
 8004c8a:	9b07      	ldr	r3, [sp, #28]
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	dc19      	bgt.n	8004cc4 <_dtoa_r+0x904>
 8004c90:	9b02      	ldr	r3, [sp, #8]
 8004c92:	b9bb      	cbnz	r3, 8004cc4 <_dtoa_r+0x904>
 8004c94:	9b03      	ldr	r3, [sp, #12]
 8004c96:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c9a:	b99b      	cbnz	r3, 8004cc4 <_dtoa_r+0x904>
 8004c9c:	9b03      	ldr	r3, [sp, #12]
 8004c9e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004ca2:	0d1b      	lsrs	r3, r3, #20
 8004ca4:	051b      	lsls	r3, r3, #20
 8004ca6:	b183      	cbz	r3, 8004cca <_dtoa_r+0x90a>
 8004ca8:	9b05      	ldr	r3, [sp, #20]
 8004caa:	3301      	adds	r3, #1
 8004cac:	9305      	str	r3, [sp, #20]
 8004cae:	9b06      	ldr	r3, [sp, #24]
 8004cb0:	3301      	adds	r3, #1
 8004cb2:	9306      	str	r3, [sp, #24]
 8004cb4:	f04f 0801 	mov.w	r8, #1
 8004cb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	f47f af6f 	bne.w	8004b9e <_dtoa_r+0x7de>
 8004cc0:	2001      	movs	r0, #1
 8004cc2:	e774      	b.n	8004bae <_dtoa_r+0x7ee>
 8004cc4:	f04f 0800 	mov.w	r8, #0
 8004cc8:	e7f6      	b.n	8004cb8 <_dtoa_r+0x8f8>
 8004cca:	4698      	mov	r8, r3
 8004ccc:	e7f4      	b.n	8004cb8 <_dtoa_r+0x8f8>
 8004cce:	d082      	beq.n	8004bd6 <_dtoa_r+0x816>
 8004cd0:	9a05      	ldr	r2, [sp, #20]
 8004cd2:	331c      	adds	r3, #28
 8004cd4:	441a      	add	r2, r3
 8004cd6:	9205      	str	r2, [sp, #20]
 8004cd8:	9a06      	ldr	r2, [sp, #24]
 8004cda:	441a      	add	r2, r3
 8004cdc:	441d      	add	r5, r3
 8004cde:	9206      	str	r2, [sp, #24]
 8004ce0:	e779      	b.n	8004bd6 <_dtoa_r+0x816>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	e7f4      	b.n	8004cd0 <_dtoa_r+0x910>
 8004ce6:	9b04      	ldr	r3, [sp, #16]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	dc37      	bgt.n	8004d5c <_dtoa_r+0x99c>
 8004cec:	9b07      	ldr	r3, [sp, #28]
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	dd34      	ble.n	8004d5c <_dtoa_r+0x99c>
 8004cf2:	9b04      	ldr	r3, [sp, #16]
 8004cf4:	9301      	str	r3, [sp, #4]
 8004cf6:	9b01      	ldr	r3, [sp, #4]
 8004cf8:	b963      	cbnz	r3, 8004d14 <_dtoa_r+0x954>
 8004cfa:	4631      	mov	r1, r6
 8004cfc:	2205      	movs	r2, #5
 8004cfe:	4620      	mov	r0, r4
 8004d00:	f000 fab2 	bl	8005268 <__multadd>
 8004d04:	4601      	mov	r1, r0
 8004d06:	4606      	mov	r6, r0
 8004d08:	4650      	mov	r0, sl
 8004d0a:	f000 fcc7 	bl	800569c <__mcmp>
 8004d0e:	2800      	cmp	r0, #0
 8004d10:	f73f adbb 	bgt.w	800488a <_dtoa_r+0x4ca>
 8004d14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d16:	9d00      	ldr	r5, [sp, #0]
 8004d18:	ea6f 0b03 	mvn.w	fp, r3
 8004d1c:	f04f 0800 	mov.w	r8, #0
 8004d20:	4631      	mov	r1, r6
 8004d22:	4620      	mov	r0, r4
 8004d24:	f000 fa7e 	bl	8005224 <_Bfree>
 8004d28:	2f00      	cmp	r7, #0
 8004d2a:	f43f aeab 	beq.w	8004a84 <_dtoa_r+0x6c4>
 8004d2e:	f1b8 0f00 	cmp.w	r8, #0
 8004d32:	d005      	beq.n	8004d40 <_dtoa_r+0x980>
 8004d34:	45b8      	cmp	r8, r7
 8004d36:	d003      	beq.n	8004d40 <_dtoa_r+0x980>
 8004d38:	4641      	mov	r1, r8
 8004d3a:	4620      	mov	r0, r4
 8004d3c:	f000 fa72 	bl	8005224 <_Bfree>
 8004d40:	4639      	mov	r1, r7
 8004d42:	4620      	mov	r0, r4
 8004d44:	f000 fa6e 	bl	8005224 <_Bfree>
 8004d48:	e69c      	b.n	8004a84 <_dtoa_r+0x6c4>
 8004d4a:	2600      	movs	r6, #0
 8004d4c:	4637      	mov	r7, r6
 8004d4e:	e7e1      	b.n	8004d14 <_dtoa_r+0x954>
 8004d50:	46bb      	mov	fp, r7
 8004d52:	4637      	mov	r7, r6
 8004d54:	e599      	b.n	800488a <_dtoa_r+0x4ca>
 8004d56:	bf00      	nop
 8004d58:	40240000 	.word	0x40240000
 8004d5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	f000 80c8 	beq.w	8004ef4 <_dtoa_r+0xb34>
 8004d64:	9b04      	ldr	r3, [sp, #16]
 8004d66:	9301      	str	r3, [sp, #4]
 8004d68:	2d00      	cmp	r5, #0
 8004d6a:	dd05      	ble.n	8004d78 <_dtoa_r+0x9b8>
 8004d6c:	4639      	mov	r1, r7
 8004d6e:	462a      	mov	r2, r5
 8004d70:	4620      	mov	r0, r4
 8004d72:	f000 fc27 	bl	80055c4 <__lshift>
 8004d76:	4607      	mov	r7, r0
 8004d78:	f1b8 0f00 	cmp.w	r8, #0
 8004d7c:	d05b      	beq.n	8004e36 <_dtoa_r+0xa76>
 8004d7e:	6879      	ldr	r1, [r7, #4]
 8004d80:	4620      	mov	r0, r4
 8004d82:	f000 fa0f 	bl	80051a4 <_Balloc>
 8004d86:	4605      	mov	r5, r0
 8004d88:	b928      	cbnz	r0, 8004d96 <_dtoa_r+0x9d6>
 8004d8a:	4b83      	ldr	r3, [pc, #524]	; (8004f98 <_dtoa_r+0xbd8>)
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8004d92:	f7ff bb2e 	b.w	80043f2 <_dtoa_r+0x32>
 8004d96:	693a      	ldr	r2, [r7, #16]
 8004d98:	3202      	adds	r2, #2
 8004d9a:	0092      	lsls	r2, r2, #2
 8004d9c:	f107 010c 	add.w	r1, r7, #12
 8004da0:	300c      	adds	r0, #12
 8004da2:	f001 f801 	bl	8005da8 <memcpy>
 8004da6:	2201      	movs	r2, #1
 8004da8:	4629      	mov	r1, r5
 8004daa:	4620      	mov	r0, r4
 8004dac:	f000 fc0a 	bl	80055c4 <__lshift>
 8004db0:	9b00      	ldr	r3, [sp, #0]
 8004db2:	3301      	adds	r3, #1
 8004db4:	9304      	str	r3, [sp, #16]
 8004db6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004dba:	4413      	add	r3, r2
 8004dbc:	9308      	str	r3, [sp, #32]
 8004dbe:	9b02      	ldr	r3, [sp, #8]
 8004dc0:	f003 0301 	and.w	r3, r3, #1
 8004dc4:	46b8      	mov	r8, r7
 8004dc6:	9306      	str	r3, [sp, #24]
 8004dc8:	4607      	mov	r7, r0
 8004dca:	9b04      	ldr	r3, [sp, #16]
 8004dcc:	4631      	mov	r1, r6
 8004dce:	3b01      	subs	r3, #1
 8004dd0:	4650      	mov	r0, sl
 8004dd2:	9301      	str	r3, [sp, #4]
 8004dd4:	f7ff fa6c 	bl	80042b0 <quorem>
 8004dd8:	4641      	mov	r1, r8
 8004dda:	9002      	str	r0, [sp, #8]
 8004ddc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004de0:	4650      	mov	r0, sl
 8004de2:	f000 fc5b 	bl	800569c <__mcmp>
 8004de6:	463a      	mov	r2, r7
 8004de8:	9005      	str	r0, [sp, #20]
 8004dea:	4631      	mov	r1, r6
 8004dec:	4620      	mov	r0, r4
 8004dee:	f000 fc71 	bl	80056d4 <__mdiff>
 8004df2:	68c2      	ldr	r2, [r0, #12]
 8004df4:	4605      	mov	r5, r0
 8004df6:	bb02      	cbnz	r2, 8004e3a <_dtoa_r+0xa7a>
 8004df8:	4601      	mov	r1, r0
 8004dfa:	4650      	mov	r0, sl
 8004dfc:	f000 fc4e 	bl	800569c <__mcmp>
 8004e00:	4602      	mov	r2, r0
 8004e02:	4629      	mov	r1, r5
 8004e04:	4620      	mov	r0, r4
 8004e06:	9209      	str	r2, [sp, #36]	; 0x24
 8004e08:	f000 fa0c 	bl	8005224 <_Bfree>
 8004e0c:	9b07      	ldr	r3, [sp, #28]
 8004e0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e10:	9d04      	ldr	r5, [sp, #16]
 8004e12:	ea43 0102 	orr.w	r1, r3, r2
 8004e16:	9b06      	ldr	r3, [sp, #24]
 8004e18:	4319      	orrs	r1, r3
 8004e1a:	d110      	bne.n	8004e3e <_dtoa_r+0xa7e>
 8004e1c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004e20:	d029      	beq.n	8004e76 <_dtoa_r+0xab6>
 8004e22:	9b05      	ldr	r3, [sp, #20]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	dd02      	ble.n	8004e2e <_dtoa_r+0xa6e>
 8004e28:	9b02      	ldr	r3, [sp, #8]
 8004e2a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8004e2e:	9b01      	ldr	r3, [sp, #4]
 8004e30:	f883 9000 	strb.w	r9, [r3]
 8004e34:	e774      	b.n	8004d20 <_dtoa_r+0x960>
 8004e36:	4638      	mov	r0, r7
 8004e38:	e7ba      	b.n	8004db0 <_dtoa_r+0x9f0>
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	e7e1      	b.n	8004e02 <_dtoa_r+0xa42>
 8004e3e:	9b05      	ldr	r3, [sp, #20]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	db04      	blt.n	8004e4e <_dtoa_r+0xa8e>
 8004e44:	9907      	ldr	r1, [sp, #28]
 8004e46:	430b      	orrs	r3, r1
 8004e48:	9906      	ldr	r1, [sp, #24]
 8004e4a:	430b      	orrs	r3, r1
 8004e4c:	d120      	bne.n	8004e90 <_dtoa_r+0xad0>
 8004e4e:	2a00      	cmp	r2, #0
 8004e50:	dded      	ble.n	8004e2e <_dtoa_r+0xa6e>
 8004e52:	4651      	mov	r1, sl
 8004e54:	2201      	movs	r2, #1
 8004e56:	4620      	mov	r0, r4
 8004e58:	f000 fbb4 	bl	80055c4 <__lshift>
 8004e5c:	4631      	mov	r1, r6
 8004e5e:	4682      	mov	sl, r0
 8004e60:	f000 fc1c 	bl	800569c <__mcmp>
 8004e64:	2800      	cmp	r0, #0
 8004e66:	dc03      	bgt.n	8004e70 <_dtoa_r+0xab0>
 8004e68:	d1e1      	bne.n	8004e2e <_dtoa_r+0xa6e>
 8004e6a:	f019 0f01 	tst.w	r9, #1
 8004e6e:	d0de      	beq.n	8004e2e <_dtoa_r+0xa6e>
 8004e70:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004e74:	d1d8      	bne.n	8004e28 <_dtoa_r+0xa68>
 8004e76:	9a01      	ldr	r2, [sp, #4]
 8004e78:	2339      	movs	r3, #57	; 0x39
 8004e7a:	7013      	strb	r3, [r2, #0]
 8004e7c:	462b      	mov	r3, r5
 8004e7e:	461d      	mov	r5, r3
 8004e80:	3b01      	subs	r3, #1
 8004e82:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004e86:	2a39      	cmp	r2, #57	; 0x39
 8004e88:	d06c      	beq.n	8004f64 <_dtoa_r+0xba4>
 8004e8a:	3201      	adds	r2, #1
 8004e8c:	701a      	strb	r2, [r3, #0]
 8004e8e:	e747      	b.n	8004d20 <_dtoa_r+0x960>
 8004e90:	2a00      	cmp	r2, #0
 8004e92:	dd07      	ble.n	8004ea4 <_dtoa_r+0xae4>
 8004e94:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004e98:	d0ed      	beq.n	8004e76 <_dtoa_r+0xab6>
 8004e9a:	9a01      	ldr	r2, [sp, #4]
 8004e9c:	f109 0301 	add.w	r3, r9, #1
 8004ea0:	7013      	strb	r3, [r2, #0]
 8004ea2:	e73d      	b.n	8004d20 <_dtoa_r+0x960>
 8004ea4:	9b04      	ldr	r3, [sp, #16]
 8004ea6:	9a08      	ldr	r2, [sp, #32]
 8004ea8:	f803 9c01 	strb.w	r9, [r3, #-1]
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d043      	beq.n	8004f38 <_dtoa_r+0xb78>
 8004eb0:	4651      	mov	r1, sl
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	220a      	movs	r2, #10
 8004eb6:	4620      	mov	r0, r4
 8004eb8:	f000 f9d6 	bl	8005268 <__multadd>
 8004ebc:	45b8      	cmp	r8, r7
 8004ebe:	4682      	mov	sl, r0
 8004ec0:	f04f 0300 	mov.w	r3, #0
 8004ec4:	f04f 020a 	mov.w	r2, #10
 8004ec8:	4641      	mov	r1, r8
 8004eca:	4620      	mov	r0, r4
 8004ecc:	d107      	bne.n	8004ede <_dtoa_r+0xb1e>
 8004ece:	f000 f9cb 	bl	8005268 <__multadd>
 8004ed2:	4680      	mov	r8, r0
 8004ed4:	4607      	mov	r7, r0
 8004ed6:	9b04      	ldr	r3, [sp, #16]
 8004ed8:	3301      	adds	r3, #1
 8004eda:	9304      	str	r3, [sp, #16]
 8004edc:	e775      	b.n	8004dca <_dtoa_r+0xa0a>
 8004ede:	f000 f9c3 	bl	8005268 <__multadd>
 8004ee2:	4639      	mov	r1, r7
 8004ee4:	4680      	mov	r8, r0
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	220a      	movs	r2, #10
 8004eea:	4620      	mov	r0, r4
 8004eec:	f000 f9bc 	bl	8005268 <__multadd>
 8004ef0:	4607      	mov	r7, r0
 8004ef2:	e7f0      	b.n	8004ed6 <_dtoa_r+0xb16>
 8004ef4:	9b04      	ldr	r3, [sp, #16]
 8004ef6:	9301      	str	r3, [sp, #4]
 8004ef8:	9d00      	ldr	r5, [sp, #0]
 8004efa:	4631      	mov	r1, r6
 8004efc:	4650      	mov	r0, sl
 8004efe:	f7ff f9d7 	bl	80042b0 <quorem>
 8004f02:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004f06:	9b00      	ldr	r3, [sp, #0]
 8004f08:	f805 9b01 	strb.w	r9, [r5], #1
 8004f0c:	1aea      	subs	r2, r5, r3
 8004f0e:	9b01      	ldr	r3, [sp, #4]
 8004f10:	4293      	cmp	r3, r2
 8004f12:	dd07      	ble.n	8004f24 <_dtoa_r+0xb64>
 8004f14:	4651      	mov	r1, sl
 8004f16:	2300      	movs	r3, #0
 8004f18:	220a      	movs	r2, #10
 8004f1a:	4620      	mov	r0, r4
 8004f1c:	f000 f9a4 	bl	8005268 <__multadd>
 8004f20:	4682      	mov	sl, r0
 8004f22:	e7ea      	b.n	8004efa <_dtoa_r+0xb3a>
 8004f24:	9b01      	ldr	r3, [sp, #4]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	bfc8      	it	gt
 8004f2a:	461d      	movgt	r5, r3
 8004f2c:	9b00      	ldr	r3, [sp, #0]
 8004f2e:	bfd8      	it	le
 8004f30:	2501      	movle	r5, #1
 8004f32:	441d      	add	r5, r3
 8004f34:	f04f 0800 	mov.w	r8, #0
 8004f38:	4651      	mov	r1, sl
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	4620      	mov	r0, r4
 8004f3e:	f000 fb41 	bl	80055c4 <__lshift>
 8004f42:	4631      	mov	r1, r6
 8004f44:	4682      	mov	sl, r0
 8004f46:	f000 fba9 	bl	800569c <__mcmp>
 8004f4a:	2800      	cmp	r0, #0
 8004f4c:	dc96      	bgt.n	8004e7c <_dtoa_r+0xabc>
 8004f4e:	d102      	bne.n	8004f56 <_dtoa_r+0xb96>
 8004f50:	f019 0f01 	tst.w	r9, #1
 8004f54:	d192      	bne.n	8004e7c <_dtoa_r+0xabc>
 8004f56:	462b      	mov	r3, r5
 8004f58:	461d      	mov	r5, r3
 8004f5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004f5e:	2a30      	cmp	r2, #48	; 0x30
 8004f60:	d0fa      	beq.n	8004f58 <_dtoa_r+0xb98>
 8004f62:	e6dd      	b.n	8004d20 <_dtoa_r+0x960>
 8004f64:	9a00      	ldr	r2, [sp, #0]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d189      	bne.n	8004e7e <_dtoa_r+0xabe>
 8004f6a:	f10b 0b01 	add.w	fp, fp, #1
 8004f6e:	2331      	movs	r3, #49	; 0x31
 8004f70:	e796      	b.n	8004ea0 <_dtoa_r+0xae0>
 8004f72:	4b0a      	ldr	r3, [pc, #40]	; (8004f9c <_dtoa_r+0xbdc>)
 8004f74:	f7ff ba99 	b.w	80044aa <_dtoa_r+0xea>
 8004f78:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	f47f aa6d 	bne.w	800445a <_dtoa_r+0x9a>
 8004f80:	4b07      	ldr	r3, [pc, #28]	; (8004fa0 <_dtoa_r+0xbe0>)
 8004f82:	f7ff ba92 	b.w	80044aa <_dtoa_r+0xea>
 8004f86:	9b01      	ldr	r3, [sp, #4]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	dcb5      	bgt.n	8004ef8 <_dtoa_r+0xb38>
 8004f8c:	9b07      	ldr	r3, [sp, #28]
 8004f8e:	2b02      	cmp	r3, #2
 8004f90:	f73f aeb1 	bgt.w	8004cf6 <_dtoa_r+0x936>
 8004f94:	e7b0      	b.n	8004ef8 <_dtoa_r+0xb38>
 8004f96:	bf00      	nop
 8004f98:	08006064 	.word	0x08006064
 8004f9c:	08005fc4 	.word	0x08005fc4
 8004fa0:	08005fe8 	.word	0x08005fe8

08004fa4 <_free_r>:
 8004fa4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004fa6:	2900      	cmp	r1, #0
 8004fa8:	d044      	beq.n	8005034 <_free_r+0x90>
 8004faa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fae:	9001      	str	r0, [sp, #4]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	f1a1 0404 	sub.w	r4, r1, #4
 8004fb6:	bfb8      	it	lt
 8004fb8:	18e4      	addlt	r4, r4, r3
 8004fba:	f000 f8e7 	bl	800518c <__malloc_lock>
 8004fbe:	4a1e      	ldr	r2, [pc, #120]	; (8005038 <_free_r+0x94>)
 8004fc0:	9801      	ldr	r0, [sp, #4]
 8004fc2:	6813      	ldr	r3, [r2, #0]
 8004fc4:	b933      	cbnz	r3, 8004fd4 <_free_r+0x30>
 8004fc6:	6063      	str	r3, [r4, #4]
 8004fc8:	6014      	str	r4, [r2, #0]
 8004fca:	b003      	add	sp, #12
 8004fcc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004fd0:	f000 b8e2 	b.w	8005198 <__malloc_unlock>
 8004fd4:	42a3      	cmp	r3, r4
 8004fd6:	d908      	bls.n	8004fea <_free_r+0x46>
 8004fd8:	6825      	ldr	r5, [r4, #0]
 8004fda:	1961      	adds	r1, r4, r5
 8004fdc:	428b      	cmp	r3, r1
 8004fde:	bf01      	itttt	eq
 8004fe0:	6819      	ldreq	r1, [r3, #0]
 8004fe2:	685b      	ldreq	r3, [r3, #4]
 8004fe4:	1949      	addeq	r1, r1, r5
 8004fe6:	6021      	streq	r1, [r4, #0]
 8004fe8:	e7ed      	b.n	8004fc6 <_free_r+0x22>
 8004fea:	461a      	mov	r2, r3
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	b10b      	cbz	r3, 8004ff4 <_free_r+0x50>
 8004ff0:	42a3      	cmp	r3, r4
 8004ff2:	d9fa      	bls.n	8004fea <_free_r+0x46>
 8004ff4:	6811      	ldr	r1, [r2, #0]
 8004ff6:	1855      	adds	r5, r2, r1
 8004ff8:	42a5      	cmp	r5, r4
 8004ffa:	d10b      	bne.n	8005014 <_free_r+0x70>
 8004ffc:	6824      	ldr	r4, [r4, #0]
 8004ffe:	4421      	add	r1, r4
 8005000:	1854      	adds	r4, r2, r1
 8005002:	42a3      	cmp	r3, r4
 8005004:	6011      	str	r1, [r2, #0]
 8005006:	d1e0      	bne.n	8004fca <_free_r+0x26>
 8005008:	681c      	ldr	r4, [r3, #0]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	6053      	str	r3, [r2, #4]
 800500e:	440c      	add	r4, r1
 8005010:	6014      	str	r4, [r2, #0]
 8005012:	e7da      	b.n	8004fca <_free_r+0x26>
 8005014:	d902      	bls.n	800501c <_free_r+0x78>
 8005016:	230c      	movs	r3, #12
 8005018:	6003      	str	r3, [r0, #0]
 800501a:	e7d6      	b.n	8004fca <_free_r+0x26>
 800501c:	6825      	ldr	r5, [r4, #0]
 800501e:	1961      	adds	r1, r4, r5
 8005020:	428b      	cmp	r3, r1
 8005022:	bf04      	itt	eq
 8005024:	6819      	ldreq	r1, [r3, #0]
 8005026:	685b      	ldreq	r3, [r3, #4]
 8005028:	6063      	str	r3, [r4, #4]
 800502a:	bf04      	itt	eq
 800502c:	1949      	addeq	r1, r1, r5
 800502e:	6021      	streq	r1, [r4, #0]
 8005030:	6054      	str	r4, [r2, #4]
 8005032:	e7ca      	b.n	8004fca <_free_r+0x26>
 8005034:	b003      	add	sp, #12
 8005036:	bd30      	pop	{r4, r5, pc}
 8005038:	2000034c 	.word	0x2000034c

0800503c <malloc>:
 800503c:	4b02      	ldr	r3, [pc, #8]	; (8005048 <malloc+0xc>)
 800503e:	4601      	mov	r1, r0
 8005040:	6818      	ldr	r0, [r3, #0]
 8005042:	f000 b823 	b.w	800508c <_malloc_r>
 8005046:	bf00      	nop
 8005048:	20000064 	.word	0x20000064

0800504c <sbrk_aligned>:
 800504c:	b570      	push	{r4, r5, r6, lr}
 800504e:	4e0e      	ldr	r6, [pc, #56]	; (8005088 <sbrk_aligned+0x3c>)
 8005050:	460c      	mov	r4, r1
 8005052:	6831      	ldr	r1, [r6, #0]
 8005054:	4605      	mov	r5, r0
 8005056:	b911      	cbnz	r1, 800505e <sbrk_aligned+0x12>
 8005058:	f000 fe96 	bl	8005d88 <_sbrk_r>
 800505c:	6030      	str	r0, [r6, #0]
 800505e:	4621      	mov	r1, r4
 8005060:	4628      	mov	r0, r5
 8005062:	f000 fe91 	bl	8005d88 <_sbrk_r>
 8005066:	1c43      	adds	r3, r0, #1
 8005068:	d00a      	beq.n	8005080 <sbrk_aligned+0x34>
 800506a:	1cc4      	adds	r4, r0, #3
 800506c:	f024 0403 	bic.w	r4, r4, #3
 8005070:	42a0      	cmp	r0, r4
 8005072:	d007      	beq.n	8005084 <sbrk_aligned+0x38>
 8005074:	1a21      	subs	r1, r4, r0
 8005076:	4628      	mov	r0, r5
 8005078:	f000 fe86 	bl	8005d88 <_sbrk_r>
 800507c:	3001      	adds	r0, #1
 800507e:	d101      	bne.n	8005084 <sbrk_aligned+0x38>
 8005080:	f04f 34ff 	mov.w	r4, #4294967295
 8005084:	4620      	mov	r0, r4
 8005086:	bd70      	pop	{r4, r5, r6, pc}
 8005088:	20000350 	.word	0x20000350

0800508c <_malloc_r>:
 800508c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005090:	1ccd      	adds	r5, r1, #3
 8005092:	f025 0503 	bic.w	r5, r5, #3
 8005096:	3508      	adds	r5, #8
 8005098:	2d0c      	cmp	r5, #12
 800509a:	bf38      	it	cc
 800509c:	250c      	movcc	r5, #12
 800509e:	2d00      	cmp	r5, #0
 80050a0:	4607      	mov	r7, r0
 80050a2:	db01      	blt.n	80050a8 <_malloc_r+0x1c>
 80050a4:	42a9      	cmp	r1, r5
 80050a6:	d905      	bls.n	80050b4 <_malloc_r+0x28>
 80050a8:	230c      	movs	r3, #12
 80050aa:	603b      	str	r3, [r7, #0]
 80050ac:	2600      	movs	r6, #0
 80050ae:	4630      	mov	r0, r6
 80050b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050b4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005188 <_malloc_r+0xfc>
 80050b8:	f000 f868 	bl	800518c <__malloc_lock>
 80050bc:	f8d8 3000 	ldr.w	r3, [r8]
 80050c0:	461c      	mov	r4, r3
 80050c2:	bb5c      	cbnz	r4, 800511c <_malloc_r+0x90>
 80050c4:	4629      	mov	r1, r5
 80050c6:	4638      	mov	r0, r7
 80050c8:	f7ff ffc0 	bl	800504c <sbrk_aligned>
 80050cc:	1c43      	adds	r3, r0, #1
 80050ce:	4604      	mov	r4, r0
 80050d0:	d155      	bne.n	800517e <_malloc_r+0xf2>
 80050d2:	f8d8 4000 	ldr.w	r4, [r8]
 80050d6:	4626      	mov	r6, r4
 80050d8:	2e00      	cmp	r6, #0
 80050da:	d145      	bne.n	8005168 <_malloc_r+0xdc>
 80050dc:	2c00      	cmp	r4, #0
 80050de:	d048      	beq.n	8005172 <_malloc_r+0xe6>
 80050e0:	6823      	ldr	r3, [r4, #0]
 80050e2:	4631      	mov	r1, r6
 80050e4:	4638      	mov	r0, r7
 80050e6:	eb04 0903 	add.w	r9, r4, r3
 80050ea:	f000 fe4d 	bl	8005d88 <_sbrk_r>
 80050ee:	4581      	cmp	r9, r0
 80050f0:	d13f      	bne.n	8005172 <_malloc_r+0xe6>
 80050f2:	6821      	ldr	r1, [r4, #0]
 80050f4:	1a6d      	subs	r5, r5, r1
 80050f6:	4629      	mov	r1, r5
 80050f8:	4638      	mov	r0, r7
 80050fa:	f7ff ffa7 	bl	800504c <sbrk_aligned>
 80050fe:	3001      	adds	r0, #1
 8005100:	d037      	beq.n	8005172 <_malloc_r+0xe6>
 8005102:	6823      	ldr	r3, [r4, #0]
 8005104:	442b      	add	r3, r5
 8005106:	6023      	str	r3, [r4, #0]
 8005108:	f8d8 3000 	ldr.w	r3, [r8]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d038      	beq.n	8005182 <_malloc_r+0xf6>
 8005110:	685a      	ldr	r2, [r3, #4]
 8005112:	42a2      	cmp	r2, r4
 8005114:	d12b      	bne.n	800516e <_malloc_r+0xe2>
 8005116:	2200      	movs	r2, #0
 8005118:	605a      	str	r2, [r3, #4]
 800511a:	e00f      	b.n	800513c <_malloc_r+0xb0>
 800511c:	6822      	ldr	r2, [r4, #0]
 800511e:	1b52      	subs	r2, r2, r5
 8005120:	d41f      	bmi.n	8005162 <_malloc_r+0xd6>
 8005122:	2a0b      	cmp	r2, #11
 8005124:	d917      	bls.n	8005156 <_malloc_r+0xca>
 8005126:	1961      	adds	r1, r4, r5
 8005128:	42a3      	cmp	r3, r4
 800512a:	6025      	str	r5, [r4, #0]
 800512c:	bf18      	it	ne
 800512e:	6059      	strne	r1, [r3, #4]
 8005130:	6863      	ldr	r3, [r4, #4]
 8005132:	bf08      	it	eq
 8005134:	f8c8 1000 	streq.w	r1, [r8]
 8005138:	5162      	str	r2, [r4, r5]
 800513a:	604b      	str	r3, [r1, #4]
 800513c:	4638      	mov	r0, r7
 800513e:	f104 060b 	add.w	r6, r4, #11
 8005142:	f000 f829 	bl	8005198 <__malloc_unlock>
 8005146:	f026 0607 	bic.w	r6, r6, #7
 800514a:	1d23      	adds	r3, r4, #4
 800514c:	1af2      	subs	r2, r6, r3
 800514e:	d0ae      	beq.n	80050ae <_malloc_r+0x22>
 8005150:	1b9b      	subs	r3, r3, r6
 8005152:	50a3      	str	r3, [r4, r2]
 8005154:	e7ab      	b.n	80050ae <_malloc_r+0x22>
 8005156:	42a3      	cmp	r3, r4
 8005158:	6862      	ldr	r2, [r4, #4]
 800515a:	d1dd      	bne.n	8005118 <_malloc_r+0x8c>
 800515c:	f8c8 2000 	str.w	r2, [r8]
 8005160:	e7ec      	b.n	800513c <_malloc_r+0xb0>
 8005162:	4623      	mov	r3, r4
 8005164:	6864      	ldr	r4, [r4, #4]
 8005166:	e7ac      	b.n	80050c2 <_malloc_r+0x36>
 8005168:	4634      	mov	r4, r6
 800516a:	6876      	ldr	r6, [r6, #4]
 800516c:	e7b4      	b.n	80050d8 <_malloc_r+0x4c>
 800516e:	4613      	mov	r3, r2
 8005170:	e7cc      	b.n	800510c <_malloc_r+0x80>
 8005172:	230c      	movs	r3, #12
 8005174:	603b      	str	r3, [r7, #0]
 8005176:	4638      	mov	r0, r7
 8005178:	f000 f80e 	bl	8005198 <__malloc_unlock>
 800517c:	e797      	b.n	80050ae <_malloc_r+0x22>
 800517e:	6025      	str	r5, [r4, #0]
 8005180:	e7dc      	b.n	800513c <_malloc_r+0xb0>
 8005182:	605b      	str	r3, [r3, #4]
 8005184:	deff      	udf	#255	; 0xff
 8005186:	bf00      	nop
 8005188:	2000034c 	.word	0x2000034c

0800518c <__malloc_lock>:
 800518c:	4801      	ldr	r0, [pc, #4]	; (8005194 <__malloc_lock+0x8>)
 800518e:	f7ff b88d 	b.w	80042ac <__retarget_lock_acquire_recursive>
 8005192:	bf00      	nop
 8005194:	20000348 	.word	0x20000348

08005198 <__malloc_unlock>:
 8005198:	4801      	ldr	r0, [pc, #4]	; (80051a0 <__malloc_unlock+0x8>)
 800519a:	f7ff b888 	b.w	80042ae <__retarget_lock_release_recursive>
 800519e:	bf00      	nop
 80051a0:	20000348 	.word	0x20000348

080051a4 <_Balloc>:
 80051a4:	b570      	push	{r4, r5, r6, lr}
 80051a6:	69c6      	ldr	r6, [r0, #28]
 80051a8:	4604      	mov	r4, r0
 80051aa:	460d      	mov	r5, r1
 80051ac:	b976      	cbnz	r6, 80051cc <_Balloc+0x28>
 80051ae:	2010      	movs	r0, #16
 80051b0:	f7ff ff44 	bl	800503c <malloc>
 80051b4:	4602      	mov	r2, r0
 80051b6:	61e0      	str	r0, [r4, #28]
 80051b8:	b920      	cbnz	r0, 80051c4 <_Balloc+0x20>
 80051ba:	4b18      	ldr	r3, [pc, #96]	; (800521c <_Balloc+0x78>)
 80051bc:	4818      	ldr	r0, [pc, #96]	; (8005220 <_Balloc+0x7c>)
 80051be:	216b      	movs	r1, #107	; 0x6b
 80051c0:	f000 fe00 	bl	8005dc4 <__assert_func>
 80051c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80051c8:	6006      	str	r6, [r0, #0]
 80051ca:	60c6      	str	r6, [r0, #12]
 80051cc:	69e6      	ldr	r6, [r4, #28]
 80051ce:	68f3      	ldr	r3, [r6, #12]
 80051d0:	b183      	cbz	r3, 80051f4 <_Balloc+0x50>
 80051d2:	69e3      	ldr	r3, [r4, #28]
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80051da:	b9b8      	cbnz	r0, 800520c <_Balloc+0x68>
 80051dc:	2101      	movs	r1, #1
 80051de:	fa01 f605 	lsl.w	r6, r1, r5
 80051e2:	1d72      	adds	r2, r6, #5
 80051e4:	0092      	lsls	r2, r2, #2
 80051e6:	4620      	mov	r0, r4
 80051e8:	f000 fe0a 	bl	8005e00 <_calloc_r>
 80051ec:	b160      	cbz	r0, 8005208 <_Balloc+0x64>
 80051ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80051f2:	e00e      	b.n	8005212 <_Balloc+0x6e>
 80051f4:	2221      	movs	r2, #33	; 0x21
 80051f6:	2104      	movs	r1, #4
 80051f8:	4620      	mov	r0, r4
 80051fa:	f000 fe01 	bl	8005e00 <_calloc_r>
 80051fe:	69e3      	ldr	r3, [r4, #28]
 8005200:	60f0      	str	r0, [r6, #12]
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d1e4      	bne.n	80051d2 <_Balloc+0x2e>
 8005208:	2000      	movs	r0, #0
 800520a:	bd70      	pop	{r4, r5, r6, pc}
 800520c:	6802      	ldr	r2, [r0, #0]
 800520e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005212:	2300      	movs	r3, #0
 8005214:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005218:	e7f7      	b.n	800520a <_Balloc+0x66>
 800521a:	bf00      	nop
 800521c:	08005ff5 	.word	0x08005ff5
 8005220:	08006075 	.word	0x08006075

08005224 <_Bfree>:
 8005224:	b570      	push	{r4, r5, r6, lr}
 8005226:	69c6      	ldr	r6, [r0, #28]
 8005228:	4605      	mov	r5, r0
 800522a:	460c      	mov	r4, r1
 800522c:	b976      	cbnz	r6, 800524c <_Bfree+0x28>
 800522e:	2010      	movs	r0, #16
 8005230:	f7ff ff04 	bl	800503c <malloc>
 8005234:	4602      	mov	r2, r0
 8005236:	61e8      	str	r0, [r5, #28]
 8005238:	b920      	cbnz	r0, 8005244 <_Bfree+0x20>
 800523a:	4b09      	ldr	r3, [pc, #36]	; (8005260 <_Bfree+0x3c>)
 800523c:	4809      	ldr	r0, [pc, #36]	; (8005264 <_Bfree+0x40>)
 800523e:	218f      	movs	r1, #143	; 0x8f
 8005240:	f000 fdc0 	bl	8005dc4 <__assert_func>
 8005244:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005248:	6006      	str	r6, [r0, #0]
 800524a:	60c6      	str	r6, [r0, #12]
 800524c:	b13c      	cbz	r4, 800525e <_Bfree+0x3a>
 800524e:	69eb      	ldr	r3, [r5, #28]
 8005250:	6862      	ldr	r2, [r4, #4]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005258:	6021      	str	r1, [r4, #0]
 800525a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800525e:	bd70      	pop	{r4, r5, r6, pc}
 8005260:	08005ff5 	.word	0x08005ff5
 8005264:	08006075 	.word	0x08006075

08005268 <__multadd>:
 8005268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800526c:	690d      	ldr	r5, [r1, #16]
 800526e:	4607      	mov	r7, r0
 8005270:	460c      	mov	r4, r1
 8005272:	461e      	mov	r6, r3
 8005274:	f101 0c14 	add.w	ip, r1, #20
 8005278:	2000      	movs	r0, #0
 800527a:	f8dc 3000 	ldr.w	r3, [ip]
 800527e:	b299      	uxth	r1, r3
 8005280:	fb02 6101 	mla	r1, r2, r1, r6
 8005284:	0c1e      	lsrs	r6, r3, #16
 8005286:	0c0b      	lsrs	r3, r1, #16
 8005288:	fb02 3306 	mla	r3, r2, r6, r3
 800528c:	b289      	uxth	r1, r1
 800528e:	3001      	adds	r0, #1
 8005290:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005294:	4285      	cmp	r5, r0
 8005296:	f84c 1b04 	str.w	r1, [ip], #4
 800529a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800529e:	dcec      	bgt.n	800527a <__multadd+0x12>
 80052a0:	b30e      	cbz	r6, 80052e6 <__multadd+0x7e>
 80052a2:	68a3      	ldr	r3, [r4, #8]
 80052a4:	42ab      	cmp	r3, r5
 80052a6:	dc19      	bgt.n	80052dc <__multadd+0x74>
 80052a8:	6861      	ldr	r1, [r4, #4]
 80052aa:	4638      	mov	r0, r7
 80052ac:	3101      	adds	r1, #1
 80052ae:	f7ff ff79 	bl	80051a4 <_Balloc>
 80052b2:	4680      	mov	r8, r0
 80052b4:	b928      	cbnz	r0, 80052c2 <__multadd+0x5a>
 80052b6:	4602      	mov	r2, r0
 80052b8:	4b0c      	ldr	r3, [pc, #48]	; (80052ec <__multadd+0x84>)
 80052ba:	480d      	ldr	r0, [pc, #52]	; (80052f0 <__multadd+0x88>)
 80052bc:	21ba      	movs	r1, #186	; 0xba
 80052be:	f000 fd81 	bl	8005dc4 <__assert_func>
 80052c2:	6922      	ldr	r2, [r4, #16]
 80052c4:	3202      	adds	r2, #2
 80052c6:	f104 010c 	add.w	r1, r4, #12
 80052ca:	0092      	lsls	r2, r2, #2
 80052cc:	300c      	adds	r0, #12
 80052ce:	f000 fd6b 	bl	8005da8 <memcpy>
 80052d2:	4621      	mov	r1, r4
 80052d4:	4638      	mov	r0, r7
 80052d6:	f7ff ffa5 	bl	8005224 <_Bfree>
 80052da:	4644      	mov	r4, r8
 80052dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80052e0:	3501      	adds	r5, #1
 80052e2:	615e      	str	r6, [r3, #20]
 80052e4:	6125      	str	r5, [r4, #16]
 80052e6:	4620      	mov	r0, r4
 80052e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052ec:	08006064 	.word	0x08006064
 80052f0:	08006075 	.word	0x08006075

080052f4 <__hi0bits>:
 80052f4:	0c03      	lsrs	r3, r0, #16
 80052f6:	041b      	lsls	r3, r3, #16
 80052f8:	b9d3      	cbnz	r3, 8005330 <__hi0bits+0x3c>
 80052fa:	0400      	lsls	r0, r0, #16
 80052fc:	2310      	movs	r3, #16
 80052fe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005302:	bf04      	itt	eq
 8005304:	0200      	lsleq	r0, r0, #8
 8005306:	3308      	addeq	r3, #8
 8005308:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800530c:	bf04      	itt	eq
 800530e:	0100      	lsleq	r0, r0, #4
 8005310:	3304      	addeq	r3, #4
 8005312:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005316:	bf04      	itt	eq
 8005318:	0080      	lsleq	r0, r0, #2
 800531a:	3302      	addeq	r3, #2
 800531c:	2800      	cmp	r0, #0
 800531e:	db05      	blt.n	800532c <__hi0bits+0x38>
 8005320:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005324:	f103 0301 	add.w	r3, r3, #1
 8005328:	bf08      	it	eq
 800532a:	2320      	moveq	r3, #32
 800532c:	4618      	mov	r0, r3
 800532e:	4770      	bx	lr
 8005330:	2300      	movs	r3, #0
 8005332:	e7e4      	b.n	80052fe <__hi0bits+0xa>

08005334 <__lo0bits>:
 8005334:	6803      	ldr	r3, [r0, #0]
 8005336:	f013 0207 	ands.w	r2, r3, #7
 800533a:	d00c      	beq.n	8005356 <__lo0bits+0x22>
 800533c:	07d9      	lsls	r1, r3, #31
 800533e:	d422      	bmi.n	8005386 <__lo0bits+0x52>
 8005340:	079a      	lsls	r2, r3, #30
 8005342:	bf49      	itett	mi
 8005344:	085b      	lsrmi	r3, r3, #1
 8005346:	089b      	lsrpl	r3, r3, #2
 8005348:	6003      	strmi	r3, [r0, #0]
 800534a:	2201      	movmi	r2, #1
 800534c:	bf5c      	itt	pl
 800534e:	6003      	strpl	r3, [r0, #0]
 8005350:	2202      	movpl	r2, #2
 8005352:	4610      	mov	r0, r2
 8005354:	4770      	bx	lr
 8005356:	b299      	uxth	r1, r3
 8005358:	b909      	cbnz	r1, 800535e <__lo0bits+0x2a>
 800535a:	0c1b      	lsrs	r3, r3, #16
 800535c:	2210      	movs	r2, #16
 800535e:	b2d9      	uxtb	r1, r3
 8005360:	b909      	cbnz	r1, 8005366 <__lo0bits+0x32>
 8005362:	3208      	adds	r2, #8
 8005364:	0a1b      	lsrs	r3, r3, #8
 8005366:	0719      	lsls	r1, r3, #28
 8005368:	bf04      	itt	eq
 800536a:	091b      	lsreq	r3, r3, #4
 800536c:	3204      	addeq	r2, #4
 800536e:	0799      	lsls	r1, r3, #30
 8005370:	bf04      	itt	eq
 8005372:	089b      	lsreq	r3, r3, #2
 8005374:	3202      	addeq	r2, #2
 8005376:	07d9      	lsls	r1, r3, #31
 8005378:	d403      	bmi.n	8005382 <__lo0bits+0x4e>
 800537a:	085b      	lsrs	r3, r3, #1
 800537c:	f102 0201 	add.w	r2, r2, #1
 8005380:	d003      	beq.n	800538a <__lo0bits+0x56>
 8005382:	6003      	str	r3, [r0, #0]
 8005384:	e7e5      	b.n	8005352 <__lo0bits+0x1e>
 8005386:	2200      	movs	r2, #0
 8005388:	e7e3      	b.n	8005352 <__lo0bits+0x1e>
 800538a:	2220      	movs	r2, #32
 800538c:	e7e1      	b.n	8005352 <__lo0bits+0x1e>
	...

08005390 <__i2b>:
 8005390:	b510      	push	{r4, lr}
 8005392:	460c      	mov	r4, r1
 8005394:	2101      	movs	r1, #1
 8005396:	f7ff ff05 	bl	80051a4 <_Balloc>
 800539a:	4602      	mov	r2, r0
 800539c:	b928      	cbnz	r0, 80053aa <__i2b+0x1a>
 800539e:	4b05      	ldr	r3, [pc, #20]	; (80053b4 <__i2b+0x24>)
 80053a0:	4805      	ldr	r0, [pc, #20]	; (80053b8 <__i2b+0x28>)
 80053a2:	f240 1145 	movw	r1, #325	; 0x145
 80053a6:	f000 fd0d 	bl	8005dc4 <__assert_func>
 80053aa:	2301      	movs	r3, #1
 80053ac:	6144      	str	r4, [r0, #20]
 80053ae:	6103      	str	r3, [r0, #16]
 80053b0:	bd10      	pop	{r4, pc}
 80053b2:	bf00      	nop
 80053b4:	08006064 	.word	0x08006064
 80053b8:	08006075 	.word	0x08006075

080053bc <__multiply>:
 80053bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053c0:	4691      	mov	r9, r2
 80053c2:	690a      	ldr	r2, [r1, #16]
 80053c4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	bfb8      	it	lt
 80053cc:	460b      	movlt	r3, r1
 80053ce:	460c      	mov	r4, r1
 80053d0:	bfbc      	itt	lt
 80053d2:	464c      	movlt	r4, r9
 80053d4:	4699      	movlt	r9, r3
 80053d6:	6927      	ldr	r7, [r4, #16]
 80053d8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80053dc:	68a3      	ldr	r3, [r4, #8]
 80053de:	6861      	ldr	r1, [r4, #4]
 80053e0:	eb07 060a 	add.w	r6, r7, sl
 80053e4:	42b3      	cmp	r3, r6
 80053e6:	b085      	sub	sp, #20
 80053e8:	bfb8      	it	lt
 80053ea:	3101      	addlt	r1, #1
 80053ec:	f7ff feda 	bl	80051a4 <_Balloc>
 80053f0:	b930      	cbnz	r0, 8005400 <__multiply+0x44>
 80053f2:	4602      	mov	r2, r0
 80053f4:	4b44      	ldr	r3, [pc, #272]	; (8005508 <__multiply+0x14c>)
 80053f6:	4845      	ldr	r0, [pc, #276]	; (800550c <__multiply+0x150>)
 80053f8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80053fc:	f000 fce2 	bl	8005dc4 <__assert_func>
 8005400:	f100 0514 	add.w	r5, r0, #20
 8005404:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005408:	462b      	mov	r3, r5
 800540a:	2200      	movs	r2, #0
 800540c:	4543      	cmp	r3, r8
 800540e:	d321      	bcc.n	8005454 <__multiply+0x98>
 8005410:	f104 0314 	add.w	r3, r4, #20
 8005414:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005418:	f109 0314 	add.w	r3, r9, #20
 800541c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005420:	9202      	str	r2, [sp, #8]
 8005422:	1b3a      	subs	r2, r7, r4
 8005424:	3a15      	subs	r2, #21
 8005426:	f022 0203 	bic.w	r2, r2, #3
 800542a:	3204      	adds	r2, #4
 800542c:	f104 0115 	add.w	r1, r4, #21
 8005430:	428f      	cmp	r7, r1
 8005432:	bf38      	it	cc
 8005434:	2204      	movcc	r2, #4
 8005436:	9201      	str	r2, [sp, #4]
 8005438:	9a02      	ldr	r2, [sp, #8]
 800543a:	9303      	str	r3, [sp, #12]
 800543c:	429a      	cmp	r2, r3
 800543e:	d80c      	bhi.n	800545a <__multiply+0x9e>
 8005440:	2e00      	cmp	r6, #0
 8005442:	dd03      	ble.n	800544c <__multiply+0x90>
 8005444:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005448:	2b00      	cmp	r3, #0
 800544a:	d05b      	beq.n	8005504 <__multiply+0x148>
 800544c:	6106      	str	r6, [r0, #16]
 800544e:	b005      	add	sp, #20
 8005450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005454:	f843 2b04 	str.w	r2, [r3], #4
 8005458:	e7d8      	b.n	800540c <__multiply+0x50>
 800545a:	f8b3 a000 	ldrh.w	sl, [r3]
 800545e:	f1ba 0f00 	cmp.w	sl, #0
 8005462:	d024      	beq.n	80054ae <__multiply+0xf2>
 8005464:	f104 0e14 	add.w	lr, r4, #20
 8005468:	46a9      	mov	r9, r5
 800546a:	f04f 0c00 	mov.w	ip, #0
 800546e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005472:	f8d9 1000 	ldr.w	r1, [r9]
 8005476:	fa1f fb82 	uxth.w	fp, r2
 800547a:	b289      	uxth	r1, r1
 800547c:	fb0a 110b 	mla	r1, sl, fp, r1
 8005480:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005484:	f8d9 2000 	ldr.w	r2, [r9]
 8005488:	4461      	add	r1, ip
 800548a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800548e:	fb0a c20b 	mla	r2, sl, fp, ip
 8005492:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005496:	b289      	uxth	r1, r1
 8005498:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800549c:	4577      	cmp	r7, lr
 800549e:	f849 1b04 	str.w	r1, [r9], #4
 80054a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80054a6:	d8e2      	bhi.n	800546e <__multiply+0xb2>
 80054a8:	9a01      	ldr	r2, [sp, #4]
 80054aa:	f845 c002 	str.w	ip, [r5, r2]
 80054ae:	9a03      	ldr	r2, [sp, #12]
 80054b0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80054b4:	3304      	adds	r3, #4
 80054b6:	f1b9 0f00 	cmp.w	r9, #0
 80054ba:	d021      	beq.n	8005500 <__multiply+0x144>
 80054bc:	6829      	ldr	r1, [r5, #0]
 80054be:	f104 0c14 	add.w	ip, r4, #20
 80054c2:	46ae      	mov	lr, r5
 80054c4:	f04f 0a00 	mov.w	sl, #0
 80054c8:	f8bc b000 	ldrh.w	fp, [ip]
 80054cc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80054d0:	fb09 220b 	mla	r2, r9, fp, r2
 80054d4:	4452      	add	r2, sl
 80054d6:	b289      	uxth	r1, r1
 80054d8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80054dc:	f84e 1b04 	str.w	r1, [lr], #4
 80054e0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80054e4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80054e8:	f8be 1000 	ldrh.w	r1, [lr]
 80054ec:	fb09 110a 	mla	r1, r9, sl, r1
 80054f0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80054f4:	4567      	cmp	r7, ip
 80054f6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80054fa:	d8e5      	bhi.n	80054c8 <__multiply+0x10c>
 80054fc:	9a01      	ldr	r2, [sp, #4]
 80054fe:	50a9      	str	r1, [r5, r2]
 8005500:	3504      	adds	r5, #4
 8005502:	e799      	b.n	8005438 <__multiply+0x7c>
 8005504:	3e01      	subs	r6, #1
 8005506:	e79b      	b.n	8005440 <__multiply+0x84>
 8005508:	08006064 	.word	0x08006064
 800550c:	08006075 	.word	0x08006075

08005510 <__pow5mult>:
 8005510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005514:	4615      	mov	r5, r2
 8005516:	f012 0203 	ands.w	r2, r2, #3
 800551a:	4606      	mov	r6, r0
 800551c:	460f      	mov	r7, r1
 800551e:	d007      	beq.n	8005530 <__pow5mult+0x20>
 8005520:	4c25      	ldr	r4, [pc, #148]	; (80055b8 <__pow5mult+0xa8>)
 8005522:	3a01      	subs	r2, #1
 8005524:	2300      	movs	r3, #0
 8005526:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800552a:	f7ff fe9d 	bl	8005268 <__multadd>
 800552e:	4607      	mov	r7, r0
 8005530:	10ad      	asrs	r5, r5, #2
 8005532:	d03d      	beq.n	80055b0 <__pow5mult+0xa0>
 8005534:	69f4      	ldr	r4, [r6, #28]
 8005536:	b97c      	cbnz	r4, 8005558 <__pow5mult+0x48>
 8005538:	2010      	movs	r0, #16
 800553a:	f7ff fd7f 	bl	800503c <malloc>
 800553e:	4602      	mov	r2, r0
 8005540:	61f0      	str	r0, [r6, #28]
 8005542:	b928      	cbnz	r0, 8005550 <__pow5mult+0x40>
 8005544:	4b1d      	ldr	r3, [pc, #116]	; (80055bc <__pow5mult+0xac>)
 8005546:	481e      	ldr	r0, [pc, #120]	; (80055c0 <__pow5mult+0xb0>)
 8005548:	f240 11b3 	movw	r1, #435	; 0x1b3
 800554c:	f000 fc3a 	bl	8005dc4 <__assert_func>
 8005550:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005554:	6004      	str	r4, [r0, #0]
 8005556:	60c4      	str	r4, [r0, #12]
 8005558:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800555c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005560:	b94c      	cbnz	r4, 8005576 <__pow5mult+0x66>
 8005562:	f240 2171 	movw	r1, #625	; 0x271
 8005566:	4630      	mov	r0, r6
 8005568:	f7ff ff12 	bl	8005390 <__i2b>
 800556c:	2300      	movs	r3, #0
 800556e:	f8c8 0008 	str.w	r0, [r8, #8]
 8005572:	4604      	mov	r4, r0
 8005574:	6003      	str	r3, [r0, #0]
 8005576:	f04f 0900 	mov.w	r9, #0
 800557a:	07eb      	lsls	r3, r5, #31
 800557c:	d50a      	bpl.n	8005594 <__pow5mult+0x84>
 800557e:	4639      	mov	r1, r7
 8005580:	4622      	mov	r2, r4
 8005582:	4630      	mov	r0, r6
 8005584:	f7ff ff1a 	bl	80053bc <__multiply>
 8005588:	4639      	mov	r1, r7
 800558a:	4680      	mov	r8, r0
 800558c:	4630      	mov	r0, r6
 800558e:	f7ff fe49 	bl	8005224 <_Bfree>
 8005592:	4647      	mov	r7, r8
 8005594:	106d      	asrs	r5, r5, #1
 8005596:	d00b      	beq.n	80055b0 <__pow5mult+0xa0>
 8005598:	6820      	ldr	r0, [r4, #0]
 800559a:	b938      	cbnz	r0, 80055ac <__pow5mult+0x9c>
 800559c:	4622      	mov	r2, r4
 800559e:	4621      	mov	r1, r4
 80055a0:	4630      	mov	r0, r6
 80055a2:	f7ff ff0b 	bl	80053bc <__multiply>
 80055a6:	6020      	str	r0, [r4, #0]
 80055a8:	f8c0 9000 	str.w	r9, [r0]
 80055ac:	4604      	mov	r4, r0
 80055ae:	e7e4      	b.n	800557a <__pow5mult+0x6a>
 80055b0:	4638      	mov	r0, r7
 80055b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055b6:	bf00      	nop
 80055b8:	080061c0 	.word	0x080061c0
 80055bc:	08005ff5 	.word	0x08005ff5
 80055c0:	08006075 	.word	0x08006075

080055c4 <__lshift>:
 80055c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055c8:	460c      	mov	r4, r1
 80055ca:	6849      	ldr	r1, [r1, #4]
 80055cc:	6923      	ldr	r3, [r4, #16]
 80055ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80055d2:	68a3      	ldr	r3, [r4, #8]
 80055d4:	4607      	mov	r7, r0
 80055d6:	4691      	mov	r9, r2
 80055d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80055dc:	f108 0601 	add.w	r6, r8, #1
 80055e0:	42b3      	cmp	r3, r6
 80055e2:	db0b      	blt.n	80055fc <__lshift+0x38>
 80055e4:	4638      	mov	r0, r7
 80055e6:	f7ff fddd 	bl	80051a4 <_Balloc>
 80055ea:	4605      	mov	r5, r0
 80055ec:	b948      	cbnz	r0, 8005602 <__lshift+0x3e>
 80055ee:	4602      	mov	r2, r0
 80055f0:	4b28      	ldr	r3, [pc, #160]	; (8005694 <__lshift+0xd0>)
 80055f2:	4829      	ldr	r0, [pc, #164]	; (8005698 <__lshift+0xd4>)
 80055f4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80055f8:	f000 fbe4 	bl	8005dc4 <__assert_func>
 80055fc:	3101      	adds	r1, #1
 80055fe:	005b      	lsls	r3, r3, #1
 8005600:	e7ee      	b.n	80055e0 <__lshift+0x1c>
 8005602:	2300      	movs	r3, #0
 8005604:	f100 0114 	add.w	r1, r0, #20
 8005608:	f100 0210 	add.w	r2, r0, #16
 800560c:	4618      	mov	r0, r3
 800560e:	4553      	cmp	r3, sl
 8005610:	db33      	blt.n	800567a <__lshift+0xb6>
 8005612:	6920      	ldr	r0, [r4, #16]
 8005614:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005618:	f104 0314 	add.w	r3, r4, #20
 800561c:	f019 091f 	ands.w	r9, r9, #31
 8005620:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005624:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005628:	d02b      	beq.n	8005682 <__lshift+0xbe>
 800562a:	f1c9 0e20 	rsb	lr, r9, #32
 800562e:	468a      	mov	sl, r1
 8005630:	2200      	movs	r2, #0
 8005632:	6818      	ldr	r0, [r3, #0]
 8005634:	fa00 f009 	lsl.w	r0, r0, r9
 8005638:	4310      	orrs	r0, r2
 800563a:	f84a 0b04 	str.w	r0, [sl], #4
 800563e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005642:	459c      	cmp	ip, r3
 8005644:	fa22 f20e 	lsr.w	r2, r2, lr
 8005648:	d8f3      	bhi.n	8005632 <__lshift+0x6e>
 800564a:	ebac 0304 	sub.w	r3, ip, r4
 800564e:	3b15      	subs	r3, #21
 8005650:	f023 0303 	bic.w	r3, r3, #3
 8005654:	3304      	adds	r3, #4
 8005656:	f104 0015 	add.w	r0, r4, #21
 800565a:	4584      	cmp	ip, r0
 800565c:	bf38      	it	cc
 800565e:	2304      	movcc	r3, #4
 8005660:	50ca      	str	r2, [r1, r3]
 8005662:	b10a      	cbz	r2, 8005668 <__lshift+0xa4>
 8005664:	f108 0602 	add.w	r6, r8, #2
 8005668:	3e01      	subs	r6, #1
 800566a:	4638      	mov	r0, r7
 800566c:	612e      	str	r6, [r5, #16]
 800566e:	4621      	mov	r1, r4
 8005670:	f7ff fdd8 	bl	8005224 <_Bfree>
 8005674:	4628      	mov	r0, r5
 8005676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800567a:	f842 0f04 	str.w	r0, [r2, #4]!
 800567e:	3301      	adds	r3, #1
 8005680:	e7c5      	b.n	800560e <__lshift+0x4a>
 8005682:	3904      	subs	r1, #4
 8005684:	f853 2b04 	ldr.w	r2, [r3], #4
 8005688:	f841 2f04 	str.w	r2, [r1, #4]!
 800568c:	459c      	cmp	ip, r3
 800568e:	d8f9      	bhi.n	8005684 <__lshift+0xc0>
 8005690:	e7ea      	b.n	8005668 <__lshift+0xa4>
 8005692:	bf00      	nop
 8005694:	08006064 	.word	0x08006064
 8005698:	08006075 	.word	0x08006075

0800569c <__mcmp>:
 800569c:	b530      	push	{r4, r5, lr}
 800569e:	6902      	ldr	r2, [r0, #16]
 80056a0:	690c      	ldr	r4, [r1, #16]
 80056a2:	1b12      	subs	r2, r2, r4
 80056a4:	d10e      	bne.n	80056c4 <__mcmp+0x28>
 80056a6:	f100 0314 	add.w	r3, r0, #20
 80056aa:	3114      	adds	r1, #20
 80056ac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80056b0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80056b4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80056b8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80056bc:	42a5      	cmp	r5, r4
 80056be:	d003      	beq.n	80056c8 <__mcmp+0x2c>
 80056c0:	d305      	bcc.n	80056ce <__mcmp+0x32>
 80056c2:	2201      	movs	r2, #1
 80056c4:	4610      	mov	r0, r2
 80056c6:	bd30      	pop	{r4, r5, pc}
 80056c8:	4283      	cmp	r3, r0
 80056ca:	d3f3      	bcc.n	80056b4 <__mcmp+0x18>
 80056cc:	e7fa      	b.n	80056c4 <__mcmp+0x28>
 80056ce:	f04f 32ff 	mov.w	r2, #4294967295
 80056d2:	e7f7      	b.n	80056c4 <__mcmp+0x28>

080056d4 <__mdiff>:
 80056d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056d8:	460c      	mov	r4, r1
 80056da:	4606      	mov	r6, r0
 80056dc:	4611      	mov	r1, r2
 80056de:	4620      	mov	r0, r4
 80056e0:	4690      	mov	r8, r2
 80056e2:	f7ff ffdb 	bl	800569c <__mcmp>
 80056e6:	1e05      	subs	r5, r0, #0
 80056e8:	d110      	bne.n	800570c <__mdiff+0x38>
 80056ea:	4629      	mov	r1, r5
 80056ec:	4630      	mov	r0, r6
 80056ee:	f7ff fd59 	bl	80051a4 <_Balloc>
 80056f2:	b930      	cbnz	r0, 8005702 <__mdiff+0x2e>
 80056f4:	4b3a      	ldr	r3, [pc, #232]	; (80057e0 <__mdiff+0x10c>)
 80056f6:	4602      	mov	r2, r0
 80056f8:	f240 2137 	movw	r1, #567	; 0x237
 80056fc:	4839      	ldr	r0, [pc, #228]	; (80057e4 <__mdiff+0x110>)
 80056fe:	f000 fb61 	bl	8005dc4 <__assert_func>
 8005702:	2301      	movs	r3, #1
 8005704:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005708:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800570c:	bfa4      	itt	ge
 800570e:	4643      	movge	r3, r8
 8005710:	46a0      	movge	r8, r4
 8005712:	4630      	mov	r0, r6
 8005714:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005718:	bfa6      	itte	ge
 800571a:	461c      	movge	r4, r3
 800571c:	2500      	movge	r5, #0
 800571e:	2501      	movlt	r5, #1
 8005720:	f7ff fd40 	bl	80051a4 <_Balloc>
 8005724:	b920      	cbnz	r0, 8005730 <__mdiff+0x5c>
 8005726:	4b2e      	ldr	r3, [pc, #184]	; (80057e0 <__mdiff+0x10c>)
 8005728:	4602      	mov	r2, r0
 800572a:	f240 2145 	movw	r1, #581	; 0x245
 800572e:	e7e5      	b.n	80056fc <__mdiff+0x28>
 8005730:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005734:	6926      	ldr	r6, [r4, #16]
 8005736:	60c5      	str	r5, [r0, #12]
 8005738:	f104 0914 	add.w	r9, r4, #20
 800573c:	f108 0514 	add.w	r5, r8, #20
 8005740:	f100 0e14 	add.w	lr, r0, #20
 8005744:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005748:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800574c:	f108 0210 	add.w	r2, r8, #16
 8005750:	46f2      	mov	sl, lr
 8005752:	2100      	movs	r1, #0
 8005754:	f859 3b04 	ldr.w	r3, [r9], #4
 8005758:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800575c:	fa11 f88b 	uxtah	r8, r1, fp
 8005760:	b299      	uxth	r1, r3
 8005762:	0c1b      	lsrs	r3, r3, #16
 8005764:	eba8 0801 	sub.w	r8, r8, r1
 8005768:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800576c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005770:	fa1f f888 	uxth.w	r8, r8
 8005774:	1419      	asrs	r1, r3, #16
 8005776:	454e      	cmp	r6, r9
 8005778:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800577c:	f84a 3b04 	str.w	r3, [sl], #4
 8005780:	d8e8      	bhi.n	8005754 <__mdiff+0x80>
 8005782:	1b33      	subs	r3, r6, r4
 8005784:	3b15      	subs	r3, #21
 8005786:	f023 0303 	bic.w	r3, r3, #3
 800578a:	3304      	adds	r3, #4
 800578c:	3415      	adds	r4, #21
 800578e:	42a6      	cmp	r6, r4
 8005790:	bf38      	it	cc
 8005792:	2304      	movcc	r3, #4
 8005794:	441d      	add	r5, r3
 8005796:	4473      	add	r3, lr
 8005798:	469e      	mov	lr, r3
 800579a:	462e      	mov	r6, r5
 800579c:	4566      	cmp	r6, ip
 800579e:	d30e      	bcc.n	80057be <__mdiff+0xea>
 80057a0:	f10c 0203 	add.w	r2, ip, #3
 80057a4:	1b52      	subs	r2, r2, r5
 80057a6:	f022 0203 	bic.w	r2, r2, #3
 80057aa:	3d03      	subs	r5, #3
 80057ac:	45ac      	cmp	ip, r5
 80057ae:	bf38      	it	cc
 80057b0:	2200      	movcc	r2, #0
 80057b2:	4413      	add	r3, r2
 80057b4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80057b8:	b17a      	cbz	r2, 80057da <__mdiff+0x106>
 80057ba:	6107      	str	r7, [r0, #16]
 80057bc:	e7a4      	b.n	8005708 <__mdiff+0x34>
 80057be:	f856 8b04 	ldr.w	r8, [r6], #4
 80057c2:	fa11 f288 	uxtah	r2, r1, r8
 80057c6:	1414      	asrs	r4, r2, #16
 80057c8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80057cc:	b292      	uxth	r2, r2
 80057ce:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80057d2:	f84e 2b04 	str.w	r2, [lr], #4
 80057d6:	1421      	asrs	r1, r4, #16
 80057d8:	e7e0      	b.n	800579c <__mdiff+0xc8>
 80057da:	3f01      	subs	r7, #1
 80057dc:	e7ea      	b.n	80057b4 <__mdiff+0xe0>
 80057de:	bf00      	nop
 80057e0:	08006064 	.word	0x08006064
 80057e4:	08006075 	.word	0x08006075

080057e8 <__d2b>:
 80057e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80057ec:	460f      	mov	r7, r1
 80057ee:	2101      	movs	r1, #1
 80057f0:	ec59 8b10 	vmov	r8, r9, d0
 80057f4:	4616      	mov	r6, r2
 80057f6:	f7ff fcd5 	bl	80051a4 <_Balloc>
 80057fa:	4604      	mov	r4, r0
 80057fc:	b930      	cbnz	r0, 800580c <__d2b+0x24>
 80057fe:	4602      	mov	r2, r0
 8005800:	4b24      	ldr	r3, [pc, #144]	; (8005894 <__d2b+0xac>)
 8005802:	4825      	ldr	r0, [pc, #148]	; (8005898 <__d2b+0xb0>)
 8005804:	f240 310f 	movw	r1, #783	; 0x30f
 8005808:	f000 fadc 	bl	8005dc4 <__assert_func>
 800580c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005810:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005814:	bb2d      	cbnz	r5, 8005862 <__d2b+0x7a>
 8005816:	9301      	str	r3, [sp, #4]
 8005818:	f1b8 0300 	subs.w	r3, r8, #0
 800581c:	d026      	beq.n	800586c <__d2b+0x84>
 800581e:	4668      	mov	r0, sp
 8005820:	9300      	str	r3, [sp, #0]
 8005822:	f7ff fd87 	bl	8005334 <__lo0bits>
 8005826:	e9dd 1200 	ldrd	r1, r2, [sp]
 800582a:	b1e8      	cbz	r0, 8005868 <__d2b+0x80>
 800582c:	f1c0 0320 	rsb	r3, r0, #32
 8005830:	fa02 f303 	lsl.w	r3, r2, r3
 8005834:	430b      	orrs	r3, r1
 8005836:	40c2      	lsrs	r2, r0
 8005838:	6163      	str	r3, [r4, #20]
 800583a:	9201      	str	r2, [sp, #4]
 800583c:	9b01      	ldr	r3, [sp, #4]
 800583e:	61a3      	str	r3, [r4, #24]
 8005840:	2b00      	cmp	r3, #0
 8005842:	bf14      	ite	ne
 8005844:	2202      	movne	r2, #2
 8005846:	2201      	moveq	r2, #1
 8005848:	6122      	str	r2, [r4, #16]
 800584a:	b1bd      	cbz	r5, 800587c <__d2b+0x94>
 800584c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005850:	4405      	add	r5, r0
 8005852:	603d      	str	r5, [r7, #0]
 8005854:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005858:	6030      	str	r0, [r6, #0]
 800585a:	4620      	mov	r0, r4
 800585c:	b003      	add	sp, #12
 800585e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005862:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005866:	e7d6      	b.n	8005816 <__d2b+0x2e>
 8005868:	6161      	str	r1, [r4, #20]
 800586a:	e7e7      	b.n	800583c <__d2b+0x54>
 800586c:	a801      	add	r0, sp, #4
 800586e:	f7ff fd61 	bl	8005334 <__lo0bits>
 8005872:	9b01      	ldr	r3, [sp, #4]
 8005874:	6163      	str	r3, [r4, #20]
 8005876:	3020      	adds	r0, #32
 8005878:	2201      	movs	r2, #1
 800587a:	e7e5      	b.n	8005848 <__d2b+0x60>
 800587c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005880:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005884:	6038      	str	r0, [r7, #0]
 8005886:	6918      	ldr	r0, [r3, #16]
 8005888:	f7ff fd34 	bl	80052f4 <__hi0bits>
 800588c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005890:	e7e2      	b.n	8005858 <__d2b+0x70>
 8005892:	bf00      	nop
 8005894:	08006064 	.word	0x08006064
 8005898:	08006075 	.word	0x08006075

0800589c <__sfputc_r>:
 800589c:	6893      	ldr	r3, [r2, #8]
 800589e:	3b01      	subs	r3, #1
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	b410      	push	{r4}
 80058a4:	6093      	str	r3, [r2, #8]
 80058a6:	da08      	bge.n	80058ba <__sfputc_r+0x1e>
 80058a8:	6994      	ldr	r4, [r2, #24]
 80058aa:	42a3      	cmp	r3, r4
 80058ac:	db01      	blt.n	80058b2 <__sfputc_r+0x16>
 80058ae:	290a      	cmp	r1, #10
 80058b0:	d103      	bne.n	80058ba <__sfputc_r+0x1e>
 80058b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80058b6:	f7fe bbe8 	b.w	800408a <__swbuf_r>
 80058ba:	6813      	ldr	r3, [r2, #0]
 80058bc:	1c58      	adds	r0, r3, #1
 80058be:	6010      	str	r0, [r2, #0]
 80058c0:	7019      	strb	r1, [r3, #0]
 80058c2:	4608      	mov	r0, r1
 80058c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80058c8:	4770      	bx	lr

080058ca <__sfputs_r>:
 80058ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058cc:	4606      	mov	r6, r0
 80058ce:	460f      	mov	r7, r1
 80058d0:	4614      	mov	r4, r2
 80058d2:	18d5      	adds	r5, r2, r3
 80058d4:	42ac      	cmp	r4, r5
 80058d6:	d101      	bne.n	80058dc <__sfputs_r+0x12>
 80058d8:	2000      	movs	r0, #0
 80058da:	e007      	b.n	80058ec <__sfputs_r+0x22>
 80058dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058e0:	463a      	mov	r2, r7
 80058e2:	4630      	mov	r0, r6
 80058e4:	f7ff ffda 	bl	800589c <__sfputc_r>
 80058e8:	1c43      	adds	r3, r0, #1
 80058ea:	d1f3      	bne.n	80058d4 <__sfputs_r+0xa>
 80058ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080058f0 <_vfiprintf_r>:
 80058f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058f4:	460d      	mov	r5, r1
 80058f6:	b09d      	sub	sp, #116	; 0x74
 80058f8:	4614      	mov	r4, r2
 80058fa:	4698      	mov	r8, r3
 80058fc:	4606      	mov	r6, r0
 80058fe:	b118      	cbz	r0, 8005908 <_vfiprintf_r+0x18>
 8005900:	6a03      	ldr	r3, [r0, #32]
 8005902:	b90b      	cbnz	r3, 8005908 <_vfiprintf_r+0x18>
 8005904:	f7fe fada 	bl	8003ebc <__sinit>
 8005908:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800590a:	07d9      	lsls	r1, r3, #31
 800590c:	d405      	bmi.n	800591a <_vfiprintf_r+0x2a>
 800590e:	89ab      	ldrh	r3, [r5, #12]
 8005910:	059a      	lsls	r2, r3, #22
 8005912:	d402      	bmi.n	800591a <_vfiprintf_r+0x2a>
 8005914:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005916:	f7fe fcc9 	bl	80042ac <__retarget_lock_acquire_recursive>
 800591a:	89ab      	ldrh	r3, [r5, #12]
 800591c:	071b      	lsls	r3, r3, #28
 800591e:	d501      	bpl.n	8005924 <_vfiprintf_r+0x34>
 8005920:	692b      	ldr	r3, [r5, #16]
 8005922:	b99b      	cbnz	r3, 800594c <_vfiprintf_r+0x5c>
 8005924:	4629      	mov	r1, r5
 8005926:	4630      	mov	r0, r6
 8005928:	f7fe fbec 	bl	8004104 <__swsetup_r>
 800592c:	b170      	cbz	r0, 800594c <_vfiprintf_r+0x5c>
 800592e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005930:	07dc      	lsls	r4, r3, #31
 8005932:	d504      	bpl.n	800593e <_vfiprintf_r+0x4e>
 8005934:	f04f 30ff 	mov.w	r0, #4294967295
 8005938:	b01d      	add	sp, #116	; 0x74
 800593a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800593e:	89ab      	ldrh	r3, [r5, #12]
 8005940:	0598      	lsls	r0, r3, #22
 8005942:	d4f7      	bmi.n	8005934 <_vfiprintf_r+0x44>
 8005944:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005946:	f7fe fcb2 	bl	80042ae <__retarget_lock_release_recursive>
 800594a:	e7f3      	b.n	8005934 <_vfiprintf_r+0x44>
 800594c:	2300      	movs	r3, #0
 800594e:	9309      	str	r3, [sp, #36]	; 0x24
 8005950:	2320      	movs	r3, #32
 8005952:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005956:	f8cd 800c 	str.w	r8, [sp, #12]
 800595a:	2330      	movs	r3, #48	; 0x30
 800595c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005b10 <_vfiprintf_r+0x220>
 8005960:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005964:	f04f 0901 	mov.w	r9, #1
 8005968:	4623      	mov	r3, r4
 800596a:	469a      	mov	sl, r3
 800596c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005970:	b10a      	cbz	r2, 8005976 <_vfiprintf_r+0x86>
 8005972:	2a25      	cmp	r2, #37	; 0x25
 8005974:	d1f9      	bne.n	800596a <_vfiprintf_r+0x7a>
 8005976:	ebba 0b04 	subs.w	fp, sl, r4
 800597a:	d00b      	beq.n	8005994 <_vfiprintf_r+0xa4>
 800597c:	465b      	mov	r3, fp
 800597e:	4622      	mov	r2, r4
 8005980:	4629      	mov	r1, r5
 8005982:	4630      	mov	r0, r6
 8005984:	f7ff ffa1 	bl	80058ca <__sfputs_r>
 8005988:	3001      	adds	r0, #1
 800598a:	f000 80a9 	beq.w	8005ae0 <_vfiprintf_r+0x1f0>
 800598e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005990:	445a      	add	r2, fp
 8005992:	9209      	str	r2, [sp, #36]	; 0x24
 8005994:	f89a 3000 	ldrb.w	r3, [sl]
 8005998:	2b00      	cmp	r3, #0
 800599a:	f000 80a1 	beq.w	8005ae0 <_vfiprintf_r+0x1f0>
 800599e:	2300      	movs	r3, #0
 80059a0:	f04f 32ff 	mov.w	r2, #4294967295
 80059a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80059a8:	f10a 0a01 	add.w	sl, sl, #1
 80059ac:	9304      	str	r3, [sp, #16]
 80059ae:	9307      	str	r3, [sp, #28]
 80059b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80059b4:	931a      	str	r3, [sp, #104]	; 0x68
 80059b6:	4654      	mov	r4, sl
 80059b8:	2205      	movs	r2, #5
 80059ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059be:	4854      	ldr	r0, [pc, #336]	; (8005b10 <_vfiprintf_r+0x220>)
 80059c0:	f7fa fc0e 	bl	80001e0 <memchr>
 80059c4:	9a04      	ldr	r2, [sp, #16]
 80059c6:	b9d8      	cbnz	r0, 8005a00 <_vfiprintf_r+0x110>
 80059c8:	06d1      	lsls	r1, r2, #27
 80059ca:	bf44      	itt	mi
 80059cc:	2320      	movmi	r3, #32
 80059ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059d2:	0713      	lsls	r3, r2, #28
 80059d4:	bf44      	itt	mi
 80059d6:	232b      	movmi	r3, #43	; 0x2b
 80059d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059dc:	f89a 3000 	ldrb.w	r3, [sl]
 80059e0:	2b2a      	cmp	r3, #42	; 0x2a
 80059e2:	d015      	beq.n	8005a10 <_vfiprintf_r+0x120>
 80059e4:	9a07      	ldr	r2, [sp, #28]
 80059e6:	4654      	mov	r4, sl
 80059e8:	2000      	movs	r0, #0
 80059ea:	f04f 0c0a 	mov.w	ip, #10
 80059ee:	4621      	mov	r1, r4
 80059f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80059f4:	3b30      	subs	r3, #48	; 0x30
 80059f6:	2b09      	cmp	r3, #9
 80059f8:	d94d      	bls.n	8005a96 <_vfiprintf_r+0x1a6>
 80059fa:	b1b0      	cbz	r0, 8005a2a <_vfiprintf_r+0x13a>
 80059fc:	9207      	str	r2, [sp, #28]
 80059fe:	e014      	b.n	8005a2a <_vfiprintf_r+0x13a>
 8005a00:	eba0 0308 	sub.w	r3, r0, r8
 8005a04:	fa09 f303 	lsl.w	r3, r9, r3
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	9304      	str	r3, [sp, #16]
 8005a0c:	46a2      	mov	sl, r4
 8005a0e:	e7d2      	b.n	80059b6 <_vfiprintf_r+0xc6>
 8005a10:	9b03      	ldr	r3, [sp, #12]
 8005a12:	1d19      	adds	r1, r3, #4
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	9103      	str	r1, [sp, #12]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	bfbb      	ittet	lt
 8005a1c:	425b      	neglt	r3, r3
 8005a1e:	f042 0202 	orrlt.w	r2, r2, #2
 8005a22:	9307      	strge	r3, [sp, #28]
 8005a24:	9307      	strlt	r3, [sp, #28]
 8005a26:	bfb8      	it	lt
 8005a28:	9204      	strlt	r2, [sp, #16]
 8005a2a:	7823      	ldrb	r3, [r4, #0]
 8005a2c:	2b2e      	cmp	r3, #46	; 0x2e
 8005a2e:	d10c      	bne.n	8005a4a <_vfiprintf_r+0x15a>
 8005a30:	7863      	ldrb	r3, [r4, #1]
 8005a32:	2b2a      	cmp	r3, #42	; 0x2a
 8005a34:	d134      	bne.n	8005aa0 <_vfiprintf_r+0x1b0>
 8005a36:	9b03      	ldr	r3, [sp, #12]
 8005a38:	1d1a      	adds	r2, r3, #4
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	9203      	str	r2, [sp, #12]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	bfb8      	it	lt
 8005a42:	f04f 33ff 	movlt.w	r3, #4294967295
 8005a46:	3402      	adds	r4, #2
 8005a48:	9305      	str	r3, [sp, #20]
 8005a4a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005b20 <_vfiprintf_r+0x230>
 8005a4e:	7821      	ldrb	r1, [r4, #0]
 8005a50:	2203      	movs	r2, #3
 8005a52:	4650      	mov	r0, sl
 8005a54:	f7fa fbc4 	bl	80001e0 <memchr>
 8005a58:	b138      	cbz	r0, 8005a6a <_vfiprintf_r+0x17a>
 8005a5a:	9b04      	ldr	r3, [sp, #16]
 8005a5c:	eba0 000a 	sub.w	r0, r0, sl
 8005a60:	2240      	movs	r2, #64	; 0x40
 8005a62:	4082      	lsls	r2, r0
 8005a64:	4313      	orrs	r3, r2
 8005a66:	3401      	adds	r4, #1
 8005a68:	9304      	str	r3, [sp, #16]
 8005a6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a6e:	4829      	ldr	r0, [pc, #164]	; (8005b14 <_vfiprintf_r+0x224>)
 8005a70:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a74:	2206      	movs	r2, #6
 8005a76:	f7fa fbb3 	bl	80001e0 <memchr>
 8005a7a:	2800      	cmp	r0, #0
 8005a7c:	d03f      	beq.n	8005afe <_vfiprintf_r+0x20e>
 8005a7e:	4b26      	ldr	r3, [pc, #152]	; (8005b18 <_vfiprintf_r+0x228>)
 8005a80:	bb1b      	cbnz	r3, 8005aca <_vfiprintf_r+0x1da>
 8005a82:	9b03      	ldr	r3, [sp, #12]
 8005a84:	3307      	adds	r3, #7
 8005a86:	f023 0307 	bic.w	r3, r3, #7
 8005a8a:	3308      	adds	r3, #8
 8005a8c:	9303      	str	r3, [sp, #12]
 8005a8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a90:	443b      	add	r3, r7
 8005a92:	9309      	str	r3, [sp, #36]	; 0x24
 8005a94:	e768      	b.n	8005968 <_vfiprintf_r+0x78>
 8005a96:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a9a:	460c      	mov	r4, r1
 8005a9c:	2001      	movs	r0, #1
 8005a9e:	e7a6      	b.n	80059ee <_vfiprintf_r+0xfe>
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	3401      	adds	r4, #1
 8005aa4:	9305      	str	r3, [sp, #20]
 8005aa6:	4619      	mov	r1, r3
 8005aa8:	f04f 0c0a 	mov.w	ip, #10
 8005aac:	4620      	mov	r0, r4
 8005aae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ab2:	3a30      	subs	r2, #48	; 0x30
 8005ab4:	2a09      	cmp	r2, #9
 8005ab6:	d903      	bls.n	8005ac0 <_vfiprintf_r+0x1d0>
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d0c6      	beq.n	8005a4a <_vfiprintf_r+0x15a>
 8005abc:	9105      	str	r1, [sp, #20]
 8005abe:	e7c4      	b.n	8005a4a <_vfiprintf_r+0x15a>
 8005ac0:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ac4:	4604      	mov	r4, r0
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e7f0      	b.n	8005aac <_vfiprintf_r+0x1bc>
 8005aca:	ab03      	add	r3, sp, #12
 8005acc:	9300      	str	r3, [sp, #0]
 8005ace:	462a      	mov	r2, r5
 8005ad0:	4b12      	ldr	r3, [pc, #72]	; (8005b1c <_vfiprintf_r+0x22c>)
 8005ad2:	a904      	add	r1, sp, #16
 8005ad4:	4630      	mov	r0, r6
 8005ad6:	f7fd fdb1 	bl	800363c <_printf_float>
 8005ada:	4607      	mov	r7, r0
 8005adc:	1c78      	adds	r0, r7, #1
 8005ade:	d1d6      	bne.n	8005a8e <_vfiprintf_r+0x19e>
 8005ae0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005ae2:	07d9      	lsls	r1, r3, #31
 8005ae4:	d405      	bmi.n	8005af2 <_vfiprintf_r+0x202>
 8005ae6:	89ab      	ldrh	r3, [r5, #12]
 8005ae8:	059a      	lsls	r2, r3, #22
 8005aea:	d402      	bmi.n	8005af2 <_vfiprintf_r+0x202>
 8005aec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005aee:	f7fe fbde 	bl	80042ae <__retarget_lock_release_recursive>
 8005af2:	89ab      	ldrh	r3, [r5, #12]
 8005af4:	065b      	lsls	r3, r3, #25
 8005af6:	f53f af1d 	bmi.w	8005934 <_vfiprintf_r+0x44>
 8005afa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005afc:	e71c      	b.n	8005938 <_vfiprintf_r+0x48>
 8005afe:	ab03      	add	r3, sp, #12
 8005b00:	9300      	str	r3, [sp, #0]
 8005b02:	462a      	mov	r2, r5
 8005b04:	4b05      	ldr	r3, [pc, #20]	; (8005b1c <_vfiprintf_r+0x22c>)
 8005b06:	a904      	add	r1, sp, #16
 8005b08:	4630      	mov	r0, r6
 8005b0a:	f7fe f83b 	bl	8003b84 <_printf_i>
 8005b0e:	e7e4      	b.n	8005ada <_vfiprintf_r+0x1ea>
 8005b10:	080061cc 	.word	0x080061cc
 8005b14:	080061d6 	.word	0x080061d6
 8005b18:	0800363d 	.word	0x0800363d
 8005b1c:	080058cb 	.word	0x080058cb
 8005b20:	080061d2 	.word	0x080061d2

08005b24 <__sflush_r>:
 8005b24:	898a      	ldrh	r2, [r1, #12]
 8005b26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b2a:	4605      	mov	r5, r0
 8005b2c:	0710      	lsls	r0, r2, #28
 8005b2e:	460c      	mov	r4, r1
 8005b30:	d458      	bmi.n	8005be4 <__sflush_r+0xc0>
 8005b32:	684b      	ldr	r3, [r1, #4]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	dc05      	bgt.n	8005b44 <__sflush_r+0x20>
 8005b38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	dc02      	bgt.n	8005b44 <__sflush_r+0x20>
 8005b3e:	2000      	movs	r0, #0
 8005b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b46:	2e00      	cmp	r6, #0
 8005b48:	d0f9      	beq.n	8005b3e <__sflush_r+0x1a>
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005b50:	682f      	ldr	r7, [r5, #0]
 8005b52:	6a21      	ldr	r1, [r4, #32]
 8005b54:	602b      	str	r3, [r5, #0]
 8005b56:	d032      	beq.n	8005bbe <__sflush_r+0x9a>
 8005b58:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005b5a:	89a3      	ldrh	r3, [r4, #12]
 8005b5c:	075a      	lsls	r2, r3, #29
 8005b5e:	d505      	bpl.n	8005b6c <__sflush_r+0x48>
 8005b60:	6863      	ldr	r3, [r4, #4]
 8005b62:	1ac0      	subs	r0, r0, r3
 8005b64:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005b66:	b10b      	cbz	r3, 8005b6c <__sflush_r+0x48>
 8005b68:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b6a:	1ac0      	subs	r0, r0, r3
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	4602      	mov	r2, r0
 8005b70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b72:	6a21      	ldr	r1, [r4, #32]
 8005b74:	4628      	mov	r0, r5
 8005b76:	47b0      	blx	r6
 8005b78:	1c43      	adds	r3, r0, #1
 8005b7a:	89a3      	ldrh	r3, [r4, #12]
 8005b7c:	d106      	bne.n	8005b8c <__sflush_r+0x68>
 8005b7e:	6829      	ldr	r1, [r5, #0]
 8005b80:	291d      	cmp	r1, #29
 8005b82:	d82b      	bhi.n	8005bdc <__sflush_r+0xb8>
 8005b84:	4a29      	ldr	r2, [pc, #164]	; (8005c2c <__sflush_r+0x108>)
 8005b86:	410a      	asrs	r2, r1
 8005b88:	07d6      	lsls	r6, r2, #31
 8005b8a:	d427      	bmi.n	8005bdc <__sflush_r+0xb8>
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	6062      	str	r2, [r4, #4]
 8005b90:	04d9      	lsls	r1, r3, #19
 8005b92:	6922      	ldr	r2, [r4, #16]
 8005b94:	6022      	str	r2, [r4, #0]
 8005b96:	d504      	bpl.n	8005ba2 <__sflush_r+0x7e>
 8005b98:	1c42      	adds	r2, r0, #1
 8005b9a:	d101      	bne.n	8005ba0 <__sflush_r+0x7c>
 8005b9c:	682b      	ldr	r3, [r5, #0]
 8005b9e:	b903      	cbnz	r3, 8005ba2 <__sflush_r+0x7e>
 8005ba0:	6560      	str	r0, [r4, #84]	; 0x54
 8005ba2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ba4:	602f      	str	r7, [r5, #0]
 8005ba6:	2900      	cmp	r1, #0
 8005ba8:	d0c9      	beq.n	8005b3e <__sflush_r+0x1a>
 8005baa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005bae:	4299      	cmp	r1, r3
 8005bb0:	d002      	beq.n	8005bb8 <__sflush_r+0x94>
 8005bb2:	4628      	mov	r0, r5
 8005bb4:	f7ff f9f6 	bl	8004fa4 <_free_r>
 8005bb8:	2000      	movs	r0, #0
 8005bba:	6360      	str	r0, [r4, #52]	; 0x34
 8005bbc:	e7c0      	b.n	8005b40 <__sflush_r+0x1c>
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	4628      	mov	r0, r5
 8005bc2:	47b0      	blx	r6
 8005bc4:	1c41      	adds	r1, r0, #1
 8005bc6:	d1c8      	bne.n	8005b5a <__sflush_r+0x36>
 8005bc8:	682b      	ldr	r3, [r5, #0]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d0c5      	beq.n	8005b5a <__sflush_r+0x36>
 8005bce:	2b1d      	cmp	r3, #29
 8005bd0:	d001      	beq.n	8005bd6 <__sflush_r+0xb2>
 8005bd2:	2b16      	cmp	r3, #22
 8005bd4:	d101      	bne.n	8005bda <__sflush_r+0xb6>
 8005bd6:	602f      	str	r7, [r5, #0]
 8005bd8:	e7b1      	b.n	8005b3e <__sflush_r+0x1a>
 8005bda:	89a3      	ldrh	r3, [r4, #12]
 8005bdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005be0:	81a3      	strh	r3, [r4, #12]
 8005be2:	e7ad      	b.n	8005b40 <__sflush_r+0x1c>
 8005be4:	690f      	ldr	r7, [r1, #16]
 8005be6:	2f00      	cmp	r7, #0
 8005be8:	d0a9      	beq.n	8005b3e <__sflush_r+0x1a>
 8005bea:	0793      	lsls	r3, r2, #30
 8005bec:	680e      	ldr	r6, [r1, #0]
 8005bee:	bf08      	it	eq
 8005bf0:	694b      	ldreq	r3, [r1, #20]
 8005bf2:	600f      	str	r7, [r1, #0]
 8005bf4:	bf18      	it	ne
 8005bf6:	2300      	movne	r3, #0
 8005bf8:	eba6 0807 	sub.w	r8, r6, r7
 8005bfc:	608b      	str	r3, [r1, #8]
 8005bfe:	f1b8 0f00 	cmp.w	r8, #0
 8005c02:	dd9c      	ble.n	8005b3e <__sflush_r+0x1a>
 8005c04:	6a21      	ldr	r1, [r4, #32]
 8005c06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005c08:	4643      	mov	r3, r8
 8005c0a:	463a      	mov	r2, r7
 8005c0c:	4628      	mov	r0, r5
 8005c0e:	47b0      	blx	r6
 8005c10:	2800      	cmp	r0, #0
 8005c12:	dc06      	bgt.n	8005c22 <__sflush_r+0xfe>
 8005c14:	89a3      	ldrh	r3, [r4, #12]
 8005c16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c1a:	81a3      	strh	r3, [r4, #12]
 8005c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c20:	e78e      	b.n	8005b40 <__sflush_r+0x1c>
 8005c22:	4407      	add	r7, r0
 8005c24:	eba8 0800 	sub.w	r8, r8, r0
 8005c28:	e7e9      	b.n	8005bfe <__sflush_r+0xda>
 8005c2a:	bf00      	nop
 8005c2c:	dfbffffe 	.word	0xdfbffffe

08005c30 <_fflush_r>:
 8005c30:	b538      	push	{r3, r4, r5, lr}
 8005c32:	690b      	ldr	r3, [r1, #16]
 8005c34:	4605      	mov	r5, r0
 8005c36:	460c      	mov	r4, r1
 8005c38:	b913      	cbnz	r3, 8005c40 <_fflush_r+0x10>
 8005c3a:	2500      	movs	r5, #0
 8005c3c:	4628      	mov	r0, r5
 8005c3e:	bd38      	pop	{r3, r4, r5, pc}
 8005c40:	b118      	cbz	r0, 8005c4a <_fflush_r+0x1a>
 8005c42:	6a03      	ldr	r3, [r0, #32]
 8005c44:	b90b      	cbnz	r3, 8005c4a <_fflush_r+0x1a>
 8005c46:	f7fe f939 	bl	8003ebc <__sinit>
 8005c4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d0f3      	beq.n	8005c3a <_fflush_r+0xa>
 8005c52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005c54:	07d0      	lsls	r0, r2, #31
 8005c56:	d404      	bmi.n	8005c62 <_fflush_r+0x32>
 8005c58:	0599      	lsls	r1, r3, #22
 8005c5a:	d402      	bmi.n	8005c62 <_fflush_r+0x32>
 8005c5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c5e:	f7fe fb25 	bl	80042ac <__retarget_lock_acquire_recursive>
 8005c62:	4628      	mov	r0, r5
 8005c64:	4621      	mov	r1, r4
 8005c66:	f7ff ff5d 	bl	8005b24 <__sflush_r>
 8005c6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c6c:	07da      	lsls	r2, r3, #31
 8005c6e:	4605      	mov	r5, r0
 8005c70:	d4e4      	bmi.n	8005c3c <_fflush_r+0xc>
 8005c72:	89a3      	ldrh	r3, [r4, #12]
 8005c74:	059b      	lsls	r3, r3, #22
 8005c76:	d4e1      	bmi.n	8005c3c <_fflush_r+0xc>
 8005c78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c7a:	f7fe fb18 	bl	80042ae <__retarget_lock_release_recursive>
 8005c7e:	e7dd      	b.n	8005c3c <_fflush_r+0xc>

08005c80 <__swhatbuf_r>:
 8005c80:	b570      	push	{r4, r5, r6, lr}
 8005c82:	460c      	mov	r4, r1
 8005c84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c88:	2900      	cmp	r1, #0
 8005c8a:	b096      	sub	sp, #88	; 0x58
 8005c8c:	4615      	mov	r5, r2
 8005c8e:	461e      	mov	r6, r3
 8005c90:	da0d      	bge.n	8005cae <__swhatbuf_r+0x2e>
 8005c92:	89a3      	ldrh	r3, [r4, #12]
 8005c94:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005c98:	f04f 0100 	mov.w	r1, #0
 8005c9c:	bf0c      	ite	eq
 8005c9e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005ca2:	2340      	movne	r3, #64	; 0x40
 8005ca4:	2000      	movs	r0, #0
 8005ca6:	6031      	str	r1, [r6, #0]
 8005ca8:	602b      	str	r3, [r5, #0]
 8005caa:	b016      	add	sp, #88	; 0x58
 8005cac:	bd70      	pop	{r4, r5, r6, pc}
 8005cae:	466a      	mov	r2, sp
 8005cb0:	f000 f848 	bl	8005d44 <_fstat_r>
 8005cb4:	2800      	cmp	r0, #0
 8005cb6:	dbec      	blt.n	8005c92 <__swhatbuf_r+0x12>
 8005cb8:	9901      	ldr	r1, [sp, #4]
 8005cba:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005cbe:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005cc2:	4259      	negs	r1, r3
 8005cc4:	4159      	adcs	r1, r3
 8005cc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005cca:	e7eb      	b.n	8005ca4 <__swhatbuf_r+0x24>

08005ccc <__smakebuf_r>:
 8005ccc:	898b      	ldrh	r3, [r1, #12]
 8005cce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005cd0:	079d      	lsls	r5, r3, #30
 8005cd2:	4606      	mov	r6, r0
 8005cd4:	460c      	mov	r4, r1
 8005cd6:	d507      	bpl.n	8005ce8 <__smakebuf_r+0x1c>
 8005cd8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005cdc:	6023      	str	r3, [r4, #0]
 8005cde:	6123      	str	r3, [r4, #16]
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	6163      	str	r3, [r4, #20]
 8005ce4:	b002      	add	sp, #8
 8005ce6:	bd70      	pop	{r4, r5, r6, pc}
 8005ce8:	ab01      	add	r3, sp, #4
 8005cea:	466a      	mov	r2, sp
 8005cec:	f7ff ffc8 	bl	8005c80 <__swhatbuf_r>
 8005cf0:	9900      	ldr	r1, [sp, #0]
 8005cf2:	4605      	mov	r5, r0
 8005cf4:	4630      	mov	r0, r6
 8005cf6:	f7ff f9c9 	bl	800508c <_malloc_r>
 8005cfa:	b948      	cbnz	r0, 8005d10 <__smakebuf_r+0x44>
 8005cfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d00:	059a      	lsls	r2, r3, #22
 8005d02:	d4ef      	bmi.n	8005ce4 <__smakebuf_r+0x18>
 8005d04:	f023 0303 	bic.w	r3, r3, #3
 8005d08:	f043 0302 	orr.w	r3, r3, #2
 8005d0c:	81a3      	strh	r3, [r4, #12]
 8005d0e:	e7e3      	b.n	8005cd8 <__smakebuf_r+0xc>
 8005d10:	89a3      	ldrh	r3, [r4, #12]
 8005d12:	6020      	str	r0, [r4, #0]
 8005d14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d18:	81a3      	strh	r3, [r4, #12]
 8005d1a:	9b00      	ldr	r3, [sp, #0]
 8005d1c:	6163      	str	r3, [r4, #20]
 8005d1e:	9b01      	ldr	r3, [sp, #4]
 8005d20:	6120      	str	r0, [r4, #16]
 8005d22:	b15b      	cbz	r3, 8005d3c <__smakebuf_r+0x70>
 8005d24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d28:	4630      	mov	r0, r6
 8005d2a:	f000 f81d 	bl	8005d68 <_isatty_r>
 8005d2e:	b128      	cbz	r0, 8005d3c <__smakebuf_r+0x70>
 8005d30:	89a3      	ldrh	r3, [r4, #12]
 8005d32:	f023 0303 	bic.w	r3, r3, #3
 8005d36:	f043 0301 	orr.w	r3, r3, #1
 8005d3a:	81a3      	strh	r3, [r4, #12]
 8005d3c:	89a3      	ldrh	r3, [r4, #12]
 8005d3e:	431d      	orrs	r5, r3
 8005d40:	81a5      	strh	r5, [r4, #12]
 8005d42:	e7cf      	b.n	8005ce4 <__smakebuf_r+0x18>

08005d44 <_fstat_r>:
 8005d44:	b538      	push	{r3, r4, r5, lr}
 8005d46:	4d07      	ldr	r5, [pc, #28]	; (8005d64 <_fstat_r+0x20>)
 8005d48:	2300      	movs	r3, #0
 8005d4a:	4604      	mov	r4, r0
 8005d4c:	4608      	mov	r0, r1
 8005d4e:	4611      	mov	r1, r2
 8005d50:	602b      	str	r3, [r5, #0]
 8005d52:	f7fb fd94 	bl	800187e <_fstat>
 8005d56:	1c43      	adds	r3, r0, #1
 8005d58:	d102      	bne.n	8005d60 <_fstat_r+0x1c>
 8005d5a:	682b      	ldr	r3, [r5, #0]
 8005d5c:	b103      	cbz	r3, 8005d60 <_fstat_r+0x1c>
 8005d5e:	6023      	str	r3, [r4, #0]
 8005d60:	bd38      	pop	{r3, r4, r5, pc}
 8005d62:	bf00      	nop
 8005d64:	20000344 	.word	0x20000344

08005d68 <_isatty_r>:
 8005d68:	b538      	push	{r3, r4, r5, lr}
 8005d6a:	4d06      	ldr	r5, [pc, #24]	; (8005d84 <_isatty_r+0x1c>)
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	4604      	mov	r4, r0
 8005d70:	4608      	mov	r0, r1
 8005d72:	602b      	str	r3, [r5, #0]
 8005d74:	f7fb fd93 	bl	800189e <_isatty>
 8005d78:	1c43      	adds	r3, r0, #1
 8005d7a:	d102      	bne.n	8005d82 <_isatty_r+0x1a>
 8005d7c:	682b      	ldr	r3, [r5, #0]
 8005d7e:	b103      	cbz	r3, 8005d82 <_isatty_r+0x1a>
 8005d80:	6023      	str	r3, [r4, #0]
 8005d82:	bd38      	pop	{r3, r4, r5, pc}
 8005d84:	20000344 	.word	0x20000344

08005d88 <_sbrk_r>:
 8005d88:	b538      	push	{r3, r4, r5, lr}
 8005d8a:	4d06      	ldr	r5, [pc, #24]	; (8005da4 <_sbrk_r+0x1c>)
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	4604      	mov	r4, r0
 8005d90:	4608      	mov	r0, r1
 8005d92:	602b      	str	r3, [r5, #0]
 8005d94:	f7fb fd9c 	bl	80018d0 <_sbrk>
 8005d98:	1c43      	adds	r3, r0, #1
 8005d9a:	d102      	bne.n	8005da2 <_sbrk_r+0x1a>
 8005d9c:	682b      	ldr	r3, [r5, #0]
 8005d9e:	b103      	cbz	r3, 8005da2 <_sbrk_r+0x1a>
 8005da0:	6023      	str	r3, [r4, #0]
 8005da2:	bd38      	pop	{r3, r4, r5, pc}
 8005da4:	20000344 	.word	0x20000344

08005da8 <memcpy>:
 8005da8:	440a      	add	r2, r1
 8005daa:	4291      	cmp	r1, r2
 8005dac:	f100 33ff 	add.w	r3, r0, #4294967295
 8005db0:	d100      	bne.n	8005db4 <memcpy+0xc>
 8005db2:	4770      	bx	lr
 8005db4:	b510      	push	{r4, lr}
 8005db6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005dba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005dbe:	4291      	cmp	r1, r2
 8005dc0:	d1f9      	bne.n	8005db6 <memcpy+0xe>
 8005dc2:	bd10      	pop	{r4, pc}

08005dc4 <__assert_func>:
 8005dc4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005dc6:	4614      	mov	r4, r2
 8005dc8:	461a      	mov	r2, r3
 8005dca:	4b09      	ldr	r3, [pc, #36]	; (8005df0 <__assert_func+0x2c>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4605      	mov	r5, r0
 8005dd0:	68d8      	ldr	r0, [r3, #12]
 8005dd2:	b14c      	cbz	r4, 8005de8 <__assert_func+0x24>
 8005dd4:	4b07      	ldr	r3, [pc, #28]	; (8005df4 <__assert_func+0x30>)
 8005dd6:	9100      	str	r1, [sp, #0]
 8005dd8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005ddc:	4906      	ldr	r1, [pc, #24]	; (8005df8 <__assert_func+0x34>)
 8005dde:	462b      	mov	r3, r5
 8005de0:	f000 f844 	bl	8005e6c <fiprintf>
 8005de4:	f000 f854 	bl	8005e90 <abort>
 8005de8:	4b04      	ldr	r3, [pc, #16]	; (8005dfc <__assert_func+0x38>)
 8005dea:	461c      	mov	r4, r3
 8005dec:	e7f3      	b.n	8005dd6 <__assert_func+0x12>
 8005dee:	bf00      	nop
 8005df0:	20000064 	.word	0x20000064
 8005df4:	080061e7 	.word	0x080061e7
 8005df8:	080061f4 	.word	0x080061f4
 8005dfc:	08006222 	.word	0x08006222

08005e00 <_calloc_r>:
 8005e00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e02:	fba1 2402 	umull	r2, r4, r1, r2
 8005e06:	b94c      	cbnz	r4, 8005e1c <_calloc_r+0x1c>
 8005e08:	4611      	mov	r1, r2
 8005e0a:	9201      	str	r2, [sp, #4]
 8005e0c:	f7ff f93e 	bl	800508c <_malloc_r>
 8005e10:	9a01      	ldr	r2, [sp, #4]
 8005e12:	4605      	mov	r5, r0
 8005e14:	b930      	cbnz	r0, 8005e24 <_calloc_r+0x24>
 8005e16:	4628      	mov	r0, r5
 8005e18:	b003      	add	sp, #12
 8005e1a:	bd30      	pop	{r4, r5, pc}
 8005e1c:	220c      	movs	r2, #12
 8005e1e:	6002      	str	r2, [r0, #0]
 8005e20:	2500      	movs	r5, #0
 8005e22:	e7f8      	b.n	8005e16 <_calloc_r+0x16>
 8005e24:	4621      	mov	r1, r4
 8005e26:	f7fe f9c5 	bl	80041b4 <memset>
 8005e2a:	e7f4      	b.n	8005e16 <_calloc_r+0x16>

08005e2c <__ascii_mbtowc>:
 8005e2c:	b082      	sub	sp, #8
 8005e2e:	b901      	cbnz	r1, 8005e32 <__ascii_mbtowc+0x6>
 8005e30:	a901      	add	r1, sp, #4
 8005e32:	b142      	cbz	r2, 8005e46 <__ascii_mbtowc+0x1a>
 8005e34:	b14b      	cbz	r3, 8005e4a <__ascii_mbtowc+0x1e>
 8005e36:	7813      	ldrb	r3, [r2, #0]
 8005e38:	600b      	str	r3, [r1, #0]
 8005e3a:	7812      	ldrb	r2, [r2, #0]
 8005e3c:	1e10      	subs	r0, r2, #0
 8005e3e:	bf18      	it	ne
 8005e40:	2001      	movne	r0, #1
 8005e42:	b002      	add	sp, #8
 8005e44:	4770      	bx	lr
 8005e46:	4610      	mov	r0, r2
 8005e48:	e7fb      	b.n	8005e42 <__ascii_mbtowc+0x16>
 8005e4a:	f06f 0001 	mvn.w	r0, #1
 8005e4e:	e7f8      	b.n	8005e42 <__ascii_mbtowc+0x16>

08005e50 <__ascii_wctomb>:
 8005e50:	b149      	cbz	r1, 8005e66 <__ascii_wctomb+0x16>
 8005e52:	2aff      	cmp	r2, #255	; 0xff
 8005e54:	bf85      	ittet	hi
 8005e56:	238a      	movhi	r3, #138	; 0x8a
 8005e58:	6003      	strhi	r3, [r0, #0]
 8005e5a:	700a      	strbls	r2, [r1, #0]
 8005e5c:	f04f 30ff 	movhi.w	r0, #4294967295
 8005e60:	bf98      	it	ls
 8005e62:	2001      	movls	r0, #1
 8005e64:	4770      	bx	lr
 8005e66:	4608      	mov	r0, r1
 8005e68:	4770      	bx	lr
	...

08005e6c <fiprintf>:
 8005e6c:	b40e      	push	{r1, r2, r3}
 8005e6e:	b503      	push	{r0, r1, lr}
 8005e70:	4601      	mov	r1, r0
 8005e72:	ab03      	add	r3, sp, #12
 8005e74:	4805      	ldr	r0, [pc, #20]	; (8005e8c <fiprintf+0x20>)
 8005e76:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e7a:	6800      	ldr	r0, [r0, #0]
 8005e7c:	9301      	str	r3, [sp, #4]
 8005e7e:	f7ff fd37 	bl	80058f0 <_vfiprintf_r>
 8005e82:	b002      	add	sp, #8
 8005e84:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e88:	b003      	add	sp, #12
 8005e8a:	4770      	bx	lr
 8005e8c:	20000064 	.word	0x20000064

08005e90 <abort>:
 8005e90:	b508      	push	{r3, lr}
 8005e92:	2006      	movs	r0, #6
 8005e94:	f000 f82c 	bl	8005ef0 <raise>
 8005e98:	2001      	movs	r0, #1
 8005e9a:	f7fb fcbd 	bl	8001818 <_exit>

08005e9e <_raise_r>:
 8005e9e:	291f      	cmp	r1, #31
 8005ea0:	b538      	push	{r3, r4, r5, lr}
 8005ea2:	4604      	mov	r4, r0
 8005ea4:	460d      	mov	r5, r1
 8005ea6:	d904      	bls.n	8005eb2 <_raise_r+0x14>
 8005ea8:	2316      	movs	r3, #22
 8005eaa:	6003      	str	r3, [r0, #0]
 8005eac:	f04f 30ff 	mov.w	r0, #4294967295
 8005eb0:	bd38      	pop	{r3, r4, r5, pc}
 8005eb2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8005eb4:	b112      	cbz	r2, 8005ebc <_raise_r+0x1e>
 8005eb6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005eba:	b94b      	cbnz	r3, 8005ed0 <_raise_r+0x32>
 8005ebc:	4620      	mov	r0, r4
 8005ebe:	f000 f831 	bl	8005f24 <_getpid_r>
 8005ec2:	462a      	mov	r2, r5
 8005ec4:	4601      	mov	r1, r0
 8005ec6:	4620      	mov	r0, r4
 8005ec8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ecc:	f000 b818 	b.w	8005f00 <_kill_r>
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d00a      	beq.n	8005eea <_raise_r+0x4c>
 8005ed4:	1c59      	adds	r1, r3, #1
 8005ed6:	d103      	bne.n	8005ee0 <_raise_r+0x42>
 8005ed8:	2316      	movs	r3, #22
 8005eda:	6003      	str	r3, [r0, #0]
 8005edc:	2001      	movs	r0, #1
 8005ede:	e7e7      	b.n	8005eb0 <_raise_r+0x12>
 8005ee0:	2400      	movs	r4, #0
 8005ee2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005ee6:	4628      	mov	r0, r5
 8005ee8:	4798      	blx	r3
 8005eea:	2000      	movs	r0, #0
 8005eec:	e7e0      	b.n	8005eb0 <_raise_r+0x12>
	...

08005ef0 <raise>:
 8005ef0:	4b02      	ldr	r3, [pc, #8]	; (8005efc <raise+0xc>)
 8005ef2:	4601      	mov	r1, r0
 8005ef4:	6818      	ldr	r0, [r3, #0]
 8005ef6:	f7ff bfd2 	b.w	8005e9e <_raise_r>
 8005efa:	bf00      	nop
 8005efc:	20000064 	.word	0x20000064

08005f00 <_kill_r>:
 8005f00:	b538      	push	{r3, r4, r5, lr}
 8005f02:	4d07      	ldr	r5, [pc, #28]	; (8005f20 <_kill_r+0x20>)
 8005f04:	2300      	movs	r3, #0
 8005f06:	4604      	mov	r4, r0
 8005f08:	4608      	mov	r0, r1
 8005f0a:	4611      	mov	r1, r2
 8005f0c:	602b      	str	r3, [r5, #0]
 8005f0e:	f7fb fc73 	bl	80017f8 <_kill>
 8005f12:	1c43      	adds	r3, r0, #1
 8005f14:	d102      	bne.n	8005f1c <_kill_r+0x1c>
 8005f16:	682b      	ldr	r3, [r5, #0]
 8005f18:	b103      	cbz	r3, 8005f1c <_kill_r+0x1c>
 8005f1a:	6023      	str	r3, [r4, #0]
 8005f1c:	bd38      	pop	{r3, r4, r5, pc}
 8005f1e:	bf00      	nop
 8005f20:	20000344 	.word	0x20000344

08005f24 <_getpid_r>:
 8005f24:	f7fb bc60 	b.w	80017e8 <_getpid>

08005f28 <_init>:
 8005f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f2a:	bf00      	nop
 8005f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f2e:	bc08      	pop	{r3}
 8005f30:	469e      	mov	lr, r3
 8005f32:	4770      	bx	lr

08005f34 <_fini>:
 8005f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f36:	bf00      	nop
 8005f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f3a:	bc08      	pop	{r3}
 8005f3c:	469e      	mov	lr, r3
 8005f3e:	4770      	bx	lr
