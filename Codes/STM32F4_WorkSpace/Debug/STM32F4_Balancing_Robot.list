
STM32F4_Balancing_Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008320  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000490  080084c0  080084c0  000184c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008950  08008950  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  08008950  08008950  00018950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008958  08008958  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008958  08008958  00018958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800895c  0800895c  0001895c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08008960  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  200001e8  08008b48  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000418  08008b48  00020418  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c7de  00000000  00000000  0002025b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c1b  00000000  00000000  0002ca39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d40  00000000  00000000  0002f658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009ba  00000000  00000000  00030398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ab5c  00000000  00000000  00030d52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fad9  00000000  00000000  0004b8ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00096972  00000000  00000000  0005b387  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000045ec  00000000  00000000  000f1cfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000f62e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080084a8 	.word	0x080084a8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	080084a8 	.word	0x080084a8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_ldivmod>:
 8000bb8:	b97b      	cbnz	r3, 8000bda <__aeabi_ldivmod+0x22>
 8000bba:	b972      	cbnz	r2, 8000bda <__aeabi_ldivmod+0x22>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bfbe      	ittt	lt
 8000bc0:	2000      	movlt	r0, #0
 8000bc2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000bc6:	e006      	blt.n	8000bd6 <__aeabi_ldivmod+0x1e>
 8000bc8:	bf08      	it	eq
 8000bca:	2800      	cmpeq	r0, #0
 8000bcc:	bf1c      	itt	ne
 8000bce:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000bd2:	f04f 30ff 	movne.w	r0, #4294967295
 8000bd6:	f000 b9bb 	b.w	8000f50 <__aeabi_idiv0>
 8000bda:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be2:	2900      	cmp	r1, #0
 8000be4:	db09      	blt.n	8000bfa <__aeabi_ldivmod+0x42>
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	db1a      	blt.n	8000c20 <__aeabi_ldivmod+0x68>
 8000bea:	f000 f84d 	bl	8000c88 <__udivmoddi4>
 8000bee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf6:	b004      	add	sp, #16
 8000bf8:	4770      	bx	lr
 8000bfa:	4240      	negs	r0, r0
 8000bfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	db1b      	blt.n	8000c3c <__aeabi_ldivmod+0x84>
 8000c04:	f000 f840 	bl	8000c88 <__udivmoddi4>
 8000c08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c10:	b004      	add	sp, #16
 8000c12:	4240      	negs	r0, r0
 8000c14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c18:	4252      	negs	r2, r2
 8000c1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c1e:	4770      	bx	lr
 8000c20:	4252      	negs	r2, r2
 8000c22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c26:	f000 f82f 	bl	8000c88 <__udivmoddi4>
 8000c2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c32:	b004      	add	sp, #16
 8000c34:	4240      	negs	r0, r0
 8000c36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3a:	4770      	bx	lr
 8000c3c:	4252      	negs	r2, r2
 8000c3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c42:	f000 f821 	bl	8000c88 <__udivmoddi4>
 8000c46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c4e:	b004      	add	sp, #16
 8000c50:	4252      	negs	r2, r2
 8000c52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b970 	b.w	8000f50 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	460d      	mov	r5, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	460f      	mov	r7, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4694      	mov	ip, r2
 8000c9c:	d965      	bls.n	8000d6a <__udivmoddi4+0xe2>
 8000c9e:	fab2 f382 	clz	r3, r2
 8000ca2:	b143      	cbz	r3, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ca8:	f1c3 0220 	rsb	r2, r3, #32
 8000cac:	409f      	lsls	r7, r3
 8000cae:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb2:	4317      	orrs	r7, r2
 8000cb4:	409c      	lsls	r4, r3
 8000cb6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cba:	fa1f f58c 	uxth.w	r5, ip
 8000cbe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cc2:	0c22      	lsrs	r2, r4, #16
 8000cc4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cc8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ccc:	fb01 f005 	mul.w	r0, r1, r5
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	d90a      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cd8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cdc:	f080 811c 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000ce0:	4290      	cmp	r0, r2
 8000ce2:	f240 8119 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	4462      	add	r2, ip
 8000cea:	1a12      	subs	r2, r2, r0
 8000cec:	b2a4      	uxth	r4, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cfa:	fb00 f505 	mul.w	r5, r0, r5
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	d90a      	bls.n	8000d18 <__udivmoddi4+0x90>
 8000d02:	eb1c 0404 	adds.w	r4, ip, r4
 8000d06:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d0a:	f080 8107 	bcs.w	8000f1c <__udivmoddi4+0x294>
 8000d0e:	42a5      	cmp	r5, r4
 8000d10:	f240 8104 	bls.w	8000f1c <__udivmoddi4+0x294>
 8000d14:	4464      	add	r4, ip
 8000d16:	3802      	subs	r0, #2
 8000d18:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1c:	1b64      	subs	r4, r4, r5
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11e      	cbz	r6, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40dc      	lsrs	r4, r3
 8000d24:	2300      	movs	r3, #0
 8000d26:	e9c6 4300 	strd	r4, r3, [r6]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0xbc>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80ed 	beq.w	8000f12 <__udivmoddi4+0x28a>
 8000d38:	2100      	movs	r1, #0
 8000d3a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d44:	fab3 f183 	clz	r1, r3
 8000d48:	2900      	cmp	r1, #0
 8000d4a:	d149      	bne.n	8000de0 <__udivmoddi4+0x158>
 8000d4c:	42ab      	cmp	r3, r5
 8000d4e:	d302      	bcc.n	8000d56 <__udivmoddi4+0xce>
 8000d50:	4282      	cmp	r2, r0
 8000d52:	f200 80f8 	bhi.w	8000f46 <__udivmoddi4+0x2be>
 8000d56:	1a84      	subs	r4, r0, r2
 8000d58:	eb65 0203 	sbc.w	r2, r5, r3
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	4617      	mov	r7, r2
 8000d60:	2e00      	cmp	r6, #0
 8000d62:	d0e2      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	e9c6 4700 	strd	r4, r7, [r6]
 8000d68:	e7df      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d6a:	b902      	cbnz	r2, 8000d6e <__udivmoddi4+0xe6>
 8000d6c:	deff      	udf	#255	; 0xff
 8000d6e:	fab2 f382 	clz	r3, r2
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f040 8090 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d78:	1a8a      	subs	r2, r1, r2
 8000d7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d7e:	fa1f fe8c 	uxth.w	lr, ip
 8000d82:	2101      	movs	r1, #1
 8000d84:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d88:	fb07 2015 	mls	r0, r7, r5, r2
 8000d8c:	0c22      	lsrs	r2, r4, #16
 8000d8e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d92:	fb0e f005 	mul.w	r0, lr, r5
 8000d96:	4290      	cmp	r0, r2
 8000d98:	d908      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d9e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4290      	cmp	r0, r2
 8000da6:	f200 80cb 	bhi.w	8000f40 <__udivmoddi4+0x2b8>
 8000daa:	4645      	mov	r5, r8
 8000dac:	1a12      	subs	r2, r2, r0
 8000dae:	b2a4      	uxth	r4, r4
 8000db0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000db4:	fb07 2210 	mls	r2, r7, r0, r2
 8000db8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dbc:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc0:	45a6      	cmp	lr, r4
 8000dc2:	d908      	bls.n	8000dd6 <__udivmoddi4+0x14e>
 8000dc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x14c>
 8000dce:	45a6      	cmp	lr, r4
 8000dd0:	f200 80bb 	bhi.w	8000f4a <__udivmoddi4+0x2c2>
 8000dd4:	4610      	mov	r0, r2
 8000dd6:	eba4 040e 	sub.w	r4, r4, lr
 8000dda:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dde:	e79f      	b.n	8000d20 <__udivmoddi4+0x98>
 8000de0:	f1c1 0720 	rsb	r7, r1, #32
 8000de4:	408b      	lsls	r3, r1
 8000de6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dea:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dee:	fa05 f401 	lsl.w	r4, r5, r1
 8000df2:	fa20 f307 	lsr.w	r3, r0, r7
 8000df6:	40fd      	lsrs	r5, r7
 8000df8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dfc:	4323      	orrs	r3, r4
 8000dfe:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e02:	fa1f fe8c 	uxth.w	lr, ip
 8000e06:	fb09 5518 	mls	r5, r9, r8, r5
 8000e0a:	0c1c      	lsrs	r4, r3, #16
 8000e0c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e10:	fb08 f50e 	mul.w	r5, r8, lr
 8000e14:	42a5      	cmp	r5, r4
 8000e16:	fa02 f201 	lsl.w	r2, r2, r1
 8000e1a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1c 0404 	adds.w	r4, ip, r4
 8000e24:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e28:	f080 8088 	bcs.w	8000f3c <__udivmoddi4+0x2b4>
 8000e2c:	42a5      	cmp	r5, r4
 8000e2e:	f240 8085 	bls.w	8000f3c <__udivmoddi4+0x2b4>
 8000e32:	f1a8 0802 	sub.w	r8, r8, #2
 8000e36:	4464      	add	r4, ip
 8000e38:	1b64      	subs	r4, r4, r5
 8000e3a:	b29d      	uxth	r5, r3
 8000e3c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e40:	fb09 4413 	mls	r4, r9, r3, r4
 8000e44:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e48:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e4c:	45a6      	cmp	lr, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e58:	d26c      	bcs.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5a:	45a6      	cmp	lr, r4
 8000e5c:	d96a      	bls.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5e:	3b02      	subs	r3, #2
 8000e60:	4464      	add	r4, ip
 8000e62:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e66:	fba3 9502 	umull	r9, r5, r3, r2
 8000e6a:	eba4 040e 	sub.w	r4, r4, lr
 8000e6e:	42ac      	cmp	r4, r5
 8000e70:	46c8      	mov	r8, r9
 8000e72:	46ae      	mov	lr, r5
 8000e74:	d356      	bcc.n	8000f24 <__udivmoddi4+0x29c>
 8000e76:	d053      	beq.n	8000f20 <__udivmoddi4+0x298>
 8000e78:	b156      	cbz	r6, 8000e90 <__udivmoddi4+0x208>
 8000e7a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e7e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e82:	fa04 f707 	lsl.w	r7, r4, r7
 8000e86:	40ca      	lsrs	r2, r1
 8000e88:	40cc      	lsrs	r4, r1
 8000e8a:	4317      	orrs	r7, r2
 8000e8c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e90:	4618      	mov	r0, r3
 8000e92:	2100      	movs	r1, #0
 8000e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e98:	f1c3 0120 	rsb	r1, r3, #32
 8000e9c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ea0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ea4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ea8:	409d      	lsls	r5, r3
 8000eaa:	432a      	orrs	r2, r5
 8000eac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb0:	fa1f fe8c 	uxth.w	lr, ip
 8000eb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb8:	fb07 1510 	mls	r5, r7, r0, r1
 8000ebc:	0c11      	lsrs	r1, r2, #16
 8000ebe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ec2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ec6:	428d      	cmp	r5, r1
 8000ec8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ecc:	d908      	bls.n	8000ee0 <__udivmoddi4+0x258>
 8000ece:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ed6:	d22f      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000ed8:	428d      	cmp	r5, r1
 8000eda:	d92d      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000edc:	3802      	subs	r0, #2
 8000ede:	4461      	add	r1, ip
 8000ee0:	1b49      	subs	r1, r1, r5
 8000ee2:	b292      	uxth	r2, r2
 8000ee4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ee8:	fb07 1115 	mls	r1, r7, r5, r1
 8000eec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ef0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ef4:	4291      	cmp	r1, r2
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x282>
 8000ef8:	eb1c 0202 	adds.w	r2, ip, r2
 8000efc:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f00:	d216      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000f02:	4291      	cmp	r1, r2
 8000f04:	d914      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000f06:	3d02      	subs	r5, #2
 8000f08:	4462      	add	r2, ip
 8000f0a:	1a52      	subs	r2, r2, r1
 8000f0c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f10:	e738      	b.n	8000d84 <__udivmoddi4+0xfc>
 8000f12:	4631      	mov	r1, r6
 8000f14:	4630      	mov	r0, r6
 8000f16:	e708      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000f18:	4639      	mov	r1, r7
 8000f1a:	e6e6      	b.n	8000cea <__udivmoddi4+0x62>
 8000f1c:	4610      	mov	r0, r2
 8000f1e:	e6fb      	b.n	8000d18 <__udivmoddi4+0x90>
 8000f20:	4548      	cmp	r0, r9
 8000f22:	d2a9      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f24:	ebb9 0802 	subs.w	r8, r9, r2
 8000f28:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	e7a3      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f30:	4645      	mov	r5, r8
 8000f32:	e7ea      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f34:	462b      	mov	r3, r5
 8000f36:	e794      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f38:	4640      	mov	r0, r8
 8000f3a:	e7d1      	b.n	8000ee0 <__udivmoddi4+0x258>
 8000f3c:	46d0      	mov	r8, sl
 8000f3e:	e77b      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f40:	3d02      	subs	r5, #2
 8000f42:	4462      	add	r2, ip
 8000f44:	e732      	b.n	8000dac <__udivmoddi4+0x124>
 8000f46:	4608      	mov	r0, r1
 8000f48:	e70a      	b.n	8000d60 <__udivmoddi4+0xd8>
 8000f4a:	4464      	add	r4, ip
 8000f4c:	3802      	subs	r0, #2
 8000f4e:	e742      	b.n	8000dd6 <__udivmoddi4+0x14e>

08000f50 <__aeabi_idiv0>:
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop

08000f54 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f043 0201 	orr.w	r2, r3, #1
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	601a      	str	r2, [r3, #0]
}
 8000f68:	bf00      	nop
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr

08000f74 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6a1a      	ldr	r2, [r3, #32]
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	431a      	orrs	r2, r3
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	621a      	str	r2, [r3, #32]
}
 8000f8a:	bf00      	nop
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
	...

08000f98 <DCmotor_Init>:
#include "DCmotor.h"
#include "stm32f4xx_ll_tim.h"
#include <stdio.h>


void DCmotor_Init(void){
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
	LL_TIM_EnableCounter(TIM2);
 8000f9c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000fa0:	f7ff ffd8 	bl	8000f54 <LL_TIM_EnableCounter>
	LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH1);
 8000fa4:	2101      	movs	r1, #1
 8000fa6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000faa:	f7ff ffe3 	bl	8000f74 <LL_TIM_CC_EnableChannel>
	LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH2);
 8000fae:	2110      	movs	r1, #16
 8000fb0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000fb4:	f7ff ffde 	bl	8000f74 <LL_TIM_CC_EnableChannel>

	printf("DCmotor Initialization has completed.\n\n");
 8000fb8:	4802      	ldr	r0, [pc, #8]	; (8000fc4 <DCmotor_Init+0x2c>)
 8000fba:	f005 f829 	bl	8006010 <puts>
}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	080084c0 	.word	0x080084c0

08000fc8 <DCmotor_Forward>:

void DCmotor_Forward(short PWM){
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	80fb      	strh	r3, [r7, #6]
	TIM2->CCR1 = PWM;
 8000fd2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fda:	6353      	str	r3, [r2, #52]	; 0x34
	TIM2->CCR2 = 0;
 8000fdc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000fe4:	bf00      	nop
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <DCmotor_Backward>:

void DCmotor_Backward(short PWM){
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	80fb      	strh	r3, [r7, #6]
	TIM2->CCR1 = 0;
 8000ffa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ffe:	2200      	movs	r2, #0
 8001000:	635a      	str	r2, [r3, #52]	; 0x34
	TIM2->CCR2 = PWM;
 8001002:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001006:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800100a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800100c:	bf00      	nop
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr

08001018 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	683a      	ldr	r2, [r7, #0]
 8001026:	619a      	str	r2, [r3, #24]
}
 8001028:	bf00      	nop
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	041a      	lsls	r2, r3, #16
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	619a      	str	r2, [r3, #24]
}
 8001046:	bf00      	nop
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
	...

08001054 <MPU6050_Init>:

MPU6050 IMU;

int curTime, prevTime, dt;

void MPU6050_Init(void){
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
//
//	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_4);


//	======================== HAL_SPI ========================
	printf("Waiting for 5 seconds to start...\n\n");
 8001058:	4807      	ldr	r0, [pc, #28]	; (8001078 <MPU6050_Init+0x24>)
 800105a:	f004 ffd9 	bl	8006010 <puts>
	HAL_Delay(5000);
 800105e:	f241 3088 	movw	r0, #5000	; 0x1388
 8001062:	f001 fc81 	bl	8002968 <HAL_Delay>

	HAL_SPI_Init(&hspi1);
 8001066:	4805      	ldr	r0, [pc, #20]	; (800107c <MPU6050_Init+0x28>)
 8001068:	f002 fb30 	bl	80036cc <HAL_SPI_Init>

	printf("MPU6050 Initialization has completed.\n\n");
 800106c:	4804      	ldr	r0, [pc, #16]	; (8001080 <MPU6050_Init+0x2c>)
 800106e:	f004 ffcf 	bl	8006010 <puts>
}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	080084e8 	.word	0x080084e8
 800107c:	20000264 	.word	0x20000264
 8001080:	0800850c 	.word	0x0800850c

08001084 <MPU6050_Calibration>:

void MPU6050_Calibration(void){
 8001084:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001088:	b0a0      	sub	sp, #128	; 0x80
 800108a:	af00      	add	r7, sp, #0
	IMU.ax_offset = 0;
 800108c:	4a83      	ldr	r2, [pc, #524]	; (800129c <MPU6050_Calibration+0x218>)
 800108e:	2300      	movs	r3, #0
 8001090:	8193      	strh	r3, [r2, #12]
	IMU.ay_offset = 0;
 8001092:	4a82      	ldr	r2, [pc, #520]	; (800129c <MPU6050_Calibration+0x218>)
 8001094:	2300      	movs	r3, #0
 8001096:	81d3      	strh	r3, [r2, #14]
	IMU.az_offset = 0;
 8001098:	4a80      	ldr	r2, [pc, #512]	; (800129c <MPU6050_Calibration+0x218>)
 800109a:	2300      	movs	r3, #0
 800109c:	8213      	strh	r3, [r2, #16]
	IMU.gx_offset = 0;
 800109e:	4a7f      	ldr	r2, [pc, #508]	; (800129c <MPU6050_Calibration+0x218>)
 80010a0:	2300      	movs	r3, #0
 80010a2:	8253      	strh	r3, [r2, #18]
	IMU.gy_offset = 0;
 80010a4:	4a7d      	ldr	r2, [pc, #500]	; (800129c <MPU6050_Calibration+0x218>)
 80010a6:	2300      	movs	r3, #0
 80010a8:	8293      	strh	r3, [r2, #20]
	IMU.gz_offset = 0;
 80010aa:	4a7c      	ldr	r2, [pc, #496]	; (800129c <MPU6050_Calibration+0x218>)
 80010ac:	2300      	movs	r3, #0
 80010ae:	82d3      	strh	r3, [r2, #22]

	long long ax_offset_sum = 0;
 80010b0:	f04f 0200 	mov.w	r2, #0
 80010b4:	f04f 0300 	mov.w	r3, #0
 80010b8:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	long long ay_offset_sum = 0;
 80010bc:	f04f 0200 	mov.w	r2, #0
 80010c0:	f04f 0300 	mov.w	r3, #0
 80010c4:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	long long az_offset_sum = 0;
 80010c8:	f04f 0200 	mov.w	r2, #0
 80010cc:	f04f 0300 	mov.w	r3, #0
 80010d0:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	long long gx_offset_sum = 0;
 80010d4:	f04f 0200 	mov.w	r2, #0
 80010d8:	f04f 0300 	mov.w	r3, #0
 80010dc:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	long long gy_offset_sum = 0;
 80010e0:	f04f 0200 	mov.w	r2, #0
 80010e4:	f04f 0300 	mov.w	r3, #0
 80010e8:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	long long gz_offset_sum = 0;
 80010ec:	f04f 0200 	mov.w	r2, #0
 80010f0:	f04f 0300 	mov.w	r3, #0
 80010f4:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	for (int i = 0; i < 100; i++){
 80010f8:	2300      	movs	r3, #0
 80010fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80010fc:	e075      	b.n	80011ea <MPU6050_Calibration+0x166>
		MPU6050_GetAccel();
 80010fe:	f000 f8fb 	bl	80012f8 <MPU6050_GetAccel>
		MPU6050_GetGyro();
 8001102:	f000 f953 	bl	80013ac <MPU6050_GetGyro>

		ax_offset_sum += IMU.ax;
 8001106:	4b65      	ldr	r3, [pc, #404]	; (800129c <MPU6050_Calibration+0x218>)
 8001108:	f9b3 3000 	ldrsh.w	r3, [r3]
 800110c:	b21b      	sxth	r3, r3
 800110e:	17da      	asrs	r2, r3, #31
 8001110:	643b      	str	r3, [r7, #64]	; 0x40
 8001112:	647a      	str	r2, [r7, #68]	; 0x44
 8001114:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8001118:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800111a:	1851      	adds	r1, r2, r1
 800111c:	6239      	str	r1, [r7, #32]
 800111e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001120:	414b      	adcs	r3, r1
 8001122:	627b      	str	r3, [r7, #36]	; 0x24
 8001124:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001128:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		ay_offset_sum += IMU.ay;
 800112c:	4b5b      	ldr	r3, [pc, #364]	; (800129c <MPU6050_Calibration+0x218>)
 800112e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001132:	b21b      	sxth	r3, r3
 8001134:	17da      	asrs	r2, r3, #31
 8001136:	63bb      	str	r3, [r7, #56]	; 0x38
 8001138:	63fa      	str	r2, [r7, #60]	; 0x3c
 800113a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800113e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001140:	1851      	adds	r1, r2, r1
 8001142:	61b9      	str	r1, [r7, #24]
 8001144:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001146:	414b      	adcs	r3, r1
 8001148:	61fb      	str	r3, [r7, #28]
 800114a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800114e:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
		az_offset_sum += IMU.az + 16384;
 8001152:	4b52      	ldr	r3, [pc, #328]	; (800129c <MPU6050_Calibration+0x218>)
 8001154:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001158:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800115c:	17da      	asrs	r2, r3, #31
 800115e:	633b      	str	r3, [r7, #48]	; 0x30
 8001160:	637a      	str	r2, [r7, #52]	; 0x34
 8001162:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001166:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001168:	1851      	adds	r1, r2, r1
 800116a:	6139      	str	r1, [r7, #16]
 800116c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800116e:	414b      	adcs	r3, r1
 8001170:	617b      	str	r3, [r7, #20]
 8001172:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001176:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
		gx_offset_sum += IMU.gx;
 800117a:	4b48      	ldr	r3, [pc, #288]	; (800129c <MPU6050_Calibration+0x218>)
 800117c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001180:	b21b      	sxth	r3, r3
 8001182:	17da      	asrs	r2, r3, #31
 8001184:	62bb      	str	r3, [r7, #40]	; 0x28
 8001186:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001188:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800118c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800118e:	1851      	adds	r1, r2, r1
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001194:	414b      	adcs	r3, r1
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800119c:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
		gy_offset_sum += IMU.gy;
 80011a0:	4b3e      	ldr	r3, [pc, #248]	; (800129c <MPU6050_Calibration+0x218>)
 80011a2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80011a6:	b21b      	sxth	r3, r3
 80011a8:	17da      	asrs	r2, r3, #31
 80011aa:	469a      	mov	sl, r3
 80011ac:	4693      	mov	fp, r2
 80011ae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80011b2:	eb12 010a 	adds.w	r1, r2, sl
 80011b6:	6039      	str	r1, [r7, #0]
 80011b8:	eb43 030b 	adc.w	r3, r3, fp
 80011bc:	607b      	str	r3, [r7, #4]
 80011be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80011c2:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
		gz_offset_sum += IMU.gz;
 80011c6:	4b35      	ldr	r3, [pc, #212]	; (800129c <MPU6050_Calibration+0x218>)
 80011c8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80011cc:	b21b      	sxth	r3, r3
 80011ce:	17da      	asrs	r2, r3, #31
 80011d0:	461c      	mov	r4, r3
 80011d2:	4615      	mov	r5, r2
 80011d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80011d8:	eb12 0804 	adds.w	r8, r2, r4
 80011dc:	eb43 0905 	adc.w	r9, r3, r5
 80011e0:	e9c7 8914 	strd	r8, r9, [r7, #80]	; 0x50
	for (int i = 0; i < 100; i++){
 80011e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80011e6:	3301      	adds	r3, #1
 80011e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80011ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80011ec:	2b63      	cmp	r3, #99	; 0x63
 80011ee:	dd86      	ble.n	80010fe <MPU6050_Calibration+0x7a>
	}

	IMU.ax_offset = ax_offset_sum / 1000;
 80011f0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80011f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011f8:	f04f 0300 	mov.w	r3, #0
 80011fc:	f7ff fcdc 	bl	8000bb8 <__aeabi_ldivmod>
 8001200:	4602      	mov	r2, r0
 8001202:	460b      	mov	r3, r1
 8001204:	b212      	sxth	r2, r2
 8001206:	4b25      	ldr	r3, [pc, #148]	; (800129c <MPU6050_Calibration+0x218>)
 8001208:	819a      	strh	r2, [r3, #12]
	IMU.ay_offset = ay_offset_sum / 1000;
 800120a:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800120e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001212:	f04f 0300 	mov.w	r3, #0
 8001216:	f7ff fccf 	bl	8000bb8 <__aeabi_ldivmod>
 800121a:	4602      	mov	r2, r0
 800121c:	460b      	mov	r3, r1
 800121e:	b212      	sxth	r2, r2
 8001220:	4b1e      	ldr	r3, [pc, #120]	; (800129c <MPU6050_Calibration+0x218>)
 8001222:	81da      	strh	r2, [r3, #14]
	IMU.az_offset = az_offset_sum / 1000;
 8001224:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001228:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800122c:	f04f 0300 	mov.w	r3, #0
 8001230:	f7ff fcc2 	bl	8000bb8 <__aeabi_ldivmod>
 8001234:	4602      	mov	r2, r0
 8001236:	460b      	mov	r3, r1
 8001238:	b212      	sxth	r2, r2
 800123a:	4b18      	ldr	r3, [pc, #96]	; (800129c <MPU6050_Calibration+0x218>)
 800123c:	821a      	strh	r2, [r3, #16]
	IMU.gx_offset = gx_offset_sum / 1000;
 800123e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001242:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001246:	f04f 0300 	mov.w	r3, #0
 800124a:	f7ff fcb5 	bl	8000bb8 <__aeabi_ldivmod>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	b212      	sxth	r2, r2
 8001254:	4b11      	ldr	r3, [pc, #68]	; (800129c <MPU6050_Calibration+0x218>)
 8001256:	825a      	strh	r2, [r3, #18]
	IMU.gy_offset = gy_offset_sum / 1000;
 8001258:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800125c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001260:	f04f 0300 	mov.w	r3, #0
 8001264:	f7ff fca8 	bl	8000bb8 <__aeabi_ldivmod>
 8001268:	4602      	mov	r2, r0
 800126a:	460b      	mov	r3, r1
 800126c:	b212      	sxth	r2, r2
 800126e:	4b0b      	ldr	r3, [pc, #44]	; (800129c <MPU6050_Calibration+0x218>)
 8001270:	829a      	strh	r2, [r3, #20]
	IMU.gz_offset = gz_offset_sum / 1000;
 8001272:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001276:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800127a:	f04f 0300 	mov.w	r3, #0
 800127e:	f7ff fc9b 	bl	8000bb8 <__aeabi_ldivmod>
 8001282:	4602      	mov	r2, r0
 8001284:	460b      	mov	r3, r1
 8001286:	b212      	sxth	r2, r2
 8001288:	4b04      	ldr	r3, [pc, #16]	; (800129c <MPU6050_Calibration+0x218>)
 800128a:	82da      	strh	r2, [r3, #22]

	printf("MPU6050 Calibration has completed.\n\n");
 800128c:	4804      	ldr	r0, [pc, #16]	; (80012a0 <MPU6050_Calibration+0x21c>)
 800128e:	f004 febf 	bl	8006010 <puts>
}
 8001292:	bf00      	nop
 8001294:	3780      	adds	r7, #128	; 0x80
 8001296:	46bd      	mov	sp, r7
 8001298:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800129c:	20000208 	.word	0x20000208
 80012a0:	08008534 	.word	0x08008534

080012a4 <MPU6050_ReceiveData>:
	while(!LL_I2C_IsActiveFlag_BTF(I2C1));

	LL_I2C_GenerateStopCondition(I2C1);
}

unsigned char MPU6050_ReceiveData(unsigned char Address){
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	4603      	mov	r3, r0
 80012ac:	71fb      	strb	r3, [r7, #7]
//	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_4);
//
//	return Data;

//	======================== HAL_SPI ========================
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_4);
 80012ae:	2110      	movs	r1, #16
 80012b0:	480f      	ldr	r0, [pc, #60]	; (80012f0 <MPU6050_ReceiveData+0x4c>)
 80012b2:	f7ff febf 	bl	8001034 <LL_GPIO_ResetOutputPin>

	unsigned char dataReg = 0x80 | Address;
 80012b6:	79fb      	ldrb	r3, [r7, #7]
 80012b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	73fb      	strb	r3, [r7, #15]

	HAL_SPI_Transmit(&hspi1, &dataReg, 1, 100);
 80012c0:	f107 010f 	add.w	r1, r7, #15
 80012c4:	2364      	movs	r3, #100	; 0x64
 80012c6:	2201      	movs	r2, #1
 80012c8:	480a      	ldr	r0, [pc, #40]	; (80012f4 <MPU6050_ReceiveData+0x50>)
 80012ca:	f002 fa88 	bl	80037de <HAL_SPI_Transmit>

	unsigned char Data;
	HAL_SPI_Receive(&hspi1, &Data, 1, 100);
 80012ce:	f107 010e 	add.w	r1, r7, #14
 80012d2:	2364      	movs	r3, #100	; 0x64
 80012d4:	2201      	movs	r2, #1
 80012d6:	4807      	ldr	r0, [pc, #28]	; (80012f4 <MPU6050_ReceiveData+0x50>)
 80012d8:	f002 fbbd 	bl	8003a56 <HAL_SPI_Receive>


	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_4);
 80012dc:	2110      	movs	r1, #16
 80012de:	4804      	ldr	r0, [pc, #16]	; (80012f0 <MPU6050_ReceiveData+0x4c>)
 80012e0:	f7ff fe9a 	bl	8001018 <LL_GPIO_SetOutputPin>

	return Data;
 80012e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40020000 	.word	0x40020000
 80012f4:	20000264 	.word	0x20000264

080012f8 <MPU6050_GetAccel>:

void MPU6050_GetAccel(void){
 80012f8:	b598      	push	{r3, r4, r7, lr}
 80012fa:	af00      	add	r7, sp, #0
	IMU.ax = MPU6050_ReceiveData(0x3B) << 8 | MPU6050_ReceiveData(0x3C);
 80012fc:	203b      	movs	r0, #59	; 0x3b
 80012fe:	f7ff ffd1 	bl	80012a4 <MPU6050_ReceiveData>
 8001302:	4603      	mov	r3, r0
 8001304:	021b      	lsls	r3, r3, #8
 8001306:	b21c      	sxth	r4, r3
 8001308:	203c      	movs	r0, #60	; 0x3c
 800130a:	f7ff ffcb 	bl	80012a4 <MPU6050_ReceiveData>
 800130e:	4603      	mov	r3, r0
 8001310:	b21b      	sxth	r3, r3
 8001312:	4323      	orrs	r3, r4
 8001314:	b21a      	sxth	r2, r3
 8001316:	4b24      	ldr	r3, [pc, #144]	; (80013a8 <MPU6050_GetAccel+0xb0>)
 8001318:	801a      	strh	r2, [r3, #0]
	IMU.ay = MPU6050_ReceiveData(0x3D) << 8 | MPU6050_ReceiveData(0x3E);
 800131a:	203d      	movs	r0, #61	; 0x3d
 800131c:	f7ff ffc2 	bl	80012a4 <MPU6050_ReceiveData>
 8001320:	4603      	mov	r3, r0
 8001322:	021b      	lsls	r3, r3, #8
 8001324:	b21c      	sxth	r4, r3
 8001326:	203e      	movs	r0, #62	; 0x3e
 8001328:	f7ff ffbc 	bl	80012a4 <MPU6050_ReceiveData>
 800132c:	4603      	mov	r3, r0
 800132e:	b21b      	sxth	r3, r3
 8001330:	4323      	orrs	r3, r4
 8001332:	b21a      	sxth	r2, r3
 8001334:	4b1c      	ldr	r3, [pc, #112]	; (80013a8 <MPU6050_GetAccel+0xb0>)
 8001336:	805a      	strh	r2, [r3, #2]
	IMU.az = MPU6050_ReceiveData(0x3F) << 8 | MPU6050_ReceiveData(0x40);
 8001338:	203f      	movs	r0, #63	; 0x3f
 800133a:	f7ff ffb3 	bl	80012a4 <MPU6050_ReceiveData>
 800133e:	4603      	mov	r3, r0
 8001340:	021b      	lsls	r3, r3, #8
 8001342:	b21c      	sxth	r4, r3
 8001344:	2040      	movs	r0, #64	; 0x40
 8001346:	f7ff ffad 	bl	80012a4 <MPU6050_ReceiveData>
 800134a:	4603      	mov	r3, r0
 800134c:	b21b      	sxth	r3, r3
 800134e:	4323      	orrs	r3, r4
 8001350:	b21a      	sxth	r2, r3
 8001352:	4b15      	ldr	r3, [pc, #84]	; (80013a8 <MPU6050_GetAccel+0xb0>)
 8001354:	809a      	strh	r2, [r3, #4]

	IMU.ax -= IMU.ax_offset;
 8001356:	4b14      	ldr	r3, [pc, #80]	; (80013a8 <MPU6050_GetAccel+0xb0>)
 8001358:	f9b3 3000 	ldrsh.w	r3, [r3]
 800135c:	b29a      	uxth	r2, r3
 800135e:	4b12      	ldr	r3, [pc, #72]	; (80013a8 <MPU6050_GetAccel+0xb0>)
 8001360:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001364:	b29b      	uxth	r3, r3
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	b29b      	uxth	r3, r3
 800136a:	b21a      	sxth	r2, r3
 800136c:	4b0e      	ldr	r3, [pc, #56]	; (80013a8 <MPU6050_GetAccel+0xb0>)
 800136e:	801a      	strh	r2, [r3, #0]
	IMU.ay -= IMU.ay_offset;
 8001370:	4b0d      	ldr	r3, [pc, #52]	; (80013a8 <MPU6050_GetAccel+0xb0>)
 8001372:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001376:	b29a      	uxth	r2, r3
 8001378:	4b0b      	ldr	r3, [pc, #44]	; (80013a8 <MPU6050_GetAccel+0xb0>)
 800137a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800137e:	b29b      	uxth	r3, r3
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	b29b      	uxth	r3, r3
 8001384:	b21a      	sxth	r2, r3
 8001386:	4b08      	ldr	r3, [pc, #32]	; (80013a8 <MPU6050_GetAccel+0xb0>)
 8001388:	805a      	strh	r2, [r3, #2]
	IMU.az -= IMU.az_offset;
 800138a:	4b07      	ldr	r3, [pc, #28]	; (80013a8 <MPU6050_GetAccel+0xb0>)
 800138c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001390:	b29a      	uxth	r2, r3
 8001392:	4b05      	ldr	r3, [pc, #20]	; (80013a8 <MPU6050_GetAccel+0xb0>)
 8001394:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001398:	b29b      	uxth	r3, r3
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	b29b      	uxth	r3, r3
 800139e:	b21a      	sxth	r2, r3
 80013a0:	4b01      	ldr	r3, [pc, #4]	; (80013a8 <MPU6050_GetAccel+0xb0>)
 80013a2:	809a      	strh	r2, [r3, #4]
}
 80013a4:	bf00      	nop
 80013a6:	bd98      	pop	{r3, r4, r7, pc}
 80013a8:	20000208 	.word	0x20000208

080013ac <MPU6050_GetGyro>:

void MPU6050_GetGyro(void){
 80013ac:	b598      	push	{r3, r4, r7, lr}
 80013ae:	af00      	add	r7, sp, #0
	IMU.gx = MPU6050_ReceiveData(0x43) << 8 | MPU6050_ReceiveData(0x44);
 80013b0:	2043      	movs	r0, #67	; 0x43
 80013b2:	f7ff ff77 	bl	80012a4 <MPU6050_ReceiveData>
 80013b6:	4603      	mov	r3, r0
 80013b8:	021b      	lsls	r3, r3, #8
 80013ba:	b21c      	sxth	r4, r3
 80013bc:	2044      	movs	r0, #68	; 0x44
 80013be:	f7ff ff71 	bl	80012a4 <MPU6050_ReceiveData>
 80013c2:	4603      	mov	r3, r0
 80013c4:	b21b      	sxth	r3, r3
 80013c6:	4323      	orrs	r3, r4
 80013c8:	b21a      	sxth	r2, r3
 80013ca:	4b24      	ldr	r3, [pc, #144]	; (800145c <MPU6050_GetGyro+0xb0>)
 80013cc:	80da      	strh	r2, [r3, #6]
	IMU.gy = MPU6050_ReceiveData(0x45) << 8 | MPU6050_ReceiveData(0x46);
 80013ce:	2045      	movs	r0, #69	; 0x45
 80013d0:	f7ff ff68 	bl	80012a4 <MPU6050_ReceiveData>
 80013d4:	4603      	mov	r3, r0
 80013d6:	021b      	lsls	r3, r3, #8
 80013d8:	b21c      	sxth	r4, r3
 80013da:	2046      	movs	r0, #70	; 0x46
 80013dc:	f7ff ff62 	bl	80012a4 <MPU6050_ReceiveData>
 80013e0:	4603      	mov	r3, r0
 80013e2:	b21b      	sxth	r3, r3
 80013e4:	4323      	orrs	r3, r4
 80013e6:	b21a      	sxth	r2, r3
 80013e8:	4b1c      	ldr	r3, [pc, #112]	; (800145c <MPU6050_GetGyro+0xb0>)
 80013ea:	811a      	strh	r2, [r3, #8]
	IMU.gz = MPU6050_ReceiveData(0x47) << 8 | MPU6050_ReceiveData(0x48);
 80013ec:	2047      	movs	r0, #71	; 0x47
 80013ee:	f7ff ff59 	bl	80012a4 <MPU6050_ReceiveData>
 80013f2:	4603      	mov	r3, r0
 80013f4:	021b      	lsls	r3, r3, #8
 80013f6:	b21c      	sxth	r4, r3
 80013f8:	2048      	movs	r0, #72	; 0x48
 80013fa:	f7ff ff53 	bl	80012a4 <MPU6050_ReceiveData>
 80013fe:	4603      	mov	r3, r0
 8001400:	b21b      	sxth	r3, r3
 8001402:	4323      	orrs	r3, r4
 8001404:	b21a      	sxth	r2, r3
 8001406:	4b15      	ldr	r3, [pc, #84]	; (800145c <MPU6050_GetGyro+0xb0>)
 8001408:	815a      	strh	r2, [r3, #10]

	IMU.gx -= IMU.gx_offset;
 800140a:	4b14      	ldr	r3, [pc, #80]	; (800145c <MPU6050_GetGyro+0xb0>)
 800140c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001410:	b29a      	uxth	r2, r3
 8001412:	4b12      	ldr	r3, [pc, #72]	; (800145c <MPU6050_GetGyro+0xb0>)
 8001414:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001418:	b29b      	uxth	r3, r3
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	b29b      	uxth	r3, r3
 800141e:	b21a      	sxth	r2, r3
 8001420:	4b0e      	ldr	r3, [pc, #56]	; (800145c <MPU6050_GetGyro+0xb0>)
 8001422:	80da      	strh	r2, [r3, #6]
	IMU.gy -= IMU.gy_offset;
 8001424:	4b0d      	ldr	r3, [pc, #52]	; (800145c <MPU6050_GetGyro+0xb0>)
 8001426:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800142a:	b29a      	uxth	r2, r3
 800142c:	4b0b      	ldr	r3, [pc, #44]	; (800145c <MPU6050_GetGyro+0xb0>)
 800142e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001432:	b29b      	uxth	r3, r3
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	b29b      	uxth	r3, r3
 8001438:	b21a      	sxth	r2, r3
 800143a:	4b08      	ldr	r3, [pc, #32]	; (800145c <MPU6050_GetGyro+0xb0>)
 800143c:	811a      	strh	r2, [r3, #8]
	IMU.gz -= IMU.gz_offset;
 800143e:	4b07      	ldr	r3, [pc, #28]	; (800145c <MPU6050_GetGyro+0xb0>)
 8001440:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001444:	b29a      	uxth	r2, r3
 8001446:	4b05      	ldr	r3, [pc, #20]	; (800145c <MPU6050_GetGyro+0xb0>)
 8001448:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800144c:	b29b      	uxth	r3, r3
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	b29b      	uxth	r3, r3
 8001452:	b21a      	sxth	r2, r3
 8001454:	4b01      	ldr	r3, [pc, #4]	; (800145c <MPU6050_GetGyro+0xb0>)
 8001456:	815a      	strh	r2, [r3, #10]
}
 8001458:	bf00      	nop
 800145a:	bd98      	pop	{r3, r4, r7, pc}
 800145c:	20000208 	.word	0x20000208

08001460 <MPU6050_GetRoll_Acc>:

void MPU6050_GetRoll_Acc(void){
 8001460:	b5b0      	push	{r4, r5, r7, lr}
 8001462:	af00      	add	r7, sp, #0
	IMU.roll_acc = atan(IMU.ay / (sqrt(-IMU.ax * IMU.ax + IMU.az * IMU.az))) * 180 / M_PI;
 8001464:	4b28      	ldr	r3, [pc, #160]	; (8001508 <MPU6050_GetRoll_Acc+0xa8>)
 8001466:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff f862 	bl	8000534 <__aeabi_i2d>
 8001470:	4604      	mov	r4, r0
 8001472:	460d      	mov	r5, r1
 8001474:	4b24      	ldr	r3, [pc, #144]	; (8001508 <MPU6050_GetRoll_Acc+0xa8>)
 8001476:	f9b3 3000 	ldrsh.w	r3, [r3]
 800147a:	425b      	negs	r3, r3
 800147c:	4a22      	ldr	r2, [pc, #136]	; (8001508 <MPU6050_GetRoll_Acc+0xa8>)
 800147e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001482:	fb03 f202 	mul.w	r2, r3, r2
 8001486:	4b20      	ldr	r3, [pc, #128]	; (8001508 <MPU6050_GetRoll_Acc+0xa8>)
 8001488:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800148c:	4619      	mov	r1, r3
 800148e:	4b1e      	ldr	r3, [pc, #120]	; (8001508 <MPU6050_GetRoll_Acc+0xa8>)
 8001490:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001494:	fb01 f303 	mul.w	r3, r1, r3
 8001498:	4413      	add	r3, r2
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff f84a 	bl	8000534 <__aeabi_i2d>
 80014a0:	4602      	mov	r2, r0
 80014a2:	460b      	mov	r3, r1
 80014a4:	ec43 2b10 	vmov	d0, r2, r3
 80014a8:	f006 fd4e 	bl	8007f48 <sqrt>
 80014ac:	ec53 2b10 	vmov	r2, r3, d0
 80014b0:	4620      	mov	r0, r4
 80014b2:	4629      	mov	r1, r5
 80014b4:	f7ff f9d2 	bl	800085c <__aeabi_ddiv>
 80014b8:	4602      	mov	r2, r0
 80014ba:	460b      	mov	r3, r1
 80014bc:	ec43 2b17 	vmov	d7, r2, r3
 80014c0:	eeb0 0a47 	vmov.f32	s0, s14
 80014c4:	eef0 0a67 	vmov.f32	s1, s15
 80014c8:	f006 fd6a 	bl	8007fa0 <atan>
 80014cc:	ec51 0b10 	vmov	r0, r1, d0
 80014d0:	f04f 0200 	mov.w	r2, #0
 80014d4:	4b0d      	ldr	r3, [pc, #52]	; (800150c <MPU6050_GetRoll_Acc+0xac>)
 80014d6:	f7ff f897 	bl	8000608 <__aeabi_dmul>
 80014da:	4602      	mov	r2, r0
 80014dc:	460b      	mov	r3, r1
 80014de:	4610      	mov	r0, r2
 80014e0:	4619      	mov	r1, r3
 80014e2:	a307      	add	r3, pc, #28	; (adr r3, 8001500 <MPU6050_GetRoll_Acc+0xa0>)
 80014e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e8:	f7ff f9b8 	bl	800085c <__aeabi_ddiv>
 80014ec:	4602      	mov	r2, r0
 80014ee:	460b      	mov	r3, r1
 80014f0:	4905      	ldr	r1, [pc, #20]	; (8001508 <MPU6050_GetRoll_Acc+0xa8>)
 80014f2:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 80014f6:	bf00      	nop
 80014f8:	bdb0      	pop	{r4, r5, r7, pc}
 80014fa:	bf00      	nop
 80014fc:	f3af 8000 	nop.w
 8001500:	54442d18 	.word	0x54442d18
 8001504:	400921fb 	.word	0x400921fb
 8001508:	20000208 	.word	0x20000208
 800150c:	40668000 	.word	0x40668000

08001510 <MPU6050_GetRoll_Gyr>:

void MPU6050_GetPitch_Acc(void){
	IMU.pitch_acc = atan(IMU.ax / (sqrt(-IMU.ay * IMU.ay + IMU.az * IMU.az))) * 180 / M_PI;
}

void MPU6050_GetRoll_Gyr(void){
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
	IMU.roll_gyr = IMU.gx * dt / 1000.f;
 8001514:	4b0d      	ldr	r3, [pc, #52]	; (800154c <MPU6050_GetRoll_Gyr+0x3c>)
 8001516:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800151a:	461a      	mov	r2, r3
 800151c:	4b0c      	ldr	r3, [pc, #48]	; (8001550 <MPU6050_GetRoll_Gyr+0x40>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	fb02 f303 	mul.w	r3, r2, r3
 8001524:	ee07 3a90 	vmov	s15, r3
 8001528:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800152c:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001554 <MPU6050_GetRoll_Gyr+0x44>
 8001530:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001534:	ee16 0a90 	vmov	r0, s13
 8001538:	f7ff f80e 	bl	8000558 <__aeabi_f2d>
 800153c:	4602      	mov	r2, r0
 800153e:	460b      	mov	r3, r1
 8001540:	4902      	ldr	r1, [pc, #8]	; (800154c <MPU6050_GetRoll_Gyr+0x3c>)
 8001542:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	20000208 	.word	0x20000208
 8001550:	20000260 	.word	0x20000260
 8001554:	447a0000 	.word	0x447a0000

08001558 <MPU6050_getRoll_Filtered>:

void MPU6050_GetPitch_Gyr(void){
	IMU.pitch_gyr = IMU.gy * dt / 1000.f;
}

void MPU6050_getRoll_Filtered(void){
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
	IMU.roll_filtered = complementaryFilter_double(IMU.roll_acc, IMU.roll_gyr);
 800155c:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <MPU6050_getRoll_Filtered+0x38>)
 800155e:	ed93 7b06 	vldr	d7, [r3, #24]
 8001562:	4b0b      	ldr	r3, [pc, #44]	; (8001590 <MPU6050_getRoll_Filtered+0x38>)
 8001564:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 8001568:	eeb0 1a46 	vmov.f32	s2, s12
 800156c:	eef0 1a66 	vmov.f32	s3, s13
 8001570:	eeb0 0a47 	vmov.f32	s0, s14
 8001574:	eef0 0a67 	vmov.f32	s1, s15
 8001578:	f000 f80e 	bl	8001598 <complementaryFilter_double>
 800157c:	eeb0 7a40 	vmov.f32	s14, s0
 8001580:	eef0 7a60 	vmov.f32	s15, s1
 8001584:	4b02      	ldr	r3, [pc, #8]	; (8001590 <MPU6050_getRoll_Filtered+0x38>)
 8001586:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	20000208 	.word	0x20000208
 8001594:	00000000 	.word	0x00000000

08001598 <complementaryFilter_double>:
	curTime = count_ms;
	dt = curTime - prevTime;
	curTime = count_ms;
}

double complementaryFilter_double(double val1, double val2){
 8001598:	b5b0      	push	{r4, r5, r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	ed87 0b02 	vstr	d0, [r7, #8]
 80015a2:	ed87 1b00 	vstr	d1, [r7]
	return ALPHA * val1 + (1 - ALPHA) * val2;
 80015a6:	a312      	add	r3, pc, #72	; (adr r3, 80015f0 <complementaryFilter_double+0x58>)
 80015a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80015b0:	f7ff f82a 	bl	8000608 <__aeabi_dmul>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	4614      	mov	r4, r2
 80015ba:	461d      	mov	r5, r3
 80015bc:	a30e      	add	r3, pc, #56	; (adr r3, 80015f8 <complementaryFilter_double+0x60>)
 80015be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80015c6:	f7ff f81f 	bl	8000608 <__aeabi_dmul>
 80015ca:	4602      	mov	r2, r0
 80015cc:	460b      	mov	r3, r1
 80015ce:	4620      	mov	r0, r4
 80015d0:	4629      	mov	r1, r5
 80015d2:	f7fe fe63 	bl	800029c <__adddf3>
 80015d6:	4602      	mov	r2, r0
 80015d8:	460b      	mov	r3, r1
 80015da:	ec43 2b17 	vmov	d7, r2, r3
}
 80015de:	eeb0 0a47 	vmov.f32	s0, s14
 80015e2:	eef0 0a67 	vmov.f32	s1, s15
 80015e6:	3710      	adds	r7, #16
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bdb0      	pop	{r4, r5, r7, pc}
 80015ec:	f3af 8000 	nop.w
 80015f0:	cccccccd 	.word	0xcccccccd
 80015f4:	3feccccc 	.word	0x3feccccc
 80015f8:	99999998 	.word	0x99999998
 80015fc:	3fb99999 	.word	0x3fb99999

08001600 <LL_GPIO_SetOutputPin>:
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	683a      	ldr	r2, [r7, #0]
 800160e:	619a      	str	r2, [r3, #24]
}
 8001610:	bf00      	nop
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <LL_GPIO_ResetOutputPin>:
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	041a      	lsls	r2, r3, #16
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	619a      	str	r2, [r3, #24]
}
 800162e:	bf00      	nop
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
	...

0800163c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001644:	4b08      	ldr	r3, [pc, #32]	; (8001668 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001646:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001648:	4907      	ldr	r1, [pc, #28]	; (8001668 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4313      	orrs	r3, r2
 800164e:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001650:	4b05      	ldr	r3, [pc, #20]	; (8001668 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001652:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	4013      	ands	r3, r2
 8001658:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800165a:	68fb      	ldr	r3, [r7, #12]
}
 800165c:	bf00      	nop
 800165e:	3714      	adds	r7, #20
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	40023800 	.word	0x40023800

0800166c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001672:	463b      	mov	r3, r7
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	60da      	str	r2, [r3, #12]
 800167e:	611a      	str	r2, [r3, #16]
 8001680:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001682:	2004      	movs	r0, #4
 8001684:	f7ff ffda 	bl	800163c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8001688:	2080      	movs	r0, #128	; 0x80
 800168a:	f7ff ffd7 	bl	800163c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800168e:	2001      	movs	r0, #1
 8001690:	f7ff ffd4 	bl	800163c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001694:	2002      	movs	r0, #2
 8001696:	f7ff ffd1 	bl	800163c <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_13);
 800169a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800169e:	4815      	ldr	r0, [pc, #84]	; (80016f4 <MX_GPIO_Init+0x88>)
 80016a0:	f7ff ffbc 	bl	800161c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(NSS_GPIO_Port, NSS_Pin);
 80016a4:	2110      	movs	r1, #16
 80016a6:	4814      	ldr	r0, [pc, #80]	; (80016f8 <MX_GPIO_Init+0x8c>)
 80016a8:	f7ff ffaa 	bl	8001600 <LL_GPIO_SetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 80016ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016b0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80016b2:	2301      	movs	r3, #1
 80016b4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80016b6:	2300      	movs	r3, #0
 80016b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80016ba:	2300      	movs	r3, #0
 80016bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80016be:	2300      	movs	r3, #0
 80016c0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016c2:	463b      	mov	r3, r7
 80016c4:	4619      	mov	r1, r3
 80016c6:	480b      	ldr	r0, [pc, #44]	; (80016f4 <MX_GPIO_Init+0x88>)
 80016c8:	f002 fead 	bl	8004426 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = NSS_Pin;
 80016cc:	2310      	movs	r3, #16
 80016ce:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80016d0:	2301      	movs	r3, #1
 80016d2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80016d4:	2303      	movs	r3, #3
 80016d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80016d8:	2300      	movs	r3, #0
 80016da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80016dc:	2300      	movs	r3, #0
 80016de:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 80016e0:	463b      	mov	r3, r7
 80016e2:	4619      	mov	r1, r3
 80016e4:	4804      	ldr	r0, [pc, #16]	; (80016f8 <MX_GPIO_Init+0x8c>)
 80016e6:	f002 fe9e 	bl	8004426 <LL_GPIO_Init>

}
 80016ea:	bf00      	nop
 80016ec:	3718      	adds	r7, #24
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	40020800 	.word	0x40020800
 80016f8:	40020000 	.word	0x40020000

080016fc <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	601a      	str	r2, [r3, #0]
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          ENGC          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	601a      	str	r2, [r3, #0]
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <LL_I2C_SetOwnAddress2>:
  * @param  I2Cx I2C Instance.
  * @param  OwnAddress2 This parameter must be a value between Min_Data=0 and Max_Data=0x7F.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	68db      	ldr	r3, [r3, #12]
 800174a:	f023 02fe 	bic.w	r2, r3, #254	; 0xfe
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	431a      	orrs	r2, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	60da      	str	r2, [r3, #12]
}
 8001756:	bf00      	nop
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr

08001762 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         ENDUAL        LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 8001762:	b480      	push	{r7}
 8001764:	b083      	sub	sp, #12
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	68db      	ldr	r3, [r3, #12]
 800176e:	f023 0201 	bic.w	r2, r3, #1
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	60da      	str	r2, [r3, #12]
}
 8001776:	bf00      	nop
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
	...

08001784 <LL_AHB1_GRP1_EnableClock>:
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800178c:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800178e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001790:	4907      	ldr	r1, [pc, #28]	; (80017b0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4313      	orrs	r3, r2
 8001796:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001798:	4b05      	ldr	r3, [pc, #20]	; (80017b0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800179a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	4013      	ands	r3, r2
 80017a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80017a2:	68fb      	ldr	r3, [r7, #12]
}
 80017a4:	bf00      	nop
 80017a6:	3714      	adds	r7, #20
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr
 80017b0:	40023800 	.word	0x40023800

080017b4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b085      	sub	sp, #20
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80017bc:	4b08      	ldr	r3, [pc, #32]	; (80017e0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80017be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017c0:	4907      	ldr	r1, [pc, #28]	; (80017e0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80017c8:	4b05      	ldr	r3, [pc, #20]	; (80017e0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80017ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	4013      	ands	r3, r2
 80017d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80017d2:	68fb      	ldr	r3, [r7, #12]
}
 80017d4:	bf00      	nop
 80017d6:	3714      	adds	r7, #20
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	40023800 	.word	0x40023800

080017e4 <MX_I2C1_Init>:

/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b08e      	sub	sp, #56	; 0x38
 80017e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 80017ea:	f107 0318 	add.w	r3, r7, #24
 80017ee:	2220      	movs	r2, #32
 80017f0:	2100      	movs	r1, #0
 80017f2:	4618      	mov	r0, r3
 80017f4:	f004 fcec 	bl	80061d0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f8:	463b      	mov	r3, r7
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]
 80017fe:	605a      	str	r2, [r3, #4]
 8001800:	609a      	str	r2, [r3, #8]
 8001802:	60da      	str	r2, [r3, #12]
 8001804:	611a      	str	r2, [r3, #16]
 8001806:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001808:	2002      	movs	r0, #2
 800180a:	f7ff ffbb 	bl	8001784 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800180e:	23c0      	movs	r3, #192	; 0xc0
 8001810:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001812:	2302      	movs	r3, #2
 8001814:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001816:	2303      	movs	r3, #3
 8001818:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 800181a:	2301      	movs	r3, #1
 800181c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800181e:	2300      	movs	r3, #0
 8001820:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8001822:	2304      	movs	r3, #4
 8001824:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001826:	463b      	mov	r3, r7
 8001828:	4619      	mov	r1, r3
 800182a:	4816      	ldr	r0, [pc, #88]	; (8001884 <MX_I2C1_Init+0xa0>)
 800182c:	f002 fdfb 	bl	8004426 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8001830:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001834:	f7ff ffbe 	bl	80017b4 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C1_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C1);
 8001838:	4813      	ldr	r0, [pc, #76]	; (8001888 <MX_I2C1_Init+0xa4>)
 800183a:	f7ff ff92 	bl	8001762 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 800183e:	4812      	ldr	r0, [pc, #72]	; (8001888 <MX_I2C1_Init+0xa4>)
 8001840:	f7ff ff6c 	bl	800171c <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8001844:	4810      	ldr	r0, [pc, #64]	; (8001888 <MX_I2C1_Init+0xa4>)
 8001846:	f7ff ff59 	bl	80016fc <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 800184a:	2300      	movs	r3, #0
 800184c:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 800184e:	4b0f      	ldr	r3, [pc, #60]	; (800188c <MX_I2C1_Init+0xa8>)
 8001850:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 8001852:	2300      	movs	r3, #0
 8001854:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.OwnAddress1 = 0;
 8001856:	2300      	movs	r3, #0
 8001858:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 800185a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800185e:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8001860:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001864:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8001866:	f107 0318 	add.w	r3, r7, #24
 800186a:	4619      	mov	r1, r3
 800186c:	4806      	ldr	r0, [pc, #24]	; (8001888 <MX_I2C1_Init+0xa4>)
 800186e:	f002 ff59 	bl	8004724 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0);
 8001872:	2100      	movs	r1, #0
 8001874:	4804      	ldr	r0, [pc, #16]	; (8001888 <MX_I2C1_Init+0xa4>)
 8001876:	f7ff ff61 	bl	800173c <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800187a:	bf00      	nop
 800187c:	3738      	adds	r7, #56	; 0x38
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40020400 	.word	0x40020400
 8001888:	40005400 	.word	0x40005400
 800188c:	000186a0 	.word	0x000186a0

08001890 <LL_TIM_EnableCounter>:
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f043 0201 	orr.w	r2, r3, #1
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	601a      	str	r2, [r3, #0]
}
 80018a4:	bf00      	nop
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	f043 0201 	orr.w	r2, r3, #1
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	60da      	str	r2, [r3, #12]
}
 80018c4:	bf00      	nop
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018e0:	2b80      	cmp	r3, #128	; 0x80
 80018e2:	bf0c      	ite	eq
 80018e4:	2301      	moveq	r3, #1
 80018e6:	2300      	movne	r3, #0
 80018e8:	b2db      	uxtb	r3, r3
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr

080018f6 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80018f6:	b480      	push	{r7}
 80018f8:	b083      	sub	sp, #12
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
 80018fe:	460b      	mov	r3, r1
 8001900:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8001902:	78fa      	ldrb	r2, [r7, #3]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	605a      	str	r2, [r3, #4]
}
 8001908:	bf00      	nop
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <_write>:
#include "DCmotor.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
int _write(int file, char *p, int len){		// printf�???????????????????????????????????? USART6?�� ?���???????????????????????????????????? ?��?�� ?��?��
 8001914:	b580      	push	{r7, lr}
 8001916:	b086      	sub	sp, #24
 8001918:	af00      	add	r7, sp, #0
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	60b9      	str	r1, [r7, #8]
 800191e:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < len ; i++){
 8001920:	2300      	movs	r3, #0
 8001922:	617b      	str	r3, [r7, #20]
 8001924:	e011      	b.n	800194a <_write+0x36>
		while(!LL_USART_IsActiveFlag_TXE(USART6));
 8001926:	bf00      	nop
 8001928:	480c      	ldr	r0, [pc, #48]	; (800195c <_write+0x48>)
 800192a:	f7ff ffd1 	bl	80018d0 <LL_USART_IsActiveFlag_TXE>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d0f9      	beq.n	8001928 <_write+0x14>
		LL_USART_TransmitData8(USART6, *(p+i));
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	68ba      	ldr	r2, [r7, #8]
 8001938:	4413      	add	r3, r2
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	4619      	mov	r1, r3
 800193e:	4807      	ldr	r0, [pc, #28]	; (800195c <_write+0x48>)
 8001940:	f7ff ffd9 	bl	80018f6 <LL_USART_TransmitData8>
	for (int i = 0; i < len ; i++){
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	3301      	adds	r3, #1
 8001948:	617b      	str	r3, [r7, #20]
 800194a:	697a      	ldr	r2, [r7, #20]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	429a      	cmp	r2, r3
 8001950:	dbe9      	blt.n	8001926 <_write+0x12>
	}
	return len;
 8001952:	687b      	ldr	r3, [r7, #4]
}
 8001954:	4618      	mov	r0, r3
 8001956:	3718      	adds	r7, #24
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	40011400 	.word	0x40011400

08001960 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001960:	b5b0      	push	{r4, r5, r7, lr}
 8001962:	b09c      	sub	sp, #112	; 0x70
 8001964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	double target_roll = 0.0;
 8001966:	f04f 0200 	mov.w	r2, #0
 800196a:	f04f 0300 	mov.w	r3, #0
 800196e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	double roll_PID = 0.0;
 8001972:	f04f 0200 	mov.w	r2, #0
 8001976:	f04f 0300 	mov.w	r3, #0
 800197a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	double roll_err;
	double roll_err_sum = 0;
 800197e:	f04f 0200 	mov.w	r2, #0
 8001982:	f04f 0300 	mov.w	r3, #0
 8001986:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	double roll_err_dt;
	double roll_err_prev;

	short motor_input;

	double dt_double = 0.001;
 800198a:	a3ab      	add	r3, pc, #684	; (adr r3, 8001c38 <main+0x2d8>)
 800198c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001990:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

	double Kp = 40;
 8001994:	f04f 0200 	mov.w	r2, #0
 8001998:	4b9f      	ldr	r3, [pc, #636]	; (8001c18 <main+0x2b8>)
 800199a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	double Ki = 0;
 800199e:	f04f 0200 	mov.w	r2, #0
 80019a2:	f04f 0300 	mov.w	r3, #0
 80019a6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double Kd = 0;
 80019aa:	f04f 0200 	mov.w	r2, #0
 80019ae:	f04f 0300 	mov.w	r3, #0
 80019b2:	e9c7 2308 	strd	r2, r3, [r7, #32]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019b6:	f000 ff65 	bl	8002884 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019ba:	f000 f941 	bl	8001c40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019be:	f7ff fe55 	bl	800166c <MX_GPIO_Init>
  MX_USART6_UART_Init();
 80019c2:	f000 fed5 	bl	8002770 <MX_USART6_UART_Init>
  MX_I2C1_Init();
 80019c6:	f7ff ff0d 	bl	80017e4 <MX_I2C1_Init>
  MX_TIM2_Init();
 80019ca:	f000 fd29 	bl	8002420 <MX_TIM2_Init>
  MX_TIM3_Init();
 80019ce:	f000 fdaf 	bl	8002530 <MX_TIM3_Init>
  MX_SPI1_Init();
 80019d2:	f000 f9a5 	bl	8001d20 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  MPU6050_Init();
 80019d6:	f7ff fb3d 	bl	8001054 <MPU6050_Init>
  MPU6050_Calibration();
 80019da:	f7ff fb53 	bl	8001084 <MPU6050_Calibration>
  DCmotor_Init();
 80019de:	f7ff fadb 	bl	8000f98 <DCmotor_Init>
  LL_TIM_EnableIT_UPDATE(TIM3);
 80019e2:	488e      	ldr	r0, [pc, #568]	; (8001c1c <main+0x2bc>)
 80019e4:	f7ff ff64 	bl	80018b0 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM3);
 80019e8:	488c      	ldr	r0, [pc, #560]	; (8001c1c <main+0x2bc>)
 80019ea:	f7ff ff51 	bl	8001890 <LL_TIM_EnableCounter>
  printf("Start Balancing!\n\n");
 80019ee:	488c      	ldr	r0, [pc, #560]	; (8001c20 <main+0x2c0>)
 80019f0:	f004 fb0e 	bl	8006010 <puts>
    /* USER CODE BEGIN 3 */
//	  getDeltaTime();
//	  if (dt == 0) dt = 1;
//	  dt_double = dt / 1000.f;

	  MPU6050_GetAccel();
 80019f4:	f7ff fc80 	bl	80012f8 <MPU6050_GetAccel>
	  MPU6050_GetGyro();
 80019f8:	f7ff fcd8 	bl	80013ac <MPU6050_GetGyro>
	  MPU6050_GetRoll_Acc();
 80019fc:	f7ff fd30 	bl	8001460 <MPU6050_GetRoll_Acc>
	  MPU6050_GetRoll_Gyr();
 8001a00:	f7ff fd86 	bl	8001510 <MPU6050_GetRoll_Gyr>
	  MPU6050_getRoll_Filtered();
 8001a04:	f7ff fda8 	bl	8001558 <MPU6050_getRoll_Filtered>

	  if (IMU.roll_filtered > 15.0) IMU.roll_filtered = 15.0;	// roll 최대, 최소 제한
 8001a08:	4b86      	ldr	r3, [pc, #536]	; (8001c24 <main+0x2c4>)
 8001a0a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001a0e:	f04f 0200 	mov.w	r2, #0
 8001a12:	4b85      	ldr	r3, [pc, #532]	; (8001c28 <main+0x2c8>)
 8001a14:	f7ff f888 	bl	8000b28 <__aeabi_dcmpgt>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d006      	beq.n	8001a2c <main+0xcc>
 8001a1e:	4981      	ldr	r1, [pc, #516]	; (8001c24 <main+0x2c4>)
 8001a20:	f04f 0200 	mov.w	r2, #0
 8001a24:	4b80      	ldr	r3, [pc, #512]	; (8001c28 <main+0x2c8>)
 8001a26:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8001a2a:	e010      	b.n	8001a4e <main+0xee>
	  else if (IMU.roll_filtered <= -15.0) IMU.roll_filtered = -15.0;
 8001a2c:	4b7d      	ldr	r3, [pc, #500]	; (8001c24 <main+0x2c4>)
 8001a2e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001a32:	f04f 0200 	mov.w	r2, #0
 8001a36:	4b7d      	ldr	r3, [pc, #500]	; (8001c2c <main+0x2cc>)
 8001a38:	f7ff f862 	bl	8000b00 <__aeabi_dcmple>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d005      	beq.n	8001a4e <main+0xee>
 8001a42:	4978      	ldr	r1, [pc, #480]	; (8001c24 <main+0x2c4>)
 8001a44:	f04f 0200 	mov.w	r2, #0
 8001a48:	4b78      	ldr	r3, [pc, #480]	; (8001c2c <main+0x2cc>)
 8001a4a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	  roll_err = target_roll - IMU.roll_filtered;				// roll error 계산
 8001a4e:	4b75      	ldr	r3, [pc, #468]	; (8001c24 <main+0x2c4>)
 8001a50:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001a54:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001a58:	f7fe fc1e 	bl	8000298 <__aeabi_dsub>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
 8001a60:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	  if (isnan(roll_err) != 0) roll_err = roll_err_prev;		// roll 값이 크게 튀어 nan이 되는 경우 배제
 8001a64:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001a68:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001a6c:	f7ff f866 	bl	8000b3c <__aeabi_dcmpun>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d003      	beq.n	8001a7e <main+0x11e>
 8001a76:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001a7a:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

	  roll_err_sum += roll_err * dt_double;						// roll error 적분 계산
 8001a7e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001a82:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001a86:	f7fe fdbf 	bl	8000608 <__aeabi_dmul>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001a92:	f7fe fc03 	bl	800029c <__adddf3>
 8001a96:	4602      	mov	r2, r0
 8001a98:	460b      	mov	r3, r1
 8001a9a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	  if (roll_err_sum > 15.0) roll_err_sum = 15.0;				// roll errer 적분 최대, 최소 제한
 8001a9e:	f04f 0200 	mov.w	r2, #0
 8001aa2:	4b61      	ldr	r3, [pc, #388]	; (8001c28 <main+0x2c8>)
 8001aa4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001aa8:	f7ff f83e 	bl	8000b28 <__aeabi_dcmpgt>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d005      	beq.n	8001abe <main+0x15e>
 8001ab2:	f04f 0200 	mov.w	r2, #0
 8001ab6:	4b5c      	ldr	r3, [pc, #368]	; (8001c28 <main+0x2c8>)
 8001ab8:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 8001abc:	e00e      	b.n	8001adc <main+0x17c>
	  else if (roll_err_sum <= -15.0) roll_err_sum = -15.0;
 8001abe:	f04f 0200 	mov.w	r2, #0
 8001ac2:	4b5a      	ldr	r3, [pc, #360]	; (8001c2c <main+0x2cc>)
 8001ac4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001ac8:	f7ff f81a 	bl	8000b00 <__aeabi_dcmple>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d004      	beq.n	8001adc <main+0x17c>
 8001ad2:	f04f 0200 	mov.w	r2, #0
 8001ad6:	4b55      	ldr	r3, [pc, #340]	; (8001c2c <main+0x2cc>)
 8001ad8:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

	  roll_err_dt = (roll_err - roll_err_prev) / dt_double;		// roll error 미분 계산
 8001adc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001ae0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001ae4:	f7fe fbd8 	bl	8000298 <__aeabi_dsub>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	460b      	mov	r3, r1
 8001aec:	4610      	mov	r0, r2
 8001aee:	4619      	mov	r1, r3
 8001af0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001af4:	f7fe feb2 	bl	800085c <__aeabi_ddiv>
 8001af8:	4602      	mov	r2, r0
 8001afa:	460b      	mov	r3, r1
 8001afc:	e9c7 2306 	strd	r2, r3, [r7, #24]
	  roll_err_prev = roll_err;									// roll error 이전값 저장
 8001b00:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001b04:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	  roll_P = Kp * roll_err;									// roll P, I, D 계산
 8001b08:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001b0c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001b10:	f7fe fd7a 	bl	8000608 <__aeabi_dmul>
 8001b14:	4602      	mov	r2, r0
 8001b16:	460b      	mov	r3, r1
 8001b18:	e9c7 2304 	strd	r2, r3, [r7, #16]
	  roll_I = Ki * roll_err_sum;
 8001b1c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001b20:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001b24:	f7fe fd70 	bl	8000608 <__aeabi_dmul>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	  roll_D = -Kd * roll_err_dt;
 8001b30:	6a3c      	ldr	r4, [r7, #32]
 8001b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b34:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001b38:	4622      	mov	r2, r4
 8001b3a:	462b      	mov	r3, r5
 8001b3c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b40:	f7fe fd62 	bl	8000608 <__aeabi_dmul>
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	e9c7 2300 	strd	r2, r3, [r7]

	  roll_PID = roll_P + roll_I + roll_D;						// roll PID 계산
 8001b4c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b50:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b54:	f7fe fba2 	bl	800029c <__adddf3>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b60:	f7fe fb9c 	bl	800029c <__adddf3>
 8001b64:	4602      	mov	r2, r0
 8001b66:	460b      	mov	r3, r1
 8001b68:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

	  if (roll_PID > 0){										// PID 값으로 모터 구동(PWM 최대 제한)
 8001b6c:	f04f 0200 	mov.w	r2, #0
 8001b70:	f04f 0300 	mov.w	r3, #0
 8001b74:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001b78:	f7fe ffd6 	bl	8000b28 <__aeabi_dcmpgt>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d024      	beq.n	8001bcc <main+0x26c>
		  motor_input = 100 + roll_PID;
 8001b82:	f04f 0200 	mov.w	r2, #0
 8001b86:	4b2a      	ldr	r3, [pc, #168]	; (8001c30 <main+0x2d0>)
 8001b88:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001b8c:	f7fe fb86 	bl	800029c <__adddf3>
 8001b90:	4602      	mov	r2, r0
 8001b92:	460b      	mov	r3, r1
 8001b94:	4610      	mov	r0, r2
 8001b96:	4619      	mov	r1, r3
 8001b98:	f7fe ffe6 	bl	8000b68 <__aeabi_d2iz>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
		  if (motor_input > 800) motor_input = 800;
 8001ba2:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 8001ba6:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001baa:	dd03      	ble.n	8001bb4 <main+0x254>
 8001bac:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001bb0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
		  DCmotor_Backward(motor_input);
 8001bb4:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff fa19 	bl	8000ff0 <DCmotor_Backward>
		  printf("%d\n", motor_input);
 8001bbe:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	481b      	ldr	r0, [pc, #108]	; (8001c34 <main+0x2d4>)
 8001bc6:	f004 f9bd 	bl	8005f44 <iprintf>
 8001bca:	e713      	b.n	80019f4 <main+0x94>
	  }
	  else {
		  motor_input = 100 - roll_PID;
 8001bcc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001bd0:	f04f 0000 	mov.w	r0, #0
 8001bd4:	4916      	ldr	r1, [pc, #88]	; (8001c30 <main+0x2d0>)
 8001bd6:	f7fe fb5f 	bl	8000298 <__aeabi_dsub>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	460b      	mov	r3, r1
 8001bde:	4610      	mov	r0, r2
 8001be0:	4619      	mov	r1, r3
 8001be2:	f7fe ffc1 	bl	8000b68 <__aeabi_d2iz>
 8001be6:	4603      	mov	r3, r0
 8001be8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
		  if (motor_input > 800) motor_input = 800;
 8001bec:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 8001bf0:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001bf4:	dd03      	ble.n	8001bfe <main+0x29e>
 8001bf6:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001bfa:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
		  DCmotor_Forward(motor_input);
 8001bfe:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7ff f9e0 	bl	8000fc8 <DCmotor_Forward>
		  printf("%d\n", motor_input);
 8001c08:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4809      	ldr	r0, [pc, #36]	; (8001c34 <main+0x2d4>)
 8001c10:	f004 f998 	bl	8005f44 <iprintf>
	  MPU6050_GetAccel();
 8001c14:	e6ee      	b.n	80019f4 <main+0x94>
 8001c16:	bf00      	nop
 8001c18:	40440000 	.word	0x40440000
 8001c1c:	40000400 	.word	0x40000400
 8001c20:	08008558 	.word	0x08008558
 8001c24:	20000208 	.word	0x20000208
 8001c28:	402e0000 	.word	0x402e0000
 8001c2c:	c02e0000 	.word	0xc02e0000
 8001c30:	40590000 	.word	0x40590000
 8001c34:	0800856c 	.word	0x0800856c
 8001c38:	d2f1a9fc 	.word	0xd2f1a9fc
 8001c3c:	3f50624d 	.word	0x3f50624d

08001c40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b094      	sub	sp, #80	; 0x50
 8001c44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c46:	f107 0320 	add.w	r3, r7, #32
 8001c4a:	2230      	movs	r2, #48	; 0x30
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f004 fabe 	bl	80061d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c54:	f107 030c 	add.w	r3, r7, #12
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	605a      	str	r2, [r3, #4]
 8001c5e:	609a      	str	r2, [r3, #8]
 8001c60:	60da      	str	r2, [r3, #12]
 8001c62:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c64:	2300      	movs	r3, #0
 8001c66:	60bb      	str	r3, [r7, #8]
 8001c68:	4b28      	ldr	r3, [pc, #160]	; (8001d0c <SystemClock_Config+0xcc>)
 8001c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6c:	4a27      	ldr	r2, [pc, #156]	; (8001d0c <SystemClock_Config+0xcc>)
 8001c6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c72:	6413      	str	r3, [r2, #64]	; 0x40
 8001c74:	4b25      	ldr	r3, [pc, #148]	; (8001d0c <SystemClock_Config+0xcc>)
 8001c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c7c:	60bb      	str	r3, [r7, #8]
 8001c7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c80:	2300      	movs	r3, #0
 8001c82:	607b      	str	r3, [r7, #4]
 8001c84:	4b22      	ldr	r3, [pc, #136]	; (8001d10 <SystemClock_Config+0xd0>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001c8c:	4a20      	ldr	r2, [pc, #128]	; (8001d10 <SystemClock_Config+0xd0>)
 8001c8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c92:	6013      	str	r3, [r2, #0]
 8001c94:	4b1e      	ldr	r3, [pc, #120]	; (8001d10 <SystemClock_Config+0xd0>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c9c:	607b      	str	r3, [r7, #4]
 8001c9e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ca4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ca8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001caa:	2302      	movs	r3, #2
 8001cac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001cae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001cb4:	2319      	movs	r3, #25
 8001cb6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001cb8:	23a8      	movs	r3, #168	; 0xa8
 8001cba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001cc0:	2304      	movs	r3, #4
 8001cc2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cc4:	f107 0320 	add.w	r3, r7, #32
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f001 f8db 	bl	8002e84 <HAL_RCC_OscConfig>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001cd4:	f000 f81e 	bl	8001d14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cd8:	230f      	movs	r3, #15
 8001cda:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cdc:	2302      	movs	r3, #2
 8001cde:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ce4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ce8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cea:	2300      	movs	r3, #0
 8001cec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001cee:	f107 030c 	add.w	r3, r7, #12
 8001cf2:	2102      	movs	r1, #2
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f001 fb3d 	bl	8003374 <HAL_RCC_ClockConfig>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001d00:	f000 f808 	bl	8001d14 <Error_Handler>
  }
}
 8001d04:	bf00      	nop
 8001d06:	3750      	adds	r7, #80	; 0x50
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	40007000 	.word	0x40007000

08001d14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d18:	b672      	cpsid	i
}
 8001d1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d1c:	e7fe      	b.n	8001d1c <Error_Handler+0x8>
	...

08001d20 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001d24:	4b17      	ldr	r3, [pc, #92]	; (8001d84 <MX_SPI1_Init+0x64>)
 8001d26:	4a18      	ldr	r2, [pc, #96]	; (8001d88 <MX_SPI1_Init+0x68>)
 8001d28:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d2a:	4b16      	ldr	r3, [pc, #88]	; (8001d84 <MX_SPI1_Init+0x64>)
 8001d2c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d30:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d32:	4b14      	ldr	r3, [pc, #80]	; (8001d84 <MX_SPI1_Init+0x64>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d38:	4b12      	ldr	r3, [pc, #72]	; (8001d84 <MX_SPI1_Init+0x64>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001d3e:	4b11      	ldr	r3, [pc, #68]	; (8001d84 <MX_SPI1_Init+0x64>)
 8001d40:	2202      	movs	r2, #2
 8001d42:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001d44:	4b0f      	ldr	r3, [pc, #60]	; (8001d84 <MX_SPI1_Init+0x64>)
 8001d46:	2201      	movs	r2, #1
 8001d48:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d4a:	4b0e      	ldr	r3, [pc, #56]	; (8001d84 <MX_SPI1_Init+0x64>)
 8001d4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d50:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001d52:	4b0c      	ldr	r3, [pc, #48]	; (8001d84 <MX_SPI1_Init+0x64>)
 8001d54:	2228      	movs	r2, #40	; 0x28
 8001d56:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d58:	4b0a      	ldr	r3, [pc, #40]	; (8001d84 <MX_SPI1_Init+0x64>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d5e:	4b09      	ldr	r3, [pc, #36]	; (8001d84 <MX_SPI1_Init+0x64>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d64:	4b07      	ldr	r3, [pc, #28]	; (8001d84 <MX_SPI1_Init+0x64>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001d6a:	4b06      	ldr	r3, [pc, #24]	; (8001d84 <MX_SPI1_Init+0x64>)
 8001d6c:	220a      	movs	r2, #10
 8001d6e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d70:	4804      	ldr	r0, [pc, #16]	; (8001d84 <MX_SPI1_Init+0x64>)
 8001d72:	f001 fcab 	bl	80036cc <HAL_SPI_Init>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001d7c:	f7ff ffca 	bl	8001d14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d80:	bf00      	nop
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	20000264 	.word	0x20000264
 8001d88:	40013000 	.word	0x40013000

08001d8c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b08a      	sub	sp, #40	; 0x28
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d94:	f107 0314 	add.w	r3, r7, #20
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	605a      	str	r2, [r3, #4]
 8001d9e:	609a      	str	r2, [r3, #8]
 8001da0:	60da      	str	r2, [r3, #12]
 8001da2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a19      	ldr	r2, [pc, #100]	; (8001e10 <HAL_SPI_MspInit+0x84>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d12b      	bne.n	8001e06 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	613b      	str	r3, [r7, #16]
 8001db2:	4b18      	ldr	r3, [pc, #96]	; (8001e14 <HAL_SPI_MspInit+0x88>)
 8001db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db6:	4a17      	ldr	r2, [pc, #92]	; (8001e14 <HAL_SPI_MspInit+0x88>)
 8001db8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001dbc:	6453      	str	r3, [r2, #68]	; 0x44
 8001dbe:	4b15      	ldr	r3, [pc, #84]	; (8001e14 <HAL_SPI_MspInit+0x88>)
 8001dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dc6:	613b      	str	r3, [r7, #16]
 8001dc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	60fb      	str	r3, [r7, #12]
 8001dce:	4b11      	ldr	r3, [pc, #68]	; (8001e14 <HAL_SPI_MspInit+0x88>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	4a10      	ldr	r2, [pc, #64]	; (8001e14 <HAL_SPI_MspInit+0x88>)
 8001dd4:	f043 0301 	orr.w	r3, r3, #1
 8001dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dda:	4b0e      	ldr	r3, [pc, #56]	; (8001e14 <HAL_SPI_MspInit+0x88>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	60fb      	str	r3, [r7, #12]
 8001de4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001de6:	23e0      	movs	r3, #224	; 0xe0
 8001de8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dea:	2302      	movs	r3, #2
 8001dec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dee:	2300      	movs	r3, #0
 8001df0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df2:	2303      	movs	r3, #3
 8001df4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001df6:	2305      	movs	r3, #5
 8001df8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dfa:	f107 0314 	add.w	r3, r7, #20
 8001dfe:	4619      	mov	r1, r3
 8001e00:	4805      	ldr	r0, [pc, #20]	; (8001e18 <HAL_SPI_MspInit+0x8c>)
 8001e02:	f000 febb 	bl	8002b7c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001e06:	bf00      	nop
 8001e08:	3728      	adds	r7, #40	; 0x28
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	40013000 	.word	0x40013000
 8001e14:	40023800 	.word	0x40023800
 8001e18:	40020000 	.word	0x40020000

08001e1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e22:	2300      	movs	r3, #0
 8001e24:	607b      	str	r3, [r7, #4]
 8001e26:	4b10      	ldr	r3, [pc, #64]	; (8001e68 <HAL_MspInit+0x4c>)
 8001e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2a:	4a0f      	ldr	r2, [pc, #60]	; (8001e68 <HAL_MspInit+0x4c>)
 8001e2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e30:	6453      	str	r3, [r2, #68]	; 0x44
 8001e32:	4b0d      	ldr	r3, [pc, #52]	; (8001e68 <HAL_MspInit+0x4c>)
 8001e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e3a:	607b      	str	r3, [r7, #4]
 8001e3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	603b      	str	r3, [r7, #0]
 8001e42:	4b09      	ldr	r3, [pc, #36]	; (8001e68 <HAL_MspInit+0x4c>)
 8001e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e46:	4a08      	ldr	r2, [pc, #32]	; (8001e68 <HAL_MspInit+0x4c>)
 8001e48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e4e:	4b06      	ldr	r3, [pc, #24]	; (8001e68 <HAL_MspInit+0x4c>)
 8001e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e56:	603b      	str	r3, [r7, #0]
 8001e58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e5a:	bf00      	nop
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	40023800 	.word	0x40023800

08001e6c <LL_TIM_ClearFlag_UPDATE>:
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f06f 0201 	mvn.w	r2, #1
 8001e7a:	611a      	str	r2, [r3, #16]
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <LL_USART_IsActiveFlag_RXNE>:
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0320 	and.w	r3, r3, #32
 8001e98:	2b20      	cmp	r3, #32
 8001e9a:	bf0c      	ite	eq
 8001e9c:	2301      	moveq	r3, #1
 8001e9e:	2300      	movne	r3, #0
 8001ea0:	b2db      	uxtb	r3, r3
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr

08001eae <LL_USART_ClearFlag_RXNE>:
{
 8001eae:	b480      	push	{r7}
 8001eb0:	b083      	sub	sp, #12
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f06f 0220 	mvn.w	r2, #32
 8001ebc:	601a      	str	r2, [r3, #0]
}
 8001ebe:	bf00      	nop
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr

08001eca <LL_USART_ReceiveData8>:
{
 8001eca:	b480      	push	{r7}
 8001ecc:	b083      	sub	sp, #12
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	b2db      	uxtb	r3, r3
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ee8:	e7fe      	b.n	8001ee8 <NMI_Handler+0x4>

08001eea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eea:	b480      	push	{r7}
 8001eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eee:	e7fe      	b.n	8001eee <HardFault_Handler+0x4>

08001ef0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ef4:	e7fe      	b.n	8001ef4 <MemManage_Handler+0x4>

08001ef6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001efa:	e7fe      	b.n	8001efa <BusFault_Handler+0x4>

08001efc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f00:	e7fe      	b.n	8001f00 <UsageFault_Handler+0x4>

08001f02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f02:	b480      	push	{r7}
 8001f04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f06:	bf00      	nop
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f14:	bf00      	nop
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr

08001f1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f22:	bf00      	nop
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f30:	f000 fcfa 	bl	8002928 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f34:	bf00      	nop
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  /* USER CODE BEGIN TIM3_IRQn 1 */
	count_ms++;
 8001f3c:	4b04      	ldr	r3, [pc, #16]	; (8001f50 <TIM3_IRQHandler+0x18>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	3301      	adds	r3, #1
 8001f42:	4a03      	ldr	r2, [pc, #12]	; (8001f50 <TIM3_IRQHandler+0x18>)
 8001f44:	6013      	str	r3, [r2, #0]
	LL_TIM_ClearFlag_UPDATE(TIM3);
 8001f46:	4803      	ldr	r0, [pc, #12]	; (8001f54 <TIM3_IRQHandler+0x1c>)
 8001f48:	f7ff ff90 	bl	8001e6c <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM3_IRQn 1 */
}
 8001f4c:	bf00      	nop
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	200002c0 	.word	0x200002c0
 8001f54:	40000400 	.word	0x40000400

08001f58 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	if (LL_USART_IsActiveFlag_RXNE(USART6)){
 8001f5c:	480a      	ldr	r0, [pc, #40]	; (8001f88 <USART6_IRQHandler+0x30>)
 8001f5e:	f7ff ff93 	bl	8001e88 <LL_USART_IsActiveFlag_RXNE>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d00c      	beq.n	8001f82 <USART6_IRQHandler+0x2a>
	  LL_USART_ClearFlag_RXNE(USART6);
 8001f68:	4807      	ldr	r0, [pc, #28]	; (8001f88 <USART6_IRQHandler+0x30>)
 8001f6a:	f7ff ffa0 	bl	8001eae <LL_USART_ClearFlag_RXNE>
	  uart_rx_data = LL_USART_ReceiveData8(USART6);
 8001f6e:	4806      	ldr	r0, [pc, #24]	; (8001f88 <USART6_IRQHandler+0x30>)
 8001f70:	f7ff ffab 	bl	8001eca <LL_USART_ReceiveData8>
 8001f74:	4603      	mov	r3, r0
 8001f76:	461a      	mov	r2, r3
 8001f78:	4b04      	ldr	r3, [pc, #16]	; (8001f8c <USART6_IRQHandler+0x34>)
 8001f7a:	701a      	strb	r2, [r3, #0]
	  uart_rx_flag = 1;
 8001f7c:	4b04      	ldr	r3, [pc, #16]	; (8001f90 <USART6_IRQHandler+0x38>)
 8001f7e:	2201      	movs	r2, #1
 8001f80:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001f82:	bf00      	nop
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	40011400 	.word	0x40011400
 8001f8c:	200002bd 	.word	0x200002bd
 8001f90:	200002bc 	.word	0x200002bc

08001f94 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  return 1;
 8001f98:	2301      	movs	r3, #1
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <_kill>:

int _kill(int pid, int sig)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001fae:	f004 f961 	bl	8006274 <__errno>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2216      	movs	r2, #22
 8001fb6:	601a      	str	r2, [r3, #0]
  return -1;
 8001fb8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3708      	adds	r7, #8
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <_exit>:

void _exit (int status)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001fcc:	f04f 31ff 	mov.w	r1, #4294967295
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f7ff ffe7 	bl	8001fa4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001fd6:	e7fe      	b.n	8001fd6 <_exit+0x12>

08001fd8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b086      	sub	sp, #24
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	60b9      	str	r1, [r7, #8]
 8001fe2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	617b      	str	r3, [r7, #20]
 8001fe8:	e00a      	b.n	8002000 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001fea:	f3af 8000 	nop.w
 8001fee:	4601      	mov	r1, r0
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	1c5a      	adds	r2, r3, #1
 8001ff4:	60ba      	str	r2, [r7, #8]
 8001ff6:	b2ca      	uxtb	r2, r1
 8001ff8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	617b      	str	r3, [r7, #20]
 8002000:	697a      	ldr	r2, [r7, #20]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	429a      	cmp	r2, r3
 8002006:	dbf0      	blt.n	8001fea <_read+0x12>
  }

  return len;
 8002008:	687b      	ldr	r3, [r7, #4]
}
 800200a:	4618      	mov	r0, r3
 800200c:	3718      	adds	r7, #24
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}

08002012 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002012:	b480      	push	{r7}
 8002014:	b083      	sub	sp, #12
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800201a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800201e:	4618      	mov	r0, r3
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr

0800202a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800202a:	b480      	push	{r7}
 800202c:	b083      	sub	sp, #12
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
 8002032:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800203a:	605a      	str	r2, [r3, #4]
  return 0;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr

0800204a <_isatty>:

int _isatty(int file)
{
 800204a:	b480      	push	{r7}
 800204c:	b083      	sub	sp, #12
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002052:	2301      	movs	r3, #1
}
 8002054:	4618      	mov	r0, r3
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002060:	b480      	push	{r7}
 8002062:	b085      	sub	sp, #20
 8002064:	af00      	add	r7, sp, #0
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3714      	adds	r7, #20
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
	...

0800207c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b086      	sub	sp, #24
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002084:	4a14      	ldr	r2, [pc, #80]	; (80020d8 <_sbrk+0x5c>)
 8002086:	4b15      	ldr	r3, [pc, #84]	; (80020dc <_sbrk+0x60>)
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002090:	4b13      	ldr	r3, [pc, #76]	; (80020e0 <_sbrk+0x64>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d102      	bne.n	800209e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002098:	4b11      	ldr	r3, [pc, #68]	; (80020e0 <_sbrk+0x64>)
 800209a:	4a12      	ldr	r2, [pc, #72]	; (80020e4 <_sbrk+0x68>)
 800209c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800209e:	4b10      	ldr	r3, [pc, #64]	; (80020e0 <_sbrk+0x64>)
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4413      	add	r3, r2
 80020a6:	693a      	ldr	r2, [r7, #16]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d207      	bcs.n	80020bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020ac:	f004 f8e2 	bl	8006274 <__errno>
 80020b0:	4603      	mov	r3, r0
 80020b2:	220c      	movs	r2, #12
 80020b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020b6:	f04f 33ff 	mov.w	r3, #4294967295
 80020ba:	e009      	b.n	80020d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020bc:	4b08      	ldr	r3, [pc, #32]	; (80020e0 <_sbrk+0x64>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020c2:	4b07      	ldr	r3, [pc, #28]	; (80020e0 <_sbrk+0x64>)
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4413      	add	r3, r2
 80020ca:	4a05      	ldr	r2, [pc, #20]	; (80020e0 <_sbrk+0x64>)
 80020cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020ce:	68fb      	ldr	r3, [r7, #12]
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3718      	adds	r7, #24
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	20010000 	.word	0x20010000
 80020dc:	00000400 	.word	0x00000400
 80020e0:	200002c4 	.word	0x200002c4
 80020e4:	20000418 	.word	0x20000418

080020e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020ec:	4b06      	ldr	r3, [pc, #24]	; (8002108 <SystemInit+0x20>)
 80020ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020f2:	4a05      	ldr	r2, [pc, #20]	; (8002108 <SystemInit+0x20>)
 80020f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020fc:	bf00      	nop
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	e000ed00 	.word	0xe000ed00

0800210c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002110:	4b04      	ldr	r3, [pc, #16]	; (8002124 <__NVIC_GetPriorityGrouping+0x18>)
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	0a1b      	lsrs	r3, r3, #8
 8002116:	f003 0307 	and.w	r3, r3, #7
}
 800211a:	4618      	mov	r0, r3
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr
 8002124:	e000ed00 	.word	0xe000ed00

08002128 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	4603      	mov	r3, r0
 8002130:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002136:	2b00      	cmp	r3, #0
 8002138:	db0b      	blt.n	8002152 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800213a:	79fb      	ldrb	r3, [r7, #7]
 800213c:	f003 021f 	and.w	r2, r3, #31
 8002140:	4907      	ldr	r1, [pc, #28]	; (8002160 <__NVIC_EnableIRQ+0x38>)
 8002142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002146:	095b      	lsrs	r3, r3, #5
 8002148:	2001      	movs	r0, #1
 800214a:	fa00 f202 	lsl.w	r2, r0, r2
 800214e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002152:	bf00      	nop
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	e000e100 	.word	0xe000e100

08002164 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	4603      	mov	r3, r0
 800216c:	6039      	str	r1, [r7, #0]
 800216e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002174:	2b00      	cmp	r3, #0
 8002176:	db0a      	blt.n	800218e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	b2da      	uxtb	r2, r3
 800217c:	490c      	ldr	r1, [pc, #48]	; (80021b0 <__NVIC_SetPriority+0x4c>)
 800217e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002182:	0112      	lsls	r2, r2, #4
 8002184:	b2d2      	uxtb	r2, r2
 8002186:	440b      	add	r3, r1
 8002188:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800218c:	e00a      	b.n	80021a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	b2da      	uxtb	r2, r3
 8002192:	4908      	ldr	r1, [pc, #32]	; (80021b4 <__NVIC_SetPriority+0x50>)
 8002194:	79fb      	ldrb	r3, [r7, #7]
 8002196:	f003 030f 	and.w	r3, r3, #15
 800219a:	3b04      	subs	r3, #4
 800219c:	0112      	lsls	r2, r2, #4
 800219e:	b2d2      	uxtb	r2, r2
 80021a0:	440b      	add	r3, r1
 80021a2:	761a      	strb	r2, [r3, #24]
}
 80021a4:	bf00      	nop
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr
 80021b0:	e000e100 	.word	0xe000e100
 80021b4:	e000ed00 	.word	0xe000ed00

080021b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b089      	sub	sp, #36	; 0x24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f003 0307 	and.w	r3, r3, #7
 80021ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	f1c3 0307 	rsb	r3, r3, #7
 80021d2:	2b04      	cmp	r3, #4
 80021d4:	bf28      	it	cs
 80021d6:	2304      	movcs	r3, #4
 80021d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	3304      	adds	r3, #4
 80021de:	2b06      	cmp	r3, #6
 80021e0:	d902      	bls.n	80021e8 <NVIC_EncodePriority+0x30>
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	3b03      	subs	r3, #3
 80021e6:	e000      	b.n	80021ea <NVIC_EncodePriority+0x32>
 80021e8:	2300      	movs	r3, #0
 80021ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021ec:	f04f 32ff 	mov.w	r2, #4294967295
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	fa02 f303 	lsl.w	r3, r2, r3
 80021f6:	43da      	mvns	r2, r3
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	401a      	ands	r2, r3
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002200:	f04f 31ff 	mov.w	r1, #4294967295
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	fa01 f303 	lsl.w	r3, r1, r3
 800220a:	43d9      	mvns	r1, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002210:	4313      	orrs	r3, r2
         );
}
 8002212:	4618      	mov	r0, r3
 8002214:	3724      	adds	r7, #36	; 0x24
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr

0800221e <LL_TIM_EnableARRPreload>:
{
 800221e:	b480      	push	{r7}
 8002220:	b083      	sub	sp, #12
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	601a      	str	r2, [r3, #0]
}
 8002232:	bf00      	nop
 8002234:	370c      	adds	r7, #12
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
	...

08002240 <LL_TIM_OC_EnableFast>:
{
 8002240:	b480      	push	{r7}
 8002242:	b085      	sub	sp, #20
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	2b01      	cmp	r3, #1
 800224e:	d01c      	beq.n	800228a <LL_TIM_OC_EnableFast+0x4a>
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	2b04      	cmp	r3, #4
 8002254:	d017      	beq.n	8002286 <LL_TIM_OC_EnableFast+0x46>
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	2b10      	cmp	r3, #16
 800225a:	d012      	beq.n	8002282 <LL_TIM_OC_EnableFast+0x42>
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	2b40      	cmp	r3, #64	; 0x40
 8002260:	d00d      	beq.n	800227e <LL_TIM_OC_EnableFast+0x3e>
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002268:	d007      	beq.n	800227a <LL_TIM_OC_EnableFast+0x3a>
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002270:	d101      	bne.n	8002276 <LL_TIM_OC_EnableFast+0x36>
 8002272:	2305      	movs	r3, #5
 8002274:	e00a      	b.n	800228c <LL_TIM_OC_EnableFast+0x4c>
 8002276:	2306      	movs	r3, #6
 8002278:	e008      	b.n	800228c <LL_TIM_OC_EnableFast+0x4c>
 800227a:	2304      	movs	r3, #4
 800227c:	e006      	b.n	800228c <LL_TIM_OC_EnableFast+0x4c>
 800227e:	2303      	movs	r3, #3
 8002280:	e004      	b.n	800228c <LL_TIM_OC_EnableFast+0x4c>
 8002282:	2302      	movs	r3, #2
 8002284:	e002      	b.n	800228c <LL_TIM_OC_EnableFast+0x4c>
 8002286:	2301      	movs	r3, #1
 8002288:	e000      	b.n	800228c <LL_TIM_OC_EnableFast+0x4c>
 800228a:	2300      	movs	r3, #0
 800228c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	3318      	adds	r3, #24
 8002292:	4619      	mov	r1, r3
 8002294:	7bfb      	ldrb	r3, [r7, #15]
 8002296:	4a0a      	ldr	r2, [pc, #40]	; (80022c0 <LL_TIM_OC_EnableFast+0x80>)
 8002298:	5cd3      	ldrb	r3, [r2, r3]
 800229a:	440b      	add	r3, r1
 800229c:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	7bfb      	ldrb	r3, [r7, #15]
 80022a4:	4907      	ldr	r1, [pc, #28]	; (80022c4 <LL_TIM_OC_EnableFast+0x84>)
 80022a6:	5ccb      	ldrb	r3, [r1, r3]
 80022a8:	4619      	mov	r1, r3
 80022aa:	2304      	movs	r3, #4
 80022ac:	408b      	lsls	r3, r1
 80022ae:	431a      	orrs	r2, r3
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	601a      	str	r2, [r3, #0]
}
 80022b4:	bf00      	nop
 80022b6:	3714      	adds	r7, #20
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr
 80022c0:	08008588 	.word	0x08008588
 80022c4:	08008590 	.word	0x08008590

080022c8 <LL_TIM_OC_EnablePreload>:
{
 80022c8:	b480      	push	{r7}
 80022ca:	b085      	sub	sp, #20
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d01c      	beq.n	8002312 <LL_TIM_OC_EnablePreload+0x4a>
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	2b04      	cmp	r3, #4
 80022dc:	d017      	beq.n	800230e <LL_TIM_OC_EnablePreload+0x46>
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	2b10      	cmp	r3, #16
 80022e2:	d012      	beq.n	800230a <LL_TIM_OC_EnablePreload+0x42>
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	2b40      	cmp	r3, #64	; 0x40
 80022e8:	d00d      	beq.n	8002306 <LL_TIM_OC_EnablePreload+0x3e>
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022f0:	d007      	beq.n	8002302 <LL_TIM_OC_EnablePreload+0x3a>
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022f8:	d101      	bne.n	80022fe <LL_TIM_OC_EnablePreload+0x36>
 80022fa:	2305      	movs	r3, #5
 80022fc:	e00a      	b.n	8002314 <LL_TIM_OC_EnablePreload+0x4c>
 80022fe:	2306      	movs	r3, #6
 8002300:	e008      	b.n	8002314 <LL_TIM_OC_EnablePreload+0x4c>
 8002302:	2304      	movs	r3, #4
 8002304:	e006      	b.n	8002314 <LL_TIM_OC_EnablePreload+0x4c>
 8002306:	2303      	movs	r3, #3
 8002308:	e004      	b.n	8002314 <LL_TIM_OC_EnablePreload+0x4c>
 800230a:	2302      	movs	r3, #2
 800230c:	e002      	b.n	8002314 <LL_TIM_OC_EnablePreload+0x4c>
 800230e:	2301      	movs	r3, #1
 8002310:	e000      	b.n	8002314 <LL_TIM_OC_EnablePreload+0x4c>
 8002312:	2300      	movs	r3, #0
 8002314:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	3318      	adds	r3, #24
 800231a:	4619      	mov	r1, r3
 800231c:	7bfb      	ldrb	r3, [r7, #15]
 800231e:	4a0a      	ldr	r2, [pc, #40]	; (8002348 <LL_TIM_OC_EnablePreload+0x80>)
 8002320:	5cd3      	ldrb	r3, [r2, r3]
 8002322:	440b      	add	r3, r1
 8002324:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	7bfb      	ldrb	r3, [r7, #15]
 800232c:	4907      	ldr	r1, [pc, #28]	; (800234c <LL_TIM_OC_EnablePreload+0x84>)
 800232e:	5ccb      	ldrb	r3, [r1, r3]
 8002330:	4619      	mov	r1, r3
 8002332:	2308      	movs	r3, #8
 8002334:	408b      	lsls	r3, r1
 8002336:	431a      	orrs	r2, r3
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	601a      	str	r2, [r3, #0]
}
 800233c:	bf00      	nop
 800233e:	3714      	adds	r7, #20
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr
 8002348:	08008588 	.word	0x08008588
 800234c:	08008590 	.word	0x08008590

08002350 <LL_TIM_SetClockSource>:
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002362:	f023 0307 	bic.w	r3, r3, #7
 8002366:	683a      	ldr	r2, [r7, #0]
 8002368:	431a      	orrs	r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	609a      	str	r2, [r3, #8]
}
 800236e:	bf00      	nop
 8002370:	370c      	adds	r7, #12
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr

0800237a <LL_TIM_SetTriggerOutput>:
{
 800237a:	b480      	push	{r7}
 800237c:	b083      	sub	sp, #12
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
 8002382:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	431a      	orrs	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	605a      	str	r2, [r3, #4]
}
 8002394:	bf00      	nop
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <LL_TIM_DisableMasterSlaveMode>:
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	609a      	str	r2, [r3, #8]
}
 80023b4:	bf00      	nop
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <LL_AHB1_GRP1_EnableClock>:
{
 80023c0:	b480      	push	{r7}
 80023c2:	b085      	sub	sp, #20
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80023c8:	4b08      	ldr	r3, [pc, #32]	; (80023ec <LL_AHB1_GRP1_EnableClock+0x2c>)
 80023ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023cc:	4907      	ldr	r1, [pc, #28]	; (80023ec <LL_AHB1_GRP1_EnableClock+0x2c>)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80023d4:	4b05      	ldr	r3, [pc, #20]	; (80023ec <LL_AHB1_GRP1_EnableClock+0x2c>)
 80023d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4013      	ands	r3, r2
 80023dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023de:	68fb      	ldr	r3, [r7, #12]
}
 80023e0:	bf00      	nop
 80023e2:	3714      	adds	r7, #20
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr
 80023ec:	40023800 	.word	0x40023800

080023f0 <LL_APB1_GRP1_EnableClock>:
{
 80023f0:	b480      	push	{r7}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80023f8:	4b08      	ldr	r3, [pc, #32]	; (800241c <LL_APB1_GRP1_EnableClock+0x2c>)
 80023fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023fc:	4907      	ldr	r1, [pc, #28]	; (800241c <LL_APB1_GRP1_EnableClock+0x2c>)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4313      	orrs	r3, r2
 8002402:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002404:	4b05      	ldr	r3, [pc, #20]	; (800241c <LL_APB1_GRP1_EnableClock+0x2c>)
 8002406:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4013      	ands	r3, r2
 800240c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800240e:	68fb      	ldr	r3, [r7, #12]
}
 8002410:	bf00      	nop
 8002412:	3714      	adds	r7, #20
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr
 800241c:	40023800 	.word	0x40023800

08002420 <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b094      	sub	sp, #80	; 0x50
 8002424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002426:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800242a:	2200      	movs	r2, #0
 800242c:	601a      	str	r2, [r3, #0]
 800242e:	605a      	str	r2, [r3, #4]
 8002430:	609a      	str	r2, [r3, #8]
 8002432:	60da      	str	r2, [r3, #12]
 8002434:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8002436:	f107 031c 	add.w	r3, r7, #28
 800243a:	2220      	movs	r2, #32
 800243c:	2100      	movs	r1, #0
 800243e:	4618      	mov	r0, r3
 8002440:	f003 fec6 	bl	80061d0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002444:	1d3b      	adds	r3, r7, #4
 8002446:	2200      	movs	r2, #0
 8002448:	601a      	str	r2, [r3, #0]
 800244a:	605a      	str	r2, [r3, #4]
 800244c:	609a      	str	r2, [r3, #8]
 800244e:	60da      	str	r2, [r3, #12]
 8002450:	611a      	str	r2, [r3, #16]
 8002452:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8002454:	2001      	movs	r0, #1
 8002456:	f7ff ffcb 	bl	80023f0 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 99;
 800245a:	2363      	movs	r3, #99	; 0x63
 800245c:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800245e:	2300      	movs	r3, #0
 8002460:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 839;
 8002462:	f240 3347 	movw	r3, #839	; 0x347
 8002466:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002468:	2300      	movs	r3, #0
 800246a:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 800246c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002470:	4619      	mov	r1, r3
 8002472:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002476:	f002 fb3b 	bl	8004af0 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM2);
 800247a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800247e:	f7ff fece 	bl	800221e <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002482:	2100      	movs	r1, #0
 8002484:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002488:	f7ff ff62 	bl	8002350 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH1);
 800248c:	2101      	movs	r1, #1
 800248e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002492:	f7ff ff19 	bl	80022c8 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8002496:	2360      	movs	r3, #96	; 0x60
 8002498:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800249a:	2300      	movs	r3, #0
 800249c:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800249e:	2300      	movs	r3, #0
 80024a0:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 80024a2:	2300      	movs	r3, #0
 80024a4:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80024a6:	2300      	movs	r3, #0
 80024a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80024aa:	f107 031c 	add.w	r3, r7, #28
 80024ae:	461a      	mov	r2, r3
 80024b0:	2101      	movs	r1, #1
 80024b2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80024b6:	f002 fb95 	bl	8004be4 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM2, LL_TIM_CHANNEL_CH1);
 80024ba:	2101      	movs	r1, #1
 80024bc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80024c0:	f7ff febe 	bl	8002240 <LL_TIM_OC_EnableFast>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH2);
 80024c4:	2110      	movs	r1, #16
 80024c6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80024ca:	f7ff fefd 	bl	80022c8 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 80024ce:	f107 031c 	add.w	r3, r7, #28
 80024d2:	461a      	mov	r2, r3
 80024d4:	2110      	movs	r1, #16
 80024d6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80024da:	f002 fb83 	bl	8004be4 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM2, LL_TIM_CHANNEL_CH2);
 80024de:	2110      	movs	r1, #16
 80024e0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80024e4:	f7ff feac 	bl	8002240 <LL_TIM_OC_EnableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 80024e8:	2100      	movs	r1, #0
 80024ea:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80024ee:	f7ff ff44 	bl	800237a <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 80024f2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80024f6:	f7ff ff53 	bl	80023a0 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80024fa:	2001      	movs	r0, #1
 80024fc:	f7ff ff60 	bl	80023c0 <LL_AHB1_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 8002500:	2303      	movs	r3, #3
 8002502:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002504:	2302      	movs	r3, #2
 8002506:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002508:	2300      	movs	r3, #0
 800250a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800250c:	2300      	movs	r3, #0
 800250e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002510:	2300      	movs	r3, #0
 8002512:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8002514:	2301      	movs	r3, #1
 8002516:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002518:	1d3b      	adds	r3, r7, #4
 800251a:	4619      	mov	r1, r3
 800251c:	4803      	ldr	r0, [pc, #12]	; (800252c <MX_TIM2_Init+0x10c>)
 800251e:	f001 ff82 	bl	8004426 <LL_GPIO_Init>

}
 8002522:	bf00      	nop
 8002524:	3750      	adds	r7, #80	; 0x50
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	40020000 	.word	0x40020000

08002530 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b086      	sub	sp, #24
 8002534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002536:	1d3b      	adds	r3, r7, #4
 8002538:	2200      	movs	r2, #0
 800253a:	601a      	str	r2, [r3, #0]
 800253c:	605a      	str	r2, [r3, #4]
 800253e:	609a      	str	r2, [r3, #8]
 8002540:	60da      	str	r2, [r3, #12]
 8002542:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8002544:	2002      	movs	r0, #2
 8002546:	f7ff ff53 	bl	80023f0 <LL_APB1_GRP1_EnableClock>

  /* TIM3 interrupt Init */
  NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800254a:	f7ff fddf 	bl	800210c <__NVIC_GetPriorityGrouping>
 800254e:	4603      	mov	r3, r0
 8002550:	2200      	movs	r2, #0
 8002552:	2100      	movs	r1, #0
 8002554:	4618      	mov	r0, r3
 8002556:	f7ff fe2f 	bl	80021b8 <NVIC_EncodePriority>
 800255a:	4603      	mov	r3, r0
 800255c:	4619      	mov	r1, r3
 800255e:	201d      	movs	r0, #29
 8002560:	f7ff fe00 	bl	8002164 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 8002564:	201d      	movs	r0, #29
 8002566:	f7ff fddf 	bl	8002128 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 1;
 800256a:	2301      	movs	r3, #1
 800256c:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800256e:	2300      	movs	r3, #0
 8002570:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 41999;
 8002572:	f24a 430f 	movw	r3, #41999	; 0xa40f
 8002576:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002578:	2300      	movs	r3, #0
 800257a:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 800257c:	1d3b      	adds	r3, r7, #4
 800257e:	4619      	mov	r1, r3
 8002580:	480a      	ldr	r0, [pc, #40]	; (80025ac <MX_TIM3_Init+0x7c>)
 8002582:	f002 fab5 	bl	8004af0 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM3);
 8002586:	4809      	ldr	r0, [pc, #36]	; (80025ac <MX_TIM3_Init+0x7c>)
 8002588:	f7ff fe49 	bl	800221e <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 800258c:	2100      	movs	r1, #0
 800258e:	4807      	ldr	r0, [pc, #28]	; (80025ac <MX_TIM3_Init+0x7c>)
 8002590:	f7ff fede 	bl	8002350 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8002594:	2100      	movs	r1, #0
 8002596:	4805      	ldr	r0, [pc, #20]	; (80025ac <MX_TIM3_Init+0x7c>)
 8002598:	f7ff feef 	bl	800237a <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 800259c:	4803      	ldr	r0, [pc, #12]	; (80025ac <MX_TIM3_Init+0x7c>)
 800259e:	f7ff feff 	bl	80023a0 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80025a2:	bf00      	nop
 80025a4:	3718      	adds	r7, #24
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	40000400 	.word	0x40000400

080025b0 <__NVIC_GetPriorityGrouping>:
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025b4:	4b04      	ldr	r3, [pc, #16]	; (80025c8 <__NVIC_GetPriorityGrouping+0x18>)
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	0a1b      	lsrs	r3, r3, #8
 80025ba:	f003 0307 	and.w	r3, r3, #7
}
 80025be:	4618      	mov	r0, r3
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr
 80025c8:	e000ed00 	.word	0xe000ed00

080025cc <__NVIC_EnableIRQ>:
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	4603      	mov	r3, r0
 80025d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	db0b      	blt.n	80025f6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025de:	79fb      	ldrb	r3, [r7, #7]
 80025e0:	f003 021f 	and.w	r2, r3, #31
 80025e4:	4907      	ldr	r1, [pc, #28]	; (8002604 <__NVIC_EnableIRQ+0x38>)
 80025e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ea:	095b      	lsrs	r3, r3, #5
 80025ec:	2001      	movs	r0, #1
 80025ee:	fa00 f202 	lsl.w	r2, r0, r2
 80025f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80025f6:	bf00      	nop
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	e000e100 	.word	0xe000e100

08002608 <__NVIC_SetPriority>:
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	4603      	mov	r3, r0
 8002610:	6039      	str	r1, [r7, #0]
 8002612:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002614:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002618:	2b00      	cmp	r3, #0
 800261a:	db0a      	blt.n	8002632 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	b2da      	uxtb	r2, r3
 8002620:	490c      	ldr	r1, [pc, #48]	; (8002654 <__NVIC_SetPriority+0x4c>)
 8002622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002626:	0112      	lsls	r2, r2, #4
 8002628:	b2d2      	uxtb	r2, r2
 800262a:	440b      	add	r3, r1
 800262c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002630:	e00a      	b.n	8002648 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	b2da      	uxtb	r2, r3
 8002636:	4908      	ldr	r1, [pc, #32]	; (8002658 <__NVIC_SetPriority+0x50>)
 8002638:	79fb      	ldrb	r3, [r7, #7]
 800263a:	f003 030f 	and.w	r3, r3, #15
 800263e:	3b04      	subs	r3, #4
 8002640:	0112      	lsls	r2, r2, #4
 8002642:	b2d2      	uxtb	r2, r2
 8002644:	440b      	add	r3, r1
 8002646:	761a      	strb	r2, [r3, #24]
}
 8002648:	bf00      	nop
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr
 8002654:	e000e100 	.word	0xe000e100
 8002658:	e000ed00 	.word	0xe000ed00

0800265c <NVIC_EncodePriority>:
{
 800265c:	b480      	push	{r7}
 800265e:	b089      	sub	sp, #36	; 0x24
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f003 0307 	and.w	r3, r3, #7
 800266e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	f1c3 0307 	rsb	r3, r3, #7
 8002676:	2b04      	cmp	r3, #4
 8002678:	bf28      	it	cs
 800267a:	2304      	movcs	r3, #4
 800267c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	3304      	adds	r3, #4
 8002682:	2b06      	cmp	r3, #6
 8002684:	d902      	bls.n	800268c <NVIC_EncodePriority+0x30>
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	3b03      	subs	r3, #3
 800268a:	e000      	b.n	800268e <NVIC_EncodePriority+0x32>
 800268c:	2300      	movs	r3, #0
 800268e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002690:	f04f 32ff 	mov.w	r2, #4294967295
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	fa02 f303 	lsl.w	r3, r2, r3
 800269a:	43da      	mvns	r2, r3
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	401a      	ands	r2, r3
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026a4:	f04f 31ff 	mov.w	r1, #4294967295
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	fa01 f303 	lsl.w	r3, r1, r3
 80026ae:	43d9      	mvns	r1, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026b4:	4313      	orrs	r3, r2
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3724      	adds	r7, #36	; 0x24
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr

080026c2 <LL_USART_Enable>:
{
 80026c2:	b480      	push	{r7}
 80026c4:	b083      	sub	sp, #12
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	60da      	str	r2, [r3, #12]
}
 80026d6:	bf00      	nop
 80026d8:	370c      	adds	r7, #12
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr

080026e2 <LL_USART_ConfigAsyncMode>:
{
 80026e2:	b480      	push	{r7}
 80026e4:	b083      	sub	sp, #12
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	615a      	str	r2, [r3, #20]
}
 8002702:	bf00      	nop
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
	...

08002710 <LL_AHB1_GRP1_EnableClock>:
{
 8002710:	b480      	push	{r7}
 8002712:	b085      	sub	sp, #20
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002718:	4b08      	ldr	r3, [pc, #32]	; (800273c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800271a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800271c:	4907      	ldr	r1, [pc, #28]	; (800273c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4313      	orrs	r3, r2
 8002722:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002724:	4b05      	ldr	r3, [pc, #20]	; (800273c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002726:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	4013      	ands	r3, r2
 800272c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800272e:	68fb      	ldr	r3, [r7, #12]
}
 8002730:	bf00      	nop
 8002732:	3714      	adds	r7, #20
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr
 800273c:	40023800 	.word	0x40023800

08002740 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002740:	b480      	push	{r7}
 8002742:	b085      	sub	sp, #20
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002748:	4b08      	ldr	r3, [pc, #32]	; (800276c <LL_APB2_GRP1_EnableClock+0x2c>)
 800274a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800274c:	4907      	ldr	r1, [pc, #28]	; (800276c <LL_APB2_GRP1_EnableClock+0x2c>)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4313      	orrs	r3, r2
 8002752:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002754:	4b05      	ldr	r3, [pc, #20]	; (800276c <LL_APB2_GRP1_EnableClock+0x2c>)
 8002756:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	4013      	ands	r3, r2
 800275c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800275e:	68fb      	ldr	r3, [r7, #12]
}
 8002760:	bf00      	nop
 8002762:	3714      	adds	r7, #20
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr
 800276c:	40023800 	.word	0x40023800

08002770 <MX_USART6_UART_Init>:
/* USER CODE END 0 */

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b08e      	sub	sp, #56	; 0x38
 8002774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002776:	f107 031c 	add.w	r3, r7, #28
 800277a:	2200      	movs	r2, #0
 800277c:	601a      	str	r2, [r3, #0]
 800277e:	605a      	str	r2, [r3, #4]
 8002780:	609a      	str	r2, [r3, #8]
 8002782:	60da      	str	r2, [r3, #12]
 8002784:	611a      	str	r2, [r3, #16]
 8002786:	615a      	str	r2, [r3, #20]
 8002788:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800278a:	1d3b      	adds	r3, r7, #4
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	605a      	str	r2, [r3, #4]
 8002792:	609a      	str	r2, [r3, #8]
 8002794:	60da      	str	r2, [r3, #12]
 8002796:	611a      	str	r2, [r3, #16]
 8002798:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 800279a:	2020      	movs	r0, #32
 800279c:	f7ff ffd0 	bl	8002740 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80027a0:	2001      	movs	r0, #1
 80027a2:	f7ff ffb5 	bl	8002710 <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PA11   ------> USART6_TX
  PA12   ------> USART6_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 80027a6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80027aa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80027ac:	2302      	movs	r3, #2
 80027ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80027b0:	2303      	movs	r3, #3
 80027b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80027b4:	2300      	movs	r3, #0
 80027b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80027b8:	2300      	movs	r3, #0
 80027ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80027bc:	2308      	movs	r3, #8
 80027be:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027c0:	1d3b      	adds	r3, r7, #4
 80027c2:	4619      	mov	r1, r3
 80027c4:	4818      	ldr	r0, [pc, #96]	; (8002828 <MX_USART6_UART_Init+0xb8>)
 80027c6:	f001 fe2e 	bl	8004426 <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80027ca:	f7ff fef1 	bl	80025b0 <__NVIC_GetPriorityGrouping>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2200      	movs	r2, #0
 80027d2:	2100      	movs	r1, #0
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7ff ff41 	bl	800265c <NVIC_EncodePriority>
 80027da:	4603      	mov	r3, r0
 80027dc:	4619      	mov	r1, r3
 80027de:	2047      	movs	r0, #71	; 0x47
 80027e0:	f7ff ff12 	bl	8002608 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 80027e4:	2047      	movs	r0, #71	; 0x47
 80027e6:	f7ff fef1 	bl	80025cc <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80027ea:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80027ee:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80027f0:	2300      	movs	r3, #0
 80027f2:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80027f4:	2300      	movs	r3, #0
 80027f6:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80027f8:	2300      	movs	r3, #0
 80027fa:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80027fc:	230c      	movs	r3, #12
 80027fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002800:	2300      	movs	r3, #0
 8002802:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002804:	2300      	movs	r3, #0
 8002806:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART6, &USART_InitStruct);
 8002808:	f107 031c 	add.w	r3, r7, #28
 800280c:	4619      	mov	r1, r3
 800280e:	4807      	ldr	r0, [pc, #28]	; (800282c <MX_USART6_UART_Init+0xbc>)
 8002810:	f002 fe1e 	bl	8005450 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 8002814:	4805      	ldr	r0, [pc, #20]	; (800282c <MX_USART6_UART_Init+0xbc>)
 8002816:	f7ff ff64 	bl	80026e2 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 800281a:	4804      	ldr	r0, [pc, #16]	; (800282c <MX_USART6_UART_Init+0xbc>)
 800281c:	f7ff ff51 	bl	80026c2 <LL_USART_Enable>
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002820:	bf00      	nop
 8002822:	3738      	adds	r7, #56	; 0x38
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	40020000 	.word	0x40020000
 800282c:	40011400 	.word	0x40011400

08002830 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002830:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002868 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002834:	480d      	ldr	r0, [pc, #52]	; (800286c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002836:	490e      	ldr	r1, [pc, #56]	; (8002870 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002838:	4a0e      	ldr	r2, [pc, #56]	; (8002874 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800283a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800283c:	e002      	b.n	8002844 <LoopCopyDataInit>

0800283e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800283e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002840:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002842:	3304      	adds	r3, #4

08002844 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002844:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002846:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002848:	d3f9      	bcc.n	800283e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800284a:	4a0b      	ldr	r2, [pc, #44]	; (8002878 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800284c:	4c0b      	ldr	r4, [pc, #44]	; (800287c <LoopFillZerobss+0x26>)
  movs r3, #0
 800284e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002850:	e001      	b.n	8002856 <LoopFillZerobss>

08002852 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002852:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002854:	3204      	adds	r2, #4

08002856 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002856:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002858:	d3fb      	bcc.n	8002852 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800285a:	f7ff fc45 	bl	80020e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800285e:	f003 fd0f 	bl	8006280 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002862:	f7ff f87d 	bl	8001960 <main>
  bx  lr    
 8002866:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002868:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800286c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002870:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002874:	08008960 	.word	0x08008960
  ldr r2, =_sbss
 8002878:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 800287c:	20000418 	.word	0x20000418

08002880 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002880:	e7fe      	b.n	8002880 <ADC_IRQHandler>
	...

08002884 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002888:	4b0e      	ldr	r3, [pc, #56]	; (80028c4 <HAL_Init+0x40>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a0d      	ldr	r2, [pc, #52]	; (80028c4 <HAL_Init+0x40>)
 800288e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002892:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002894:	4b0b      	ldr	r3, [pc, #44]	; (80028c4 <HAL_Init+0x40>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a0a      	ldr	r2, [pc, #40]	; (80028c4 <HAL_Init+0x40>)
 800289a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800289e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028a0:	4b08      	ldr	r3, [pc, #32]	; (80028c4 <HAL_Init+0x40>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a07      	ldr	r2, [pc, #28]	; (80028c4 <HAL_Init+0x40>)
 80028a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028ac:	2003      	movs	r0, #3
 80028ae:	f000 f931 	bl	8002b14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028b2:	200f      	movs	r0, #15
 80028b4:	f000 f808 	bl	80028c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028b8:	f7ff fab0 	bl	8001e1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	40023c00 	.word	0x40023c00

080028c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028d0:	4b12      	ldr	r3, [pc, #72]	; (800291c <HAL_InitTick+0x54>)
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	4b12      	ldr	r3, [pc, #72]	; (8002920 <HAL_InitTick+0x58>)
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	4619      	mov	r1, r3
 80028da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028de:	fbb3 f3f1 	udiv	r3, r3, r1
 80028e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e6:	4618      	mov	r0, r3
 80028e8:	f000 f93b 	bl	8002b62 <HAL_SYSTICK_Config>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d001      	beq.n	80028f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e00e      	b.n	8002914 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2b0f      	cmp	r3, #15
 80028fa:	d80a      	bhi.n	8002912 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028fc:	2200      	movs	r2, #0
 80028fe:	6879      	ldr	r1, [r7, #4]
 8002900:	f04f 30ff 	mov.w	r0, #4294967295
 8002904:	f000 f911 	bl	8002b2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002908:	4a06      	ldr	r2, [pc, #24]	; (8002924 <HAL_InitTick+0x5c>)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800290e:	2300      	movs	r3, #0
 8002910:	e000      	b.n	8002914 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
}
 8002914:	4618      	mov	r0, r3
 8002916:	3708      	adds	r7, #8
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	20000000 	.word	0x20000000
 8002920:	20000008 	.word	0x20000008
 8002924:	20000004 	.word	0x20000004

08002928 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800292c:	4b06      	ldr	r3, [pc, #24]	; (8002948 <HAL_IncTick+0x20>)
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	461a      	mov	r2, r3
 8002932:	4b06      	ldr	r3, [pc, #24]	; (800294c <HAL_IncTick+0x24>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4413      	add	r3, r2
 8002938:	4a04      	ldr	r2, [pc, #16]	; (800294c <HAL_IncTick+0x24>)
 800293a:	6013      	str	r3, [r2, #0]
}
 800293c:	bf00      	nop
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	20000008 	.word	0x20000008
 800294c:	200002c8 	.word	0x200002c8

08002950 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0
  return uwTick;
 8002954:	4b03      	ldr	r3, [pc, #12]	; (8002964 <HAL_GetTick+0x14>)
 8002956:	681b      	ldr	r3, [r3, #0]
}
 8002958:	4618      	mov	r0, r3
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	200002c8 	.word	0x200002c8

08002968 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002970:	f7ff ffee 	bl	8002950 <HAL_GetTick>
 8002974:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002980:	d005      	beq.n	800298e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002982:	4b0a      	ldr	r3, [pc, #40]	; (80029ac <HAL_Delay+0x44>)
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	461a      	mov	r2, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	4413      	add	r3, r2
 800298c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800298e:	bf00      	nop
 8002990:	f7ff ffde 	bl	8002950 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	68fa      	ldr	r2, [r7, #12]
 800299c:	429a      	cmp	r2, r3
 800299e:	d8f7      	bhi.n	8002990 <HAL_Delay+0x28>
  {
  }
}
 80029a0:	bf00      	nop
 80029a2:	bf00      	nop
 80029a4:	3710      	adds	r7, #16
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	20000008 	.word	0x20000008

080029b0 <__NVIC_SetPriorityGrouping>:
{
 80029b0:	b480      	push	{r7}
 80029b2:	b085      	sub	sp, #20
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f003 0307 	and.w	r3, r3, #7
 80029be:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029c0:	4b0c      	ldr	r3, [pc, #48]	; (80029f4 <__NVIC_SetPriorityGrouping+0x44>)
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029c6:	68ba      	ldr	r2, [r7, #8]
 80029c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029cc:	4013      	ands	r3, r2
 80029ce:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029e2:	4a04      	ldr	r2, [pc, #16]	; (80029f4 <__NVIC_SetPriorityGrouping+0x44>)
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	60d3      	str	r3, [r2, #12]
}
 80029e8:	bf00      	nop
 80029ea:	3714      	adds	r7, #20
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr
 80029f4:	e000ed00 	.word	0xe000ed00

080029f8 <__NVIC_GetPriorityGrouping>:
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029fc:	4b04      	ldr	r3, [pc, #16]	; (8002a10 <__NVIC_GetPriorityGrouping+0x18>)
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	0a1b      	lsrs	r3, r3, #8
 8002a02:	f003 0307 	and.w	r3, r3, #7
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr
 8002a10:	e000ed00 	.word	0xe000ed00

08002a14 <__NVIC_SetPriority>:
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	6039      	str	r1, [r7, #0]
 8002a1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	db0a      	blt.n	8002a3e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	b2da      	uxtb	r2, r3
 8002a2c:	490c      	ldr	r1, [pc, #48]	; (8002a60 <__NVIC_SetPriority+0x4c>)
 8002a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a32:	0112      	lsls	r2, r2, #4
 8002a34:	b2d2      	uxtb	r2, r2
 8002a36:	440b      	add	r3, r1
 8002a38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002a3c:	e00a      	b.n	8002a54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	b2da      	uxtb	r2, r3
 8002a42:	4908      	ldr	r1, [pc, #32]	; (8002a64 <__NVIC_SetPriority+0x50>)
 8002a44:	79fb      	ldrb	r3, [r7, #7]
 8002a46:	f003 030f 	and.w	r3, r3, #15
 8002a4a:	3b04      	subs	r3, #4
 8002a4c:	0112      	lsls	r2, r2, #4
 8002a4e:	b2d2      	uxtb	r2, r2
 8002a50:	440b      	add	r3, r1
 8002a52:	761a      	strb	r2, [r3, #24]
}
 8002a54:	bf00      	nop
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr
 8002a60:	e000e100 	.word	0xe000e100
 8002a64:	e000ed00 	.word	0xe000ed00

08002a68 <NVIC_EncodePriority>:
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b089      	sub	sp, #36	; 0x24
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f003 0307 	and.w	r3, r3, #7
 8002a7a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	f1c3 0307 	rsb	r3, r3, #7
 8002a82:	2b04      	cmp	r3, #4
 8002a84:	bf28      	it	cs
 8002a86:	2304      	movcs	r3, #4
 8002a88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	3304      	adds	r3, #4
 8002a8e:	2b06      	cmp	r3, #6
 8002a90:	d902      	bls.n	8002a98 <NVIC_EncodePriority+0x30>
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	3b03      	subs	r3, #3
 8002a96:	e000      	b.n	8002a9a <NVIC_EncodePriority+0x32>
 8002a98:	2300      	movs	r3, #0
 8002a9a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa6:	43da      	mvns	r2, r3
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	401a      	ands	r2, r3
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ab0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8002aba:	43d9      	mvns	r1, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ac0:	4313      	orrs	r3, r2
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3724      	adds	r7, #36	; 0x24
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
	...

08002ad0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	3b01      	subs	r3, #1
 8002adc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ae0:	d301      	bcc.n	8002ae6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e00f      	b.n	8002b06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ae6:	4a0a      	ldr	r2, [pc, #40]	; (8002b10 <SysTick_Config+0x40>)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	3b01      	subs	r3, #1
 8002aec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002aee:	210f      	movs	r1, #15
 8002af0:	f04f 30ff 	mov.w	r0, #4294967295
 8002af4:	f7ff ff8e 	bl	8002a14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002af8:	4b05      	ldr	r3, [pc, #20]	; (8002b10 <SysTick_Config+0x40>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002afe:	4b04      	ldr	r3, [pc, #16]	; (8002b10 <SysTick_Config+0x40>)
 8002b00:	2207      	movs	r2, #7
 8002b02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3708      	adds	r7, #8
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	e000e010 	.word	0xe000e010

08002b14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f7ff ff47 	bl	80029b0 <__NVIC_SetPriorityGrouping>
}
 8002b22:	bf00      	nop
 8002b24:	3708      	adds	r7, #8
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}

08002b2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b2a:	b580      	push	{r7, lr}
 8002b2c:	b086      	sub	sp, #24
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	4603      	mov	r3, r0
 8002b32:	60b9      	str	r1, [r7, #8]
 8002b34:	607a      	str	r2, [r7, #4]
 8002b36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b3c:	f7ff ff5c 	bl	80029f8 <__NVIC_GetPriorityGrouping>
 8002b40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	68b9      	ldr	r1, [r7, #8]
 8002b46:	6978      	ldr	r0, [r7, #20]
 8002b48:	f7ff ff8e 	bl	8002a68 <NVIC_EncodePriority>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b52:	4611      	mov	r1, r2
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7ff ff5d 	bl	8002a14 <__NVIC_SetPriority>
}
 8002b5a:	bf00      	nop
 8002b5c:	3718      	adds	r7, #24
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}

08002b62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b62:	b580      	push	{r7, lr}
 8002b64:	b082      	sub	sp, #8
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f7ff ffb0 	bl	8002ad0 <SysTick_Config>
 8002b70:	4603      	mov	r3, r0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
	...

08002b7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b089      	sub	sp, #36	; 0x24
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b86:	2300      	movs	r3, #0
 8002b88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b92:	2300      	movs	r3, #0
 8002b94:	61fb      	str	r3, [r7, #28]
 8002b96:	e159      	b.n	8002e4c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b98:	2201      	movs	r2, #1
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	697a      	ldr	r2, [r7, #20]
 8002ba8:	4013      	ands	r3, r2
 8002baa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bac:	693a      	ldr	r2, [r7, #16]
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	f040 8148 	bne.w	8002e46 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f003 0303 	and.w	r3, r3, #3
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d005      	beq.n	8002bce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d130      	bne.n	8002c30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	2203      	movs	r2, #3
 8002bda:	fa02 f303 	lsl.w	r3, r2, r3
 8002bde:	43db      	mvns	r3, r3
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	4013      	ands	r3, r2
 8002be4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	68da      	ldr	r2, [r3, #12]
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	005b      	lsls	r3, r3, #1
 8002bee:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	69ba      	ldr	r2, [r7, #24]
 8002bfc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c04:	2201      	movs	r2, #1
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0c:	43db      	mvns	r3, r3
 8002c0e:	69ba      	ldr	r2, [r7, #24]
 8002c10:	4013      	ands	r3, r2
 8002c12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	091b      	lsrs	r3, r3, #4
 8002c1a:	f003 0201 	and.w	r2, r3, #1
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	fa02 f303 	lsl.w	r3, r2, r3
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f003 0303 	and.w	r3, r3, #3
 8002c38:	2b03      	cmp	r3, #3
 8002c3a:	d017      	beq.n	8002c6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	005b      	lsls	r3, r3, #1
 8002c46:	2203      	movs	r2, #3
 8002c48:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4c:	43db      	mvns	r3, r3
 8002c4e:	69ba      	ldr	r2, [r7, #24]
 8002c50:	4013      	ands	r3, r2
 8002c52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	689a      	ldr	r2, [r3, #8]
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	005b      	lsls	r3, r3, #1
 8002c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f003 0303 	and.w	r3, r3, #3
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d123      	bne.n	8002cc0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	08da      	lsrs	r2, r3, #3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	3208      	adds	r2, #8
 8002c80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	f003 0307 	and.w	r3, r3, #7
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	220f      	movs	r2, #15
 8002c90:	fa02 f303 	lsl.w	r3, r2, r3
 8002c94:	43db      	mvns	r3, r3
 8002c96:	69ba      	ldr	r2, [r7, #24]
 8002c98:	4013      	ands	r3, r2
 8002c9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	691a      	ldr	r2, [r3, #16]
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	f003 0307 	and.w	r3, r3, #7
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	08da      	lsrs	r2, r3, #3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	3208      	adds	r2, #8
 8002cba:	69b9      	ldr	r1, [r7, #24]
 8002cbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	005b      	lsls	r3, r3, #1
 8002cca:	2203      	movs	r2, #3
 8002ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd0:	43db      	mvns	r3, r3
 8002cd2:	69ba      	ldr	r2, [r7, #24]
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f003 0203 	and.w	r2, r3, #3
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	005b      	lsls	r3, r3, #1
 8002ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce8:	69ba      	ldr	r2, [r7, #24]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	f000 80a2 	beq.w	8002e46 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d02:	2300      	movs	r3, #0
 8002d04:	60fb      	str	r3, [r7, #12]
 8002d06:	4b57      	ldr	r3, [pc, #348]	; (8002e64 <HAL_GPIO_Init+0x2e8>)
 8002d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0a:	4a56      	ldr	r2, [pc, #344]	; (8002e64 <HAL_GPIO_Init+0x2e8>)
 8002d0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d10:	6453      	str	r3, [r2, #68]	; 0x44
 8002d12:	4b54      	ldr	r3, [pc, #336]	; (8002e64 <HAL_GPIO_Init+0x2e8>)
 8002d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d1a:	60fb      	str	r3, [r7, #12]
 8002d1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d1e:	4a52      	ldr	r2, [pc, #328]	; (8002e68 <HAL_GPIO_Init+0x2ec>)
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	089b      	lsrs	r3, r3, #2
 8002d24:	3302      	adds	r3, #2
 8002d26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	f003 0303 	and.w	r3, r3, #3
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	220f      	movs	r2, #15
 8002d36:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3a:	43db      	mvns	r3, r3
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	4013      	ands	r3, r2
 8002d40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a49      	ldr	r2, [pc, #292]	; (8002e6c <HAL_GPIO_Init+0x2f0>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d019      	beq.n	8002d7e <HAL_GPIO_Init+0x202>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a48      	ldr	r2, [pc, #288]	; (8002e70 <HAL_GPIO_Init+0x2f4>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d013      	beq.n	8002d7a <HAL_GPIO_Init+0x1fe>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a47      	ldr	r2, [pc, #284]	; (8002e74 <HAL_GPIO_Init+0x2f8>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d00d      	beq.n	8002d76 <HAL_GPIO_Init+0x1fa>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a46      	ldr	r2, [pc, #280]	; (8002e78 <HAL_GPIO_Init+0x2fc>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d007      	beq.n	8002d72 <HAL_GPIO_Init+0x1f6>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a45      	ldr	r2, [pc, #276]	; (8002e7c <HAL_GPIO_Init+0x300>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d101      	bne.n	8002d6e <HAL_GPIO_Init+0x1f2>
 8002d6a:	2304      	movs	r3, #4
 8002d6c:	e008      	b.n	8002d80 <HAL_GPIO_Init+0x204>
 8002d6e:	2307      	movs	r3, #7
 8002d70:	e006      	b.n	8002d80 <HAL_GPIO_Init+0x204>
 8002d72:	2303      	movs	r3, #3
 8002d74:	e004      	b.n	8002d80 <HAL_GPIO_Init+0x204>
 8002d76:	2302      	movs	r3, #2
 8002d78:	e002      	b.n	8002d80 <HAL_GPIO_Init+0x204>
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e000      	b.n	8002d80 <HAL_GPIO_Init+0x204>
 8002d7e:	2300      	movs	r3, #0
 8002d80:	69fa      	ldr	r2, [r7, #28]
 8002d82:	f002 0203 	and.w	r2, r2, #3
 8002d86:	0092      	lsls	r2, r2, #2
 8002d88:	4093      	lsls	r3, r2
 8002d8a:	69ba      	ldr	r2, [r7, #24]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d90:	4935      	ldr	r1, [pc, #212]	; (8002e68 <HAL_GPIO_Init+0x2ec>)
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	089b      	lsrs	r3, r3, #2
 8002d96:	3302      	adds	r3, #2
 8002d98:	69ba      	ldr	r2, [r7, #24]
 8002d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d9e:	4b38      	ldr	r3, [pc, #224]	; (8002e80 <HAL_GPIO_Init+0x304>)
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	43db      	mvns	r3, r3
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	4013      	ands	r3, r2
 8002dac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d003      	beq.n	8002dc2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002dba:	69ba      	ldr	r2, [r7, #24]
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002dc2:	4a2f      	ldr	r2, [pc, #188]	; (8002e80 <HAL_GPIO_Init+0x304>)
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002dc8:	4b2d      	ldr	r3, [pc, #180]	; (8002e80 <HAL_GPIO_Init+0x304>)
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	43db      	mvns	r3, r3
 8002dd2:	69ba      	ldr	r2, [r7, #24]
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d003      	beq.n	8002dec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002de4:	69ba      	ldr	r2, [r7, #24]
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002dec:	4a24      	ldr	r2, [pc, #144]	; (8002e80 <HAL_GPIO_Init+0x304>)
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002df2:	4b23      	ldr	r3, [pc, #140]	; (8002e80 <HAL_GPIO_Init+0x304>)
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	43db      	mvns	r3, r3
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	4013      	ands	r3, r2
 8002e00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d003      	beq.n	8002e16 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002e0e:	69ba      	ldr	r2, [r7, #24]
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e16:	4a1a      	ldr	r2, [pc, #104]	; (8002e80 <HAL_GPIO_Init+0x304>)
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e1c:	4b18      	ldr	r3, [pc, #96]	; (8002e80 <HAL_GPIO_Init+0x304>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	43db      	mvns	r3, r3
 8002e26:	69ba      	ldr	r2, [r7, #24]
 8002e28:	4013      	ands	r3, r2
 8002e2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d003      	beq.n	8002e40 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002e38:	69ba      	ldr	r2, [r7, #24]
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e40:	4a0f      	ldr	r2, [pc, #60]	; (8002e80 <HAL_GPIO_Init+0x304>)
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	3301      	adds	r3, #1
 8002e4a:	61fb      	str	r3, [r7, #28]
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	2b0f      	cmp	r3, #15
 8002e50:	f67f aea2 	bls.w	8002b98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e54:	bf00      	nop
 8002e56:	bf00      	nop
 8002e58:	3724      	adds	r7, #36	; 0x24
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	40023800 	.word	0x40023800
 8002e68:	40013800 	.word	0x40013800
 8002e6c:	40020000 	.word	0x40020000
 8002e70:	40020400 	.word	0x40020400
 8002e74:	40020800 	.word	0x40020800
 8002e78:	40020c00 	.word	0x40020c00
 8002e7c:	40021000 	.word	0x40021000
 8002e80:	40013c00 	.word	0x40013c00

08002e84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b086      	sub	sp, #24
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d101      	bne.n	8002e96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e267      	b.n	8003366 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d075      	beq.n	8002f8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ea2:	4b88      	ldr	r3, [pc, #544]	; (80030c4 <HAL_RCC_OscConfig+0x240>)
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f003 030c 	and.w	r3, r3, #12
 8002eaa:	2b04      	cmp	r3, #4
 8002eac:	d00c      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002eae:	4b85      	ldr	r3, [pc, #532]	; (80030c4 <HAL_RCC_OscConfig+0x240>)
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002eb6:	2b08      	cmp	r3, #8
 8002eb8:	d112      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002eba:	4b82      	ldr	r3, [pc, #520]	; (80030c4 <HAL_RCC_OscConfig+0x240>)
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ec2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ec6:	d10b      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ec8:	4b7e      	ldr	r3, [pc, #504]	; (80030c4 <HAL_RCC_OscConfig+0x240>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d05b      	beq.n	8002f8c <HAL_RCC_OscConfig+0x108>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d157      	bne.n	8002f8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e242      	b.n	8003366 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ee8:	d106      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x74>
 8002eea:	4b76      	ldr	r3, [pc, #472]	; (80030c4 <HAL_RCC_OscConfig+0x240>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a75      	ldr	r2, [pc, #468]	; (80030c4 <HAL_RCC_OscConfig+0x240>)
 8002ef0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ef4:	6013      	str	r3, [r2, #0]
 8002ef6:	e01d      	b.n	8002f34 <HAL_RCC_OscConfig+0xb0>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f00:	d10c      	bne.n	8002f1c <HAL_RCC_OscConfig+0x98>
 8002f02:	4b70      	ldr	r3, [pc, #448]	; (80030c4 <HAL_RCC_OscConfig+0x240>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a6f      	ldr	r2, [pc, #444]	; (80030c4 <HAL_RCC_OscConfig+0x240>)
 8002f08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f0c:	6013      	str	r3, [r2, #0]
 8002f0e:	4b6d      	ldr	r3, [pc, #436]	; (80030c4 <HAL_RCC_OscConfig+0x240>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a6c      	ldr	r2, [pc, #432]	; (80030c4 <HAL_RCC_OscConfig+0x240>)
 8002f14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f18:	6013      	str	r3, [r2, #0]
 8002f1a:	e00b      	b.n	8002f34 <HAL_RCC_OscConfig+0xb0>
 8002f1c:	4b69      	ldr	r3, [pc, #420]	; (80030c4 <HAL_RCC_OscConfig+0x240>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a68      	ldr	r2, [pc, #416]	; (80030c4 <HAL_RCC_OscConfig+0x240>)
 8002f22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f26:	6013      	str	r3, [r2, #0]
 8002f28:	4b66      	ldr	r3, [pc, #408]	; (80030c4 <HAL_RCC_OscConfig+0x240>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a65      	ldr	r2, [pc, #404]	; (80030c4 <HAL_RCC_OscConfig+0x240>)
 8002f2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d013      	beq.n	8002f64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f3c:	f7ff fd08 	bl	8002950 <HAL_GetTick>
 8002f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f42:	e008      	b.n	8002f56 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f44:	f7ff fd04 	bl	8002950 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b64      	cmp	r3, #100	; 0x64
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e207      	b.n	8003366 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f56:	4b5b      	ldr	r3, [pc, #364]	; (80030c4 <HAL_RCC_OscConfig+0x240>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d0f0      	beq.n	8002f44 <HAL_RCC_OscConfig+0xc0>
 8002f62:	e014      	b.n	8002f8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f64:	f7ff fcf4 	bl	8002950 <HAL_GetTick>
 8002f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f6a:	e008      	b.n	8002f7e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f6c:	f7ff fcf0 	bl	8002950 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b64      	cmp	r3, #100	; 0x64
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e1f3      	b.n	8003366 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f7e:	4b51      	ldr	r3, [pc, #324]	; (80030c4 <HAL_RCC_OscConfig+0x240>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d1f0      	bne.n	8002f6c <HAL_RCC_OscConfig+0xe8>
 8002f8a:	e000      	b.n	8002f8e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d063      	beq.n	8003062 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f9a:	4b4a      	ldr	r3, [pc, #296]	; (80030c4 <HAL_RCC_OscConfig+0x240>)
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f003 030c 	and.w	r3, r3, #12
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00b      	beq.n	8002fbe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fa6:	4b47      	ldr	r3, [pc, #284]	; (80030c4 <HAL_RCC_OscConfig+0x240>)
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fae:	2b08      	cmp	r3, #8
 8002fb0:	d11c      	bne.n	8002fec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fb2:	4b44      	ldr	r3, [pc, #272]	; (80030c4 <HAL_RCC_OscConfig+0x240>)
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d116      	bne.n	8002fec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fbe:	4b41      	ldr	r3, [pc, #260]	; (80030c4 <HAL_RCC_OscConfig+0x240>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d005      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x152>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d001      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e1c7      	b.n	8003366 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fd6:	4b3b      	ldr	r3, [pc, #236]	; (80030c4 <HAL_RCC_OscConfig+0x240>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	00db      	lsls	r3, r3, #3
 8002fe4:	4937      	ldr	r1, [pc, #220]	; (80030c4 <HAL_RCC_OscConfig+0x240>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fea:	e03a      	b.n	8003062 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d020      	beq.n	8003036 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ff4:	4b34      	ldr	r3, [pc, #208]	; (80030c8 <HAL_RCC_OscConfig+0x244>)
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ffa:	f7ff fca9 	bl	8002950 <HAL_GetTick>
 8002ffe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003000:	e008      	b.n	8003014 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003002:	f7ff fca5 	bl	8002950 <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	2b02      	cmp	r3, #2
 800300e:	d901      	bls.n	8003014 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e1a8      	b.n	8003366 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003014:	4b2b      	ldr	r3, [pc, #172]	; (80030c4 <HAL_RCC_OscConfig+0x240>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0302 	and.w	r3, r3, #2
 800301c:	2b00      	cmp	r3, #0
 800301e:	d0f0      	beq.n	8003002 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003020:	4b28      	ldr	r3, [pc, #160]	; (80030c4 <HAL_RCC_OscConfig+0x240>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	691b      	ldr	r3, [r3, #16]
 800302c:	00db      	lsls	r3, r3, #3
 800302e:	4925      	ldr	r1, [pc, #148]	; (80030c4 <HAL_RCC_OscConfig+0x240>)
 8003030:	4313      	orrs	r3, r2
 8003032:	600b      	str	r3, [r1, #0]
 8003034:	e015      	b.n	8003062 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003036:	4b24      	ldr	r3, [pc, #144]	; (80030c8 <HAL_RCC_OscConfig+0x244>)
 8003038:	2200      	movs	r2, #0
 800303a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800303c:	f7ff fc88 	bl	8002950 <HAL_GetTick>
 8003040:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003042:	e008      	b.n	8003056 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003044:	f7ff fc84 	bl	8002950 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b02      	cmp	r3, #2
 8003050:	d901      	bls.n	8003056 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e187      	b.n	8003366 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003056:	4b1b      	ldr	r3, [pc, #108]	; (80030c4 <HAL_RCC_OscConfig+0x240>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0302 	and.w	r3, r3, #2
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1f0      	bne.n	8003044 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0308 	and.w	r3, r3, #8
 800306a:	2b00      	cmp	r3, #0
 800306c:	d036      	beq.n	80030dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	695b      	ldr	r3, [r3, #20]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d016      	beq.n	80030a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003076:	4b15      	ldr	r3, [pc, #84]	; (80030cc <HAL_RCC_OscConfig+0x248>)
 8003078:	2201      	movs	r2, #1
 800307a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800307c:	f7ff fc68 	bl	8002950 <HAL_GetTick>
 8003080:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003082:	e008      	b.n	8003096 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003084:	f7ff fc64 	bl	8002950 <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	2b02      	cmp	r3, #2
 8003090:	d901      	bls.n	8003096 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e167      	b.n	8003366 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003096:	4b0b      	ldr	r3, [pc, #44]	; (80030c4 <HAL_RCC_OscConfig+0x240>)
 8003098:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d0f0      	beq.n	8003084 <HAL_RCC_OscConfig+0x200>
 80030a2:	e01b      	b.n	80030dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030a4:	4b09      	ldr	r3, [pc, #36]	; (80030cc <HAL_RCC_OscConfig+0x248>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030aa:	f7ff fc51 	bl	8002950 <HAL_GetTick>
 80030ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030b0:	e00e      	b.n	80030d0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030b2:	f7ff fc4d 	bl	8002950 <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d907      	bls.n	80030d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e150      	b.n	8003366 <HAL_RCC_OscConfig+0x4e2>
 80030c4:	40023800 	.word	0x40023800
 80030c8:	42470000 	.word	0x42470000
 80030cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030d0:	4b88      	ldr	r3, [pc, #544]	; (80032f4 <HAL_RCC_OscConfig+0x470>)
 80030d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030d4:	f003 0302 	and.w	r3, r3, #2
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d1ea      	bne.n	80030b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0304 	and.w	r3, r3, #4
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	f000 8097 	beq.w	8003218 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030ea:	2300      	movs	r3, #0
 80030ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030ee:	4b81      	ldr	r3, [pc, #516]	; (80032f4 <HAL_RCC_OscConfig+0x470>)
 80030f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d10f      	bne.n	800311a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030fa:	2300      	movs	r3, #0
 80030fc:	60bb      	str	r3, [r7, #8]
 80030fe:	4b7d      	ldr	r3, [pc, #500]	; (80032f4 <HAL_RCC_OscConfig+0x470>)
 8003100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003102:	4a7c      	ldr	r2, [pc, #496]	; (80032f4 <HAL_RCC_OscConfig+0x470>)
 8003104:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003108:	6413      	str	r3, [r2, #64]	; 0x40
 800310a:	4b7a      	ldr	r3, [pc, #488]	; (80032f4 <HAL_RCC_OscConfig+0x470>)
 800310c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003112:	60bb      	str	r3, [r7, #8]
 8003114:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003116:	2301      	movs	r3, #1
 8003118:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800311a:	4b77      	ldr	r3, [pc, #476]	; (80032f8 <HAL_RCC_OscConfig+0x474>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003122:	2b00      	cmp	r3, #0
 8003124:	d118      	bne.n	8003158 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003126:	4b74      	ldr	r3, [pc, #464]	; (80032f8 <HAL_RCC_OscConfig+0x474>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a73      	ldr	r2, [pc, #460]	; (80032f8 <HAL_RCC_OscConfig+0x474>)
 800312c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003130:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003132:	f7ff fc0d 	bl	8002950 <HAL_GetTick>
 8003136:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003138:	e008      	b.n	800314c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800313a:	f7ff fc09 	bl	8002950 <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	2b02      	cmp	r3, #2
 8003146:	d901      	bls.n	800314c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e10c      	b.n	8003366 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800314c:	4b6a      	ldr	r3, [pc, #424]	; (80032f8 <HAL_RCC_OscConfig+0x474>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003154:	2b00      	cmp	r3, #0
 8003156:	d0f0      	beq.n	800313a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	2b01      	cmp	r3, #1
 800315e:	d106      	bne.n	800316e <HAL_RCC_OscConfig+0x2ea>
 8003160:	4b64      	ldr	r3, [pc, #400]	; (80032f4 <HAL_RCC_OscConfig+0x470>)
 8003162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003164:	4a63      	ldr	r2, [pc, #396]	; (80032f4 <HAL_RCC_OscConfig+0x470>)
 8003166:	f043 0301 	orr.w	r3, r3, #1
 800316a:	6713      	str	r3, [r2, #112]	; 0x70
 800316c:	e01c      	b.n	80031a8 <HAL_RCC_OscConfig+0x324>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	2b05      	cmp	r3, #5
 8003174:	d10c      	bne.n	8003190 <HAL_RCC_OscConfig+0x30c>
 8003176:	4b5f      	ldr	r3, [pc, #380]	; (80032f4 <HAL_RCC_OscConfig+0x470>)
 8003178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800317a:	4a5e      	ldr	r2, [pc, #376]	; (80032f4 <HAL_RCC_OscConfig+0x470>)
 800317c:	f043 0304 	orr.w	r3, r3, #4
 8003180:	6713      	str	r3, [r2, #112]	; 0x70
 8003182:	4b5c      	ldr	r3, [pc, #368]	; (80032f4 <HAL_RCC_OscConfig+0x470>)
 8003184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003186:	4a5b      	ldr	r2, [pc, #364]	; (80032f4 <HAL_RCC_OscConfig+0x470>)
 8003188:	f043 0301 	orr.w	r3, r3, #1
 800318c:	6713      	str	r3, [r2, #112]	; 0x70
 800318e:	e00b      	b.n	80031a8 <HAL_RCC_OscConfig+0x324>
 8003190:	4b58      	ldr	r3, [pc, #352]	; (80032f4 <HAL_RCC_OscConfig+0x470>)
 8003192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003194:	4a57      	ldr	r2, [pc, #348]	; (80032f4 <HAL_RCC_OscConfig+0x470>)
 8003196:	f023 0301 	bic.w	r3, r3, #1
 800319a:	6713      	str	r3, [r2, #112]	; 0x70
 800319c:	4b55      	ldr	r3, [pc, #340]	; (80032f4 <HAL_RCC_OscConfig+0x470>)
 800319e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a0:	4a54      	ldr	r2, [pc, #336]	; (80032f4 <HAL_RCC_OscConfig+0x470>)
 80031a2:	f023 0304 	bic.w	r3, r3, #4
 80031a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d015      	beq.n	80031dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031b0:	f7ff fbce 	bl	8002950 <HAL_GetTick>
 80031b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031b6:	e00a      	b.n	80031ce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031b8:	f7ff fbca 	bl	8002950 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e0cb      	b.n	8003366 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ce:	4b49      	ldr	r3, [pc, #292]	; (80032f4 <HAL_RCC_OscConfig+0x470>)
 80031d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d0ee      	beq.n	80031b8 <HAL_RCC_OscConfig+0x334>
 80031da:	e014      	b.n	8003206 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031dc:	f7ff fbb8 	bl	8002950 <HAL_GetTick>
 80031e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031e2:	e00a      	b.n	80031fa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031e4:	f7ff fbb4 	bl	8002950 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e0b5      	b.n	8003366 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031fa:	4b3e      	ldr	r3, [pc, #248]	; (80032f4 <HAL_RCC_OscConfig+0x470>)
 80031fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1ee      	bne.n	80031e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003206:	7dfb      	ldrb	r3, [r7, #23]
 8003208:	2b01      	cmp	r3, #1
 800320a:	d105      	bne.n	8003218 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800320c:	4b39      	ldr	r3, [pc, #228]	; (80032f4 <HAL_RCC_OscConfig+0x470>)
 800320e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003210:	4a38      	ldr	r2, [pc, #224]	; (80032f4 <HAL_RCC_OscConfig+0x470>)
 8003212:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003216:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	699b      	ldr	r3, [r3, #24]
 800321c:	2b00      	cmp	r3, #0
 800321e:	f000 80a1 	beq.w	8003364 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003222:	4b34      	ldr	r3, [pc, #208]	; (80032f4 <HAL_RCC_OscConfig+0x470>)
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f003 030c 	and.w	r3, r3, #12
 800322a:	2b08      	cmp	r3, #8
 800322c:	d05c      	beq.n	80032e8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	2b02      	cmp	r3, #2
 8003234:	d141      	bne.n	80032ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003236:	4b31      	ldr	r3, [pc, #196]	; (80032fc <HAL_RCC_OscConfig+0x478>)
 8003238:	2200      	movs	r2, #0
 800323a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800323c:	f7ff fb88 	bl	8002950 <HAL_GetTick>
 8003240:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003242:	e008      	b.n	8003256 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003244:	f7ff fb84 	bl	8002950 <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	2b02      	cmp	r3, #2
 8003250:	d901      	bls.n	8003256 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e087      	b.n	8003366 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003256:	4b27      	ldr	r3, [pc, #156]	; (80032f4 <HAL_RCC_OscConfig+0x470>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d1f0      	bne.n	8003244 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	69da      	ldr	r2, [r3, #28]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a1b      	ldr	r3, [r3, #32]
 800326a:	431a      	orrs	r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003270:	019b      	lsls	r3, r3, #6
 8003272:	431a      	orrs	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003278:	085b      	lsrs	r3, r3, #1
 800327a:	3b01      	subs	r3, #1
 800327c:	041b      	lsls	r3, r3, #16
 800327e:	431a      	orrs	r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003284:	061b      	lsls	r3, r3, #24
 8003286:	491b      	ldr	r1, [pc, #108]	; (80032f4 <HAL_RCC_OscConfig+0x470>)
 8003288:	4313      	orrs	r3, r2
 800328a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800328c:	4b1b      	ldr	r3, [pc, #108]	; (80032fc <HAL_RCC_OscConfig+0x478>)
 800328e:	2201      	movs	r2, #1
 8003290:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003292:	f7ff fb5d 	bl	8002950 <HAL_GetTick>
 8003296:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003298:	e008      	b.n	80032ac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800329a:	f7ff fb59 	bl	8002950 <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d901      	bls.n	80032ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e05c      	b.n	8003366 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032ac:	4b11      	ldr	r3, [pc, #68]	; (80032f4 <HAL_RCC_OscConfig+0x470>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d0f0      	beq.n	800329a <HAL_RCC_OscConfig+0x416>
 80032b8:	e054      	b.n	8003364 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ba:	4b10      	ldr	r3, [pc, #64]	; (80032fc <HAL_RCC_OscConfig+0x478>)
 80032bc:	2200      	movs	r2, #0
 80032be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c0:	f7ff fb46 	bl	8002950 <HAL_GetTick>
 80032c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032c6:	e008      	b.n	80032da <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032c8:	f7ff fb42 	bl	8002950 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d901      	bls.n	80032da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e045      	b.n	8003366 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032da:	4b06      	ldr	r3, [pc, #24]	; (80032f4 <HAL_RCC_OscConfig+0x470>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d1f0      	bne.n	80032c8 <HAL_RCC_OscConfig+0x444>
 80032e6:	e03d      	b.n	8003364 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	699b      	ldr	r3, [r3, #24]
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d107      	bne.n	8003300 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e038      	b.n	8003366 <HAL_RCC_OscConfig+0x4e2>
 80032f4:	40023800 	.word	0x40023800
 80032f8:	40007000 	.word	0x40007000
 80032fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003300:	4b1b      	ldr	r3, [pc, #108]	; (8003370 <HAL_RCC_OscConfig+0x4ec>)
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	699b      	ldr	r3, [r3, #24]
 800330a:	2b01      	cmp	r3, #1
 800330c:	d028      	beq.n	8003360 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003318:	429a      	cmp	r2, r3
 800331a:	d121      	bne.n	8003360 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003326:	429a      	cmp	r2, r3
 8003328:	d11a      	bne.n	8003360 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003330:	4013      	ands	r3, r2
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003336:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003338:	4293      	cmp	r3, r2
 800333a:	d111      	bne.n	8003360 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003346:	085b      	lsrs	r3, r3, #1
 8003348:	3b01      	subs	r3, #1
 800334a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800334c:	429a      	cmp	r2, r3
 800334e:	d107      	bne.n	8003360 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800335a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800335c:	429a      	cmp	r2, r3
 800335e:	d001      	beq.n	8003364 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e000      	b.n	8003366 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3718      	adds	r7, #24
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	40023800 	.word	0x40023800

08003374 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d101      	bne.n	8003388 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e0cc      	b.n	8003522 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003388:	4b68      	ldr	r3, [pc, #416]	; (800352c <HAL_RCC_ClockConfig+0x1b8>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0307 	and.w	r3, r3, #7
 8003390:	683a      	ldr	r2, [r7, #0]
 8003392:	429a      	cmp	r2, r3
 8003394:	d90c      	bls.n	80033b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003396:	4b65      	ldr	r3, [pc, #404]	; (800352c <HAL_RCC_ClockConfig+0x1b8>)
 8003398:	683a      	ldr	r2, [r7, #0]
 800339a:	b2d2      	uxtb	r2, r2
 800339c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800339e:	4b63      	ldr	r3, [pc, #396]	; (800352c <HAL_RCC_ClockConfig+0x1b8>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0307 	and.w	r3, r3, #7
 80033a6:	683a      	ldr	r2, [r7, #0]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d001      	beq.n	80033b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e0b8      	b.n	8003522 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0302 	and.w	r3, r3, #2
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d020      	beq.n	80033fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0304 	and.w	r3, r3, #4
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d005      	beq.n	80033d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033c8:	4b59      	ldr	r3, [pc, #356]	; (8003530 <HAL_RCC_ClockConfig+0x1bc>)
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	4a58      	ldr	r2, [pc, #352]	; (8003530 <HAL_RCC_ClockConfig+0x1bc>)
 80033ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80033d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0308 	and.w	r3, r3, #8
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d005      	beq.n	80033ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033e0:	4b53      	ldr	r3, [pc, #332]	; (8003530 <HAL_RCC_ClockConfig+0x1bc>)
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	4a52      	ldr	r2, [pc, #328]	; (8003530 <HAL_RCC_ClockConfig+0x1bc>)
 80033e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80033ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033ec:	4b50      	ldr	r3, [pc, #320]	; (8003530 <HAL_RCC_ClockConfig+0x1bc>)
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	494d      	ldr	r1, [pc, #308]	; (8003530 <HAL_RCC_ClockConfig+0x1bc>)
 80033fa:	4313      	orrs	r3, r2
 80033fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0301 	and.w	r3, r3, #1
 8003406:	2b00      	cmp	r3, #0
 8003408:	d044      	beq.n	8003494 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d107      	bne.n	8003422 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003412:	4b47      	ldr	r3, [pc, #284]	; (8003530 <HAL_RCC_ClockConfig+0x1bc>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d119      	bne.n	8003452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e07f      	b.n	8003522 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	2b02      	cmp	r3, #2
 8003428:	d003      	beq.n	8003432 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800342e:	2b03      	cmp	r3, #3
 8003430:	d107      	bne.n	8003442 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003432:	4b3f      	ldr	r3, [pc, #252]	; (8003530 <HAL_RCC_ClockConfig+0x1bc>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d109      	bne.n	8003452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e06f      	b.n	8003522 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003442:	4b3b      	ldr	r3, [pc, #236]	; (8003530 <HAL_RCC_ClockConfig+0x1bc>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	2b00      	cmp	r3, #0
 800344c:	d101      	bne.n	8003452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e067      	b.n	8003522 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003452:	4b37      	ldr	r3, [pc, #220]	; (8003530 <HAL_RCC_ClockConfig+0x1bc>)
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f023 0203 	bic.w	r2, r3, #3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	4934      	ldr	r1, [pc, #208]	; (8003530 <HAL_RCC_ClockConfig+0x1bc>)
 8003460:	4313      	orrs	r3, r2
 8003462:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003464:	f7ff fa74 	bl	8002950 <HAL_GetTick>
 8003468:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800346a:	e00a      	b.n	8003482 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800346c:	f7ff fa70 	bl	8002950 <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	f241 3288 	movw	r2, #5000	; 0x1388
 800347a:	4293      	cmp	r3, r2
 800347c:	d901      	bls.n	8003482 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e04f      	b.n	8003522 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003482:	4b2b      	ldr	r3, [pc, #172]	; (8003530 <HAL_RCC_ClockConfig+0x1bc>)
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f003 020c 	and.w	r2, r3, #12
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	429a      	cmp	r2, r3
 8003492:	d1eb      	bne.n	800346c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003494:	4b25      	ldr	r3, [pc, #148]	; (800352c <HAL_RCC_ClockConfig+0x1b8>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0307 	and.w	r3, r3, #7
 800349c:	683a      	ldr	r2, [r7, #0]
 800349e:	429a      	cmp	r2, r3
 80034a0:	d20c      	bcs.n	80034bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034a2:	4b22      	ldr	r3, [pc, #136]	; (800352c <HAL_RCC_ClockConfig+0x1b8>)
 80034a4:	683a      	ldr	r2, [r7, #0]
 80034a6:	b2d2      	uxtb	r2, r2
 80034a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034aa:	4b20      	ldr	r3, [pc, #128]	; (800352c <HAL_RCC_ClockConfig+0x1b8>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0307 	and.w	r3, r3, #7
 80034b2:	683a      	ldr	r2, [r7, #0]
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d001      	beq.n	80034bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e032      	b.n	8003522 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0304 	and.w	r3, r3, #4
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d008      	beq.n	80034da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034c8:	4b19      	ldr	r3, [pc, #100]	; (8003530 <HAL_RCC_ClockConfig+0x1bc>)
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	4916      	ldr	r1, [pc, #88]	; (8003530 <HAL_RCC_ClockConfig+0x1bc>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0308 	and.w	r3, r3, #8
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d009      	beq.n	80034fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034e6:	4b12      	ldr	r3, [pc, #72]	; (8003530 <HAL_RCC_ClockConfig+0x1bc>)
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	691b      	ldr	r3, [r3, #16]
 80034f2:	00db      	lsls	r3, r3, #3
 80034f4:	490e      	ldr	r1, [pc, #56]	; (8003530 <HAL_RCC_ClockConfig+0x1bc>)
 80034f6:	4313      	orrs	r3, r2
 80034f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034fa:	f000 f821 	bl	8003540 <HAL_RCC_GetSysClockFreq>
 80034fe:	4602      	mov	r2, r0
 8003500:	4b0b      	ldr	r3, [pc, #44]	; (8003530 <HAL_RCC_ClockConfig+0x1bc>)
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	091b      	lsrs	r3, r3, #4
 8003506:	f003 030f 	and.w	r3, r3, #15
 800350a:	490a      	ldr	r1, [pc, #40]	; (8003534 <HAL_RCC_ClockConfig+0x1c0>)
 800350c:	5ccb      	ldrb	r3, [r1, r3]
 800350e:	fa22 f303 	lsr.w	r3, r2, r3
 8003512:	4a09      	ldr	r2, [pc, #36]	; (8003538 <HAL_RCC_ClockConfig+0x1c4>)
 8003514:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003516:	4b09      	ldr	r3, [pc, #36]	; (800353c <HAL_RCC_ClockConfig+0x1c8>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4618      	mov	r0, r3
 800351c:	f7ff f9d4 	bl	80028c8 <HAL_InitTick>

  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3710      	adds	r7, #16
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	40023c00 	.word	0x40023c00
 8003530:	40023800 	.word	0x40023800
 8003534:	08008570 	.word	0x08008570
 8003538:	20000000 	.word	0x20000000
 800353c:	20000004 	.word	0x20000004

08003540 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003540:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003544:	b090      	sub	sp, #64	; 0x40
 8003546:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003548:	2300      	movs	r3, #0
 800354a:	637b      	str	r3, [r7, #52]	; 0x34
 800354c:	2300      	movs	r3, #0
 800354e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003550:	2300      	movs	r3, #0
 8003552:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003554:	2300      	movs	r3, #0
 8003556:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003558:	4b59      	ldr	r3, [pc, #356]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f003 030c 	and.w	r3, r3, #12
 8003560:	2b08      	cmp	r3, #8
 8003562:	d00d      	beq.n	8003580 <HAL_RCC_GetSysClockFreq+0x40>
 8003564:	2b08      	cmp	r3, #8
 8003566:	f200 80a1 	bhi.w	80036ac <HAL_RCC_GetSysClockFreq+0x16c>
 800356a:	2b00      	cmp	r3, #0
 800356c:	d002      	beq.n	8003574 <HAL_RCC_GetSysClockFreq+0x34>
 800356e:	2b04      	cmp	r3, #4
 8003570:	d003      	beq.n	800357a <HAL_RCC_GetSysClockFreq+0x3a>
 8003572:	e09b      	b.n	80036ac <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003574:	4b53      	ldr	r3, [pc, #332]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003576:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003578:	e09b      	b.n	80036b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800357a:	4b53      	ldr	r3, [pc, #332]	; (80036c8 <HAL_RCC_GetSysClockFreq+0x188>)
 800357c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800357e:	e098      	b.n	80036b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003580:	4b4f      	ldr	r3, [pc, #316]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003588:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800358a:	4b4d      	ldr	r3, [pc, #308]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d028      	beq.n	80035e8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003596:	4b4a      	ldr	r3, [pc, #296]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	099b      	lsrs	r3, r3, #6
 800359c:	2200      	movs	r2, #0
 800359e:	623b      	str	r3, [r7, #32]
 80035a0:	627a      	str	r2, [r7, #36]	; 0x24
 80035a2:	6a3b      	ldr	r3, [r7, #32]
 80035a4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80035a8:	2100      	movs	r1, #0
 80035aa:	4b47      	ldr	r3, [pc, #284]	; (80036c8 <HAL_RCC_GetSysClockFreq+0x188>)
 80035ac:	fb03 f201 	mul.w	r2, r3, r1
 80035b0:	2300      	movs	r3, #0
 80035b2:	fb00 f303 	mul.w	r3, r0, r3
 80035b6:	4413      	add	r3, r2
 80035b8:	4a43      	ldr	r2, [pc, #268]	; (80036c8 <HAL_RCC_GetSysClockFreq+0x188>)
 80035ba:	fba0 1202 	umull	r1, r2, r0, r2
 80035be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80035c0:	460a      	mov	r2, r1
 80035c2:	62ba      	str	r2, [r7, #40]	; 0x28
 80035c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035c6:	4413      	add	r3, r2
 80035c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035cc:	2200      	movs	r2, #0
 80035ce:	61bb      	str	r3, [r7, #24]
 80035d0:	61fa      	str	r2, [r7, #28]
 80035d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035d6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80035da:	f7fd fb3d 	bl	8000c58 <__aeabi_uldivmod>
 80035de:	4602      	mov	r2, r0
 80035e0:	460b      	mov	r3, r1
 80035e2:	4613      	mov	r3, r2
 80035e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035e6:	e053      	b.n	8003690 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035e8:	4b35      	ldr	r3, [pc, #212]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x180>)
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	099b      	lsrs	r3, r3, #6
 80035ee:	2200      	movs	r2, #0
 80035f0:	613b      	str	r3, [r7, #16]
 80035f2:	617a      	str	r2, [r7, #20]
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80035fa:	f04f 0b00 	mov.w	fp, #0
 80035fe:	4652      	mov	r2, sl
 8003600:	465b      	mov	r3, fp
 8003602:	f04f 0000 	mov.w	r0, #0
 8003606:	f04f 0100 	mov.w	r1, #0
 800360a:	0159      	lsls	r1, r3, #5
 800360c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003610:	0150      	lsls	r0, r2, #5
 8003612:	4602      	mov	r2, r0
 8003614:	460b      	mov	r3, r1
 8003616:	ebb2 080a 	subs.w	r8, r2, sl
 800361a:	eb63 090b 	sbc.w	r9, r3, fp
 800361e:	f04f 0200 	mov.w	r2, #0
 8003622:	f04f 0300 	mov.w	r3, #0
 8003626:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800362a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800362e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003632:	ebb2 0408 	subs.w	r4, r2, r8
 8003636:	eb63 0509 	sbc.w	r5, r3, r9
 800363a:	f04f 0200 	mov.w	r2, #0
 800363e:	f04f 0300 	mov.w	r3, #0
 8003642:	00eb      	lsls	r3, r5, #3
 8003644:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003648:	00e2      	lsls	r2, r4, #3
 800364a:	4614      	mov	r4, r2
 800364c:	461d      	mov	r5, r3
 800364e:	eb14 030a 	adds.w	r3, r4, sl
 8003652:	603b      	str	r3, [r7, #0]
 8003654:	eb45 030b 	adc.w	r3, r5, fp
 8003658:	607b      	str	r3, [r7, #4]
 800365a:	f04f 0200 	mov.w	r2, #0
 800365e:	f04f 0300 	mov.w	r3, #0
 8003662:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003666:	4629      	mov	r1, r5
 8003668:	028b      	lsls	r3, r1, #10
 800366a:	4621      	mov	r1, r4
 800366c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003670:	4621      	mov	r1, r4
 8003672:	028a      	lsls	r2, r1, #10
 8003674:	4610      	mov	r0, r2
 8003676:	4619      	mov	r1, r3
 8003678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800367a:	2200      	movs	r2, #0
 800367c:	60bb      	str	r3, [r7, #8]
 800367e:	60fa      	str	r2, [r7, #12]
 8003680:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003684:	f7fd fae8 	bl	8000c58 <__aeabi_uldivmod>
 8003688:	4602      	mov	r2, r0
 800368a:	460b      	mov	r3, r1
 800368c:	4613      	mov	r3, r2
 800368e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003690:	4b0b      	ldr	r3, [pc, #44]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	0c1b      	lsrs	r3, r3, #16
 8003696:	f003 0303 	and.w	r3, r3, #3
 800369a:	3301      	adds	r3, #1
 800369c:	005b      	lsls	r3, r3, #1
 800369e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80036a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80036a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036a8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80036aa:	e002      	b.n	80036b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036ac:	4b05      	ldr	r3, [pc, #20]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x184>)
 80036ae:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80036b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3740      	adds	r7, #64	; 0x40
 80036b8:	46bd      	mov	sp, r7
 80036ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036be:	bf00      	nop
 80036c0:	40023800 	.word	0x40023800
 80036c4:	00f42400 	.word	0x00f42400
 80036c8:	017d7840 	.word	0x017d7840

080036cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d101      	bne.n	80036de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e07b      	b.n	80037d6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d108      	bne.n	80036f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036ee:	d009      	beq.n	8003704 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	61da      	str	r2, [r3, #28]
 80036f6:	e005      	b.n	8003704 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b00      	cmp	r3, #0
 8003714:	d106      	bne.n	8003724 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f7fe fb34 	bl	8001d8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2202      	movs	r2, #2
 8003728:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800373a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800374c:	431a      	orrs	r2, r3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003756:	431a      	orrs	r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	691b      	ldr	r3, [r3, #16]
 800375c:	f003 0302 	and.w	r3, r3, #2
 8003760:	431a      	orrs	r2, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	695b      	ldr	r3, [r3, #20]
 8003766:	f003 0301 	and.w	r3, r3, #1
 800376a:	431a      	orrs	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003774:	431a      	orrs	r2, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	69db      	ldr	r3, [r3, #28]
 800377a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800377e:	431a      	orrs	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6a1b      	ldr	r3, [r3, #32]
 8003784:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003788:	ea42 0103 	orr.w	r1, r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003790:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	430a      	orrs	r2, r1
 800379a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	699b      	ldr	r3, [r3, #24]
 80037a0:	0c1b      	lsrs	r3, r3, #16
 80037a2:	f003 0104 	and.w	r1, r3, #4
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037aa:	f003 0210 	and.w	r2, r3, #16
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	430a      	orrs	r2, r1
 80037b4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	69da      	ldr	r2, [r3, #28]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037c4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3708      	adds	r7, #8
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}

080037de <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037de:	b580      	push	{r7, lr}
 80037e0:	b088      	sub	sp, #32
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	60f8      	str	r0, [r7, #12]
 80037e6:	60b9      	str	r1, [r7, #8]
 80037e8:	603b      	str	r3, [r7, #0]
 80037ea:	4613      	mov	r3, r2
 80037ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80037ee:	2300      	movs	r3, #0
 80037f0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d101      	bne.n	8003800 <HAL_SPI_Transmit+0x22>
 80037fc:	2302      	movs	r3, #2
 80037fe:	e126      	b.n	8003a4e <HAL_SPI_Transmit+0x270>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003808:	f7ff f8a2 	bl	8002950 <HAL_GetTick>
 800380c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800380e:	88fb      	ldrh	r3, [r7, #6]
 8003810:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003818:	b2db      	uxtb	r3, r3
 800381a:	2b01      	cmp	r3, #1
 800381c:	d002      	beq.n	8003824 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800381e:	2302      	movs	r3, #2
 8003820:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003822:	e10b      	b.n	8003a3c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d002      	beq.n	8003830 <HAL_SPI_Transmit+0x52>
 800382a:	88fb      	ldrh	r3, [r7, #6]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d102      	bne.n	8003836 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003834:	e102      	b.n	8003a3c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2203      	movs	r2, #3
 800383a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2200      	movs	r2, #0
 8003842:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	68ba      	ldr	r2, [r7, #8]
 8003848:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	88fa      	ldrh	r2, [r7, #6]
 800384e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	88fa      	ldrh	r2, [r7, #6]
 8003854:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2200      	movs	r2, #0
 800385a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2200      	movs	r2, #0
 8003860:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2200      	movs	r2, #0
 8003866:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2200      	movs	r2, #0
 800386c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2200      	movs	r2, #0
 8003872:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800387c:	d10f      	bne.n	800389e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800388c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800389c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038a8:	2b40      	cmp	r3, #64	; 0x40
 80038aa:	d007      	beq.n	80038bc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038c4:	d14b      	bne.n	800395e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d002      	beq.n	80038d4 <HAL_SPI_Transmit+0xf6>
 80038ce:	8afb      	ldrh	r3, [r7, #22]
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d13e      	bne.n	8003952 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d8:	881a      	ldrh	r2, [r3, #0]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e4:	1c9a      	adds	r2, r3, #2
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	3b01      	subs	r3, #1
 80038f2:	b29a      	uxth	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80038f8:	e02b      	b.n	8003952 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	f003 0302 	and.w	r3, r3, #2
 8003904:	2b02      	cmp	r3, #2
 8003906:	d112      	bne.n	800392e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390c:	881a      	ldrh	r2, [r3, #0]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003918:	1c9a      	adds	r2, r3, #2
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003922:	b29b      	uxth	r3, r3
 8003924:	3b01      	subs	r3, #1
 8003926:	b29a      	uxth	r2, r3
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	86da      	strh	r2, [r3, #54]	; 0x36
 800392c:	e011      	b.n	8003952 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800392e:	f7ff f80f 	bl	8002950 <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	683a      	ldr	r2, [r7, #0]
 800393a:	429a      	cmp	r2, r3
 800393c:	d803      	bhi.n	8003946 <HAL_SPI_Transmit+0x168>
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003944:	d102      	bne.n	800394c <HAL_SPI_Transmit+0x16e>
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d102      	bne.n	8003952 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003950:	e074      	b.n	8003a3c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003956:	b29b      	uxth	r3, r3
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1ce      	bne.n	80038fa <HAL_SPI_Transmit+0x11c>
 800395c:	e04c      	b.n	80039f8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d002      	beq.n	800396c <HAL_SPI_Transmit+0x18e>
 8003966:	8afb      	ldrh	r3, [r7, #22]
 8003968:	2b01      	cmp	r3, #1
 800396a:	d140      	bne.n	80039ee <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	330c      	adds	r3, #12
 8003976:	7812      	ldrb	r2, [r2, #0]
 8003978:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397e:	1c5a      	adds	r2, r3, #1
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003988:	b29b      	uxth	r3, r3
 800398a:	3b01      	subs	r3, #1
 800398c:	b29a      	uxth	r2, r3
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003992:	e02c      	b.n	80039ee <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f003 0302 	and.w	r3, r3, #2
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d113      	bne.n	80039ca <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	330c      	adds	r3, #12
 80039ac:	7812      	ldrb	r2, [r2, #0]
 80039ae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b4:	1c5a      	adds	r2, r3, #1
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039be:	b29b      	uxth	r3, r3
 80039c0:	3b01      	subs	r3, #1
 80039c2:	b29a      	uxth	r2, r3
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	86da      	strh	r2, [r3, #54]	; 0x36
 80039c8:	e011      	b.n	80039ee <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039ca:	f7fe ffc1 	bl	8002950 <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	683a      	ldr	r2, [r7, #0]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d803      	bhi.n	80039e2 <HAL_SPI_Transmit+0x204>
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039e0:	d102      	bne.n	80039e8 <HAL_SPI_Transmit+0x20a>
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d102      	bne.n	80039ee <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	77fb      	strb	r3, [r7, #31]
          goto error;
 80039ec:	e026      	b.n	8003a3c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d1cd      	bne.n	8003994 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039f8:	69ba      	ldr	r2, [r7, #24]
 80039fa:	6839      	ldr	r1, [r7, #0]
 80039fc:	68f8      	ldr	r0, [r7, #12]
 80039fe:	f000 fbcb 	bl	8004198 <SPI_EndRxTxTransaction>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d002      	beq.n	8003a0e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2220      	movs	r2, #32
 8003a0c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d10a      	bne.n	8003a2c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a16:	2300      	movs	r3, #0
 8003a18:	613b      	str	r3, [r7, #16]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	613b      	str	r3, [r7, #16]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	613b      	str	r3, [r7, #16]
 8003a2a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d002      	beq.n	8003a3a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	77fb      	strb	r3, [r7, #31]
 8003a38:	e000      	b.n	8003a3c <HAL_SPI_Transmit+0x25e>
  }

error:
 8003a3a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003a4c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3720      	adds	r7, #32
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b088      	sub	sp, #32
 8003a5a:	af02      	add	r7, sp, #8
 8003a5c:	60f8      	str	r0, [r7, #12]
 8003a5e:	60b9      	str	r1, [r7, #8]
 8003a60:	603b      	str	r3, [r7, #0]
 8003a62:	4613      	mov	r3, r2
 8003a64:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003a66:	2300      	movs	r3, #0
 8003a68:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a72:	d112      	bne.n	8003a9a <HAL_SPI_Receive+0x44>
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d10e      	bne.n	8003a9a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2204      	movs	r2, #4
 8003a80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003a84:	88fa      	ldrh	r2, [r7, #6]
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	9300      	str	r3, [sp, #0]
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	68ba      	ldr	r2, [r7, #8]
 8003a8e:	68b9      	ldr	r1, [r7, #8]
 8003a90:	68f8      	ldr	r0, [r7, #12]
 8003a92:	f000 f8f1 	bl	8003c78 <HAL_SPI_TransmitReceive>
 8003a96:	4603      	mov	r3, r0
 8003a98:	e0ea      	b.n	8003c70 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d101      	bne.n	8003aa8 <HAL_SPI_Receive+0x52>
 8003aa4:	2302      	movs	r3, #2
 8003aa6:	e0e3      	b.n	8003c70 <HAL_SPI_Receive+0x21a>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ab0:	f7fe ff4e 	bl	8002950 <HAL_GetTick>
 8003ab4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d002      	beq.n	8003ac8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003ac2:	2302      	movs	r3, #2
 8003ac4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003ac6:	e0ca      	b.n	8003c5e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d002      	beq.n	8003ad4 <HAL_SPI_Receive+0x7e>
 8003ace:	88fb      	ldrh	r3, [r7, #6]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d102      	bne.n	8003ada <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003ad8:	e0c1      	b.n	8003c5e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2204      	movs	r2, #4
 8003ade:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	68ba      	ldr	r2, [r7, #8]
 8003aec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	88fa      	ldrh	r2, [r7, #6]
 8003af2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	88fa      	ldrh	r2, [r7, #6]
 8003af8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2200      	movs	r2, #0
 8003afe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2200      	movs	r2, #0
 8003b04:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2200      	movs	r2, #0
 8003b16:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b20:	d10f      	bne.n	8003b42 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b30:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003b40:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b4c:	2b40      	cmp	r3, #64	; 0x40
 8003b4e:	d007      	beq.n	8003b60 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b5e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d162      	bne.n	8003c2e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003b68:	e02e      	b.n	8003bc8 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f003 0301 	and.w	r3, r3, #1
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d115      	bne.n	8003ba4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f103 020c 	add.w	r2, r3, #12
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b84:	7812      	ldrb	r2, [r2, #0]
 8003b86:	b2d2      	uxtb	r2, r2
 8003b88:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b8e:	1c5a      	adds	r2, r3, #1
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	b29a      	uxth	r2, r3
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ba2:	e011      	b.n	8003bc8 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ba4:	f7fe fed4 	bl	8002950 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	683a      	ldr	r2, [r7, #0]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d803      	bhi.n	8003bbc <HAL_SPI_Receive+0x166>
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bba:	d102      	bne.n	8003bc2 <HAL_SPI_Receive+0x16c>
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d102      	bne.n	8003bc8 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003bc6:	e04a      	b.n	8003c5e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d1cb      	bne.n	8003b6a <HAL_SPI_Receive+0x114>
 8003bd2:	e031      	b.n	8003c38 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	f003 0301 	and.w	r3, r3, #1
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d113      	bne.n	8003c0a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	68da      	ldr	r2, [r3, #12]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bec:	b292      	uxth	r2, r2
 8003bee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf4:	1c9a      	adds	r2, r3, #2
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	3b01      	subs	r3, #1
 8003c02:	b29a      	uxth	r2, r3
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c08:	e011      	b.n	8003c2e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c0a:	f7fe fea1 	bl	8002950 <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	683a      	ldr	r2, [r7, #0]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d803      	bhi.n	8003c22 <HAL_SPI_Receive+0x1cc>
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c20:	d102      	bne.n	8003c28 <HAL_SPI_Receive+0x1d2>
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d102      	bne.n	8003c2e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003c2c:	e017      	b.n	8003c5e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d1cd      	bne.n	8003bd4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c38:	693a      	ldr	r2, [r7, #16]
 8003c3a:	6839      	ldr	r1, [r7, #0]
 8003c3c:	68f8      	ldr	r0, [r7, #12]
 8003c3e:	f000 fa45 	bl	80040cc <SPI_EndRxTransaction>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d002      	beq.n	8003c4e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2220      	movs	r2, #32
 8003c4c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d002      	beq.n	8003c5c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	75fb      	strb	r3, [r7, #23]
 8003c5a:	e000      	b.n	8003c5e <HAL_SPI_Receive+0x208>
  }

error :
 8003c5c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2201      	movs	r2, #1
 8003c62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003c6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3718      	adds	r7, #24
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b08c      	sub	sp, #48	; 0x30
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	607a      	str	r2, [r7, #4]
 8003c84:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003c86:	2301      	movs	r3, #1
 8003c88:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d101      	bne.n	8003c9e <HAL_SPI_TransmitReceive+0x26>
 8003c9a:	2302      	movs	r3, #2
 8003c9c:	e18a      	b.n	8003fb4 <HAL_SPI_TransmitReceive+0x33c>
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ca6:	f7fe fe53 	bl	8002950 <HAL_GetTick>
 8003caa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003cb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003cbc:	887b      	ldrh	r3, [r7, #2]
 8003cbe:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003cc0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d00f      	beq.n	8003ce8 <HAL_SPI_TransmitReceive+0x70>
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cce:	d107      	bne.n	8003ce0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d103      	bne.n	8003ce0 <HAL_SPI_TransmitReceive+0x68>
 8003cd8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003cdc:	2b04      	cmp	r3, #4
 8003cde:	d003      	beq.n	8003ce8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003ce0:	2302      	movs	r3, #2
 8003ce2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003ce6:	e15b      	b.n	8003fa0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d005      	beq.n	8003cfa <HAL_SPI_TransmitReceive+0x82>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d002      	beq.n	8003cfa <HAL_SPI_TransmitReceive+0x82>
 8003cf4:	887b      	ldrh	r3, [r7, #2]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d103      	bne.n	8003d02 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003d00:	e14e      	b.n	8003fa0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	2b04      	cmp	r3, #4
 8003d0c:	d003      	beq.n	8003d16 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2205      	movs	r2, #5
 8003d12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	887a      	ldrh	r2, [r7, #2]
 8003d26:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	887a      	ldrh	r2, [r7, #2]
 8003d2c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	68ba      	ldr	r2, [r7, #8]
 8003d32:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	887a      	ldrh	r2, [r7, #2]
 8003d38:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	887a      	ldrh	r2, [r7, #2]
 8003d3e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2200      	movs	r2, #0
 8003d44:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d56:	2b40      	cmp	r3, #64	; 0x40
 8003d58:	d007      	beq.n	8003d6a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d68:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d72:	d178      	bne.n	8003e66 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d002      	beq.n	8003d82 <HAL_SPI_TransmitReceive+0x10a>
 8003d7c:	8b7b      	ldrh	r3, [r7, #26]
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d166      	bne.n	8003e50 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d86:	881a      	ldrh	r2, [r3, #0]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d92:	1c9a      	adds	r2, r3, #2
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	3b01      	subs	r3, #1
 8003da0:	b29a      	uxth	r2, r3
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003da6:	e053      	b.n	8003e50 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f003 0302 	and.w	r3, r3, #2
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d11b      	bne.n	8003dee <HAL_SPI_TransmitReceive+0x176>
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d016      	beq.n	8003dee <HAL_SPI_TransmitReceive+0x176>
 8003dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d113      	bne.n	8003dee <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dca:	881a      	ldrh	r2, [r3, #0]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd6:	1c9a      	adds	r2, r3, #2
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	3b01      	subs	r3, #1
 8003de4:	b29a      	uxth	r2, r3
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003dea:	2300      	movs	r3, #0
 8003dec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	f003 0301 	and.w	r3, r3, #1
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d119      	bne.n	8003e30 <HAL_SPI_TransmitReceive+0x1b8>
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d014      	beq.n	8003e30 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68da      	ldr	r2, [r3, #12]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e10:	b292      	uxth	r2, r2
 8003e12:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e18:	1c9a      	adds	r2, r3, #2
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	3b01      	subs	r3, #1
 8003e26:	b29a      	uxth	r2, r3
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003e30:	f7fe fd8e 	bl	8002950 <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d807      	bhi.n	8003e50 <HAL_SPI_TransmitReceive+0x1d8>
 8003e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e46:	d003      	beq.n	8003e50 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003e4e:	e0a7      	b.n	8003fa0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d1a6      	bne.n	8003da8 <HAL_SPI_TransmitReceive+0x130>
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d1a1      	bne.n	8003da8 <HAL_SPI_TransmitReceive+0x130>
 8003e64:	e07c      	b.n	8003f60 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d002      	beq.n	8003e74 <HAL_SPI_TransmitReceive+0x1fc>
 8003e6e:	8b7b      	ldrh	r3, [r7, #26]
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d16b      	bne.n	8003f4c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	330c      	adds	r3, #12
 8003e7e:	7812      	ldrb	r2, [r2, #0]
 8003e80:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e86:	1c5a      	adds	r2, r3, #1
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	3b01      	subs	r3, #1
 8003e94:	b29a      	uxth	r2, r3
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e9a:	e057      	b.n	8003f4c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f003 0302 	and.w	r3, r3, #2
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d11c      	bne.n	8003ee4 <HAL_SPI_TransmitReceive+0x26c>
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d017      	beq.n	8003ee4 <HAL_SPI_TransmitReceive+0x26c>
 8003eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d114      	bne.n	8003ee4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	330c      	adds	r3, #12
 8003ec4:	7812      	ldrb	r2, [r2, #0]
 8003ec6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ecc:	1c5a      	adds	r2, r3, #1
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	3b01      	subs	r3, #1
 8003eda:	b29a      	uxth	r2, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	f003 0301 	and.w	r3, r3, #1
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d119      	bne.n	8003f26 <HAL_SPI_TransmitReceive+0x2ae>
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d014      	beq.n	8003f26 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	68da      	ldr	r2, [r3, #12]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f06:	b2d2      	uxtb	r2, r2
 8003f08:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f0e:	1c5a      	adds	r2, r3, #1
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	3b01      	subs	r3, #1
 8003f1c:	b29a      	uxth	r2, r3
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f22:	2301      	movs	r3, #1
 8003f24:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003f26:	f7fe fd13 	bl	8002950 <HAL_GetTick>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2e:	1ad3      	subs	r3, r2, r3
 8003f30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d803      	bhi.n	8003f3e <HAL_SPI_TransmitReceive+0x2c6>
 8003f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f3c:	d102      	bne.n	8003f44 <HAL_SPI_TransmitReceive+0x2cc>
 8003f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d103      	bne.n	8003f4c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003f4a:	e029      	b.n	8003fa0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1a2      	bne.n	8003e9c <HAL_SPI_TransmitReceive+0x224>
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d19d      	bne.n	8003e9c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f62:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f64:	68f8      	ldr	r0, [r7, #12]
 8003f66:	f000 f917 	bl	8004198 <SPI_EndRxTxTransaction>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d006      	beq.n	8003f7e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2220      	movs	r2, #32
 8003f7a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003f7c:	e010      	b.n	8003fa0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d10b      	bne.n	8003f9e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f86:	2300      	movs	r3, #0
 8003f88:	617b      	str	r3, [r7, #20]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	617b      	str	r3, [r7, #20]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	617b      	str	r3, [r7, #20]
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	e000      	b.n	8003fa0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003f9e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2200      	movs	r2, #0
 8003fac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003fb0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3730      	adds	r7, #48	; 0x30
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b088      	sub	sp, #32
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	60b9      	str	r1, [r7, #8]
 8003fc6:	603b      	str	r3, [r7, #0]
 8003fc8:	4613      	mov	r3, r2
 8003fca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003fcc:	f7fe fcc0 	bl	8002950 <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fd4:	1a9b      	subs	r3, r3, r2
 8003fd6:	683a      	ldr	r2, [r7, #0]
 8003fd8:	4413      	add	r3, r2
 8003fda:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003fdc:	f7fe fcb8 	bl	8002950 <HAL_GetTick>
 8003fe0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003fe2:	4b39      	ldr	r3, [pc, #228]	; (80040c8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	015b      	lsls	r3, r3, #5
 8003fe8:	0d1b      	lsrs	r3, r3, #20
 8003fea:	69fa      	ldr	r2, [r7, #28]
 8003fec:	fb02 f303 	mul.w	r3, r2, r3
 8003ff0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ff2:	e054      	b.n	800409e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ffa:	d050      	beq.n	800409e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ffc:	f7fe fca8 	bl	8002950 <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	69fa      	ldr	r2, [r7, #28]
 8004008:	429a      	cmp	r2, r3
 800400a:	d902      	bls.n	8004012 <SPI_WaitFlagStateUntilTimeout+0x56>
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d13d      	bne.n	800408e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	685a      	ldr	r2, [r3, #4]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004020:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800402a:	d111      	bne.n	8004050 <SPI_WaitFlagStateUntilTimeout+0x94>
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004034:	d004      	beq.n	8004040 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800403e:	d107      	bne.n	8004050 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800404e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004054:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004058:	d10f      	bne.n	800407a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004068:	601a      	str	r2, [r3, #0]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004078:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2201      	movs	r2, #1
 800407e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e017      	b.n	80040be <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d101      	bne.n	8004098 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004094:	2300      	movs	r3, #0
 8004096:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	3b01      	subs	r3, #1
 800409c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	689a      	ldr	r2, [r3, #8]
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	4013      	ands	r3, r2
 80040a8:	68ba      	ldr	r2, [r7, #8]
 80040aa:	429a      	cmp	r2, r3
 80040ac:	bf0c      	ite	eq
 80040ae:	2301      	moveq	r3, #1
 80040b0:	2300      	movne	r3, #0
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	461a      	mov	r2, r3
 80040b6:	79fb      	ldrb	r3, [r7, #7]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d19b      	bne.n	8003ff4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3720      	adds	r7, #32
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	20000000 	.word	0x20000000

080040cc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b086      	sub	sp, #24
 80040d0:	af02      	add	r7, sp, #8
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040e0:	d111      	bne.n	8004106 <SPI_EndRxTransaction+0x3a>
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040ea:	d004      	beq.n	80040f6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040f4:	d107      	bne.n	8004106 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004104:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800410e:	d12a      	bne.n	8004166 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004118:	d012      	beq.n	8004140 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	9300      	str	r3, [sp, #0]
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	2200      	movs	r2, #0
 8004122:	2180      	movs	r1, #128	; 0x80
 8004124:	68f8      	ldr	r0, [r7, #12]
 8004126:	f7ff ff49 	bl	8003fbc <SPI_WaitFlagStateUntilTimeout>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d02d      	beq.n	800418c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004134:	f043 0220 	orr.w	r2, r3, #32
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	e026      	b.n	800418e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	9300      	str	r3, [sp, #0]
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	2200      	movs	r2, #0
 8004148:	2101      	movs	r1, #1
 800414a:	68f8      	ldr	r0, [r7, #12]
 800414c:	f7ff ff36 	bl	8003fbc <SPI_WaitFlagStateUntilTimeout>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d01a      	beq.n	800418c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800415a:	f043 0220 	orr.w	r2, r3, #32
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e013      	b.n	800418e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	9300      	str	r3, [sp, #0]
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	2200      	movs	r2, #0
 800416e:	2101      	movs	r1, #1
 8004170:	68f8      	ldr	r0, [r7, #12]
 8004172:	f7ff ff23 	bl	8003fbc <SPI_WaitFlagStateUntilTimeout>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d007      	beq.n	800418c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004180:	f043 0220 	orr.w	r2, r3, #32
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e000      	b.n	800418e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3710      	adds	r7, #16
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
	...

08004198 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b088      	sub	sp, #32
 800419c:	af02      	add	r7, sp, #8
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80041a4:	4b1b      	ldr	r3, [pc, #108]	; (8004214 <SPI_EndRxTxTransaction+0x7c>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a1b      	ldr	r2, [pc, #108]	; (8004218 <SPI_EndRxTxTransaction+0x80>)
 80041aa:	fba2 2303 	umull	r2, r3, r2, r3
 80041ae:	0d5b      	lsrs	r3, r3, #21
 80041b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80041b4:	fb02 f303 	mul.w	r3, r2, r3
 80041b8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041c2:	d112      	bne.n	80041ea <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	9300      	str	r3, [sp, #0]
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	2200      	movs	r2, #0
 80041cc:	2180      	movs	r1, #128	; 0x80
 80041ce:	68f8      	ldr	r0, [r7, #12]
 80041d0:	f7ff fef4 	bl	8003fbc <SPI_WaitFlagStateUntilTimeout>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d016      	beq.n	8004208 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041de:	f043 0220 	orr.w	r2, r3, #32
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e00f      	b.n	800420a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d00a      	beq.n	8004206 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	3b01      	subs	r3, #1
 80041f4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004200:	2b80      	cmp	r3, #128	; 0x80
 8004202:	d0f2      	beq.n	80041ea <SPI_EndRxTxTransaction+0x52>
 8004204:	e000      	b.n	8004208 <SPI_EndRxTxTransaction+0x70>
        break;
 8004206:	bf00      	nop
  }

  return HAL_OK;
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	3718      	adds	r7, #24
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	20000000 	.word	0x20000000
 8004218:	165e9f81 	.word	0x165e9f81

0800421c <LL_GPIO_SetPinMode>:
{
 800421c:	b480      	push	{r7}
 800421e:	b089      	sub	sp, #36	; 0x24
 8004220:	af00      	add	r7, sp, #0
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	fa93 f3a3 	rbit	r3, r3
 8004236:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	fab3 f383 	clz	r3, r3
 800423e:	b2db      	uxtb	r3, r3
 8004240:	005b      	lsls	r3, r3, #1
 8004242:	2103      	movs	r1, #3
 8004244:	fa01 f303 	lsl.w	r3, r1, r3
 8004248:	43db      	mvns	r3, r3
 800424a:	401a      	ands	r2, r3
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	fa93 f3a3 	rbit	r3, r3
 8004256:	61bb      	str	r3, [r7, #24]
  return result;
 8004258:	69bb      	ldr	r3, [r7, #24]
 800425a:	fab3 f383 	clz	r3, r3
 800425e:	b2db      	uxtb	r3, r3
 8004260:	005b      	lsls	r3, r3, #1
 8004262:	6879      	ldr	r1, [r7, #4]
 8004264:	fa01 f303 	lsl.w	r3, r1, r3
 8004268:	431a      	orrs	r2, r3
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	601a      	str	r2, [r3, #0]
}
 800426e:	bf00      	nop
 8004270:	3724      	adds	r7, #36	; 0x24
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr

0800427a <LL_GPIO_SetPinOutputType>:
{
 800427a:	b480      	push	{r7}
 800427c:	b085      	sub	sp, #20
 800427e:	af00      	add	r7, sp, #0
 8004280:	60f8      	str	r0, [r7, #12]
 8004282:	60b9      	str	r1, [r7, #8]
 8004284:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	685a      	ldr	r2, [r3, #4]
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	43db      	mvns	r3, r3
 800428e:	401a      	ands	r2, r3
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	6879      	ldr	r1, [r7, #4]
 8004294:	fb01 f303 	mul.w	r3, r1, r3
 8004298:	431a      	orrs	r2, r3
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	605a      	str	r2, [r3, #4]
}
 800429e:	bf00      	nop
 80042a0:	3714      	adds	r7, #20
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr

080042aa <LL_GPIO_SetPinSpeed>:
{
 80042aa:	b480      	push	{r7}
 80042ac:	b089      	sub	sp, #36	; 0x24
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	60f8      	str	r0, [r7, #12]
 80042b2:	60b9      	str	r1, [r7, #8]
 80042b4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	689a      	ldr	r2, [r3, #8]
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	fa93 f3a3 	rbit	r3, r3
 80042c4:	613b      	str	r3, [r7, #16]
  return result;
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	fab3 f383 	clz	r3, r3
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	005b      	lsls	r3, r3, #1
 80042d0:	2103      	movs	r1, #3
 80042d2:	fa01 f303 	lsl.w	r3, r1, r3
 80042d6:	43db      	mvns	r3, r3
 80042d8:	401a      	ands	r2, r3
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	fa93 f3a3 	rbit	r3, r3
 80042e4:	61bb      	str	r3, [r7, #24]
  return result;
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	fab3 f383 	clz	r3, r3
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	005b      	lsls	r3, r3, #1
 80042f0:	6879      	ldr	r1, [r7, #4]
 80042f2:	fa01 f303 	lsl.w	r3, r1, r3
 80042f6:	431a      	orrs	r2, r3
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	609a      	str	r2, [r3, #8]
}
 80042fc:	bf00      	nop
 80042fe:	3724      	adds	r7, #36	; 0x24
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <LL_GPIO_SetPinPull>:
{
 8004308:	b480      	push	{r7}
 800430a:	b089      	sub	sp, #36	; 0x24
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	68da      	ldr	r2, [r3, #12]
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	fa93 f3a3 	rbit	r3, r3
 8004322:	613b      	str	r3, [r7, #16]
  return result;
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	fab3 f383 	clz	r3, r3
 800432a:	b2db      	uxtb	r3, r3
 800432c:	005b      	lsls	r3, r3, #1
 800432e:	2103      	movs	r1, #3
 8004330:	fa01 f303 	lsl.w	r3, r1, r3
 8004334:	43db      	mvns	r3, r3
 8004336:	401a      	ands	r2, r3
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	fa93 f3a3 	rbit	r3, r3
 8004342:	61bb      	str	r3, [r7, #24]
  return result;
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	fab3 f383 	clz	r3, r3
 800434a:	b2db      	uxtb	r3, r3
 800434c:	005b      	lsls	r3, r3, #1
 800434e:	6879      	ldr	r1, [r7, #4]
 8004350:	fa01 f303 	lsl.w	r3, r1, r3
 8004354:	431a      	orrs	r2, r3
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	60da      	str	r2, [r3, #12]
}
 800435a:	bf00      	nop
 800435c:	3724      	adds	r7, #36	; 0x24
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr

08004366 <LL_GPIO_SetAFPin_0_7>:
{
 8004366:	b480      	push	{r7}
 8004368:	b089      	sub	sp, #36	; 0x24
 800436a:	af00      	add	r7, sp, #0
 800436c:	60f8      	str	r0, [r7, #12]
 800436e:	60b9      	str	r1, [r7, #8]
 8004370:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6a1a      	ldr	r2, [r3, #32]
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	fa93 f3a3 	rbit	r3, r3
 8004380:	613b      	str	r3, [r7, #16]
  return result;
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	fab3 f383 	clz	r3, r3
 8004388:	b2db      	uxtb	r3, r3
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	210f      	movs	r1, #15
 800438e:	fa01 f303 	lsl.w	r3, r1, r3
 8004392:	43db      	mvns	r3, r3
 8004394:	401a      	ands	r2, r3
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	fa93 f3a3 	rbit	r3, r3
 80043a0:	61bb      	str	r3, [r7, #24]
  return result;
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	fab3 f383 	clz	r3, r3
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	6879      	ldr	r1, [r7, #4]
 80043ae:	fa01 f303 	lsl.w	r3, r1, r3
 80043b2:	431a      	orrs	r2, r3
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	621a      	str	r2, [r3, #32]
}
 80043b8:	bf00      	nop
 80043ba:	3724      	adds	r7, #36	; 0x24
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <LL_GPIO_SetAFPin_8_15>:
{
 80043c4:	b480      	push	{r7}
 80043c6:	b089      	sub	sp, #36	; 0x24
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	60b9      	str	r1, [r7, #8]
 80043ce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	0a1b      	lsrs	r3, r3, #8
 80043d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	fa93 f3a3 	rbit	r3, r3
 80043e0:	613b      	str	r3, [r7, #16]
  return result;
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	fab3 f383 	clz	r3, r3
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	210f      	movs	r1, #15
 80043ee:	fa01 f303 	lsl.w	r3, r1, r3
 80043f2:	43db      	mvns	r3, r3
 80043f4:	401a      	ands	r2, r3
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	0a1b      	lsrs	r3, r3, #8
 80043fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	fa93 f3a3 	rbit	r3, r3
 8004402:	61bb      	str	r3, [r7, #24]
  return result;
 8004404:	69bb      	ldr	r3, [r7, #24]
 8004406:	fab3 f383 	clz	r3, r3
 800440a:	b2db      	uxtb	r3, r3
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	6879      	ldr	r1, [r7, #4]
 8004410:	fa01 f303 	lsl.w	r3, r1, r3
 8004414:	431a      	orrs	r2, r3
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	625a      	str	r2, [r3, #36]	; 0x24
}
 800441a:	bf00      	nop
 800441c:	3724      	adds	r7, #36	; 0x24
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr

08004426 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8004426:	b580      	push	{r7, lr}
 8004428:	b088      	sub	sp, #32
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
 800442e:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8004430:	2300      	movs	r3, #0
 8004432:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8004434:	2300      	movs	r3, #0
 8004436:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	fa93 f3a3 	rbit	r3, r3
 8004444:	613b      	str	r3, [r7, #16]
  return result;
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	fab3 f383 	clz	r3, r3
 800444c:	b2db      	uxtb	r3, r3
 800444e:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8004450:	e050      	b.n	80044f4 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	2101      	movs	r1, #1
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	fa01 f303 	lsl.w	r3, r1, r3
 800445e:	4013      	ands	r3, r2
 8004460:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d042      	beq.n	80044ee <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	2b01      	cmp	r3, #1
 800446e:	d003      	beq.n	8004478 <LL_GPIO_Init+0x52>
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	2b02      	cmp	r3, #2
 8004476:	d10d      	bne.n	8004494 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	461a      	mov	r2, r3
 800447e:	69b9      	ldr	r1, [r7, #24]
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f7ff ff12 	bl	80042aa <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	461a      	mov	r2, r3
 800448c:	69b9      	ldr	r1, [r7, #24]
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f7ff fef3 	bl	800427a <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	691b      	ldr	r3, [r3, #16]
 8004498:	461a      	mov	r2, r3
 800449a:	69b9      	ldr	r1, [r7, #24]
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f7ff ff33 	bl	8004308 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d11a      	bne.n	80044e0 <LL_GPIO_Init+0xba>
 80044aa:	69bb      	ldr	r3, [r7, #24]
 80044ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	fa93 f3a3 	rbit	r3, r3
 80044b4:	60bb      	str	r3, [r7, #8]
  return result;
 80044b6:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80044b8:	fab3 f383 	clz	r3, r3
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	2b07      	cmp	r3, #7
 80044c0:	d807      	bhi.n	80044d2 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	695b      	ldr	r3, [r3, #20]
 80044c6:	461a      	mov	r2, r3
 80044c8:	69b9      	ldr	r1, [r7, #24]
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f7ff ff4b 	bl	8004366 <LL_GPIO_SetAFPin_0_7>
 80044d0:	e006      	b.n	80044e0 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	695b      	ldr	r3, [r3, #20]
 80044d6:	461a      	mov	r2, r3
 80044d8:	69b9      	ldr	r1, [r7, #24]
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f7ff ff72 	bl	80043c4 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	461a      	mov	r2, r3
 80044e6:	69b9      	ldr	r1, [r7, #24]
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f7ff fe97 	bl	800421c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	3301      	adds	r3, #1
 80044f2:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	fa22 f303 	lsr.w	r3, r2, r3
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d1a7      	bne.n	8004452 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8004502:	2300      	movs	r3, #0
}
 8004504:	4618      	mov	r0, r3
 8004506:	3720      	adds	r7, #32
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}

0800450c <LL_I2C_Enable>:
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f043 0201 	orr.w	r2, r3, #1
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	601a      	str	r2, [r3, #0]
}
 8004520:	bf00      	nop
 8004522:	370c      	adds	r7, #12
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <LL_I2C_Disable>:
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f023 0201 	bic.w	r2, r3, #1
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	601a      	str	r2, [r3, #0]
}
 8004540:	bf00      	nop
 8004542:	370c      	adds	r7, #12
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <LL_I2C_ConfigFilters>:
{
 800454c:	b480      	push	{r7}
 800454e:	b085      	sub	sp, #20
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->FLTR, I2C_FLTR_ANOFF | I2C_FLTR_DNF, AnalogFilter | DigitalFilter);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455c:	f023 021f 	bic.w	r2, r3, #31
 8004560:	68b9      	ldr	r1, [r7, #8]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	430b      	orrs	r3, r1
 8004566:	431a      	orrs	r2, r3
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800456c:	bf00      	nop
 800456e:	3714      	adds	r7, #20
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <LL_I2C_SetOwnAddress1>:
{
 8004578:	b480      	push	{r7}
 800457a:	b085      	sub	sp, #20
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800458c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004590:	68b9      	ldr	r1, [r7, #8]
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	430a      	orrs	r2, r1
 8004596:	431a      	orrs	r2, r3
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	609a      	str	r2, [r3, #8]
}
 800459c:	bf00      	nop
 800459e:	3714      	adds	r7, #20
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr

080045a8 <LL_I2C_ConfigSpeed>:
  *         @arg @ref LL_I2C_DUTYCYCLE_16_9
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigSpeed(I2C_TypeDef *I2Cx, uint32_t PeriphClock, uint32_t ClockSpeed,
                                        uint32_t DutyCycle)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b087      	sub	sp, #28
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	607a      	str	r2, [r7, #4]
 80045b4:	603b      	str	r3, [r7, #0]
  uint32_t freqrange = 0x0U;
 80045b6:	2300      	movs	r3, #0
 80045b8:	613b      	str	r3, [r7, #16]
  uint32_t clockconfig = 0x0U;
 80045ba:	2300      	movs	r3, #0
 80045bc:	617b      	str	r3, [r7, #20]

  /* Compute frequency range */
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	4a42      	ldr	r2, [pc, #264]	; (80046cc <LL_I2C_ConfigSpeed+0x124>)
 80045c2:	fba2 2303 	umull	r2, r3, r2, r3
 80045c6:	0c9b      	lsrs	r3, r3, #18
 80045c8:	613b      	str	r3, [r7, #16]

  /* Configure I2Cx: Frequency range register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	431a      	orrs	r2, r3
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	605a      	str	r2, [r3, #4]

  /* Configure I2Cx: Rise Time register */
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6a1b      	ldr	r3, [r3, #32]
 80045de:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	493a      	ldr	r1, [pc, #232]	; (80046d0 <LL_I2C_ConfigSpeed+0x128>)
 80045e6:	428b      	cmp	r3, r1
 80045e8:	d802      	bhi.n	80045f0 <LL_I2C_ConfigSpeed+0x48>
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	3301      	adds	r3, #1
 80045ee:	e009      	b.n	8004604 <LL_I2C_ConfigSpeed+0x5c>
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80045f6:	fb01 f303 	mul.w	r3, r1, r3
 80045fa:	4936      	ldr	r1, [pc, #216]	; (80046d4 <LL_I2C_ConfigSpeed+0x12c>)
 80045fc:	fba1 1303 	umull	r1, r3, r1, r3
 8004600:	099b      	lsrs	r3, r3, #6
 8004602:	3301      	adds	r3, #1
 8004604:	431a      	orrs	r2, r3
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	621a      	str	r2, [r3, #32]

  /* Configure Speed mode, Duty Cycle and Clock control register value */
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4a30      	ldr	r2, [pc, #192]	; (80046d0 <LL_I2C_ConfigSpeed+0x128>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d939      	bls.n	8004686 <LL_I2C_ConfigSpeed+0xde>
  {
    /* Set Speed mode at fast and duty cycle for Clock Speed request in fast clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d117      	bne.n	8004648 <LL_I2C_ConfigSpeed+0xa0>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	4613      	mov	r3, r2
 800461c:	005b      	lsls	r3, r3, #1
 800461e:	4413      	add	r3, r2
 8004620:	68ba      	ldr	r2, [r7, #8]
 8004622:	fbb2 f3f3 	udiv	r3, r2, r3
 8004626:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800462a:	2b00      	cmp	r3, #0
 800462c:	d009      	beq.n	8004642 <LL_I2C_ConfigSpeed+0x9a>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	4613      	mov	r3, r2
 8004632:	005b      	lsls	r3, r3, #1
 8004634:	4413      	add	r3, r2
 8004636:	68ba      	ldr	r2, [r7, #8]
 8004638:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800463c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004640:	e01d      	b.n	800467e <LL_I2C_ConfigSpeed+0xd6>
 8004642:	f248 0301 	movw	r3, #32769	; 0x8001
 8004646:	e01a      	b.n	800467e <LL_I2C_ConfigSpeed+0xd6>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	4613      	mov	r3, r2
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	4413      	add	r3, r2
 8004650:	009a      	lsls	r2, r3, #2
 8004652:	4413      	add	r3, r2
 8004654:	68ba      	ldr	r2, [r7, #8]
 8004656:	fbb2 f3f3 	udiv	r3, r2, r3
 800465a:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00b      	beq.n	800467a <LL_I2C_ConfigSpeed+0xd2>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	4613      	mov	r3, r2
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	4413      	add	r3, r2
 800466a:	009a      	lsls	r2, r3, #2
 800466c:	4413      	add	r3, r2
 800466e:	68ba      	ldr	r2, [r7, #8]
 8004670:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8004674:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004678:	e001      	b.n	800467e <LL_I2C_ConfigSpeed+0xd6>
 800467a:	f248 0301 	movw	r3, #32769	; 0x8001
 800467e:	683a      	ldr	r2, [r7, #0]
 8004680:	4313      	orrs	r3, r2
 8004682:	617b      	str	r3, [r7, #20]
 8004684:	e011      	b.n	80046aa <LL_I2C_ConfigSpeed+0x102>
  }
  else
  {
    /* Set Speed mode at standard for Clock Speed request in standard clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	005b      	lsls	r3, r3, #1
 800468a:	68ba      	ldr	r2, [r7, #8]
 800468c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004690:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004694:	4013      	ands	r3, r2
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8004696:	2b00      	cmp	r3, #0
 8004698:	d005      	beq.n	80046a6 <LL_I2C_ConfigSpeed+0xfe>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 800469e:	68ba      	ldr	r2, [r7, #8]
 80046a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046a4:	e000      	b.n	80046a8 <LL_I2C_ConfigSpeed+0x100>
 80046a6:	2304      	movs	r3, #4
 80046a8:	617b      	str	r3, [r7, #20]
  }

  /* Configure I2Cx: Clock control register */
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	69db      	ldr	r3, [r3, #28]
 80046ae:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 80046b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80046b6:	697a      	ldr	r2, [r7, #20]
 80046b8:	431a      	orrs	r2, r3
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	61da      	str	r2, [r3, #28]
}
 80046be:	bf00      	nop
 80046c0:	371c      	adds	r7, #28
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	431bde83 	.word	0x431bde83
 80046d0:	000186a0 	.word	0x000186a0
 80046d4:	10624dd3 	.word	0x10624dd3

080046d8 <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 80046d8:	b480      	push	{r7}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f023 021a 	bic.w	r2, r3, #26
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	431a      	orrs	r2, r3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	601a      	str	r2, [r3, #0]
}
 80046f2:	bf00      	nop
 80046f4:	370c      	adds	r7, #12
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr

080046fe <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 80046fe:	b480      	push	{r7}
 8004700:	b083      	sub	sp, #12
 8004702:	af00      	add	r7, sp, #0
 8004704:	6078      	str	r0, [r7, #4]
 8004706:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	431a      	orrs	r2, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	601a      	str	r2, [r3, #0]
}
 8004718:	bf00      	nop
 800471a:	370c      	adds	r7, #12
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b086      	sub	sp, #24
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f7ff fefc 	bl	800452c <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8004734:	f107 0308 	add.w	r3, r7, #8
 8004738:	4618      	mov	r0, r3
 800473a:	f000 f89d 	bl	8004878 <LL_RCC_GetSystemClocksFreq>
  /*---------------------------- I2Cx FLTR Configuration -----------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_FLTR_ANFOFF bit
   * - DigitalFilter: I2C_FLTR_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	68d9      	ldr	r1, [r3, #12]
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	461a      	mov	r2, r3
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f7ff feff 	bl	800454c <LL_I2C_ConfigFilters>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 800474e:	6939      	ldr	r1, [r7, #16]
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	685a      	ldr	r2, [r3, #4]
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f7ff ff25 	bl	80045a8 <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	6959      	ldr	r1, [r3, #20]
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	69db      	ldr	r3, [r3, #28]
 8004766:	461a      	mov	r2, r3
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f7ff ff05 	bl	8004578 <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4619      	mov	r1, r3
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f7ff ffaf 	bl	80046d8 <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f7ff fec6 	bl	800450c <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	699b      	ldr	r3, [r3, #24]
 8004784:	4619      	mov	r1, r3
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f7ff ffb9 	bl	80046fe <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 800478c:	2300      	movs	r3, #0
}
 800478e:	4618      	mov	r0, r3
 8004790:	3718      	adds	r7, #24
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
	...

08004798 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8004798:	b480      	push	{r7}
 800479a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800479c:	4b04      	ldr	r3, [pc, #16]	; (80047b0 <LL_RCC_GetSysClkSource+0x18>)
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	f003 030c 	and.w	r3, r3, #12
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr
 80047ae:	bf00      	nop
 80047b0:	40023800 	.word	0x40023800

080047b4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80047b4:	b480      	push	{r7}
 80047b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80047b8:	4b04      	ldr	r3, [pc, #16]	; (80047cc <LL_RCC_GetAHBPrescaler+0x18>)
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr
 80047ca:	bf00      	nop
 80047cc:	40023800 	.word	0x40023800

080047d0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80047d0:	b480      	push	{r7}
 80047d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80047d4:	4b04      	ldr	r3, [pc, #16]	; (80047e8 <LL_RCC_GetAPB1Prescaler+0x18>)
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 80047dc:	4618      	mov	r0, r3
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr
 80047e6:	bf00      	nop
 80047e8:	40023800 	.word	0x40023800

080047ec <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80047ec:	b480      	push	{r7}
 80047ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80047f0:	4b04      	ldr	r3, [pc, #16]	; (8004804 <LL_RCC_GetAPB2Prescaler+0x18>)
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr
 8004802:	bf00      	nop
 8004804:	40023800 	.word	0x40023800

08004808 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004808:	b480      	push	{r7}
 800480a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800480c:	4b04      	ldr	r3, [pc, #16]	; (8004820 <LL_RCC_PLL_GetMainSource+0x18>)
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8004814:	4618      	mov	r0, r3
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr
 800481e:	bf00      	nop
 8004820:	40023800 	.word	0x40023800

08004824 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004824:	b480      	push	{r7}
 8004826:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004828:	4b04      	ldr	r3, [pc, #16]	; (800483c <LL_RCC_PLL_GetN+0x18>)
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	099b      	lsrs	r3, r3, #6
 800482e:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8004832:	4618      	mov	r0, r3
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr
 800483c:	40023800 	.word	0x40023800

08004840 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8004840:	b480      	push	{r7}
 8004842:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8004844:	4b04      	ldr	r3, [pc, #16]	; (8004858 <LL_RCC_PLL_GetP+0x18>)
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 800484c:	4618      	mov	r0, r3
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr
 8004856:	bf00      	nop
 8004858:	40023800 	.word	0x40023800

0800485c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800485c:	b480      	push	{r7}
 800485e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004860:	4b04      	ldr	r3, [pc, #16]	; (8004874 <LL_RCC_PLL_GetDivider+0x18>)
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8004868:	4618      	mov	r0, r3
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr
 8004872:	bf00      	nop
 8004874:	40023800 	.word	0x40023800

08004878 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b082      	sub	sp, #8
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8004880:	f000 f820 	bl	80048c4 <RCC_GetSystemClockFreq>
 8004884:	4602      	mov	r2, r0
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4618      	mov	r0, r3
 8004890:	f000 f840 	bl	8004914 <RCC_GetHCLKClockFreq>
 8004894:	4602      	mov	r2, r0
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	4618      	mov	r0, r3
 80048a0:	f000 f84e 	bl	8004940 <RCC_GetPCLK1ClockFreq>
 80048a4:	4602      	mov	r2, r0
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	4618      	mov	r0, r3
 80048b0:	f000 f85a 	bl	8004968 <RCC_GetPCLK2ClockFreq>
 80048b4:	4602      	mov	r2, r0
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	60da      	str	r2, [r3, #12]
}
 80048ba:	bf00      	nop
 80048bc:	3708      	adds	r7, #8
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
	...

080048c4 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b082      	sub	sp, #8
 80048c8:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80048ca:	2300      	movs	r3, #0
 80048cc:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80048ce:	f7ff ff63 	bl	8004798 <LL_RCC_GetSysClkSource>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b08      	cmp	r3, #8
 80048d6:	d00c      	beq.n	80048f2 <RCC_GetSystemClockFreq+0x2e>
 80048d8:	2b08      	cmp	r3, #8
 80048da:	d80f      	bhi.n	80048fc <RCC_GetSystemClockFreq+0x38>
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d002      	beq.n	80048e6 <RCC_GetSystemClockFreq+0x22>
 80048e0:	2b04      	cmp	r3, #4
 80048e2:	d003      	beq.n	80048ec <RCC_GetSystemClockFreq+0x28>
 80048e4:	e00a      	b.n	80048fc <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80048e6:	4b09      	ldr	r3, [pc, #36]	; (800490c <RCC_GetSystemClockFreq+0x48>)
 80048e8:	607b      	str	r3, [r7, #4]
      break;
 80048ea:	e00a      	b.n	8004902 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80048ec:	4b08      	ldr	r3, [pc, #32]	; (8004910 <RCC_GetSystemClockFreq+0x4c>)
 80048ee:	607b      	str	r3, [r7, #4]
      break;
 80048f0:	e007      	b.n	8004902 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 80048f2:	2008      	movs	r0, #8
 80048f4:	f000 f84c 	bl	8004990 <RCC_PLL_GetFreqDomain_SYS>
 80048f8:	6078      	str	r0, [r7, #4]
      break;
 80048fa:	e002      	b.n	8004902 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80048fc:	4b03      	ldr	r3, [pc, #12]	; (800490c <RCC_GetSystemClockFreq+0x48>)
 80048fe:	607b      	str	r3, [r7, #4]
      break;
 8004900:	bf00      	nop
  }

  return frequency;
 8004902:	687b      	ldr	r3, [r7, #4]
}
 8004904:	4618      	mov	r0, r3
 8004906:	3708      	adds	r7, #8
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}
 800490c:	00f42400 	.word	0x00f42400
 8004910:	017d7840 	.word	0x017d7840

08004914 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b082      	sub	sp, #8
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800491c:	f7ff ff4a 	bl	80047b4 <LL_RCC_GetAHBPrescaler>
 8004920:	4603      	mov	r3, r0
 8004922:	091b      	lsrs	r3, r3, #4
 8004924:	f003 030f 	and.w	r3, r3, #15
 8004928:	4a04      	ldr	r2, [pc, #16]	; (800493c <RCC_GetHCLKClockFreq+0x28>)
 800492a:	5cd3      	ldrb	r3, [r2, r3]
 800492c:	461a      	mov	r2, r3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	40d3      	lsrs	r3, r2
}
 8004932:	4618      	mov	r0, r3
 8004934:	3708      	adds	r7, #8
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
 800493a:	bf00      	nop
 800493c:	08008570 	.word	0x08008570

08004940 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b082      	sub	sp, #8
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8004948:	f7ff ff42 	bl	80047d0 <LL_RCC_GetAPB1Prescaler>
 800494c:	4603      	mov	r3, r0
 800494e:	0a9b      	lsrs	r3, r3, #10
 8004950:	4a04      	ldr	r2, [pc, #16]	; (8004964 <RCC_GetPCLK1ClockFreq+0x24>)
 8004952:	5cd3      	ldrb	r3, [r2, r3]
 8004954:	461a      	mov	r2, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	40d3      	lsrs	r3, r2
}
 800495a:	4618      	mov	r0, r3
 800495c:	3708      	adds	r7, #8
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop
 8004964:	08008580 	.word	0x08008580

08004968 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8004970:	f7ff ff3c 	bl	80047ec <LL_RCC_GetAPB2Prescaler>
 8004974:	4603      	mov	r3, r0
 8004976:	0b5b      	lsrs	r3, r3, #13
 8004978:	4a04      	ldr	r2, [pc, #16]	; (800498c <RCC_GetPCLK2ClockFreq+0x24>)
 800497a:	5cd3      	ldrb	r3, [r2, r3]
 800497c:	461a      	mov	r2, r3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	40d3      	lsrs	r3, r2
}
 8004982:	4618      	mov	r0, r3
 8004984:	3708      	adds	r7, #8
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	08008580 	.word	0x08008580

08004990 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8004990:	b590      	push	{r4, r7, lr}
 8004992:	b087      	sub	sp, #28
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8004998:	2300      	movs	r3, #0
 800499a:	617b      	str	r3, [r7, #20]
 800499c:	2300      	movs	r3, #0
 800499e:	60fb      	str	r3, [r7, #12]
 80049a0:	2300      	movs	r3, #0
 80049a2:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80049a4:	f7ff ff30 	bl	8004808 <LL_RCC_PLL_GetMainSource>
 80049a8:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d004      	beq.n	80049ba <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049b6:	d003      	beq.n	80049c0 <RCC_PLL_GetFreqDomain_SYS+0x30>
 80049b8:	e005      	b.n	80049c6 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80049ba:	4b12      	ldr	r3, [pc, #72]	; (8004a04 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80049bc:	617b      	str	r3, [r7, #20]
      break;
 80049be:	e005      	b.n	80049cc <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80049c0:	4b11      	ldr	r3, [pc, #68]	; (8004a08 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 80049c2:	617b      	str	r3, [r7, #20]
      break;
 80049c4:	e002      	b.n	80049cc <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 80049c6:	4b0f      	ldr	r3, [pc, #60]	; (8004a04 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80049c8:	617b      	str	r3, [r7, #20]
      break;
 80049ca:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2b08      	cmp	r3, #8
 80049d0:	d113      	bne.n	80049fa <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80049d2:	f7ff ff43 	bl	800485c <LL_RCC_PLL_GetDivider>
 80049d6:	4602      	mov	r2, r0
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	fbb3 f4f2 	udiv	r4, r3, r2
 80049de:	f7ff ff21 	bl	8004824 <LL_RCC_PLL_GetN>
 80049e2:	4603      	mov	r3, r0
 80049e4:	fb03 f404 	mul.w	r4, r3, r4
 80049e8:	f7ff ff2a 	bl	8004840 <LL_RCC_PLL_GetP>
 80049ec:	4603      	mov	r3, r0
 80049ee:	0c1b      	lsrs	r3, r3, #16
 80049f0:	3301      	adds	r3, #1
 80049f2:	005b      	lsls	r3, r3, #1
 80049f4:	fbb4 f3f3 	udiv	r3, r4, r3
 80049f8:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 80049fa:	693b      	ldr	r3, [r7, #16]
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	371c      	adds	r7, #28
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd90      	pop	{r4, r7, pc}
 8004a04:	00f42400 	.word	0x00f42400
 8004a08:	017d7840 	.word	0x017d7840

08004a0c <LL_TIM_SetPrescaler>:
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	683a      	ldr	r2, [r7, #0]
 8004a1a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004a1c:	bf00      	nop
 8004a1e:	370c      	adds	r7, #12
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <LL_TIM_SetAutoReload>:
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	683a      	ldr	r2, [r7, #0]
 8004a36:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004a38:	bf00      	nop
 8004a3a:	370c      	adds	r7, #12
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <LL_TIM_SetRepetitionCounter>:
{
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	683a      	ldr	r2, [r7, #0]
 8004a52:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004a54:	bf00      	nop
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <LL_TIM_OC_SetCompareCH1>:
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	683a      	ldr	r2, [r7, #0]
 8004a6e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8004a70:	bf00      	nop
 8004a72:	370c      	adds	r7, #12
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <LL_TIM_OC_SetCompareCH2>:
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	683a      	ldr	r2, [r7, #0]
 8004a8a:	639a      	str	r2, [r3, #56]	; 0x38
}
 8004a8c:	bf00      	nop
 8004a8e:	370c      	adds	r7, #12
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr

08004a98 <LL_TIM_OC_SetCompareCH3>:
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	683a      	ldr	r2, [r7, #0]
 8004aa6:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004aa8:	bf00      	nop
 8004aaa:	370c      	adds	r7, #12
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr

08004ab4 <LL_TIM_OC_SetCompareCH4>:
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b083      	sub	sp, #12
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	683a      	ldr	r2, [r7, #0]
 8004ac2:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004ac4:	bf00      	nop
 8004ac6:	370c      	adds	r7, #12
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr

08004ad0 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	695b      	ldr	r3, [r3, #20]
 8004adc:	f043 0201 	orr.w	r2, r3, #1
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	615a      	str	r2, [r3, #20]
}
 8004ae4:	bf00      	nop
 8004ae6:	370c      	adds	r7, #12
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	4a31      	ldr	r2, [pc, #196]	; (8004bc8 <LL_TIM_Init+0xd8>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d00f      	beq.n	8004b28 <LL_TIM_Init+0x38>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b0e:	d00b      	beq.n	8004b28 <LL_TIM_Init+0x38>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4a2e      	ldr	r2, [pc, #184]	; (8004bcc <LL_TIM_Init+0xdc>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d007      	beq.n	8004b28 <LL_TIM_Init+0x38>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4a2d      	ldr	r2, [pc, #180]	; (8004bd0 <LL_TIM_Init+0xe0>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d003      	beq.n	8004b28 <LL_TIM_Init+0x38>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	4a2c      	ldr	r2, [pc, #176]	; (8004bd4 <LL_TIM_Init+0xe4>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d106      	bne.n	8004b36 <LL_TIM_Init+0x46>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a23      	ldr	r2, [pc, #140]	; (8004bc8 <LL_TIM_Init+0xd8>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d01b      	beq.n	8004b76 <LL_TIM_Init+0x86>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b44:	d017      	beq.n	8004b76 <LL_TIM_Init+0x86>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a20      	ldr	r2, [pc, #128]	; (8004bcc <LL_TIM_Init+0xdc>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d013      	beq.n	8004b76 <LL_TIM_Init+0x86>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a1f      	ldr	r2, [pc, #124]	; (8004bd0 <LL_TIM_Init+0xe0>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d00f      	beq.n	8004b76 <LL_TIM_Init+0x86>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a1e      	ldr	r2, [pc, #120]	; (8004bd4 <LL_TIM_Init+0xe4>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d00b      	beq.n	8004b76 <LL_TIM_Init+0x86>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a1d      	ldr	r2, [pc, #116]	; (8004bd8 <LL_TIM_Init+0xe8>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d007      	beq.n	8004b76 <LL_TIM_Init+0x86>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a1c      	ldr	r2, [pc, #112]	; (8004bdc <LL_TIM_Init+0xec>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d003      	beq.n	8004b76 <LL_TIM_Init+0x86>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	4a1b      	ldr	r2, [pc, #108]	; (8004be0 <LL_TIM_Init+0xf0>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d106      	bne.n	8004b84 <LL_TIM_Init+0x94>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	68fa      	ldr	r2, [r7, #12]
 8004b88:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	4619      	mov	r1, r3
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f7ff ff49 	bl	8004a28 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	881b      	ldrh	r3, [r3, #0]
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f7ff ff35 	bl	8004a0c <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a08      	ldr	r2, [pc, #32]	; (8004bc8 <LL_TIM_Init+0xd8>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d105      	bne.n	8004bb6 <LL_TIM_Init+0xc6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	4619      	mov	r1, r3
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f7ff ff47 	bl	8004a44 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f7ff ff8a 	bl	8004ad0 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8004bbc:	2300      	movs	r3, #0
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3710      	adds	r7, #16
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	40010000 	.word	0x40010000
 8004bcc:	40000400 	.word	0x40000400
 8004bd0:	40000800 	.word	0x40000800
 8004bd4:	40000c00 	.word	0x40000c00
 8004bd8:	40014000 	.word	0x40014000
 8004bdc:	40014400 	.word	0x40014400
 8004be0:	40014800 	.word	0x40014800

08004be4 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b086      	sub	sp, #24
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	60b9      	str	r1, [r7, #8]
 8004bee:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bfa:	d027      	beq.n	8004c4c <LL_TIM_OC_Init+0x68>
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c02:	d82a      	bhi.n	8004c5a <LL_TIM_OC_Init+0x76>
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c0a:	d018      	beq.n	8004c3e <LL_TIM_OC_Init+0x5a>
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c12:	d822      	bhi.n	8004c5a <LL_TIM_OC_Init+0x76>
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d003      	beq.n	8004c22 <LL_TIM_OC_Init+0x3e>
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	2b10      	cmp	r3, #16
 8004c1e:	d007      	beq.n	8004c30 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8004c20:	e01b      	b.n	8004c5a <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8004c22:	6879      	ldr	r1, [r7, #4]
 8004c24:	68f8      	ldr	r0, [r7, #12]
 8004c26:	f000 f81f 	bl	8004c68 <OC1Config>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	75fb      	strb	r3, [r7, #23]
      break;
 8004c2e:	e015      	b.n	8004c5c <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8004c30:	6879      	ldr	r1, [r7, #4]
 8004c32:	68f8      	ldr	r0, [r7, #12]
 8004c34:	f000 f87e 	bl	8004d34 <OC2Config>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	75fb      	strb	r3, [r7, #23]
      break;
 8004c3c:	e00e      	b.n	8004c5c <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8004c3e:	6879      	ldr	r1, [r7, #4]
 8004c40:	68f8      	ldr	r0, [r7, #12]
 8004c42:	f000 f8e1 	bl	8004e08 <OC3Config>
 8004c46:	4603      	mov	r3, r0
 8004c48:	75fb      	strb	r3, [r7, #23]
      break;
 8004c4a:	e007      	b.n	8004c5c <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8004c4c:	6879      	ldr	r1, [r7, #4]
 8004c4e:	68f8      	ldr	r0, [r7, #12]
 8004c50:	f000 f944 	bl	8004edc <OC4Config>
 8004c54:	4603      	mov	r3, r0
 8004c56:	75fb      	strb	r3, [r7, #23]
      break;
 8004c58:	e000      	b.n	8004c5c <LL_TIM_OC_Init+0x78>
      break;
 8004c5a:	bf00      	nop
  }

  return result;
 8004c5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3718      	adds	r7, #24
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
	...

08004c68 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b086      	sub	sp, #24
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a1b      	ldr	r3, [r3, #32]
 8004c76:	f023 0201 	bic.w	r2, r3, #1
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a1b      	ldr	r3, [r3, #32]
 8004c82:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	699b      	ldr	r3, [r3, #24]
 8004c8e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f023 0303 	bic.w	r3, r3, #3
 8004c96:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	f023 0202 	bic.w	r2, r3, #2
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	691b      	ldr	r3, [r3, #16]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	f023 0201 	bic.w	r2, r3, #1
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a1a      	ldr	r2, [pc, #104]	; (8004d30 <OC1Config+0xc8>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d11e      	bne.n	8004d08 <OC1Config+0xa0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	f023 0208 	bic.w	r2, r3, #8
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	695b      	ldr	r3, [r3, #20]
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	f023 0204 	bic.w	r2, r3, #4
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	699b      	ldr	r3, [r3, #24]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	69db      	ldr	r3, [r3, #28]
 8004d02:	005b      	lsls	r3, r3, #1
 8004d04:	4313      	orrs	r3, r2
 8004d06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	693a      	ldr	r2, [r7, #16]
 8004d0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	68fa      	ldr	r2, [r7, #12]
 8004d12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	4619      	mov	r1, r3
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f7ff fea0 	bl	8004a60 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	697a      	ldr	r2, [r7, #20]
 8004d24:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004d26:	2300      	movs	r3, #0
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3718      	adds	r7, #24
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	40010000 	.word	0x40010000

08004d34 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b086      	sub	sp, #24
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a1b      	ldr	r3, [r3, #32]
 8004d42:	f023 0210 	bic.w	r2, r3, #16
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a1b      	ldr	r3, [r3, #32]
 8004d4e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	699b      	ldr	r3, [r3, #24]
 8004d5a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	021b      	lsls	r3, r3, #8
 8004d70:	4313      	orrs	r3, r2
 8004d72:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	f023 0220 	bic.w	r2, r3, #32
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	691b      	ldr	r3, [r3, #16]
 8004d7e:	011b      	lsls	r3, r3, #4
 8004d80:	4313      	orrs	r3, r2
 8004d82:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	f023 0210 	bic.w	r2, r3, #16
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	011b      	lsls	r3, r3, #4
 8004d90:	4313      	orrs	r3, r2
 8004d92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4a1b      	ldr	r2, [pc, #108]	; (8004e04 <OC2Config+0xd0>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d11f      	bne.n	8004ddc <OC2Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	695b      	ldr	r3, [r3, #20]
 8004da6:	019b      	lsls	r3, r3, #6
 8004da8:	4313      	orrs	r3, r2
 8004daa:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	019b      	lsls	r3, r3, #6
 8004db8:	4313      	orrs	r3, r2
 8004dba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	699b      	ldr	r3, [r3, #24]
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	69db      	ldr	r3, [r3, #28]
 8004dd6:	00db      	lsls	r3, r3, #3
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	693a      	ldr	r2, [r7, #16]
 8004de0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	68fa      	ldr	r2, [r7, #12]
 8004de6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	4619      	mov	r1, r3
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f7ff fe44 	bl	8004a7c <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	697a      	ldr	r2, [r7, #20]
 8004df8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004dfa:	2300      	movs	r3, #0
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3718      	adds	r7, #24
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	40010000 	.word	0x40010000

08004e08 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b086      	sub	sp, #24
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a1b      	ldr	r3, [r3, #32]
 8004e16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a1b      	ldr	r3, [r3, #32]
 8004e22:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	69db      	ldr	r3, [r3, #28]
 8004e2e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f023 0303 	bic.w	r3, r3, #3
 8004e36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	691b      	ldr	r3, [r3, #16]
 8004e50:	021b      	lsls	r3, r3, #8
 8004e52:	4313      	orrs	r3, r2
 8004e54:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	021b      	lsls	r3, r3, #8
 8004e62:	4313      	orrs	r3, r2
 8004e64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a1b      	ldr	r2, [pc, #108]	; (8004ed8 <OC3Config+0xd0>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d11f      	bne.n	8004eae <OC3Config+0xa6>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	695b      	ldr	r3, [r3, #20]
 8004e78:	029b      	lsls	r3, r3, #10
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	029b      	lsls	r3, r3, #10
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	699b      	ldr	r3, [r3, #24]
 8004e98:	011b      	lsls	r3, r3, #4
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	69db      	ldr	r3, [r3, #28]
 8004ea8:	015b      	lsls	r3, r3, #5
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	693a      	ldr	r2, [r7, #16]
 8004eb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f7ff fde9 	bl	8004a98 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	697a      	ldr	r2, [r7, #20]
 8004eca:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3718      	adds	r7, #24
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	40010000 	.word	0x40010000

08004edc <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b086      	sub	sp, #24
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a1b      	ldr	r3, [r3, #32]
 8004eea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a1b      	ldr	r3, [r3, #32]
 8004ef6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	69db      	ldr	r3, [r3, #28]
 8004f02:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	021b      	lsls	r3, r3, #8
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	031b      	lsls	r3, r3, #12
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	031b      	lsls	r3, r3, #12
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4a0f      	ldr	r2, [pc, #60]	; (8004f7c <OC4Config+0xa0>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d107      	bne.n	8004f54 <OC4Config+0x78>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	699b      	ldr	r3, [r3, #24]
 8004f4e:	019b      	lsls	r3, r3, #6
 8004f50:	4313      	orrs	r3, r2
 8004f52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	697a      	ldr	r2, [r7, #20]
 8004f58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	4619      	mov	r1, r3
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f7ff fda4 	bl	8004ab4 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	693a      	ldr	r2, [r7, #16]
 8004f70:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004f72:	2300      	movs	r3, #0
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3718      	adds	r7, #24
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}
 8004f7c:	40010000 	.word	0x40010000

08004f80 <LL_USART_IsEnabled>:
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f94:	bf0c      	ite	eq
 8004f96:	2301      	moveq	r3, #1
 8004f98:	2300      	movne	r3, #0
 8004f9a:	b2db      	uxtb	r3, r3
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	370c      	adds	r7, #12
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr

08004fa8 <LL_USART_SetStopBitsLength>:
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b083      	sub	sp, #12
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	431a      	orrs	r2, r3
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	611a      	str	r2, [r3, #16]
}
 8004fc2:	bf00      	nop
 8004fc4:	370c      	adds	r7, #12
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr

08004fce <LL_USART_SetHWFlowCtrl>:
{
 8004fce:	b480      	push	{r7}
 8004fd0:	b083      	sub	sp, #12
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
 8004fd6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	695b      	ldr	r3, [r3, #20]
 8004fdc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	431a      	orrs	r2, r3
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	615a      	str	r2, [r3, #20]
}
 8004fe8:	bf00      	nop
 8004fea:	370c      	adds	r7, #12
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <LL_USART_SetBaudRate>:
{
 8004ff4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ff8:	b0c0      	sub	sp, #256	; 0x100
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005000:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8005004:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8005008:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800500c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005010:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005014:	f040 810c 	bne.w	8005230 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8005018:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800501c:	2200      	movs	r2, #0
 800501e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005022:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005026:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800502a:	4622      	mov	r2, r4
 800502c:	462b      	mov	r3, r5
 800502e:	1891      	adds	r1, r2, r2
 8005030:	6639      	str	r1, [r7, #96]	; 0x60
 8005032:	415b      	adcs	r3, r3
 8005034:	667b      	str	r3, [r7, #100]	; 0x64
 8005036:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800503a:	4621      	mov	r1, r4
 800503c:	eb12 0801 	adds.w	r8, r2, r1
 8005040:	4629      	mov	r1, r5
 8005042:	eb43 0901 	adc.w	r9, r3, r1
 8005046:	f04f 0200 	mov.w	r2, #0
 800504a:	f04f 0300 	mov.w	r3, #0
 800504e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005052:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005056:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800505a:	4690      	mov	r8, r2
 800505c:	4699      	mov	r9, r3
 800505e:	4623      	mov	r3, r4
 8005060:	eb18 0303 	adds.w	r3, r8, r3
 8005064:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005068:	462b      	mov	r3, r5
 800506a:	eb49 0303 	adc.w	r3, r9, r3
 800506e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005072:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005076:	2200      	movs	r2, #0
 8005078:	469a      	mov	sl, r3
 800507a:	4693      	mov	fp, r2
 800507c:	eb1a 030a 	adds.w	r3, sl, sl
 8005080:	65bb      	str	r3, [r7, #88]	; 0x58
 8005082:	eb4b 030b 	adc.w	r3, fp, fp
 8005086:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005088:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800508c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005090:	f7fb fde2 	bl	8000c58 <__aeabi_uldivmod>
 8005094:	4602      	mov	r2, r0
 8005096:	460b      	mov	r3, r1
 8005098:	4b64      	ldr	r3, [pc, #400]	; (800522c <LL_USART_SetBaudRate+0x238>)
 800509a:	fba3 2302 	umull	r2, r3, r3, r2
 800509e:	095b      	lsrs	r3, r3, #5
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	011b      	lsls	r3, r3, #4
 80050a4:	b29c      	uxth	r4, r3
 80050a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80050aa:	2200      	movs	r2, #0
 80050ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80050b0:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80050b4:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 80050b8:	4642      	mov	r2, r8
 80050ba:	464b      	mov	r3, r9
 80050bc:	1891      	adds	r1, r2, r2
 80050be:	6539      	str	r1, [r7, #80]	; 0x50
 80050c0:	415b      	adcs	r3, r3
 80050c2:	657b      	str	r3, [r7, #84]	; 0x54
 80050c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80050c8:	4641      	mov	r1, r8
 80050ca:	1851      	adds	r1, r2, r1
 80050cc:	64b9      	str	r1, [r7, #72]	; 0x48
 80050ce:	4649      	mov	r1, r9
 80050d0:	414b      	adcs	r3, r1
 80050d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050d4:	f04f 0200 	mov.w	r2, #0
 80050d8:	f04f 0300 	mov.w	r3, #0
 80050dc:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 80050e0:	4659      	mov	r1, fp
 80050e2:	00cb      	lsls	r3, r1, #3
 80050e4:	4651      	mov	r1, sl
 80050e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050ea:	4651      	mov	r1, sl
 80050ec:	00ca      	lsls	r2, r1, #3
 80050ee:	4610      	mov	r0, r2
 80050f0:	4619      	mov	r1, r3
 80050f2:	4603      	mov	r3, r0
 80050f4:	4642      	mov	r2, r8
 80050f6:	189b      	adds	r3, r3, r2
 80050f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80050fc:	464b      	mov	r3, r9
 80050fe:	460a      	mov	r2, r1
 8005100:	eb42 0303 	adc.w	r3, r2, r3
 8005104:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005108:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800510c:	2200      	movs	r2, #0
 800510e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005112:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8005116:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800511a:	460b      	mov	r3, r1
 800511c:	18db      	adds	r3, r3, r3
 800511e:	643b      	str	r3, [r7, #64]	; 0x40
 8005120:	4613      	mov	r3, r2
 8005122:	eb42 0303 	adc.w	r3, r2, r3
 8005126:	647b      	str	r3, [r7, #68]	; 0x44
 8005128:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800512c:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8005130:	f7fb fd92 	bl	8000c58 <__aeabi_uldivmod>
 8005134:	4602      	mov	r2, r0
 8005136:	460b      	mov	r3, r1
 8005138:	4611      	mov	r1, r2
 800513a:	4b3c      	ldr	r3, [pc, #240]	; (800522c <LL_USART_SetBaudRate+0x238>)
 800513c:	fba3 2301 	umull	r2, r3, r3, r1
 8005140:	095b      	lsrs	r3, r3, #5
 8005142:	2264      	movs	r2, #100	; 0x64
 8005144:	fb02 f303 	mul.w	r3, r2, r3
 8005148:	1acb      	subs	r3, r1, r3
 800514a:	00db      	lsls	r3, r3, #3
 800514c:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005150:	4b36      	ldr	r3, [pc, #216]	; (800522c <LL_USART_SetBaudRate+0x238>)
 8005152:	fba3 2302 	umull	r2, r3, r3, r2
 8005156:	095b      	lsrs	r3, r3, #5
 8005158:	b29b      	uxth	r3, r3
 800515a:	005b      	lsls	r3, r3, #1
 800515c:	b29b      	uxth	r3, r3
 800515e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005162:	b29b      	uxth	r3, r3
 8005164:	4423      	add	r3, r4
 8005166:	b29c      	uxth	r4, r3
 8005168:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800516c:	2200      	movs	r2, #0
 800516e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005172:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005176:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 800517a:	4642      	mov	r2, r8
 800517c:	464b      	mov	r3, r9
 800517e:	1891      	adds	r1, r2, r2
 8005180:	63b9      	str	r1, [r7, #56]	; 0x38
 8005182:	415b      	adcs	r3, r3
 8005184:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005186:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800518a:	4641      	mov	r1, r8
 800518c:	1851      	adds	r1, r2, r1
 800518e:	6339      	str	r1, [r7, #48]	; 0x30
 8005190:	4649      	mov	r1, r9
 8005192:	414b      	adcs	r3, r1
 8005194:	637b      	str	r3, [r7, #52]	; 0x34
 8005196:	f04f 0200 	mov.w	r2, #0
 800519a:	f04f 0300 	mov.w	r3, #0
 800519e:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80051a2:	4659      	mov	r1, fp
 80051a4:	00cb      	lsls	r3, r1, #3
 80051a6:	4651      	mov	r1, sl
 80051a8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051ac:	4651      	mov	r1, sl
 80051ae:	00ca      	lsls	r2, r1, #3
 80051b0:	4610      	mov	r0, r2
 80051b2:	4619      	mov	r1, r3
 80051b4:	4603      	mov	r3, r0
 80051b6:	4642      	mov	r2, r8
 80051b8:	189b      	adds	r3, r3, r2
 80051ba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80051be:	464b      	mov	r3, r9
 80051c0:	460a      	mov	r2, r1
 80051c2:	eb42 0303 	adc.w	r3, r2, r3
 80051c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80051ca:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80051ce:	2200      	movs	r2, #0
 80051d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80051d4:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80051d8:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80051dc:	460b      	mov	r3, r1
 80051de:	18db      	adds	r3, r3, r3
 80051e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80051e2:	4613      	mov	r3, r2
 80051e4:	eb42 0303 	adc.w	r3, r2, r3
 80051e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80051ee:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80051f2:	f7fb fd31 	bl	8000c58 <__aeabi_uldivmod>
 80051f6:	4602      	mov	r2, r0
 80051f8:	460b      	mov	r3, r1
 80051fa:	4b0c      	ldr	r3, [pc, #48]	; (800522c <LL_USART_SetBaudRate+0x238>)
 80051fc:	fba3 1302 	umull	r1, r3, r3, r2
 8005200:	095b      	lsrs	r3, r3, #5
 8005202:	2164      	movs	r1, #100	; 0x64
 8005204:	fb01 f303 	mul.w	r3, r1, r3
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	00db      	lsls	r3, r3, #3
 800520c:	3332      	adds	r3, #50	; 0x32
 800520e:	4a07      	ldr	r2, [pc, #28]	; (800522c <LL_USART_SetBaudRate+0x238>)
 8005210:	fba2 2303 	umull	r2, r3, r2, r3
 8005214:	095b      	lsrs	r3, r3, #5
 8005216:	b29b      	uxth	r3, r3
 8005218:	f003 0307 	and.w	r3, r3, #7
 800521c:	b29b      	uxth	r3, r3
 800521e:	4423      	add	r3, r4
 8005220:	b29b      	uxth	r3, r3
 8005222:	461a      	mov	r2, r3
 8005224:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005228:	609a      	str	r2, [r3, #8]
}
 800522a:	e108      	b.n	800543e <LL_USART_SetBaudRate+0x44a>
 800522c:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8005230:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005234:	2200      	movs	r2, #0
 8005236:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800523a:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800523e:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8005242:	4642      	mov	r2, r8
 8005244:	464b      	mov	r3, r9
 8005246:	1891      	adds	r1, r2, r2
 8005248:	6239      	str	r1, [r7, #32]
 800524a:	415b      	adcs	r3, r3
 800524c:	627b      	str	r3, [r7, #36]	; 0x24
 800524e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005252:	4641      	mov	r1, r8
 8005254:	1854      	adds	r4, r2, r1
 8005256:	4649      	mov	r1, r9
 8005258:	eb43 0501 	adc.w	r5, r3, r1
 800525c:	f04f 0200 	mov.w	r2, #0
 8005260:	f04f 0300 	mov.w	r3, #0
 8005264:	00eb      	lsls	r3, r5, #3
 8005266:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800526a:	00e2      	lsls	r2, r4, #3
 800526c:	4614      	mov	r4, r2
 800526e:	461d      	mov	r5, r3
 8005270:	4643      	mov	r3, r8
 8005272:	18e3      	adds	r3, r4, r3
 8005274:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005278:	464b      	mov	r3, r9
 800527a:	eb45 0303 	adc.w	r3, r5, r3
 800527e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005282:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005286:	2200      	movs	r2, #0
 8005288:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800528c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8005290:	f04f 0200 	mov.w	r2, #0
 8005294:	f04f 0300 	mov.w	r3, #0
 8005298:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 800529c:	4629      	mov	r1, r5
 800529e:	008b      	lsls	r3, r1, #2
 80052a0:	4621      	mov	r1, r4
 80052a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052a6:	4621      	mov	r1, r4
 80052a8:	008a      	lsls	r2, r1, #2
 80052aa:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80052ae:	f7fb fcd3 	bl	8000c58 <__aeabi_uldivmod>
 80052b2:	4602      	mov	r2, r0
 80052b4:	460b      	mov	r3, r1
 80052b6:	4b65      	ldr	r3, [pc, #404]	; (800544c <LL_USART_SetBaudRate+0x458>)
 80052b8:	fba3 2302 	umull	r2, r3, r3, r2
 80052bc:	095b      	lsrs	r3, r3, #5
 80052be:	b29b      	uxth	r3, r3
 80052c0:	011b      	lsls	r3, r3, #4
 80052c2:	b29c      	uxth	r4, r3
 80052c4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80052c8:	2200      	movs	r2, #0
 80052ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80052ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80052d2:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 80052d6:	4642      	mov	r2, r8
 80052d8:	464b      	mov	r3, r9
 80052da:	1891      	adds	r1, r2, r2
 80052dc:	61b9      	str	r1, [r7, #24]
 80052de:	415b      	adcs	r3, r3
 80052e0:	61fb      	str	r3, [r7, #28]
 80052e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052e6:	4641      	mov	r1, r8
 80052e8:	1851      	adds	r1, r2, r1
 80052ea:	6139      	str	r1, [r7, #16]
 80052ec:	4649      	mov	r1, r9
 80052ee:	414b      	adcs	r3, r1
 80052f0:	617b      	str	r3, [r7, #20]
 80052f2:	f04f 0200 	mov.w	r2, #0
 80052f6:	f04f 0300 	mov.w	r3, #0
 80052fa:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80052fe:	4659      	mov	r1, fp
 8005300:	00cb      	lsls	r3, r1, #3
 8005302:	4651      	mov	r1, sl
 8005304:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005308:	4651      	mov	r1, sl
 800530a:	00ca      	lsls	r2, r1, #3
 800530c:	4610      	mov	r0, r2
 800530e:	4619      	mov	r1, r3
 8005310:	4603      	mov	r3, r0
 8005312:	4642      	mov	r2, r8
 8005314:	189b      	adds	r3, r3, r2
 8005316:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800531a:	464b      	mov	r3, r9
 800531c:	460a      	mov	r2, r1
 800531e:	eb42 0303 	adc.w	r3, r2, r3
 8005322:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005326:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800532a:	2200      	movs	r2, #0
 800532c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005330:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8005334:	f04f 0200 	mov.w	r2, #0
 8005338:	f04f 0300 	mov.w	r3, #0
 800533c:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8005340:	4649      	mov	r1, r9
 8005342:	008b      	lsls	r3, r1, #2
 8005344:	4641      	mov	r1, r8
 8005346:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800534a:	4641      	mov	r1, r8
 800534c:	008a      	lsls	r2, r1, #2
 800534e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8005352:	f7fb fc81 	bl	8000c58 <__aeabi_uldivmod>
 8005356:	4602      	mov	r2, r0
 8005358:	460b      	mov	r3, r1
 800535a:	4611      	mov	r1, r2
 800535c:	4b3b      	ldr	r3, [pc, #236]	; (800544c <LL_USART_SetBaudRate+0x458>)
 800535e:	fba3 2301 	umull	r2, r3, r3, r1
 8005362:	095b      	lsrs	r3, r3, #5
 8005364:	2264      	movs	r2, #100	; 0x64
 8005366:	fb02 f303 	mul.w	r3, r2, r3
 800536a:	1acb      	subs	r3, r1, r3
 800536c:	011b      	lsls	r3, r3, #4
 800536e:	3332      	adds	r3, #50	; 0x32
 8005370:	4a36      	ldr	r2, [pc, #216]	; (800544c <LL_USART_SetBaudRate+0x458>)
 8005372:	fba2 2303 	umull	r2, r3, r2, r3
 8005376:	095b      	lsrs	r3, r3, #5
 8005378:	b29b      	uxth	r3, r3
 800537a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800537e:	b29b      	uxth	r3, r3
 8005380:	4423      	add	r3, r4
 8005382:	b29c      	uxth	r4, r3
 8005384:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005388:	2200      	movs	r2, #0
 800538a:	67bb      	str	r3, [r7, #120]	; 0x78
 800538c:	67fa      	str	r2, [r7, #124]	; 0x7c
 800538e:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005392:	4642      	mov	r2, r8
 8005394:	464b      	mov	r3, r9
 8005396:	1891      	adds	r1, r2, r2
 8005398:	60b9      	str	r1, [r7, #8]
 800539a:	415b      	adcs	r3, r3
 800539c:	60fb      	str	r3, [r7, #12]
 800539e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80053a2:	4641      	mov	r1, r8
 80053a4:	1851      	adds	r1, r2, r1
 80053a6:	6039      	str	r1, [r7, #0]
 80053a8:	4649      	mov	r1, r9
 80053aa:	414b      	adcs	r3, r1
 80053ac:	607b      	str	r3, [r7, #4]
 80053ae:	f04f 0200 	mov.w	r2, #0
 80053b2:	f04f 0300 	mov.w	r3, #0
 80053b6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80053ba:	4659      	mov	r1, fp
 80053bc:	00cb      	lsls	r3, r1, #3
 80053be:	4651      	mov	r1, sl
 80053c0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053c4:	4651      	mov	r1, sl
 80053c6:	00ca      	lsls	r2, r1, #3
 80053c8:	4610      	mov	r0, r2
 80053ca:	4619      	mov	r1, r3
 80053cc:	4603      	mov	r3, r0
 80053ce:	4642      	mov	r2, r8
 80053d0:	189b      	adds	r3, r3, r2
 80053d2:	673b      	str	r3, [r7, #112]	; 0x70
 80053d4:	464b      	mov	r3, r9
 80053d6:	460a      	mov	r2, r1
 80053d8:	eb42 0303 	adc.w	r3, r2, r3
 80053dc:	677b      	str	r3, [r7, #116]	; 0x74
 80053de:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80053e2:	2200      	movs	r2, #0
 80053e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80053e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80053e8:	f04f 0200 	mov.w	r2, #0
 80053ec:	f04f 0300 	mov.w	r3, #0
 80053f0:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 80053f4:	4649      	mov	r1, r9
 80053f6:	008b      	lsls	r3, r1, #2
 80053f8:	4641      	mov	r1, r8
 80053fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053fe:	4641      	mov	r1, r8
 8005400:	008a      	lsls	r2, r1, #2
 8005402:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8005406:	f7fb fc27 	bl	8000c58 <__aeabi_uldivmod>
 800540a:	4602      	mov	r2, r0
 800540c:	460b      	mov	r3, r1
 800540e:	4b0f      	ldr	r3, [pc, #60]	; (800544c <LL_USART_SetBaudRate+0x458>)
 8005410:	fba3 1302 	umull	r1, r3, r3, r2
 8005414:	095b      	lsrs	r3, r3, #5
 8005416:	2164      	movs	r1, #100	; 0x64
 8005418:	fb01 f303 	mul.w	r3, r1, r3
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	011b      	lsls	r3, r3, #4
 8005420:	3332      	adds	r3, #50	; 0x32
 8005422:	4a0a      	ldr	r2, [pc, #40]	; (800544c <LL_USART_SetBaudRate+0x458>)
 8005424:	fba2 2303 	umull	r2, r3, r2, r3
 8005428:	095b      	lsrs	r3, r3, #5
 800542a:	b29b      	uxth	r3, r3
 800542c:	f003 030f 	and.w	r3, r3, #15
 8005430:	b29b      	uxth	r3, r3
 8005432:	4423      	add	r3, r4
 8005434:	b29b      	uxth	r3, r3
 8005436:	461a      	mov	r2, r3
 8005438:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800543c:	609a      	str	r2, [r3, #8]
}
 800543e:	bf00      	nop
 8005440:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005444:	46bd      	mov	sp, r7
 8005446:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800544a:	bf00      	nop
 800544c:	51eb851f 	.word	0x51eb851f

08005450 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b088      	sub	sp, #32
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800545e:	2300      	movs	r3, #0
 8005460:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f7ff fd8c 	bl	8004f80 <LL_USART_IsEnabled>
 8005468:	4603      	mov	r3, r0
 800546a:	2b00      	cmp	r3, #0
 800546c:	d149      	bne.n	8005502 <LL_USART_Init+0xb2>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005476:	f023 030c 	bic.w	r3, r3, #12
 800547a:	683a      	ldr	r2, [r7, #0]
 800547c:	6851      	ldr	r1, [r2, #4]
 800547e:	683a      	ldr	r2, [r7, #0]
 8005480:	68d2      	ldr	r2, [r2, #12]
 8005482:	4311      	orrs	r1, r2
 8005484:	683a      	ldr	r2, [r7, #0]
 8005486:	6912      	ldr	r2, [r2, #16]
 8005488:	4311      	orrs	r1, r2
 800548a:	683a      	ldr	r2, [r7, #0]
 800548c:	6992      	ldr	r2, [r2, #24]
 800548e:	430a      	orrs	r2, r1
 8005490:	431a      	orrs	r2, r3
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	4619      	mov	r1, r3
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f7ff fd83 	bl	8004fa8 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	695b      	ldr	r3, [r3, #20]
 80054a6:	4619      	mov	r1, r3
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f7ff fd90 	bl	8004fce <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80054ae:	f107 0308 	add.w	r3, r7, #8
 80054b2:	4618      	mov	r0, r3
 80054b4:	f7ff f9e0 	bl	8004878 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4a14      	ldr	r2, [pc, #80]	; (800550c <LL_USART_Init+0xbc>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d102      	bne.n	80054c6 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	61bb      	str	r3, [r7, #24]
 80054c4:	e00c      	b.n	80054e0 <LL_USART_Init+0x90>
    }
    else if (USARTx == USART2)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a11      	ldr	r2, [pc, #68]	; (8005510 <LL_USART_Init+0xc0>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d102      	bne.n	80054d4 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	61bb      	str	r3, [r7, #24]
 80054d2:	e005      	b.n	80054e0 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a0f      	ldr	r2, [pc, #60]	; (8005514 <LL_USART_Init+0xc4>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d101      	bne.n	80054e0 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80054e0:	69bb      	ldr	r3, [r7, #24]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d00d      	beq.n	8005502 <LL_USART_Init+0xb2>
        && (USART_InitStruct->BaudRate != 0U))
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d009      	beq.n	8005502 <LL_USART_Init+0xb2>
    {
      status = SUCCESS;
 80054ee:	2300      	movs	r3, #0
 80054f0:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	699a      	ldr	r2, [r3, #24]
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	69b9      	ldr	r1, [r7, #24]
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f7ff fd79 	bl	8004ff4 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8005502:	7ffb      	ldrb	r3, [r7, #31]
}
 8005504:	4618      	mov	r0, r3
 8005506:	3720      	adds	r7, #32
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}
 800550c:	40011000 	.word	0x40011000
 8005510:	40004400 	.word	0x40004400
 8005514:	40011400 	.word	0x40011400

08005518 <__cvt>:
 8005518:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800551c:	ec55 4b10 	vmov	r4, r5, d0
 8005520:	2d00      	cmp	r5, #0
 8005522:	460e      	mov	r6, r1
 8005524:	4619      	mov	r1, r3
 8005526:	462b      	mov	r3, r5
 8005528:	bfbb      	ittet	lt
 800552a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800552e:	461d      	movlt	r5, r3
 8005530:	2300      	movge	r3, #0
 8005532:	232d      	movlt	r3, #45	; 0x2d
 8005534:	700b      	strb	r3, [r1, #0]
 8005536:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005538:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800553c:	4691      	mov	r9, r2
 800553e:	f023 0820 	bic.w	r8, r3, #32
 8005542:	bfbc      	itt	lt
 8005544:	4622      	movlt	r2, r4
 8005546:	4614      	movlt	r4, r2
 8005548:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800554c:	d005      	beq.n	800555a <__cvt+0x42>
 800554e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005552:	d100      	bne.n	8005556 <__cvt+0x3e>
 8005554:	3601      	adds	r6, #1
 8005556:	2102      	movs	r1, #2
 8005558:	e000      	b.n	800555c <__cvt+0x44>
 800555a:	2103      	movs	r1, #3
 800555c:	ab03      	add	r3, sp, #12
 800555e:	9301      	str	r3, [sp, #4]
 8005560:	ab02      	add	r3, sp, #8
 8005562:	9300      	str	r3, [sp, #0]
 8005564:	ec45 4b10 	vmov	d0, r4, r5
 8005568:	4653      	mov	r3, sl
 800556a:	4632      	mov	r2, r6
 800556c:	f000 ff38 	bl	80063e0 <_dtoa_r>
 8005570:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005574:	4607      	mov	r7, r0
 8005576:	d102      	bne.n	800557e <__cvt+0x66>
 8005578:	f019 0f01 	tst.w	r9, #1
 800557c:	d022      	beq.n	80055c4 <__cvt+0xac>
 800557e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005582:	eb07 0906 	add.w	r9, r7, r6
 8005586:	d110      	bne.n	80055aa <__cvt+0x92>
 8005588:	783b      	ldrb	r3, [r7, #0]
 800558a:	2b30      	cmp	r3, #48	; 0x30
 800558c:	d10a      	bne.n	80055a4 <__cvt+0x8c>
 800558e:	2200      	movs	r2, #0
 8005590:	2300      	movs	r3, #0
 8005592:	4620      	mov	r0, r4
 8005594:	4629      	mov	r1, r5
 8005596:	f7fb fa9f 	bl	8000ad8 <__aeabi_dcmpeq>
 800559a:	b918      	cbnz	r0, 80055a4 <__cvt+0x8c>
 800559c:	f1c6 0601 	rsb	r6, r6, #1
 80055a0:	f8ca 6000 	str.w	r6, [sl]
 80055a4:	f8da 3000 	ldr.w	r3, [sl]
 80055a8:	4499      	add	r9, r3
 80055aa:	2200      	movs	r2, #0
 80055ac:	2300      	movs	r3, #0
 80055ae:	4620      	mov	r0, r4
 80055b0:	4629      	mov	r1, r5
 80055b2:	f7fb fa91 	bl	8000ad8 <__aeabi_dcmpeq>
 80055b6:	b108      	cbz	r0, 80055bc <__cvt+0xa4>
 80055b8:	f8cd 900c 	str.w	r9, [sp, #12]
 80055bc:	2230      	movs	r2, #48	; 0x30
 80055be:	9b03      	ldr	r3, [sp, #12]
 80055c0:	454b      	cmp	r3, r9
 80055c2:	d307      	bcc.n	80055d4 <__cvt+0xbc>
 80055c4:	9b03      	ldr	r3, [sp, #12]
 80055c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80055c8:	1bdb      	subs	r3, r3, r7
 80055ca:	4638      	mov	r0, r7
 80055cc:	6013      	str	r3, [r2, #0]
 80055ce:	b004      	add	sp, #16
 80055d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055d4:	1c59      	adds	r1, r3, #1
 80055d6:	9103      	str	r1, [sp, #12]
 80055d8:	701a      	strb	r2, [r3, #0]
 80055da:	e7f0      	b.n	80055be <__cvt+0xa6>

080055dc <__exponent>:
 80055dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80055de:	4603      	mov	r3, r0
 80055e0:	2900      	cmp	r1, #0
 80055e2:	bfb8      	it	lt
 80055e4:	4249      	neglt	r1, r1
 80055e6:	f803 2b02 	strb.w	r2, [r3], #2
 80055ea:	bfb4      	ite	lt
 80055ec:	222d      	movlt	r2, #45	; 0x2d
 80055ee:	222b      	movge	r2, #43	; 0x2b
 80055f0:	2909      	cmp	r1, #9
 80055f2:	7042      	strb	r2, [r0, #1]
 80055f4:	dd2a      	ble.n	800564c <__exponent+0x70>
 80055f6:	f10d 0207 	add.w	r2, sp, #7
 80055fa:	4617      	mov	r7, r2
 80055fc:	260a      	movs	r6, #10
 80055fe:	4694      	mov	ip, r2
 8005600:	fb91 f5f6 	sdiv	r5, r1, r6
 8005604:	fb06 1415 	mls	r4, r6, r5, r1
 8005608:	3430      	adds	r4, #48	; 0x30
 800560a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800560e:	460c      	mov	r4, r1
 8005610:	2c63      	cmp	r4, #99	; 0x63
 8005612:	f102 32ff 	add.w	r2, r2, #4294967295
 8005616:	4629      	mov	r1, r5
 8005618:	dcf1      	bgt.n	80055fe <__exponent+0x22>
 800561a:	3130      	adds	r1, #48	; 0x30
 800561c:	f1ac 0402 	sub.w	r4, ip, #2
 8005620:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005624:	1c41      	adds	r1, r0, #1
 8005626:	4622      	mov	r2, r4
 8005628:	42ba      	cmp	r2, r7
 800562a:	d30a      	bcc.n	8005642 <__exponent+0x66>
 800562c:	f10d 0209 	add.w	r2, sp, #9
 8005630:	eba2 020c 	sub.w	r2, r2, ip
 8005634:	42bc      	cmp	r4, r7
 8005636:	bf88      	it	hi
 8005638:	2200      	movhi	r2, #0
 800563a:	4413      	add	r3, r2
 800563c:	1a18      	subs	r0, r3, r0
 800563e:	b003      	add	sp, #12
 8005640:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005642:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005646:	f801 5f01 	strb.w	r5, [r1, #1]!
 800564a:	e7ed      	b.n	8005628 <__exponent+0x4c>
 800564c:	2330      	movs	r3, #48	; 0x30
 800564e:	3130      	adds	r1, #48	; 0x30
 8005650:	7083      	strb	r3, [r0, #2]
 8005652:	70c1      	strb	r1, [r0, #3]
 8005654:	1d03      	adds	r3, r0, #4
 8005656:	e7f1      	b.n	800563c <__exponent+0x60>

08005658 <_printf_float>:
 8005658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800565c:	ed2d 8b02 	vpush	{d8}
 8005660:	b08d      	sub	sp, #52	; 0x34
 8005662:	460c      	mov	r4, r1
 8005664:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005668:	4616      	mov	r6, r2
 800566a:	461f      	mov	r7, r3
 800566c:	4605      	mov	r5, r0
 800566e:	f000 fdb7 	bl	80061e0 <_localeconv_r>
 8005672:	f8d0 a000 	ldr.w	sl, [r0]
 8005676:	4650      	mov	r0, sl
 8005678:	f7fa fe02 	bl	8000280 <strlen>
 800567c:	2300      	movs	r3, #0
 800567e:	930a      	str	r3, [sp, #40]	; 0x28
 8005680:	6823      	ldr	r3, [r4, #0]
 8005682:	9305      	str	r3, [sp, #20]
 8005684:	f8d8 3000 	ldr.w	r3, [r8]
 8005688:	f894 b018 	ldrb.w	fp, [r4, #24]
 800568c:	3307      	adds	r3, #7
 800568e:	f023 0307 	bic.w	r3, r3, #7
 8005692:	f103 0208 	add.w	r2, r3, #8
 8005696:	f8c8 2000 	str.w	r2, [r8]
 800569a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800569e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80056a2:	9307      	str	r3, [sp, #28]
 80056a4:	f8cd 8018 	str.w	r8, [sp, #24]
 80056a8:	ee08 0a10 	vmov	s16, r0
 80056ac:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80056b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80056b4:	4b9e      	ldr	r3, [pc, #632]	; (8005930 <_printf_float+0x2d8>)
 80056b6:	f04f 32ff 	mov.w	r2, #4294967295
 80056ba:	f7fb fa3f 	bl	8000b3c <__aeabi_dcmpun>
 80056be:	bb88      	cbnz	r0, 8005724 <_printf_float+0xcc>
 80056c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80056c4:	4b9a      	ldr	r3, [pc, #616]	; (8005930 <_printf_float+0x2d8>)
 80056c6:	f04f 32ff 	mov.w	r2, #4294967295
 80056ca:	f7fb fa19 	bl	8000b00 <__aeabi_dcmple>
 80056ce:	bb48      	cbnz	r0, 8005724 <_printf_float+0xcc>
 80056d0:	2200      	movs	r2, #0
 80056d2:	2300      	movs	r3, #0
 80056d4:	4640      	mov	r0, r8
 80056d6:	4649      	mov	r1, r9
 80056d8:	f7fb fa08 	bl	8000aec <__aeabi_dcmplt>
 80056dc:	b110      	cbz	r0, 80056e4 <_printf_float+0x8c>
 80056de:	232d      	movs	r3, #45	; 0x2d
 80056e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056e4:	4a93      	ldr	r2, [pc, #588]	; (8005934 <_printf_float+0x2dc>)
 80056e6:	4b94      	ldr	r3, [pc, #592]	; (8005938 <_printf_float+0x2e0>)
 80056e8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80056ec:	bf94      	ite	ls
 80056ee:	4690      	movls	r8, r2
 80056f0:	4698      	movhi	r8, r3
 80056f2:	2303      	movs	r3, #3
 80056f4:	6123      	str	r3, [r4, #16]
 80056f6:	9b05      	ldr	r3, [sp, #20]
 80056f8:	f023 0304 	bic.w	r3, r3, #4
 80056fc:	6023      	str	r3, [r4, #0]
 80056fe:	f04f 0900 	mov.w	r9, #0
 8005702:	9700      	str	r7, [sp, #0]
 8005704:	4633      	mov	r3, r6
 8005706:	aa0b      	add	r2, sp, #44	; 0x2c
 8005708:	4621      	mov	r1, r4
 800570a:	4628      	mov	r0, r5
 800570c:	f000 f9da 	bl	8005ac4 <_printf_common>
 8005710:	3001      	adds	r0, #1
 8005712:	f040 8090 	bne.w	8005836 <_printf_float+0x1de>
 8005716:	f04f 30ff 	mov.w	r0, #4294967295
 800571a:	b00d      	add	sp, #52	; 0x34
 800571c:	ecbd 8b02 	vpop	{d8}
 8005720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005724:	4642      	mov	r2, r8
 8005726:	464b      	mov	r3, r9
 8005728:	4640      	mov	r0, r8
 800572a:	4649      	mov	r1, r9
 800572c:	f7fb fa06 	bl	8000b3c <__aeabi_dcmpun>
 8005730:	b140      	cbz	r0, 8005744 <_printf_float+0xec>
 8005732:	464b      	mov	r3, r9
 8005734:	2b00      	cmp	r3, #0
 8005736:	bfbc      	itt	lt
 8005738:	232d      	movlt	r3, #45	; 0x2d
 800573a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800573e:	4a7f      	ldr	r2, [pc, #508]	; (800593c <_printf_float+0x2e4>)
 8005740:	4b7f      	ldr	r3, [pc, #508]	; (8005940 <_printf_float+0x2e8>)
 8005742:	e7d1      	b.n	80056e8 <_printf_float+0x90>
 8005744:	6863      	ldr	r3, [r4, #4]
 8005746:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800574a:	9206      	str	r2, [sp, #24]
 800574c:	1c5a      	adds	r2, r3, #1
 800574e:	d13f      	bne.n	80057d0 <_printf_float+0x178>
 8005750:	2306      	movs	r3, #6
 8005752:	6063      	str	r3, [r4, #4]
 8005754:	9b05      	ldr	r3, [sp, #20]
 8005756:	6861      	ldr	r1, [r4, #4]
 8005758:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800575c:	2300      	movs	r3, #0
 800575e:	9303      	str	r3, [sp, #12]
 8005760:	ab0a      	add	r3, sp, #40	; 0x28
 8005762:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005766:	ab09      	add	r3, sp, #36	; 0x24
 8005768:	ec49 8b10 	vmov	d0, r8, r9
 800576c:	9300      	str	r3, [sp, #0]
 800576e:	6022      	str	r2, [r4, #0]
 8005770:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005774:	4628      	mov	r0, r5
 8005776:	f7ff fecf 	bl	8005518 <__cvt>
 800577a:	9b06      	ldr	r3, [sp, #24]
 800577c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800577e:	2b47      	cmp	r3, #71	; 0x47
 8005780:	4680      	mov	r8, r0
 8005782:	d108      	bne.n	8005796 <_printf_float+0x13e>
 8005784:	1cc8      	adds	r0, r1, #3
 8005786:	db02      	blt.n	800578e <_printf_float+0x136>
 8005788:	6863      	ldr	r3, [r4, #4]
 800578a:	4299      	cmp	r1, r3
 800578c:	dd41      	ble.n	8005812 <_printf_float+0x1ba>
 800578e:	f1ab 0302 	sub.w	r3, fp, #2
 8005792:	fa5f fb83 	uxtb.w	fp, r3
 8005796:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800579a:	d820      	bhi.n	80057de <_printf_float+0x186>
 800579c:	3901      	subs	r1, #1
 800579e:	465a      	mov	r2, fp
 80057a0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80057a4:	9109      	str	r1, [sp, #36]	; 0x24
 80057a6:	f7ff ff19 	bl	80055dc <__exponent>
 80057aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80057ac:	1813      	adds	r3, r2, r0
 80057ae:	2a01      	cmp	r2, #1
 80057b0:	4681      	mov	r9, r0
 80057b2:	6123      	str	r3, [r4, #16]
 80057b4:	dc02      	bgt.n	80057bc <_printf_float+0x164>
 80057b6:	6822      	ldr	r2, [r4, #0]
 80057b8:	07d2      	lsls	r2, r2, #31
 80057ba:	d501      	bpl.n	80057c0 <_printf_float+0x168>
 80057bc:	3301      	adds	r3, #1
 80057be:	6123      	str	r3, [r4, #16]
 80057c0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d09c      	beq.n	8005702 <_printf_float+0xaa>
 80057c8:	232d      	movs	r3, #45	; 0x2d
 80057ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057ce:	e798      	b.n	8005702 <_printf_float+0xaa>
 80057d0:	9a06      	ldr	r2, [sp, #24]
 80057d2:	2a47      	cmp	r2, #71	; 0x47
 80057d4:	d1be      	bne.n	8005754 <_printf_float+0xfc>
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d1bc      	bne.n	8005754 <_printf_float+0xfc>
 80057da:	2301      	movs	r3, #1
 80057dc:	e7b9      	b.n	8005752 <_printf_float+0xfa>
 80057de:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80057e2:	d118      	bne.n	8005816 <_printf_float+0x1be>
 80057e4:	2900      	cmp	r1, #0
 80057e6:	6863      	ldr	r3, [r4, #4]
 80057e8:	dd0b      	ble.n	8005802 <_printf_float+0x1aa>
 80057ea:	6121      	str	r1, [r4, #16]
 80057ec:	b913      	cbnz	r3, 80057f4 <_printf_float+0x19c>
 80057ee:	6822      	ldr	r2, [r4, #0]
 80057f0:	07d0      	lsls	r0, r2, #31
 80057f2:	d502      	bpl.n	80057fa <_printf_float+0x1a2>
 80057f4:	3301      	adds	r3, #1
 80057f6:	440b      	add	r3, r1
 80057f8:	6123      	str	r3, [r4, #16]
 80057fa:	65a1      	str	r1, [r4, #88]	; 0x58
 80057fc:	f04f 0900 	mov.w	r9, #0
 8005800:	e7de      	b.n	80057c0 <_printf_float+0x168>
 8005802:	b913      	cbnz	r3, 800580a <_printf_float+0x1b2>
 8005804:	6822      	ldr	r2, [r4, #0]
 8005806:	07d2      	lsls	r2, r2, #31
 8005808:	d501      	bpl.n	800580e <_printf_float+0x1b6>
 800580a:	3302      	adds	r3, #2
 800580c:	e7f4      	b.n	80057f8 <_printf_float+0x1a0>
 800580e:	2301      	movs	r3, #1
 8005810:	e7f2      	b.n	80057f8 <_printf_float+0x1a0>
 8005812:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005816:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005818:	4299      	cmp	r1, r3
 800581a:	db05      	blt.n	8005828 <_printf_float+0x1d0>
 800581c:	6823      	ldr	r3, [r4, #0]
 800581e:	6121      	str	r1, [r4, #16]
 8005820:	07d8      	lsls	r0, r3, #31
 8005822:	d5ea      	bpl.n	80057fa <_printf_float+0x1a2>
 8005824:	1c4b      	adds	r3, r1, #1
 8005826:	e7e7      	b.n	80057f8 <_printf_float+0x1a0>
 8005828:	2900      	cmp	r1, #0
 800582a:	bfd4      	ite	le
 800582c:	f1c1 0202 	rsble	r2, r1, #2
 8005830:	2201      	movgt	r2, #1
 8005832:	4413      	add	r3, r2
 8005834:	e7e0      	b.n	80057f8 <_printf_float+0x1a0>
 8005836:	6823      	ldr	r3, [r4, #0]
 8005838:	055a      	lsls	r2, r3, #21
 800583a:	d407      	bmi.n	800584c <_printf_float+0x1f4>
 800583c:	6923      	ldr	r3, [r4, #16]
 800583e:	4642      	mov	r2, r8
 8005840:	4631      	mov	r1, r6
 8005842:	4628      	mov	r0, r5
 8005844:	47b8      	blx	r7
 8005846:	3001      	adds	r0, #1
 8005848:	d12c      	bne.n	80058a4 <_printf_float+0x24c>
 800584a:	e764      	b.n	8005716 <_printf_float+0xbe>
 800584c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005850:	f240 80e0 	bls.w	8005a14 <_printf_float+0x3bc>
 8005854:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005858:	2200      	movs	r2, #0
 800585a:	2300      	movs	r3, #0
 800585c:	f7fb f93c 	bl	8000ad8 <__aeabi_dcmpeq>
 8005860:	2800      	cmp	r0, #0
 8005862:	d034      	beq.n	80058ce <_printf_float+0x276>
 8005864:	4a37      	ldr	r2, [pc, #220]	; (8005944 <_printf_float+0x2ec>)
 8005866:	2301      	movs	r3, #1
 8005868:	4631      	mov	r1, r6
 800586a:	4628      	mov	r0, r5
 800586c:	47b8      	blx	r7
 800586e:	3001      	adds	r0, #1
 8005870:	f43f af51 	beq.w	8005716 <_printf_float+0xbe>
 8005874:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005878:	429a      	cmp	r2, r3
 800587a:	db02      	blt.n	8005882 <_printf_float+0x22a>
 800587c:	6823      	ldr	r3, [r4, #0]
 800587e:	07d8      	lsls	r0, r3, #31
 8005880:	d510      	bpl.n	80058a4 <_printf_float+0x24c>
 8005882:	ee18 3a10 	vmov	r3, s16
 8005886:	4652      	mov	r2, sl
 8005888:	4631      	mov	r1, r6
 800588a:	4628      	mov	r0, r5
 800588c:	47b8      	blx	r7
 800588e:	3001      	adds	r0, #1
 8005890:	f43f af41 	beq.w	8005716 <_printf_float+0xbe>
 8005894:	f04f 0800 	mov.w	r8, #0
 8005898:	f104 091a 	add.w	r9, r4, #26
 800589c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800589e:	3b01      	subs	r3, #1
 80058a0:	4543      	cmp	r3, r8
 80058a2:	dc09      	bgt.n	80058b8 <_printf_float+0x260>
 80058a4:	6823      	ldr	r3, [r4, #0]
 80058a6:	079b      	lsls	r3, r3, #30
 80058a8:	f100 8107 	bmi.w	8005aba <_printf_float+0x462>
 80058ac:	68e0      	ldr	r0, [r4, #12]
 80058ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80058b0:	4298      	cmp	r0, r3
 80058b2:	bfb8      	it	lt
 80058b4:	4618      	movlt	r0, r3
 80058b6:	e730      	b.n	800571a <_printf_float+0xc2>
 80058b8:	2301      	movs	r3, #1
 80058ba:	464a      	mov	r2, r9
 80058bc:	4631      	mov	r1, r6
 80058be:	4628      	mov	r0, r5
 80058c0:	47b8      	blx	r7
 80058c2:	3001      	adds	r0, #1
 80058c4:	f43f af27 	beq.w	8005716 <_printf_float+0xbe>
 80058c8:	f108 0801 	add.w	r8, r8, #1
 80058cc:	e7e6      	b.n	800589c <_printf_float+0x244>
 80058ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	dc39      	bgt.n	8005948 <_printf_float+0x2f0>
 80058d4:	4a1b      	ldr	r2, [pc, #108]	; (8005944 <_printf_float+0x2ec>)
 80058d6:	2301      	movs	r3, #1
 80058d8:	4631      	mov	r1, r6
 80058da:	4628      	mov	r0, r5
 80058dc:	47b8      	blx	r7
 80058de:	3001      	adds	r0, #1
 80058e0:	f43f af19 	beq.w	8005716 <_printf_float+0xbe>
 80058e4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80058e8:	4313      	orrs	r3, r2
 80058ea:	d102      	bne.n	80058f2 <_printf_float+0x29a>
 80058ec:	6823      	ldr	r3, [r4, #0]
 80058ee:	07d9      	lsls	r1, r3, #31
 80058f0:	d5d8      	bpl.n	80058a4 <_printf_float+0x24c>
 80058f2:	ee18 3a10 	vmov	r3, s16
 80058f6:	4652      	mov	r2, sl
 80058f8:	4631      	mov	r1, r6
 80058fa:	4628      	mov	r0, r5
 80058fc:	47b8      	blx	r7
 80058fe:	3001      	adds	r0, #1
 8005900:	f43f af09 	beq.w	8005716 <_printf_float+0xbe>
 8005904:	f04f 0900 	mov.w	r9, #0
 8005908:	f104 0a1a 	add.w	sl, r4, #26
 800590c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800590e:	425b      	negs	r3, r3
 8005910:	454b      	cmp	r3, r9
 8005912:	dc01      	bgt.n	8005918 <_printf_float+0x2c0>
 8005914:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005916:	e792      	b.n	800583e <_printf_float+0x1e6>
 8005918:	2301      	movs	r3, #1
 800591a:	4652      	mov	r2, sl
 800591c:	4631      	mov	r1, r6
 800591e:	4628      	mov	r0, r5
 8005920:	47b8      	blx	r7
 8005922:	3001      	adds	r0, #1
 8005924:	f43f aef7 	beq.w	8005716 <_printf_float+0xbe>
 8005928:	f109 0901 	add.w	r9, r9, #1
 800592c:	e7ee      	b.n	800590c <_printf_float+0x2b4>
 800592e:	bf00      	nop
 8005930:	7fefffff 	.word	0x7fefffff
 8005934:	08008597 	.word	0x08008597
 8005938:	0800859b 	.word	0x0800859b
 800593c:	0800859f 	.word	0x0800859f
 8005940:	080085a3 	.word	0x080085a3
 8005944:	080085a7 	.word	0x080085a7
 8005948:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800594a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800594c:	429a      	cmp	r2, r3
 800594e:	bfa8      	it	ge
 8005950:	461a      	movge	r2, r3
 8005952:	2a00      	cmp	r2, #0
 8005954:	4691      	mov	r9, r2
 8005956:	dc37      	bgt.n	80059c8 <_printf_float+0x370>
 8005958:	f04f 0b00 	mov.w	fp, #0
 800595c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005960:	f104 021a 	add.w	r2, r4, #26
 8005964:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005966:	9305      	str	r3, [sp, #20]
 8005968:	eba3 0309 	sub.w	r3, r3, r9
 800596c:	455b      	cmp	r3, fp
 800596e:	dc33      	bgt.n	80059d8 <_printf_float+0x380>
 8005970:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005974:	429a      	cmp	r2, r3
 8005976:	db3b      	blt.n	80059f0 <_printf_float+0x398>
 8005978:	6823      	ldr	r3, [r4, #0]
 800597a:	07da      	lsls	r2, r3, #31
 800597c:	d438      	bmi.n	80059f0 <_printf_float+0x398>
 800597e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005982:	eba2 0903 	sub.w	r9, r2, r3
 8005986:	9b05      	ldr	r3, [sp, #20]
 8005988:	1ad2      	subs	r2, r2, r3
 800598a:	4591      	cmp	r9, r2
 800598c:	bfa8      	it	ge
 800598e:	4691      	movge	r9, r2
 8005990:	f1b9 0f00 	cmp.w	r9, #0
 8005994:	dc35      	bgt.n	8005a02 <_printf_float+0x3aa>
 8005996:	f04f 0800 	mov.w	r8, #0
 800599a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800599e:	f104 0a1a 	add.w	sl, r4, #26
 80059a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80059a6:	1a9b      	subs	r3, r3, r2
 80059a8:	eba3 0309 	sub.w	r3, r3, r9
 80059ac:	4543      	cmp	r3, r8
 80059ae:	f77f af79 	ble.w	80058a4 <_printf_float+0x24c>
 80059b2:	2301      	movs	r3, #1
 80059b4:	4652      	mov	r2, sl
 80059b6:	4631      	mov	r1, r6
 80059b8:	4628      	mov	r0, r5
 80059ba:	47b8      	blx	r7
 80059bc:	3001      	adds	r0, #1
 80059be:	f43f aeaa 	beq.w	8005716 <_printf_float+0xbe>
 80059c2:	f108 0801 	add.w	r8, r8, #1
 80059c6:	e7ec      	b.n	80059a2 <_printf_float+0x34a>
 80059c8:	4613      	mov	r3, r2
 80059ca:	4631      	mov	r1, r6
 80059cc:	4642      	mov	r2, r8
 80059ce:	4628      	mov	r0, r5
 80059d0:	47b8      	blx	r7
 80059d2:	3001      	adds	r0, #1
 80059d4:	d1c0      	bne.n	8005958 <_printf_float+0x300>
 80059d6:	e69e      	b.n	8005716 <_printf_float+0xbe>
 80059d8:	2301      	movs	r3, #1
 80059da:	4631      	mov	r1, r6
 80059dc:	4628      	mov	r0, r5
 80059de:	9205      	str	r2, [sp, #20]
 80059e0:	47b8      	blx	r7
 80059e2:	3001      	adds	r0, #1
 80059e4:	f43f ae97 	beq.w	8005716 <_printf_float+0xbe>
 80059e8:	9a05      	ldr	r2, [sp, #20]
 80059ea:	f10b 0b01 	add.w	fp, fp, #1
 80059ee:	e7b9      	b.n	8005964 <_printf_float+0x30c>
 80059f0:	ee18 3a10 	vmov	r3, s16
 80059f4:	4652      	mov	r2, sl
 80059f6:	4631      	mov	r1, r6
 80059f8:	4628      	mov	r0, r5
 80059fa:	47b8      	blx	r7
 80059fc:	3001      	adds	r0, #1
 80059fe:	d1be      	bne.n	800597e <_printf_float+0x326>
 8005a00:	e689      	b.n	8005716 <_printf_float+0xbe>
 8005a02:	9a05      	ldr	r2, [sp, #20]
 8005a04:	464b      	mov	r3, r9
 8005a06:	4442      	add	r2, r8
 8005a08:	4631      	mov	r1, r6
 8005a0a:	4628      	mov	r0, r5
 8005a0c:	47b8      	blx	r7
 8005a0e:	3001      	adds	r0, #1
 8005a10:	d1c1      	bne.n	8005996 <_printf_float+0x33e>
 8005a12:	e680      	b.n	8005716 <_printf_float+0xbe>
 8005a14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a16:	2a01      	cmp	r2, #1
 8005a18:	dc01      	bgt.n	8005a1e <_printf_float+0x3c6>
 8005a1a:	07db      	lsls	r3, r3, #31
 8005a1c:	d53a      	bpl.n	8005a94 <_printf_float+0x43c>
 8005a1e:	2301      	movs	r3, #1
 8005a20:	4642      	mov	r2, r8
 8005a22:	4631      	mov	r1, r6
 8005a24:	4628      	mov	r0, r5
 8005a26:	47b8      	blx	r7
 8005a28:	3001      	adds	r0, #1
 8005a2a:	f43f ae74 	beq.w	8005716 <_printf_float+0xbe>
 8005a2e:	ee18 3a10 	vmov	r3, s16
 8005a32:	4652      	mov	r2, sl
 8005a34:	4631      	mov	r1, r6
 8005a36:	4628      	mov	r0, r5
 8005a38:	47b8      	blx	r7
 8005a3a:	3001      	adds	r0, #1
 8005a3c:	f43f ae6b 	beq.w	8005716 <_printf_float+0xbe>
 8005a40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005a44:	2200      	movs	r2, #0
 8005a46:	2300      	movs	r3, #0
 8005a48:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005a4c:	f7fb f844 	bl	8000ad8 <__aeabi_dcmpeq>
 8005a50:	b9d8      	cbnz	r0, 8005a8a <_printf_float+0x432>
 8005a52:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005a56:	f108 0201 	add.w	r2, r8, #1
 8005a5a:	4631      	mov	r1, r6
 8005a5c:	4628      	mov	r0, r5
 8005a5e:	47b8      	blx	r7
 8005a60:	3001      	adds	r0, #1
 8005a62:	d10e      	bne.n	8005a82 <_printf_float+0x42a>
 8005a64:	e657      	b.n	8005716 <_printf_float+0xbe>
 8005a66:	2301      	movs	r3, #1
 8005a68:	4652      	mov	r2, sl
 8005a6a:	4631      	mov	r1, r6
 8005a6c:	4628      	mov	r0, r5
 8005a6e:	47b8      	blx	r7
 8005a70:	3001      	adds	r0, #1
 8005a72:	f43f ae50 	beq.w	8005716 <_printf_float+0xbe>
 8005a76:	f108 0801 	add.w	r8, r8, #1
 8005a7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a7c:	3b01      	subs	r3, #1
 8005a7e:	4543      	cmp	r3, r8
 8005a80:	dcf1      	bgt.n	8005a66 <_printf_float+0x40e>
 8005a82:	464b      	mov	r3, r9
 8005a84:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005a88:	e6da      	b.n	8005840 <_printf_float+0x1e8>
 8005a8a:	f04f 0800 	mov.w	r8, #0
 8005a8e:	f104 0a1a 	add.w	sl, r4, #26
 8005a92:	e7f2      	b.n	8005a7a <_printf_float+0x422>
 8005a94:	2301      	movs	r3, #1
 8005a96:	4642      	mov	r2, r8
 8005a98:	e7df      	b.n	8005a5a <_printf_float+0x402>
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	464a      	mov	r2, r9
 8005a9e:	4631      	mov	r1, r6
 8005aa0:	4628      	mov	r0, r5
 8005aa2:	47b8      	blx	r7
 8005aa4:	3001      	adds	r0, #1
 8005aa6:	f43f ae36 	beq.w	8005716 <_printf_float+0xbe>
 8005aaa:	f108 0801 	add.w	r8, r8, #1
 8005aae:	68e3      	ldr	r3, [r4, #12]
 8005ab0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005ab2:	1a5b      	subs	r3, r3, r1
 8005ab4:	4543      	cmp	r3, r8
 8005ab6:	dcf0      	bgt.n	8005a9a <_printf_float+0x442>
 8005ab8:	e6f8      	b.n	80058ac <_printf_float+0x254>
 8005aba:	f04f 0800 	mov.w	r8, #0
 8005abe:	f104 0919 	add.w	r9, r4, #25
 8005ac2:	e7f4      	b.n	8005aae <_printf_float+0x456>

08005ac4 <_printf_common>:
 8005ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ac8:	4616      	mov	r6, r2
 8005aca:	4699      	mov	r9, r3
 8005acc:	688a      	ldr	r2, [r1, #8]
 8005ace:	690b      	ldr	r3, [r1, #16]
 8005ad0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	bfb8      	it	lt
 8005ad8:	4613      	movlt	r3, r2
 8005ada:	6033      	str	r3, [r6, #0]
 8005adc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ae0:	4607      	mov	r7, r0
 8005ae2:	460c      	mov	r4, r1
 8005ae4:	b10a      	cbz	r2, 8005aea <_printf_common+0x26>
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	6033      	str	r3, [r6, #0]
 8005aea:	6823      	ldr	r3, [r4, #0]
 8005aec:	0699      	lsls	r1, r3, #26
 8005aee:	bf42      	ittt	mi
 8005af0:	6833      	ldrmi	r3, [r6, #0]
 8005af2:	3302      	addmi	r3, #2
 8005af4:	6033      	strmi	r3, [r6, #0]
 8005af6:	6825      	ldr	r5, [r4, #0]
 8005af8:	f015 0506 	ands.w	r5, r5, #6
 8005afc:	d106      	bne.n	8005b0c <_printf_common+0x48>
 8005afe:	f104 0a19 	add.w	sl, r4, #25
 8005b02:	68e3      	ldr	r3, [r4, #12]
 8005b04:	6832      	ldr	r2, [r6, #0]
 8005b06:	1a9b      	subs	r3, r3, r2
 8005b08:	42ab      	cmp	r3, r5
 8005b0a:	dc26      	bgt.n	8005b5a <_printf_common+0x96>
 8005b0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005b10:	1e13      	subs	r3, r2, #0
 8005b12:	6822      	ldr	r2, [r4, #0]
 8005b14:	bf18      	it	ne
 8005b16:	2301      	movne	r3, #1
 8005b18:	0692      	lsls	r2, r2, #26
 8005b1a:	d42b      	bmi.n	8005b74 <_printf_common+0xb0>
 8005b1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b20:	4649      	mov	r1, r9
 8005b22:	4638      	mov	r0, r7
 8005b24:	47c0      	blx	r8
 8005b26:	3001      	adds	r0, #1
 8005b28:	d01e      	beq.n	8005b68 <_printf_common+0xa4>
 8005b2a:	6823      	ldr	r3, [r4, #0]
 8005b2c:	6922      	ldr	r2, [r4, #16]
 8005b2e:	f003 0306 	and.w	r3, r3, #6
 8005b32:	2b04      	cmp	r3, #4
 8005b34:	bf02      	ittt	eq
 8005b36:	68e5      	ldreq	r5, [r4, #12]
 8005b38:	6833      	ldreq	r3, [r6, #0]
 8005b3a:	1aed      	subeq	r5, r5, r3
 8005b3c:	68a3      	ldr	r3, [r4, #8]
 8005b3e:	bf0c      	ite	eq
 8005b40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b44:	2500      	movne	r5, #0
 8005b46:	4293      	cmp	r3, r2
 8005b48:	bfc4      	itt	gt
 8005b4a:	1a9b      	subgt	r3, r3, r2
 8005b4c:	18ed      	addgt	r5, r5, r3
 8005b4e:	2600      	movs	r6, #0
 8005b50:	341a      	adds	r4, #26
 8005b52:	42b5      	cmp	r5, r6
 8005b54:	d11a      	bne.n	8005b8c <_printf_common+0xc8>
 8005b56:	2000      	movs	r0, #0
 8005b58:	e008      	b.n	8005b6c <_printf_common+0xa8>
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	4652      	mov	r2, sl
 8005b5e:	4649      	mov	r1, r9
 8005b60:	4638      	mov	r0, r7
 8005b62:	47c0      	blx	r8
 8005b64:	3001      	adds	r0, #1
 8005b66:	d103      	bne.n	8005b70 <_printf_common+0xac>
 8005b68:	f04f 30ff 	mov.w	r0, #4294967295
 8005b6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b70:	3501      	adds	r5, #1
 8005b72:	e7c6      	b.n	8005b02 <_printf_common+0x3e>
 8005b74:	18e1      	adds	r1, r4, r3
 8005b76:	1c5a      	adds	r2, r3, #1
 8005b78:	2030      	movs	r0, #48	; 0x30
 8005b7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b7e:	4422      	add	r2, r4
 8005b80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b88:	3302      	adds	r3, #2
 8005b8a:	e7c7      	b.n	8005b1c <_printf_common+0x58>
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	4622      	mov	r2, r4
 8005b90:	4649      	mov	r1, r9
 8005b92:	4638      	mov	r0, r7
 8005b94:	47c0      	blx	r8
 8005b96:	3001      	adds	r0, #1
 8005b98:	d0e6      	beq.n	8005b68 <_printf_common+0xa4>
 8005b9a:	3601      	adds	r6, #1
 8005b9c:	e7d9      	b.n	8005b52 <_printf_common+0x8e>
	...

08005ba0 <_printf_i>:
 8005ba0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ba4:	7e0f      	ldrb	r7, [r1, #24]
 8005ba6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ba8:	2f78      	cmp	r7, #120	; 0x78
 8005baa:	4691      	mov	r9, r2
 8005bac:	4680      	mov	r8, r0
 8005bae:	460c      	mov	r4, r1
 8005bb0:	469a      	mov	sl, r3
 8005bb2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005bb6:	d807      	bhi.n	8005bc8 <_printf_i+0x28>
 8005bb8:	2f62      	cmp	r7, #98	; 0x62
 8005bba:	d80a      	bhi.n	8005bd2 <_printf_i+0x32>
 8005bbc:	2f00      	cmp	r7, #0
 8005bbe:	f000 80d4 	beq.w	8005d6a <_printf_i+0x1ca>
 8005bc2:	2f58      	cmp	r7, #88	; 0x58
 8005bc4:	f000 80c0 	beq.w	8005d48 <_printf_i+0x1a8>
 8005bc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005bcc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005bd0:	e03a      	b.n	8005c48 <_printf_i+0xa8>
 8005bd2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005bd6:	2b15      	cmp	r3, #21
 8005bd8:	d8f6      	bhi.n	8005bc8 <_printf_i+0x28>
 8005bda:	a101      	add	r1, pc, #4	; (adr r1, 8005be0 <_printf_i+0x40>)
 8005bdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005be0:	08005c39 	.word	0x08005c39
 8005be4:	08005c4d 	.word	0x08005c4d
 8005be8:	08005bc9 	.word	0x08005bc9
 8005bec:	08005bc9 	.word	0x08005bc9
 8005bf0:	08005bc9 	.word	0x08005bc9
 8005bf4:	08005bc9 	.word	0x08005bc9
 8005bf8:	08005c4d 	.word	0x08005c4d
 8005bfc:	08005bc9 	.word	0x08005bc9
 8005c00:	08005bc9 	.word	0x08005bc9
 8005c04:	08005bc9 	.word	0x08005bc9
 8005c08:	08005bc9 	.word	0x08005bc9
 8005c0c:	08005d51 	.word	0x08005d51
 8005c10:	08005c79 	.word	0x08005c79
 8005c14:	08005d0b 	.word	0x08005d0b
 8005c18:	08005bc9 	.word	0x08005bc9
 8005c1c:	08005bc9 	.word	0x08005bc9
 8005c20:	08005d73 	.word	0x08005d73
 8005c24:	08005bc9 	.word	0x08005bc9
 8005c28:	08005c79 	.word	0x08005c79
 8005c2c:	08005bc9 	.word	0x08005bc9
 8005c30:	08005bc9 	.word	0x08005bc9
 8005c34:	08005d13 	.word	0x08005d13
 8005c38:	682b      	ldr	r3, [r5, #0]
 8005c3a:	1d1a      	adds	r2, r3, #4
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	602a      	str	r2, [r5, #0]
 8005c40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e09f      	b.n	8005d8c <_printf_i+0x1ec>
 8005c4c:	6820      	ldr	r0, [r4, #0]
 8005c4e:	682b      	ldr	r3, [r5, #0]
 8005c50:	0607      	lsls	r7, r0, #24
 8005c52:	f103 0104 	add.w	r1, r3, #4
 8005c56:	6029      	str	r1, [r5, #0]
 8005c58:	d501      	bpl.n	8005c5e <_printf_i+0xbe>
 8005c5a:	681e      	ldr	r6, [r3, #0]
 8005c5c:	e003      	b.n	8005c66 <_printf_i+0xc6>
 8005c5e:	0646      	lsls	r6, r0, #25
 8005c60:	d5fb      	bpl.n	8005c5a <_printf_i+0xba>
 8005c62:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005c66:	2e00      	cmp	r6, #0
 8005c68:	da03      	bge.n	8005c72 <_printf_i+0xd2>
 8005c6a:	232d      	movs	r3, #45	; 0x2d
 8005c6c:	4276      	negs	r6, r6
 8005c6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c72:	485a      	ldr	r0, [pc, #360]	; (8005ddc <_printf_i+0x23c>)
 8005c74:	230a      	movs	r3, #10
 8005c76:	e012      	b.n	8005c9e <_printf_i+0xfe>
 8005c78:	682b      	ldr	r3, [r5, #0]
 8005c7a:	6820      	ldr	r0, [r4, #0]
 8005c7c:	1d19      	adds	r1, r3, #4
 8005c7e:	6029      	str	r1, [r5, #0]
 8005c80:	0605      	lsls	r5, r0, #24
 8005c82:	d501      	bpl.n	8005c88 <_printf_i+0xe8>
 8005c84:	681e      	ldr	r6, [r3, #0]
 8005c86:	e002      	b.n	8005c8e <_printf_i+0xee>
 8005c88:	0641      	lsls	r1, r0, #25
 8005c8a:	d5fb      	bpl.n	8005c84 <_printf_i+0xe4>
 8005c8c:	881e      	ldrh	r6, [r3, #0]
 8005c8e:	4853      	ldr	r0, [pc, #332]	; (8005ddc <_printf_i+0x23c>)
 8005c90:	2f6f      	cmp	r7, #111	; 0x6f
 8005c92:	bf0c      	ite	eq
 8005c94:	2308      	moveq	r3, #8
 8005c96:	230a      	movne	r3, #10
 8005c98:	2100      	movs	r1, #0
 8005c9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c9e:	6865      	ldr	r5, [r4, #4]
 8005ca0:	60a5      	str	r5, [r4, #8]
 8005ca2:	2d00      	cmp	r5, #0
 8005ca4:	bfa2      	ittt	ge
 8005ca6:	6821      	ldrge	r1, [r4, #0]
 8005ca8:	f021 0104 	bicge.w	r1, r1, #4
 8005cac:	6021      	strge	r1, [r4, #0]
 8005cae:	b90e      	cbnz	r6, 8005cb4 <_printf_i+0x114>
 8005cb0:	2d00      	cmp	r5, #0
 8005cb2:	d04b      	beq.n	8005d4c <_printf_i+0x1ac>
 8005cb4:	4615      	mov	r5, r2
 8005cb6:	fbb6 f1f3 	udiv	r1, r6, r3
 8005cba:	fb03 6711 	mls	r7, r3, r1, r6
 8005cbe:	5dc7      	ldrb	r7, [r0, r7]
 8005cc0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005cc4:	4637      	mov	r7, r6
 8005cc6:	42bb      	cmp	r3, r7
 8005cc8:	460e      	mov	r6, r1
 8005cca:	d9f4      	bls.n	8005cb6 <_printf_i+0x116>
 8005ccc:	2b08      	cmp	r3, #8
 8005cce:	d10b      	bne.n	8005ce8 <_printf_i+0x148>
 8005cd0:	6823      	ldr	r3, [r4, #0]
 8005cd2:	07de      	lsls	r6, r3, #31
 8005cd4:	d508      	bpl.n	8005ce8 <_printf_i+0x148>
 8005cd6:	6923      	ldr	r3, [r4, #16]
 8005cd8:	6861      	ldr	r1, [r4, #4]
 8005cda:	4299      	cmp	r1, r3
 8005cdc:	bfde      	ittt	le
 8005cde:	2330      	movle	r3, #48	; 0x30
 8005ce0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005ce4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005ce8:	1b52      	subs	r2, r2, r5
 8005cea:	6122      	str	r2, [r4, #16]
 8005cec:	f8cd a000 	str.w	sl, [sp]
 8005cf0:	464b      	mov	r3, r9
 8005cf2:	aa03      	add	r2, sp, #12
 8005cf4:	4621      	mov	r1, r4
 8005cf6:	4640      	mov	r0, r8
 8005cf8:	f7ff fee4 	bl	8005ac4 <_printf_common>
 8005cfc:	3001      	adds	r0, #1
 8005cfe:	d14a      	bne.n	8005d96 <_printf_i+0x1f6>
 8005d00:	f04f 30ff 	mov.w	r0, #4294967295
 8005d04:	b004      	add	sp, #16
 8005d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d0a:	6823      	ldr	r3, [r4, #0]
 8005d0c:	f043 0320 	orr.w	r3, r3, #32
 8005d10:	6023      	str	r3, [r4, #0]
 8005d12:	4833      	ldr	r0, [pc, #204]	; (8005de0 <_printf_i+0x240>)
 8005d14:	2778      	movs	r7, #120	; 0x78
 8005d16:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005d1a:	6823      	ldr	r3, [r4, #0]
 8005d1c:	6829      	ldr	r1, [r5, #0]
 8005d1e:	061f      	lsls	r7, r3, #24
 8005d20:	f851 6b04 	ldr.w	r6, [r1], #4
 8005d24:	d402      	bmi.n	8005d2c <_printf_i+0x18c>
 8005d26:	065f      	lsls	r7, r3, #25
 8005d28:	bf48      	it	mi
 8005d2a:	b2b6      	uxthmi	r6, r6
 8005d2c:	07df      	lsls	r7, r3, #31
 8005d2e:	bf48      	it	mi
 8005d30:	f043 0320 	orrmi.w	r3, r3, #32
 8005d34:	6029      	str	r1, [r5, #0]
 8005d36:	bf48      	it	mi
 8005d38:	6023      	strmi	r3, [r4, #0]
 8005d3a:	b91e      	cbnz	r6, 8005d44 <_printf_i+0x1a4>
 8005d3c:	6823      	ldr	r3, [r4, #0]
 8005d3e:	f023 0320 	bic.w	r3, r3, #32
 8005d42:	6023      	str	r3, [r4, #0]
 8005d44:	2310      	movs	r3, #16
 8005d46:	e7a7      	b.n	8005c98 <_printf_i+0xf8>
 8005d48:	4824      	ldr	r0, [pc, #144]	; (8005ddc <_printf_i+0x23c>)
 8005d4a:	e7e4      	b.n	8005d16 <_printf_i+0x176>
 8005d4c:	4615      	mov	r5, r2
 8005d4e:	e7bd      	b.n	8005ccc <_printf_i+0x12c>
 8005d50:	682b      	ldr	r3, [r5, #0]
 8005d52:	6826      	ldr	r6, [r4, #0]
 8005d54:	6961      	ldr	r1, [r4, #20]
 8005d56:	1d18      	adds	r0, r3, #4
 8005d58:	6028      	str	r0, [r5, #0]
 8005d5a:	0635      	lsls	r5, r6, #24
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	d501      	bpl.n	8005d64 <_printf_i+0x1c4>
 8005d60:	6019      	str	r1, [r3, #0]
 8005d62:	e002      	b.n	8005d6a <_printf_i+0x1ca>
 8005d64:	0670      	lsls	r0, r6, #25
 8005d66:	d5fb      	bpl.n	8005d60 <_printf_i+0x1c0>
 8005d68:	8019      	strh	r1, [r3, #0]
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	6123      	str	r3, [r4, #16]
 8005d6e:	4615      	mov	r5, r2
 8005d70:	e7bc      	b.n	8005cec <_printf_i+0x14c>
 8005d72:	682b      	ldr	r3, [r5, #0]
 8005d74:	1d1a      	adds	r2, r3, #4
 8005d76:	602a      	str	r2, [r5, #0]
 8005d78:	681d      	ldr	r5, [r3, #0]
 8005d7a:	6862      	ldr	r2, [r4, #4]
 8005d7c:	2100      	movs	r1, #0
 8005d7e:	4628      	mov	r0, r5
 8005d80:	f7fa fa2e 	bl	80001e0 <memchr>
 8005d84:	b108      	cbz	r0, 8005d8a <_printf_i+0x1ea>
 8005d86:	1b40      	subs	r0, r0, r5
 8005d88:	6060      	str	r0, [r4, #4]
 8005d8a:	6863      	ldr	r3, [r4, #4]
 8005d8c:	6123      	str	r3, [r4, #16]
 8005d8e:	2300      	movs	r3, #0
 8005d90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d94:	e7aa      	b.n	8005cec <_printf_i+0x14c>
 8005d96:	6923      	ldr	r3, [r4, #16]
 8005d98:	462a      	mov	r2, r5
 8005d9a:	4649      	mov	r1, r9
 8005d9c:	4640      	mov	r0, r8
 8005d9e:	47d0      	blx	sl
 8005da0:	3001      	adds	r0, #1
 8005da2:	d0ad      	beq.n	8005d00 <_printf_i+0x160>
 8005da4:	6823      	ldr	r3, [r4, #0]
 8005da6:	079b      	lsls	r3, r3, #30
 8005da8:	d413      	bmi.n	8005dd2 <_printf_i+0x232>
 8005daa:	68e0      	ldr	r0, [r4, #12]
 8005dac:	9b03      	ldr	r3, [sp, #12]
 8005dae:	4298      	cmp	r0, r3
 8005db0:	bfb8      	it	lt
 8005db2:	4618      	movlt	r0, r3
 8005db4:	e7a6      	b.n	8005d04 <_printf_i+0x164>
 8005db6:	2301      	movs	r3, #1
 8005db8:	4632      	mov	r2, r6
 8005dba:	4649      	mov	r1, r9
 8005dbc:	4640      	mov	r0, r8
 8005dbe:	47d0      	blx	sl
 8005dc0:	3001      	adds	r0, #1
 8005dc2:	d09d      	beq.n	8005d00 <_printf_i+0x160>
 8005dc4:	3501      	adds	r5, #1
 8005dc6:	68e3      	ldr	r3, [r4, #12]
 8005dc8:	9903      	ldr	r1, [sp, #12]
 8005dca:	1a5b      	subs	r3, r3, r1
 8005dcc:	42ab      	cmp	r3, r5
 8005dce:	dcf2      	bgt.n	8005db6 <_printf_i+0x216>
 8005dd0:	e7eb      	b.n	8005daa <_printf_i+0x20a>
 8005dd2:	2500      	movs	r5, #0
 8005dd4:	f104 0619 	add.w	r6, r4, #25
 8005dd8:	e7f5      	b.n	8005dc6 <_printf_i+0x226>
 8005dda:	bf00      	nop
 8005ddc:	080085a9 	.word	0x080085a9
 8005de0:	080085ba 	.word	0x080085ba

08005de4 <std>:
 8005de4:	2300      	movs	r3, #0
 8005de6:	b510      	push	{r4, lr}
 8005de8:	4604      	mov	r4, r0
 8005dea:	e9c0 3300 	strd	r3, r3, [r0]
 8005dee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005df2:	6083      	str	r3, [r0, #8]
 8005df4:	8181      	strh	r1, [r0, #12]
 8005df6:	6643      	str	r3, [r0, #100]	; 0x64
 8005df8:	81c2      	strh	r2, [r0, #14]
 8005dfa:	6183      	str	r3, [r0, #24]
 8005dfc:	4619      	mov	r1, r3
 8005dfe:	2208      	movs	r2, #8
 8005e00:	305c      	adds	r0, #92	; 0x5c
 8005e02:	f000 f9e5 	bl	80061d0 <memset>
 8005e06:	4b05      	ldr	r3, [pc, #20]	; (8005e1c <std+0x38>)
 8005e08:	6263      	str	r3, [r4, #36]	; 0x24
 8005e0a:	4b05      	ldr	r3, [pc, #20]	; (8005e20 <std+0x3c>)
 8005e0c:	62a3      	str	r3, [r4, #40]	; 0x28
 8005e0e:	4b05      	ldr	r3, [pc, #20]	; (8005e24 <std+0x40>)
 8005e10:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005e12:	4b05      	ldr	r3, [pc, #20]	; (8005e28 <std+0x44>)
 8005e14:	6224      	str	r4, [r4, #32]
 8005e16:	6323      	str	r3, [r4, #48]	; 0x30
 8005e18:	bd10      	pop	{r4, pc}
 8005e1a:	bf00      	nop
 8005e1c:	08006021 	.word	0x08006021
 8005e20:	08006043 	.word	0x08006043
 8005e24:	0800607b 	.word	0x0800607b
 8005e28:	0800609f 	.word	0x0800609f

08005e2c <stdio_exit_handler>:
 8005e2c:	4a02      	ldr	r2, [pc, #8]	; (8005e38 <stdio_exit_handler+0xc>)
 8005e2e:	4903      	ldr	r1, [pc, #12]	; (8005e3c <stdio_exit_handler+0x10>)
 8005e30:	4803      	ldr	r0, [pc, #12]	; (8005e40 <stdio_exit_handler+0x14>)
 8005e32:	f000 b869 	b.w	8005f08 <_fwalk_sglue>
 8005e36:	bf00      	nop
 8005e38:	2000000c 	.word	0x2000000c
 8005e3c:	08007c51 	.word	0x08007c51
 8005e40:	20000018 	.word	0x20000018

08005e44 <cleanup_stdio>:
 8005e44:	6841      	ldr	r1, [r0, #4]
 8005e46:	4b0c      	ldr	r3, [pc, #48]	; (8005e78 <cleanup_stdio+0x34>)
 8005e48:	4299      	cmp	r1, r3
 8005e4a:	b510      	push	{r4, lr}
 8005e4c:	4604      	mov	r4, r0
 8005e4e:	d001      	beq.n	8005e54 <cleanup_stdio+0x10>
 8005e50:	f001 fefe 	bl	8007c50 <_fflush_r>
 8005e54:	68a1      	ldr	r1, [r4, #8]
 8005e56:	4b09      	ldr	r3, [pc, #36]	; (8005e7c <cleanup_stdio+0x38>)
 8005e58:	4299      	cmp	r1, r3
 8005e5a:	d002      	beq.n	8005e62 <cleanup_stdio+0x1e>
 8005e5c:	4620      	mov	r0, r4
 8005e5e:	f001 fef7 	bl	8007c50 <_fflush_r>
 8005e62:	68e1      	ldr	r1, [r4, #12]
 8005e64:	4b06      	ldr	r3, [pc, #24]	; (8005e80 <cleanup_stdio+0x3c>)
 8005e66:	4299      	cmp	r1, r3
 8005e68:	d004      	beq.n	8005e74 <cleanup_stdio+0x30>
 8005e6a:	4620      	mov	r0, r4
 8005e6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e70:	f001 beee 	b.w	8007c50 <_fflush_r>
 8005e74:	bd10      	pop	{r4, pc}
 8005e76:	bf00      	nop
 8005e78:	200002cc 	.word	0x200002cc
 8005e7c:	20000334 	.word	0x20000334
 8005e80:	2000039c 	.word	0x2000039c

08005e84 <global_stdio_init.part.0>:
 8005e84:	b510      	push	{r4, lr}
 8005e86:	4b0b      	ldr	r3, [pc, #44]	; (8005eb4 <global_stdio_init.part.0+0x30>)
 8005e88:	4c0b      	ldr	r4, [pc, #44]	; (8005eb8 <global_stdio_init.part.0+0x34>)
 8005e8a:	4a0c      	ldr	r2, [pc, #48]	; (8005ebc <global_stdio_init.part.0+0x38>)
 8005e8c:	601a      	str	r2, [r3, #0]
 8005e8e:	4620      	mov	r0, r4
 8005e90:	2200      	movs	r2, #0
 8005e92:	2104      	movs	r1, #4
 8005e94:	f7ff ffa6 	bl	8005de4 <std>
 8005e98:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	2109      	movs	r1, #9
 8005ea0:	f7ff ffa0 	bl	8005de4 <std>
 8005ea4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005ea8:	2202      	movs	r2, #2
 8005eaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005eae:	2112      	movs	r1, #18
 8005eb0:	f7ff bf98 	b.w	8005de4 <std>
 8005eb4:	20000404 	.word	0x20000404
 8005eb8:	200002cc 	.word	0x200002cc
 8005ebc:	08005e2d 	.word	0x08005e2d

08005ec0 <__sfp_lock_acquire>:
 8005ec0:	4801      	ldr	r0, [pc, #4]	; (8005ec8 <__sfp_lock_acquire+0x8>)
 8005ec2:	f000 ba01 	b.w	80062c8 <__retarget_lock_acquire_recursive>
 8005ec6:	bf00      	nop
 8005ec8:	2000040d 	.word	0x2000040d

08005ecc <__sfp_lock_release>:
 8005ecc:	4801      	ldr	r0, [pc, #4]	; (8005ed4 <__sfp_lock_release+0x8>)
 8005ece:	f000 b9fc 	b.w	80062ca <__retarget_lock_release_recursive>
 8005ed2:	bf00      	nop
 8005ed4:	2000040d 	.word	0x2000040d

08005ed8 <__sinit>:
 8005ed8:	b510      	push	{r4, lr}
 8005eda:	4604      	mov	r4, r0
 8005edc:	f7ff fff0 	bl	8005ec0 <__sfp_lock_acquire>
 8005ee0:	6a23      	ldr	r3, [r4, #32]
 8005ee2:	b11b      	cbz	r3, 8005eec <__sinit+0x14>
 8005ee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ee8:	f7ff bff0 	b.w	8005ecc <__sfp_lock_release>
 8005eec:	4b04      	ldr	r3, [pc, #16]	; (8005f00 <__sinit+0x28>)
 8005eee:	6223      	str	r3, [r4, #32]
 8005ef0:	4b04      	ldr	r3, [pc, #16]	; (8005f04 <__sinit+0x2c>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d1f5      	bne.n	8005ee4 <__sinit+0xc>
 8005ef8:	f7ff ffc4 	bl	8005e84 <global_stdio_init.part.0>
 8005efc:	e7f2      	b.n	8005ee4 <__sinit+0xc>
 8005efe:	bf00      	nop
 8005f00:	08005e45 	.word	0x08005e45
 8005f04:	20000404 	.word	0x20000404

08005f08 <_fwalk_sglue>:
 8005f08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f0c:	4607      	mov	r7, r0
 8005f0e:	4688      	mov	r8, r1
 8005f10:	4614      	mov	r4, r2
 8005f12:	2600      	movs	r6, #0
 8005f14:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005f18:	f1b9 0901 	subs.w	r9, r9, #1
 8005f1c:	d505      	bpl.n	8005f2a <_fwalk_sglue+0x22>
 8005f1e:	6824      	ldr	r4, [r4, #0]
 8005f20:	2c00      	cmp	r4, #0
 8005f22:	d1f7      	bne.n	8005f14 <_fwalk_sglue+0xc>
 8005f24:	4630      	mov	r0, r6
 8005f26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f2a:	89ab      	ldrh	r3, [r5, #12]
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d907      	bls.n	8005f40 <_fwalk_sglue+0x38>
 8005f30:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005f34:	3301      	adds	r3, #1
 8005f36:	d003      	beq.n	8005f40 <_fwalk_sglue+0x38>
 8005f38:	4629      	mov	r1, r5
 8005f3a:	4638      	mov	r0, r7
 8005f3c:	47c0      	blx	r8
 8005f3e:	4306      	orrs	r6, r0
 8005f40:	3568      	adds	r5, #104	; 0x68
 8005f42:	e7e9      	b.n	8005f18 <_fwalk_sglue+0x10>

08005f44 <iprintf>:
 8005f44:	b40f      	push	{r0, r1, r2, r3}
 8005f46:	b507      	push	{r0, r1, r2, lr}
 8005f48:	4906      	ldr	r1, [pc, #24]	; (8005f64 <iprintf+0x20>)
 8005f4a:	ab04      	add	r3, sp, #16
 8005f4c:	6808      	ldr	r0, [r1, #0]
 8005f4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f52:	6881      	ldr	r1, [r0, #8]
 8005f54:	9301      	str	r3, [sp, #4]
 8005f56:	f001 fcdb 	bl	8007910 <_vfiprintf_r>
 8005f5a:	b003      	add	sp, #12
 8005f5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f60:	b004      	add	sp, #16
 8005f62:	4770      	bx	lr
 8005f64:	20000064 	.word	0x20000064

08005f68 <_puts_r>:
 8005f68:	6a03      	ldr	r3, [r0, #32]
 8005f6a:	b570      	push	{r4, r5, r6, lr}
 8005f6c:	6884      	ldr	r4, [r0, #8]
 8005f6e:	4605      	mov	r5, r0
 8005f70:	460e      	mov	r6, r1
 8005f72:	b90b      	cbnz	r3, 8005f78 <_puts_r+0x10>
 8005f74:	f7ff ffb0 	bl	8005ed8 <__sinit>
 8005f78:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f7a:	07db      	lsls	r3, r3, #31
 8005f7c:	d405      	bmi.n	8005f8a <_puts_r+0x22>
 8005f7e:	89a3      	ldrh	r3, [r4, #12]
 8005f80:	0598      	lsls	r0, r3, #22
 8005f82:	d402      	bmi.n	8005f8a <_puts_r+0x22>
 8005f84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f86:	f000 f99f 	bl	80062c8 <__retarget_lock_acquire_recursive>
 8005f8a:	89a3      	ldrh	r3, [r4, #12]
 8005f8c:	0719      	lsls	r1, r3, #28
 8005f8e:	d513      	bpl.n	8005fb8 <_puts_r+0x50>
 8005f90:	6923      	ldr	r3, [r4, #16]
 8005f92:	b18b      	cbz	r3, 8005fb8 <_puts_r+0x50>
 8005f94:	3e01      	subs	r6, #1
 8005f96:	68a3      	ldr	r3, [r4, #8]
 8005f98:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005f9c:	3b01      	subs	r3, #1
 8005f9e:	60a3      	str	r3, [r4, #8]
 8005fa0:	b9e9      	cbnz	r1, 8005fde <_puts_r+0x76>
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	da2e      	bge.n	8006004 <_puts_r+0x9c>
 8005fa6:	4622      	mov	r2, r4
 8005fa8:	210a      	movs	r1, #10
 8005faa:	4628      	mov	r0, r5
 8005fac:	f000 f87b 	bl	80060a6 <__swbuf_r>
 8005fb0:	3001      	adds	r0, #1
 8005fb2:	d007      	beq.n	8005fc4 <_puts_r+0x5c>
 8005fb4:	250a      	movs	r5, #10
 8005fb6:	e007      	b.n	8005fc8 <_puts_r+0x60>
 8005fb8:	4621      	mov	r1, r4
 8005fba:	4628      	mov	r0, r5
 8005fbc:	f000 f8b0 	bl	8006120 <__swsetup_r>
 8005fc0:	2800      	cmp	r0, #0
 8005fc2:	d0e7      	beq.n	8005f94 <_puts_r+0x2c>
 8005fc4:	f04f 35ff 	mov.w	r5, #4294967295
 8005fc8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005fca:	07da      	lsls	r2, r3, #31
 8005fcc:	d405      	bmi.n	8005fda <_puts_r+0x72>
 8005fce:	89a3      	ldrh	r3, [r4, #12]
 8005fd0:	059b      	lsls	r3, r3, #22
 8005fd2:	d402      	bmi.n	8005fda <_puts_r+0x72>
 8005fd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005fd6:	f000 f978 	bl	80062ca <__retarget_lock_release_recursive>
 8005fda:	4628      	mov	r0, r5
 8005fdc:	bd70      	pop	{r4, r5, r6, pc}
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	da04      	bge.n	8005fec <_puts_r+0x84>
 8005fe2:	69a2      	ldr	r2, [r4, #24]
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	dc06      	bgt.n	8005ff6 <_puts_r+0x8e>
 8005fe8:	290a      	cmp	r1, #10
 8005fea:	d004      	beq.n	8005ff6 <_puts_r+0x8e>
 8005fec:	6823      	ldr	r3, [r4, #0]
 8005fee:	1c5a      	adds	r2, r3, #1
 8005ff0:	6022      	str	r2, [r4, #0]
 8005ff2:	7019      	strb	r1, [r3, #0]
 8005ff4:	e7cf      	b.n	8005f96 <_puts_r+0x2e>
 8005ff6:	4622      	mov	r2, r4
 8005ff8:	4628      	mov	r0, r5
 8005ffa:	f000 f854 	bl	80060a6 <__swbuf_r>
 8005ffe:	3001      	adds	r0, #1
 8006000:	d1c9      	bne.n	8005f96 <_puts_r+0x2e>
 8006002:	e7df      	b.n	8005fc4 <_puts_r+0x5c>
 8006004:	6823      	ldr	r3, [r4, #0]
 8006006:	250a      	movs	r5, #10
 8006008:	1c5a      	adds	r2, r3, #1
 800600a:	6022      	str	r2, [r4, #0]
 800600c:	701d      	strb	r5, [r3, #0]
 800600e:	e7db      	b.n	8005fc8 <_puts_r+0x60>

08006010 <puts>:
 8006010:	4b02      	ldr	r3, [pc, #8]	; (800601c <puts+0xc>)
 8006012:	4601      	mov	r1, r0
 8006014:	6818      	ldr	r0, [r3, #0]
 8006016:	f7ff bfa7 	b.w	8005f68 <_puts_r>
 800601a:	bf00      	nop
 800601c:	20000064 	.word	0x20000064

08006020 <__sread>:
 8006020:	b510      	push	{r4, lr}
 8006022:	460c      	mov	r4, r1
 8006024:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006028:	f000 f900 	bl	800622c <_read_r>
 800602c:	2800      	cmp	r0, #0
 800602e:	bfab      	itete	ge
 8006030:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006032:	89a3      	ldrhlt	r3, [r4, #12]
 8006034:	181b      	addge	r3, r3, r0
 8006036:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800603a:	bfac      	ite	ge
 800603c:	6563      	strge	r3, [r4, #84]	; 0x54
 800603e:	81a3      	strhlt	r3, [r4, #12]
 8006040:	bd10      	pop	{r4, pc}

08006042 <__swrite>:
 8006042:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006046:	461f      	mov	r7, r3
 8006048:	898b      	ldrh	r3, [r1, #12]
 800604a:	05db      	lsls	r3, r3, #23
 800604c:	4605      	mov	r5, r0
 800604e:	460c      	mov	r4, r1
 8006050:	4616      	mov	r6, r2
 8006052:	d505      	bpl.n	8006060 <__swrite+0x1e>
 8006054:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006058:	2302      	movs	r3, #2
 800605a:	2200      	movs	r2, #0
 800605c:	f000 f8d4 	bl	8006208 <_lseek_r>
 8006060:	89a3      	ldrh	r3, [r4, #12]
 8006062:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006066:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800606a:	81a3      	strh	r3, [r4, #12]
 800606c:	4632      	mov	r2, r6
 800606e:	463b      	mov	r3, r7
 8006070:	4628      	mov	r0, r5
 8006072:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006076:	f000 b8eb 	b.w	8006250 <_write_r>

0800607a <__sseek>:
 800607a:	b510      	push	{r4, lr}
 800607c:	460c      	mov	r4, r1
 800607e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006082:	f000 f8c1 	bl	8006208 <_lseek_r>
 8006086:	1c43      	adds	r3, r0, #1
 8006088:	89a3      	ldrh	r3, [r4, #12]
 800608a:	bf15      	itete	ne
 800608c:	6560      	strne	r0, [r4, #84]	; 0x54
 800608e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006092:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006096:	81a3      	strheq	r3, [r4, #12]
 8006098:	bf18      	it	ne
 800609a:	81a3      	strhne	r3, [r4, #12]
 800609c:	bd10      	pop	{r4, pc}

0800609e <__sclose>:
 800609e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060a2:	f000 b8a1 	b.w	80061e8 <_close_r>

080060a6 <__swbuf_r>:
 80060a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060a8:	460e      	mov	r6, r1
 80060aa:	4614      	mov	r4, r2
 80060ac:	4605      	mov	r5, r0
 80060ae:	b118      	cbz	r0, 80060b8 <__swbuf_r+0x12>
 80060b0:	6a03      	ldr	r3, [r0, #32]
 80060b2:	b90b      	cbnz	r3, 80060b8 <__swbuf_r+0x12>
 80060b4:	f7ff ff10 	bl	8005ed8 <__sinit>
 80060b8:	69a3      	ldr	r3, [r4, #24]
 80060ba:	60a3      	str	r3, [r4, #8]
 80060bc:	89a3      	ldrh	r3, [r4, #12]
 80060be:	071a      	lsls	r2, r3, #28
 80060c0:	d525      	bpl.n	800610e <__swbuf_r+0x68>
 80060c2:	6923      	ldr	r3, [r4, #16]
 80060c4:	b31b      	cbz	r3, 800610e <__swbuf_r+0x68>
 80060c6:	6823      	ldr	r3, [r4, #0]
 80060c8:	6922      	ldr	r2, [r4, #16]
 80060ca:	1a98      	subs	r0, r3, r2
 80060cc:	6963      	ldr	r3, [r4, #20]
 80060ce:	b2f6      	uxtb	r6, r6
 80060d0:	4283      	cmp	r3, r0
 80060d2:	4637      	mov	r7, r6
 80060d4:	dc04      	bgt.n	80060e0 <__swbuf_r+0x3a>
 80060d6:	4621      	mov	r1, r4
 80060d8:	4628      	mov	r0, r5
 80060da:	f001 fdb9 	bl	8007c50 <_fflush_r>
 80060de:	b9e0      	cbnz	r0, 800611a <__swbuf_r+0x74>
 80060e0:	68a3      	ldr	r3, [r4, #8]
 80060e2:	3b01      	subs	r3, #1
 80060e4:	60a3      	str	r3, [r4, #8]
 80060e6:	6823      	ldr	r3, [r4, #0]
 80060e8:	1c5a      	adds	r2, r3, #1
 80060ea:	6022      	str	r2, [r4, #0]
 80060ec:	701e      	strb	r6, [r3, #0]
 80060ee:	6962      	ldr	r2, [r4, #20]
 80060f0:	1c43      	adds	r3, r0, #1
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d004      	beq.n	8006100 <__swbuf_r+0x5a>
 80060f6:	89a3      	ldrh	r3, [r4, #12]
 80060f8:	07db      	lsls	r3, r3, #31
 80060fa:	d506      	bpl.n	800610a <__swbuf_r+0x64>
 80060fc:	2e0a      	cmp	r6, #10
 80060fe:	d104      	bne.n	800610a <__swbuf_r+0x64>
 8006100:	4621      	mov	r1, r4
 8006102:	4628      	mov	r0, r5
 8006104:	f001 fda4 	bl	8007c50 <_fflush_r>
 8006108:	b938      	cbnz	r0, 800611a <__swbuf_r+0x74>
 800610a:	4638      	mov	r0, r7
 800610c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800610e:	4621      	mov	r1, r4
 8006110:	4628      	mov	r0, r5
 8006112:	f000 f805 	bl	8006120 <__swsetup_r>
 8006116:	2800      	cmp	r0, #0
 8006118:	d0d5      	beq.n	80060c6 <__swbuf_r+0x20>
 800611a:	f04f 37ff 	mov.w	r7, #4294967295
 800611e:	e7f4      	b.n	800610a <__swbuf_r+0x64>

08006120 <__swsetup_r>:
 8006120:	b538      	push	{r3, r4, r5, lr}
 8006122:	4b2a      	ldr	r3, [pc, #168]	; (80061cc <__swsetup_r+0xac>)
 8006124:	4605      	mov	r5, r0
 8006126:	6818      	ldr	r0, [r3, #0]
 8006128:	460c      	mov	r4, r1
 800612a:	b118      	cbz	r0, 8006134 <__swsetup_r+0x14>
 800612c:	6a03      	ldr	r3, [r0, #32]
 800612e:	b90b      	cbnz	r3, 8006134 <__swsetup_r+0x14>
 8006130:	f7ff fed2 	bl	8005ed8 <__sinit>
 8006134:	89a3      	ldrh	r3, [r4, #12]
 8006136:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800613a:	0718      	lsls	r0, r3, #28
 800613c:	d422      	bmi.n	8006184 <__swsetup_r+0x64>
 800613e:	06d9      	lsls	r1, r3, #27
 8006140:	d407      	bmi.n	8006152 <__swsetup_r+0x32>
 8006142:	2309      	movs	r3, #9
 8006144:	602b      	str	r3, [r5, #0]
 8006146:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800614a:	81a3      	strh	r3, [r4, #12]
 800614c:	f04f 30ff 	mov.w	r0, #4294967295
 8006150:	e034      	b.n	80061bc <__swsetup_r+0x9c>
 8006152:	0758      	lsls	r0, r3, #29
 8006154:	d512      	bpl.n	800617c <__swsetup_r+0x5c>
 8006156:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006158:	b141      	cbz	r1, 800616c <__swsetup_r+0x4c>
 800615a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800615e:	4299      	cmp	r1, r3
 8006160:	d002      	beq.n	8006168 <__swsetup_r+0x48>
 8006162:	4628      	mov	r0, r5
 8006164:	f000 ff2e 	bl	8006fc4 <_free_r>
 8006168:	2300      	movs	r3, #0
 800616a:	6363      	str	r3, [r4, #52]	; 0x34
 800616c:	89a3      	ldrh	r3, [r4, #12]
 800616e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006172:	81a3      	strh	r3, [r4, #12]
 8006174:	2300      	movs	r3, #0
 8006176:	6063      	str	r3, [r4, #4]
 8006178:	6923      	ldr	r3, [r4, #16]
 800617a:	6023      	str	r3, [r4, #0]
 800617c:	89a3      	ldrh	r3, [r4, #12]
 800617e:	f043 0308 	orr.w	r3, r3, #8
 8006182:	81a3      	strh	r3, [r4, #12]
 8006184:	6923      	ldr	r3, [r4, #16]
 8006186:	b94b      	cbnz	r3, 800619c <__swsetup_r+0x7c>
 8006188:	89a3      	ldrh	r3, [r4, #12]
 800618a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800618e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006192:	d003      	beq.n	800619c <__swsetup_r+0x7c>
 8006194:	4621      	mov	r1, r4
 8006196:	4628      	mov	r0, r5
 8006198:	f001 fda8 	bl	8007cec <__smakebuf_r>
 800619c:	89a0      	ldrh	r0, [r4, #12]
 800619e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80061a2:	f010 0301 	ands.w	r3, r0, #1
 80061a6:	d00a      	beq.n	80061be <__swsetup_r+0x9e>
 80061a8:	2300      	movs	r3, #0
 80061aa:	60a3      	str	r3, [r4, #8]
 80061ac:	6963      	ldr	r3, [r4, #20]
 80061ae:	425b      	negs	r3, r3
 80061b0:	61a3      	str	r3, [r4, #24]
 80061b2:	6923      	ldr	r3, [r4, #16]
 80061b4:	b943      	cbnz	r3, 80061c8 <__swsetup_r+0xa8>
 80061b6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80061ba:	d1c4      	bne.n	8006146 <__swsetup_r+0x26>
 80061bc:	bd38      	pop	{r3, r4, r5, pc}
 80061be:	0781      	lsls	r1, r0, #30
 80061c0:	bf58      	it	pl
 80061c2:	6963      	ldrpl	r3, [r4, #20]
 80061c4:	60a3      	str	r3, [r4, #8]
 80061c6:	e7f4      	b.n	80061b2 <__swsetup_r+0x92>
 80061c8:	2000      	movs	r0, #0
 80061ca:	e7f7      	b.n	80061bc <__swsetup_r+0x9c>
 80061cc:	20000064 	.word	0x20000064

080061d0 <memset>:
 80061d0:	4402      	add	r2, r0
 80061d2:	4603      	mov	r3, r0
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d100      	bne.n	80061da <memset+0xa>
 80061d8:	4770      	bx	lr
 80061da:	f803 1b01 	strb.w	r1, [r3], #1
 80061de:	e7f9      	b.n	80061d4 <memset+0x4>

080061e0 <_localeconv_r>:
 80061e0:	4800      	ldr	r0, [pc, #0]	; (80061e4 <_localeconv_r+0x4>)
 80061e2:	4770      	bx	lr
 80061e4:	20000158 	.word	0x20000158

080061e8 <_close_r>:
 80061e8:	b538      	push	{r3, r4, r5, lr}
 80061ea:	4d06      	ldr	r5, [pc, #24]	; (8006204 <_close_r+0x1c>)
 80061ec:	2300      	movs	r3, #0
 80061ee:	4604      	mov	r4, r0
 80061f0:	4608      	mov	r0, r1
 80061f2:	602b      	str	r3, [r5, #0]
 80061f4:	f7fb ff0d 	bl	8002012 <_close>
 80061f8:	1c43      	adds	r3, r0, #1
 80061fa:	d102      	bne.n	8006202 <_close_r+0x1a>
 80061fc:	682b      	ldr	r3, [r5, #0]
 80061fe:	b103      	cbz	r3, 8006202 <_close_r+0x1a>
 8006200:	6023      	str	r3, [r4, #0]
 8006202:	bd38      	pop	{r3, r4, r5, pc}
 8006204:	20000408 	.word	0x20000408

08006208 <_lseek_r>:
 8006208:	b538      	push	{r3, r4, r5, lr}
 800620a:	4d07      	ldr	r5, [pc, #28]	; (8006228 <_lseek_r+0x20>)
 800620c:	4604      	mov	r4, r0
 800620e:	4608      	mov	r0, r1
 8006210:	4611      	mov	r1, r2
 8006212:	2200      	movs	r2, #0
 8006214:	602a      	str	r2, [r5, #0]
 8006216:	461a      	mov	r2, r3
 8006218:	f7fb ff22 	bl	8002060 <_lseek>
 800621c:	1c43      	adds	r3, r0, #1
 800621e:	d102      	bne.n	8006226 <_lseek_r+0x1e>
 8006220:	682b      	ldr	r3, [r5, #0]
 8006222:	b103      	cbz	r3, 8006226 <_lseek_r+0x1e>
 8006224:	6023      	str	r3, [r4, #0]
 8006226:	bd38      	pop	{r3, r4, r5, pc}
 8006228:	20000408 	.word	0x20000408

0800622c <_read_r>:
 800622c:	b538      	push	{r3, r4, r5, lr}
 800622e:	4d07      	ldr	r5, [pc, #28]	; (800624c <_read_r+0x20>)
 8006230:	4604      	mov	r4, r0
 8006232:	4608      	mov	r0, r1
 8006234:	4611      	mov	r1, r2
 8006236:	2200      	movs	r2, #0
 8006238:	602a      	str	r2, [r5, #0]
 800623a:	461a      	mov	r2, r3
 800623c:	f7fb fecc 	bl	8001fd8 <_read>
 8006240:	1c43      	adds	r3, r0, #1
 8006242:	d102      	bne.n	800624a <_read_r+0x1e>
 8006244:	682b      	ldr	r3, [r5, #0]
 8006246:	b103      	cbz	r3, 800624a <_read_r+0x1e>
 8006248:	6023      	str	r3, [r4, #0]
 800624a:	bd38      	pop	{r3, r4, r5, pc}
 800624c:	20000408 	.word	0x20000408

08006250 <_write_r>:
 8006250:	b538      	push	{r3, r4, r5, lr}
 8006252:	4d07      	ldr	r5, [pc, #28]	; (8006270 <_write_r+0x20>)
 8006254:	4604      	mov	r4, r0
 8006256:	4608      	mov	r0, r1
 8006258:	4611      	mov	r1, r2
 800625a:	2200      	movs	r2, #0
 800625c:	602a      	str	r2, [r5, #0]
 800625e:	461a      	mov	r2, r3
 8006260:	f7fb fb58 	bl	8001914 <_write>
 8006264:	1c43      	adds	r3, r0, #1
 8006266:	d102      	bne.n	800626e <_write_r+0x1e>
 8006268:	682b      	ldr	r3, [r5, #0]
 800626a:	b103      	cbz	r3, 800626e <_write_r+0x1e>
 800626c:	6023      	str	r3, [r4, #0]
 800626e:	bd38      	pop	{r3, r4, r5, pc}
 8006270:	20000408 	.word	0x20000408

08006274 <__errno>:
 8006274:	4b01      	ldr	r3, [pc, #4]	; (800627c <__errno+0x8>)
 8006276:	6818      	ldr	r0, [r3, #0]
 8006278:	4770      	bx	lr
 800627a:	bf00      	nop
 800627c:	20000064 	.word	0x20000064

08006280 <__libc_init_array>:
 8006280:	b570      	push	{r4, r5, r6, lr}
 8006282:	4d0d      	ldr	r5, [pc, #52]	; (80062b8 <__libc_init_array+0x38>)
 8006284:	4c0d      	ldr	r4, [pc, #52]	; (80062bc <__libc_init_array+0x3c>)
 8006286:	1b64      	subs	r4, r4, r5
 8006288:	10a4      	asrs	r4, r4, #2
 800628a:	2600      	movs	r6, #0
 800628c:	42a6      	cmp	r6, r4
 800628e:	d109      	bne.n	80062a4 <__libc_init_array+0x24>
 8006290:	4d0b      	ldr	r5, [pc, #44]	; (80062c0 <__libc_init_array+0x40>)
 8006292:	4c0c      	ldr	r4, [pc, #48]	; (80062c4 <__libc_init_array+0x44>)
 8006294:	f002 f908 	bl	80084a8 <_init>
 8006298:	1b64      	subs	r4, r4, r5
 800629a:	10a4      	asrs	r4, r4, #2
 800629c:	2600      	movs	r6, #0
 800629e:	42a6      	cmp	r6, r4
 80062a0:	d105      	bne.n	80062ae <__libc_init_array+0x2e>
 80062a2:	bd70      	pop	{r4, r5, r6, pc}
 80062a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80062a8:	4798      	blx	r3
 80062aa:	3601      	adds	r6, #1
 80062ac:	e7ee      	b.n	800628c <__libc_init_array+0xc>
 80062ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80062b2:	4798      	blx	r3
 80062b4:	3601      	adds	r6, #1
 80062b6:	e7f2      	b.n	800629e <__libc_init_array+0x1e>
 80062b8:	08008958 	.word	0x08008958
 80062bc:	08008958 	.word	0x08008958
 80062c0:	08008958 	.word	0x08008958
 80062c4:	0800895c 	.word	0x0800895c

080062c8 <__retarget_lock_acquire_recursive>:
 80062c8:	4770      	bx	lr

080062ca <__retarget_lock_release_recursive>:
 80062ca:	4770      	bx	lr

080062cc <quorem>:
 80062cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062d0:	6903      	ldr	r3, [r0, #16]
 80062d2:	690c      	ldr	r4, [r1, #16]
 80062d4:	42a3      	cmp	r3, r4
 80062d6:	4607      	mov	r7, r0
 80062d8:	db7e      	blt.n	80063d8 <quorem+0x10c>
 80062da:	3c01      	subs	r4, #1
 80062dc:	f101 0814 	add.w	r8, r1, #20
 80062e0:	f100 0514 	add.w	r5, r0, #20
 80062e4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80062e8:	9301      	str	r3, [sp, #4]
 80062ea:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80062ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80062f2:	3301      	adds	r3, #1
 80062f4:	429a      	cmp	r2, r3
 80062f6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80062fa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80062fe:	fbb2 f6f3 	udiv	r6, r2, r3
 8006302:	d331      	bcc.n	8006368 <quorem+0x9c>
 8006304:	f04f 0e00 	mov.w	lr, #0
 8006308:	4640      	mov	r0, r8
 800630a:	46ac      	mov	ip, r5
 800630c:	46f2      	mov	sl, lr
 800630e:	f850 2b04 	ldr.w	r2, [r0], #4
 8006312:	b293      	uxth	r3, r2
 8006314:	fb06 e303 	mla	r3, r6, r3, lr
 8006318:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800631c:	0c1a      	lsrs	r2, r3, #16
 800631e:	b29b      	uxth	r3, r3
 8006320:	ebaa 0303 	sub.w	r3, sl, r3
 8006324:	f8dc a000 	ldr.w	sl, [ip]
 8006328:	fa13 f38a 	uxtah	r3, r3, sl
 800632c:	fb06 220e 	mla	r2, r6, lr, r2
 8006330:	9300      	str	r3, [sp, #0]
 8006332:	9b00      	ldr	r3, [sp, #0]
 8006334:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006338:	b292      	uxth	r2, r2
 800633a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800633e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006342:	f8bd 3000 	ldrh.w	r3, [sp]
 8006346:	4581      	cmp	r9, r0
 8006348:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800634c:	f84c 3b04 	str.w	r3, [ip], #4
 8006350:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006354:	d2db      	bcs.n	800630e <quorem+0x42>
 8006356:	f855 300b 	ldr.w	r3, [r5, fp]
 800635a:	b92b      	cbnz	r3, 8006368 <quorem+0x9c>
 800635c:	9b01      	ldr	r3, [sp, #4]
 800635e:	3b04      	subs	r3, #4
 8006360:	429d      	cmp	r5, r3
 8006362:	461a      	mov	r2, r3
 8006364:	d32c      	bcc.n	80063c0 <quorem+0xf4>
 8006366:	613c      	str	r4, [r7, #16]
 8006368:	4638      	mov	r0, r7
 800636a:	f001 f9a7 	bl	80076bc <__mcmp>
 800636e:	2800      	cmp	r0, #0
 8006370:	db22      	blt.n	80063b8 <quorem+0xec>
 8006372:	3601      	adds	r6, #1
 8006374:	4629      	mov	r1, r5
 8006376:	2000      	movs	r0, #0
 8006378:	f858 2b04 	ldr.w	r2, [r8], #4
 800637c:	f8d1 c000 	ldr.w	ip, [r1]
 8006380:	b293      	uxth	r3, r2
 8006382:	1ac3      	subs	r3, r0, r3
 8006384:	0c12      	lsrs	r2, r2, #16
 8006386:	fa13 f38c 	uxtah	r3, r3, ip
 800638a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800638e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006392:	b29b      	uxth	r3, r3
 8006394:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006398:	45c1      	cmp	r9, r8
 800639a:	f841 3b04 	str.w	r3, [r1], #4
 800639e:	ea4f 4022 	mov.w	r0, r2, asr #16
 80063a2:	d2e9      	bcs.n	8006378 <quorem+0xac>
 80063a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80063a8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80063ac:	b922      	cbnz	r2, 80063b8 <quorem+0xec>
 80063ae:	3b04      	subs	r3, #4
 80063b0:	429d      	cmp	r5, r3
 80063b2:	461a      	mov	r2, r3
 80063b4:	d30a      	bcc.n	80063cc <quorem+0x100>
 80063b6:	613c      	str	r4, [r7, #16]
 80063b8:	4630      	mov	r0, r6
 80063ba:	b003      	add	sp, #12
 80063bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063c0:	6812      	ldr	r2, [r2, #0]
 80063c2:	3b04      	subs	r3, #4
 80063c4:	2a00      	cmp	r2, #0
 80063c6:	d1ce      	bne.n	8006366 <quorem+0x9a>
 80063c8:	3c01      	subs	r4, #1
 80063ca:	e7c9      	b.n	8006360 <quorem+0x94>
 80063cc:	6812      	ldr	r2, [r2, #0]
 80063ce:	3b04      	subs	r3, #4
 80063d0:	2a00      	cmp	r2, #0
 80063d2:	d1f0      	bne.n	80063b6 <quorem+0xea>
 80063d4:	3c01      	subs	r4, #1
 80063d6:	e7eb      	b.n	80063b0 <quorem+0xe4>
 80063d8:	2000      	movs	r0, #0
 80063da:	e7ee      	b.n	80063ba <quorem+0xee>
 80063dc:	0000      	movs	r0, r0
	...

080063e0 <_dtoa_r>:
 80063e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063e4:	ed2d 8b04 	vpush	{d8-d9}
 80063e8:	69c5      	ldr	r5, [r0, #28]
 80063ea:	b093      	sub	sp, #76	; 0x4c
 80063ec:	ed8d 0b02 	vstr	d0, [sp, #8]
 80063f0:	ec57 6b10 	vmov	r6, r7, d0
 80063f4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80063f8:	9107      	str	r1, [sp, #28]
 80063fa:	4604      	mov	r4, r0
 80063fc:	920a      	str	r2, [sp, #40]	; 0x28
 80063fe:	930d      	str	r3, [sp, #52]	; 0x34
 8006400:	b975      	cbnz	r5, 8006420 <_dtoa_r+0x40>
 8006402:	2010      	movs	r0, #16
 8006404:	f000 fe2a 	bl	800705c <malloc>
 8006408:	4602      	mov	r2, r0
 800640a:	61e0      	str	r0, [r4, #28]
 800640c:	b920      	cbnz	r0, 8006418 <_dtoa_r+0x38>
 800640e:	4bae      	ldr	r3, [pc, #696]	; (80066c8 <_dtoa_r+0x2e8>)
 8006410:	21ef      	movs	r1, #239	; 0xef
 8006412:	48ae      	ldr	r0, [pc, #696]	; (80066cc <_dtoa_r+0x2ec>)
 8006414:	f001 fce6 	bl	8007de4 <__assert_func>
 8006418:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800641c:	6005      	str	r5, [r0, #0]
 800641e:	60c5      	str	r5, [r0, #12]
 8006420:	69e3      	ldr	r3, [r4, #28]
 8006422:	6819      	ldr	r1, [r3, #0]
 8006424:	b151      	cbz	r1, 800643c <_dtoa_r+0x5c>
 8006426:	685a      	ldr	r2, [r3, #4]
 8006428:	604a      	str	r2, [r1, #4]
 800642a:	2301      	movs	r3, #1
 800642c:	4093      	lsls	r3, r2
 800642e:	608b      	str	r3, [r1, #8]
 8006430:	4620      	mov	r0, r4
 8006432:	f000 ff07 	bl	8007244 <_Bfree>
 8006436:	69e3      	ldr	r3, [r4, #28]
 8006438:	2200      	movs	r2, #0
 800643a:	601a      	str	r2, [r3, #0]
 800643c:	1e3b      	subs	r3, r7, #0
 800643e:	bfbb      	ittet	lt
 8006440:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006444:	9303      	strlt	r3, [sp, #12]
 8006446:	2300      	movge	r3, #0
 8006448:	2201      	movlt	r2, #1
 800644a:	bfac      	ite	ge
 800644c:	f8c8 3000 	strge.w	r3, [r8]
 8006450:	f8c8 2000 	strlt.w	r2, [r8]
 8006454:	4b9e      	ldr	r3, [pc, #632]	; (80066d0 <_dtoa_r+0x2f0>)
 8006456:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800645a:	ea33 0308 	bics.w	r3, r3, r8
 800645e:	d11b      	bne.n	8006498 <_dtoa_r+0xb8>
 8006460:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006462:	f242 730f 	movw	r3, #9999	; 0x270f
 8006466:	6013      	str	r3, [r2, #0]
 8006468:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800646c:	4333      	orrs	r3, r6
 800646e:	f000 8593 	beq.w	8006f98 <_dtoa_r+0xbb8>
 8006472:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006474:	b963      	cbnz	r3, 8006490 <_dtoa_r+0xb0>
 8006476:	4b97      	ldr	r3, [pc, #604]	; (80066d4 <_dtoa_r+0x2f4>)
 8006478:	e027      	b.n	80064ca <_dtoa_r+0xea>
 800647a:	4b97      	ldr	r3, [pc, #604]	; (80066d8 <_dtoa_r+0x2f8>)
 800647c:	9300      	str	r3, [sp, #0]
 800647e:	3308      	adds	r3, #8
 8006480:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006482:	6013      	str	r3, [r2, #0]
 8006484:	9800      	ldr	r0, [sp, #0]
 8006486:	b013      	add	sp, #76	; 0x4c
 8006488:	ecbd 8b04 	vpop	{d8-d9}
 800648c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006490:	4b90      	ldr	r3, [pc, #576]	; (80066d4 <_dtoa_r+0x2f4>)
 8006492:	9300      	str	r3, [sp, #0]
 8006494:	3303      	adds	r3, #3
 8006496:	e7f3      	b.n	8006480 <_dtoa_r+0xa0>
 8006498:	ed9d 7b02 	vldr	d7, [sp, #8]
 800649c:	2200      	movs	r2, #0
 800649e:	ec51 0b17 	vmov	r0, r1, d7
 80064a2:	eeb0 8a47 	vmov.f32	s16, s14
 80064a6:	eef0 8a67 	vmov.f32	s17, s15
 80064aa:	2300      	movs	r3, #0
 80064ac:	f7fa fb14 	bl	8000ad8 <__aeabi_dcmpeq>
 80064b0:	4681      	mov	r9, r0
 80064b2:	b160      	cbz	r0, 80064ce <_dtoa_r+0xee>
 80064b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80064b6:	2301      	movs	r3, #1
 80064b8:	6013      	str	r3, [r2, #0]
 80064ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80064bc:	2b00      	cmp	r3, #0
 80064be:	f000 8568 	beq.w	8006f92 <_dtoa_r+0xbb2>
 80064c2:	4b86      	ldr	r3, [pc, #536]	; (80066dc <_dtoa_r+0x2fc>)
 80064c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80064c6:	6013      	str	r3, [r2, #0]
 80064c8:	3b01      	subs	r3, #1
 80064ca:	9300      	str	r3, [sp, #0]
 80064cc:	e7da      	b.n	8006484 <_dtoa_r+0xa4>
 80064ce:	aa10      	add	r2, sp, #64	; 0x40
 80064d0:	a911      	add	r1, sp, #68	; 0x44
 80064d2:	4620      	mov	r0, r4
 80064d4:	eeb0 0a48 	vmov.f32	s0, s16
 80064d8:	eef0 0a68 	vmov.f32	s1, s17
 80064dc:	f001 f994 	bl	8007808 <__d2b>
 80064e0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80064e4:	4682      	mov	sl, r0
 80064e6:	2d00      	cmp	r5, #0
 80064e8:	d07f      	beq.n	80065ea <_dtoa_r+0x20a>
 80064ea:	ee18 3a90 	vmov	r3, s17
 80064ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80064f2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80064f6:	ec51 0b18 	vmov	r0, r1, d8
 80064fa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80064fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006502:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006506:	4619      	mov	r1, r3
 8006508:	2200      	movs	r2, #0
 800650a:	4b75      	ldr	r3, [pc, #468]	; (80066e0 <_dtoa_r+0x300>)
 800650c:	f7f9 fec4 	bl	8000298 <__aeabi_dsub>
 8006510:	a367      	add	r3, pc, #412	; (adr r3, 80066b0 <_dtoa_r+0x2d0>)
 8006512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006516:	f7fa f877 	bl	8000608 <__aeabi_dmul>
 800651a:	a367      	add	r3, pc, #412	; (adr r3, 80066b8 <_dtoa_r+0x2d8>)
 800651c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006520:	f7f9 febc 	bl	800029c <__adddf3>
 8006524:	4606      	mov	r6, r0
 8006526:	4628      	mov	r0, r5
 8006528:	460f      	mov	r7, r1
 800652a:	f7fa f803 	bl	8000534 <__aeabi_i2d>
 800652e:	a364      	add	r3, pc, #400	; (adr r3, 80066c0 <_dtoa_r+0x2e0>)
 8006530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006534:	f7fa f868 	bl	8000608 <__aeabi_dmul>
 8006538:	4602      	mov	r2, r0
 800653a:	460b      	mov	r3, r1
 800653c:	4630      	mov	r0, r6
 800653e:	4639      	mov	r1, r7
 8006540:	f7f9 feac 	bl	800029c <__adddf3>
 8006544:	4606      	mov	r6, r0
 8006546:	460f      	mov	r7, r1
 8006548:	f7fa fb0e 	bl	8000b68 <__aeabi_d2iz>
 800654c:	2200      	movs	r2, #0
 800654e:	4683      	mov	fp, r0
 8006550:	2300      	movs	r3, #0
 8006552:	4630      	mov	r0, r6
 8006554:	4639      	mov	r1, r7
 8006556:	f7fa fac9 	bl	8000aec <__aeabi_dcmplt>
 800655a:	b148      	cbz	r0, 8006570 <_dtoa_r+0x190>
 800655c:	4658      	mov	r0, fp
 800655e:	f7f9 ffe9 	bl	8000534 <__aeabi_i2d>
 8006562:	4632      	mov	r2, r6
 8006564:	463b      	mov	r3, r7
 8006566:	f7fa fab7 	bl	8000ad8 <__aeabi_dcmpeq>
 800656a:	b908      	cbnz	r0, 8006570 <_dtoa_r+0x190>
 800656c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006570:	f1bb 0f16 	cmp.w	fp, #22
 8006574:	d857      	bhi.n	8006626 <_dtoa_r+0x246>
 8006576:	4b5b      	ldr	r3, [pc, #364]	; (80066e4 <_dtoa_r+0x304>)
 8006578:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800657c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006580:	ec51 0b18 	vmov	r0, r1, d8
 8006584:	f7fa fab2 	bl	8000aec <__aeabi_dcmplt>
 8006588:	2800      	cmp	r0, #0
 800658a:	d04e      	beq.n	800662a <_dtoa_r+0x24a>
 800658c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006590:	2300      	movs	r3, #0
 8006592:	930c      	str	r3, [sp, #48]	; 0x30
 8006594:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006596:	1b5b      	subs	r3, r3, r5
 8006598:	1e5a      	subs	r2, r3, #1
 800659a:	bf45      	ittet	mi
 800659c:	f1c3 0301 	rsbmi	r3, r3, #1
 80065a0:	9305      	strmi	r3, [sp, #20]
 80065a2:	2300      	movpl	r3, #0
 80065a4:	2300      	movmi	r3, #0
 80065a6:	9206      	str	r2, [sp, #24]
 80065a8:	bf54      	ite	pl
 80065aa:	9305      	strpl	r3, [sp, #20]
 80065ac:	9306      	strmi	r3, [sp, #24]
 80065ae:	f1bb 0f00 	cmp.w	fp, #0
 80065b2:	db3c      	blt.n	800662e <_dtoa_r+0x24e>
 80065b4:	9b06      	ldr	r3, [sp, #24]
 80065b6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80065ba:	445b      	add	r3, fp
 80065bc:	9306      	str	r3, [sp, #24]
 80065be:	2300      	movs	r3, #0
 80065c0:	9308      	str	r3, [sp, #32]
 80065c2:	9b07      	ldr	r3, [sp, #28]
 80065c4:	2b09      	cmp	r3, #9
 80065c6:	d868      	bhi.n	800669a <_dtoa_r+0x2ba>
 80065c8:	2b05      	cmp	r3, #5
 80065ca:	bfc4      	itt	gt
 80065cc:	3b04      	subgt	r3, #4
 80065ce:	9307      	strgt	r3, [sp, #28]
 80065d0:	9b07      	ldr	r3, [sp, #28]
 80065d2:	f1a3 0302 	sub.w	r3, r3, #2
 80065d6:	bfcc      	ite	gt
 80065d8:	2500      	movgt	r5, #0
 80065da:	2501      	movle	r5, #1
 80065dc:	2b03      	cmp	r3, #3
 80065de:	f200 8085 	bhi.w	80066ec <_dtoa_r+0x30c>
 80065e2:	e8df f003 	tbb	[pc, r3]
 80065e6:	3b2e      	.short	0x3b2e
 80065e8:	5839      	.short	0x5839
 80065ea:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80065ee:	441d      	add	r5, r3
 80065f0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80065f4:	2b20      	cmp	r3, #32
 80065f6:	bfc1      	itttt	gt
 80065f8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80065fc:	fa08 f803 	lslgt.w	r8, r8, r3
 8006600:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006604:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006608:	bfd6      	itet	le
 800660a:	f1c3 0320 	rsble	r3, r3, #32
 800660e:	ea48 0003 	orrgt.w	r0, r8, r3
 8006612:	fa06 f003 	lslle.w	r0, r6, r3
 8006616:	f7f9 ff7d 	bl	8000514 <__aeabi_ui2d>
 800661a:	2201      	movs	r2, #1
 800661c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006620:	3d01      	subs	r5, #1
 8006622:	920e      	str	r2, [sp, #56]	; 0x38
 8006624:	e76f      	b.n	8006506 <_dtoa_r+0x126>
 8006626:	2301      	movs	r3, #1
 8006628:	e7b3      	b.n	8006592 <_dtoa_r+0x1b2>
 800662a:	900c      	str	r0, [sp, #48]	; 0x30
 800662c:	e7b2      	b.n	8006594 <_dtoa_r+0x1b4>
 800662e:	9b05      	ldr	r3, [sp, #20]
 8006630:	eba3 030b 	sub.w	r3, r3, fp
 8006634:	9305      	str	r3, [sp, #20]
 8006636:	f1cb 0300 	rsb	r3, fp, #0
 800663a:	9308      	str	r3, [sp, #32]
 800663c:	2300      	movs	r3, #0
 800663e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006640:	e7bf      	b.n	80065c2 <_dtoa_r+0x1e2>
 8006642:	2300      	movs	r3, #0
 8006644:	9309      	str	r3, [sp, #36]	; 0x24
 8006646:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006648:	2b00      	cmp	r3, #0
 800664a:	dc52      	bgt.n	80066f2 <_dtoa_r+0x312>
 800664c:	2301      	movs	r3, #1
 800664e:	9301      	str	r3, [sp, #4]
 8006650:	9304      	str	r3, [sp, #16]
 8006652:	461a      	mov	r2, r3
 8006654:	920a      	str	r2, [sp, #40]	; 0x28
 8006656:	e00b      	b.n	8006670 <_dtoa_r+0x290>
 8006658:	2301      	movs	r3, #1
 800665a:	e7f3      	b.n	8006644 <_dtoa_r+0x264>
 800665c:	2300      	movs	r3, #0
 800665e:	9309      	str	r3, [sp, #36]	; 0x24
 8006660:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006662:	445b      	add	r3, fp
 8006664:	9301      	str	r3, [sp, #4]
 8006666:	3301      	adds	r3, #1
 8006668:	2b01      	cmp	r3, #1
 800666a:	9304      	str	r3, [sp, #16]
 800666c:	bfb8      	it	lt
 800666e:	2301      	movlt	r3, #1
 8006670:	69e0      	ldr	r0, [r4, #28]
 8006672:	2100      	movs	r1, #0
 8006674:	2204      	movs	r2, #4
 8006676:	f102 0614 	add.w	r6, r2, #20
 800667a:	429e      	cmp	r6, r3
 800667c:	d93d      	bls.n	80066fa <_dtoa_r+0x31a>
 800667e:	6041      	str	r1, [r0, #4]
 8006680:	4620      	mov	r0, r4
 8006682:	f000 fd9f 	bl	80071c4 <_Balloc>
 8006686:	9000      	str	r0, [sp, #0]
 8006688:	2800      	cmp	r0, #0
 800668a:	d139      	bne.n	8006700 <_dtoa_r+0x320>
 800668c:	4b16      	ldr	r3, [pc, #88]	; (80066e8 <_dtoa_r+0x308>)
 800668e:	4602      	mov	r2, r0
 8006690:	f240 11af 	movw	r1, #431	; 0x1af
 8006694:	e6bd      	b.n	8006412 <_dtoa_r+0x32>
 8006696:	2301      	movs	r3, #1
 8006698:	e7e1      	b.n	800665e <_dtoa_r+0x27e>
 800669a:	2501      	movs	r5, #1
 800669c:	2300      	movs	r3, #0
 800669e:	9307      	str	r3, [sp, #28]
 80066a0:	9509      	str	r5, [sp, #36]	; 0x24
 80066a2:	f04f 33ff 	mov.w	r3, #4294967295
 80066a6:	9301      	str	r3, [sp, #4]
 80066a8:	9304      	str	r3, [sp, #16]
 80066aa:	2200      	movs	r2, #0
 80066ac:	2312      	movs	r3, #18
 80066ae:	e7d1      	b.n	8006654 <_dtoa_r+0x274>
 80066b0:	636f4361 	.word	0x636f4361
 80066b4:	3fd287a7 	.word	0x3fd287a7
 80066b8:	8b60c8b3 	.word	0x8b60c8b3
 80066bc:	3fc68a28 	.word	0x3fc68a28
 80066c0:	509f79fb 	.word	0x509f79fb
 80066c4:	3fd34413 	.word	0x3fd34413
 80066c8:	080085d8 	.word	0x080085d8
 80066cc:	080085ef 	.word	0x080085ef
 80066d0:	7ff00000 	.word	0x7ff00000
 80066d4:	080085d4 	.word	0x080085d4
 80066d8:	080085cb 	.word	0x080085cb
 80066dc:	080085a8 	.word	0x080085a8
 80066e0:	3ff80000 	.word	0x3ff80000
 80066e4:	080086e0 	.word	0x080086e0
 80066e8:	08008647 	.word	0x08008647
 80066ec:	2301      	movs	r3, #1
 80066ee:	9309      	str	r3, [sp, #36]	; 0x24
 80066f0:	e7d7      	b.n	80066a2 <_dtoa_r+0x2c2>
 80066f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066f4:	9301      	str	r3, [sp, #4]
 80066f6:	9304      	str	r3, [sp, #16]
 80066f8:	e7ba      	b.n	8006670 <_dtoa_r+0x290>
 80066fa:	3101      	adds	r1, #1
 80066fc:	0052      	lsls	r2, r2, #1
 80066fe:	e7ba      	b.n	8006676 <_dtoa_r+0x296>
 8006700:	69e3      	ldr	r3, [r4, #28]
 8006702:	9a00      	ldr	r2, [sp, #0]
 8006704:	601a      	str	r2, [r3, #0]
 8006706:	9b04      	ldr	r3, [sp, #16]
 8006708:	2b0e      	cmp	r3, #14
 800670a:	f200 80a8 	bhi.w	800685e <_dtoa_r+0x47e>
 800670e:	2d00      	cmp	r5, #0
 8006710:	f000 80a5 	beq.w	800685e <_dtoa_r+0x47e>
 8006714:	f1bb 0f00 	cmp.w	fp, #0
 8006718:	dd38      	ble.n	800678c <_dtoa_r+0x3ac>
 800671a:	4bc0      	ldr	r3, [pc, #768]	; (8006a1c <_dtoa_r+0x63c>)
 800671c:	f00b 020f 	and.w	r2, fp, #15
 8006720:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006724:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006728:	e9d3 6700 	ldrd	r6, r7, [r3]
 800672c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006730:	d019      	beq.n	8006766 <_dtoa_r+0x386>
 8006732:	4bbb      	ldr	r3, [pc, #748]	; (8006a20 <_dtoa_r+0x640>)
 8006734:	ec51 0b18 	vmov	r0, r1, d8
 8006738:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800673c:	f7fa f88e 	bl	800085c <__aeabi_ddiv>
 8006740:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006744:	f008 080f 	and.w	r8, r8, #15
 8006748:	2503      	movs	r5, #3
 800674a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006a20 <_dtoa_r+0x640>
 800674e:	f1b8 0f00 	cmp.w	r8, #0
 8006752:	d10a      	bne.n	800676a <_dtoa_r+0x38a>
 8006754:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006758:	4632      	mov	r2, r6
 800675a:	463b      	mov	r3, r7
 800675c:	f7fa f87e 	bl	800085c <__aeabi_ddiv>
 8006760:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006764:	e02b      	b.n	80067be <_dtoa_r+0x3de>
 8006766:	2502      	movs	r5, #2
 8006768:	e7ef      	b.n	800674a <_dtoa_r+0x36a>
 800676a:	f018 0f01 	tst.w	r8, #1
 800676e:	d008      	beq.n	8006782 <_dtoa_r+0x3a2>
 8006770:	4630      	mov	r0, r6
 8006772:	4639      	mov	r1, r7
 8006774:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006778:	f7f9 ff46 	bl	8000608 <__aeabi_dmul>
 800677c:	3501      	adds	r5, #1
 800677e:	4606      	mov	r6, r0
 8006780:	460f      	mov	r7, r1
 8006782:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006786:	f109 0908 	add.w	r9, r9, #8
 800678a:	e7e0      	b.n	800674e <_dtoa_r+0x36e>
 800678c:	f000 809f 	beq.w	80068ce <_dtoa_r+0x4ee>
 8006790:	f1cb 0600 	rsb	r6, fp, #0
 8006794:	4ba1      	ldr	r3, [pc, #644]	; (8006a1c <_dtoa_r+0x63c>)
 8006796:	4fa2      	ldr	r7, [pc, #648]	; (8006a20 <_dtoa_r+0x640>)
 8006798:	f006 020f 	and.w	r2, r6, #15
 800679c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80067a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a4:	ec51 0b18 	vmov	r0, r1, d8
 80067a8:	f7f9 ff2e 	bl	8000608 <__aeabi_dmul>
 80067ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067b0:	1136      	asrs	r6, r6, #4
 80067b2:	2300      	movs	r3, #0
 80067b4:	2502      	movs	r5, #2
 80067b6:	2e00      	cmp	r6, #0
 80067b8:	d17e      	bne.n	80068b8 <_dtoa_r+0x4d8>
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d1d0      	bne.n	8006760 <_dtoa_r+0x380>
 80067be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80067c0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	f000 8084 	beq.w	80068d2 <_dtoa_r+0x4f2>
 80067ca:	4b96      	ldr	r3, [pc, #600]	; (8006a24 <_dtoa_r+0x644>)
 80067cc:	2200      	movs	r2, #0
 80067ce:	4640      	mov	r0, r8
 80067d0:	4649      	mov	r1, r9
 80067d2:	f7fa f98b 	bl	8000aec <__aeabi_dcmplt>
 80067d6:	2800      	cmp	r0, #0
 80067d8:	d07b      	beq.n	80068d2 <_dtoa_r+0x4f2>
 80067da:	9b04      	ldr	r3, [sp, #16]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d078      	beq.n	80068d2 <_dtoa_r+0x4f2>
 80067e0:	9b01      	ldr	r3, [sp, #4]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	dd39      	ble.n	800685a <_dtoa_r+0x47a>
 80067e6:	4b90      	ldr	r3, [pc, #576]	; (8006a28 <_dtoa_r+0x648>)
 80067e8:	2200      	movs	r2, #0
 80067ea:	4640      	mov	r0, r8
 80067ec:	4649      	mov	r1, r9
 80067ee:	f7f9 ff0b 	bl	8000608 <__aeabi_dmul>
 80067f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067f6:	9e01      	ldr	r6, [sp, #4]
 80067f8:	f10b 37ff 	add.w	r7, fp, #4294967295
 80067fc:	3501      	adds	r5, #1
 80067fe:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006802:	4628      	mov	r0, r5
 8006804:	f7f9 fe96 	bl	8000534 <__aeabi_i2d>
 8006808:	4642      	mov	r2, r8
 800680a:	464b      	mov	r3, r9
 800680c:	f7f9 fefc 	bl	8000608 <__aeabi_dmul>
 8006810:	4b86      	ldr	r3, [pc, #536]	; (8006a2c <_dtoa_r+0x64c>)
 8006812:	2200      	movs	r2, #0
 8006814:	f7f9 fd42 	bl	800029c <__adddf3>
 8006818:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800681c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006820:	9303      	str	r3, [sp, #12]
 8006822:	2e00      	cmp	r6, #0
 8006824:	d158      	bne.n	80068d8 <_dtoa_r+0x4f8>
 8006826:	4b82      	ldr	r3, [pc, #520]	; (8006a30 <_dtoa_r+0x650>)
 8006828:	2200      	movs	r2, #0
 800682a:	4640      	mov	r0, r8
 800682c:	4649      	mov	r1, r9
 800682e:	f7f9 fd33 	bl	8000298 <__aeabi_dsub>
 8006832:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006836:	4680      	mov	r8, r0
 8006838:	4689      	mov	r9, r1
 800683a:	f7fa f975 	bl	8000b28 <__aeabi_dcmpgt>
 800683e:	2800      	cmp	r0, #0
 8006840:	f040 8296 	bne.w	8006d70 <_dtoa_r+0x990>
 8006844:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006848:	4640      	mov	r0, r8
 800684a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800684e:	4649      	mov	r1, r9
 8006850:	f7fa f94c 	bl	8000aec <__aeabi_dcmplt>
 8006854:	2800      	cmp	r0, #0
 8006856:	f040 8289 	bne.w	8006d6c <_dtoa_r+0x98c>
 800685a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800685e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006860:	2b00      	cmp	r3, #0
 8006862:	f2c0 814e 	blt.w	8006b02 <_dtoa_r+0x722>
 8006866:	f1bb 0f0e 	cmp.w	fp, #14
 800686a:	f300 814a 	bgt.w	8006b02 <_dtoa_r+0x722>
 800686e:	4b6b      	ldr	r3, [pc, #428]	; (8006a1c <_dtoa_r+0x63c>)
 8006870:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006874:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006878:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800687a:	2b00      	cmp	r3, #0
 800687c:	f280 80dc 	bge.w	8006a38 <_dtoa_r+0x658>
 8006880:	9b04      	ldr	r3, [sp, #16]
 8006882:	2b00      	cmp	r3, #0
 8006884:	f300 80d8 	bgt.w	8006a38 <_dtoa_r+0x658>
 8006888:	f040 826f 	bne.w	8006d6a <_dtoa_r+0x98a>
 800688c:	4b68      	ldr	r3, [pc, #416]	; (8006a30 <_dtoa_r+0x650>)
 800688e:	2200      	movs	r2, #0
 8006890:	4640      	mov	r0, r8
 8006892:	4649      	mov	r1, r9
 8006894:	f7f9 feb8 	bl	8000608 <__aeabi_dmul>
 8006898:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800689c:	f7fa f93a 	bl	8000b14 <__aeabi_dcmpge>
 80068a0:	9e04      	ldr	r6, [sp, #16]
 80068a2:	4637      	mov	r7, r6
 80068a4:	2800      	cmp	r0, #0
 80068a6:	f040 8245 	bne.w	8006d34 <_dtoa_r+0x954>
 80068aa:	9d00      	ldr	r5, [sp, #0]
 80068ac:	2331      	movs	r3, #49	; 0x31
 80068ae:	f805 3b01 	strb.w	r3, [r5], #1
 80068b2:	f10b 0b01 	add.w	fp, fp, #1
 80068b6:	e241      	b.n	8006d3c <_dtoa_r+0x95c>
 80068b8:	07f2      	lsls	r2, r6, #31
 80068ba:	d505      	bpl.n	80068c8 <_dtoa_r+0x4e8>
 80068bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068c0:	f7f9 fea2 	bl	8000608 <__aeabi_dmul>
 80068c4:	3501      	adds	r5, #1
 80068c6:	2301      	movs	r3, #1
 80068c8:	1076      	asrs	r6, r6, #1
 80068ca:	3708      	adds	r7, #8
 80068cc:	e773      	b.n	80067b6 <_dtoa_r+0x3d6>
 80068ce:	2502      	movs	r5, #2
 80068d0:	e775      	b.n	80067be <_dtoa_r+0x3de>
 80068d2:	9e04      	ldr	r6, [sp, #16]
 80068d4:	465f      	mov	r7, fp
 80068d6:	e792      	b.n	80067fe <_dtoa_r+0x41e>
 80068d8:	9900      	ldr	r1, [sp, #0]
 80068da:	4b50      	ldr	r3, [pc, #320]	; (8006a1c <_dtoa_r+0x63c>)
 80068dc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80068e0:	4431      	add	r1, r6
 80068e2:	9102      	str	r1, [sp, #8]
 80068e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80068e6:	eeb0 9a47 	vmov.f32	s18, s14
 80068ea:	eef0 9a67 	vmov.f32	s19, s15
 80068ee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80068f2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80068f6:	2900      	cmp	r1, #0
 80068f8:	d044      	beq.n	8006984 <_dtoa_r+0x5a4>
 80068fa:	494e      	ldr	r1, [pc, #312]	; (8006a34 <_dtoa_r+0x654>)
 80068fc:	2000      	movs	r0, #0
 80068fe:	f7f9 ffad 	bl	800085c <__aeabi_ddiv>
 8006902:	ec53 2b19 	vmov	r2, r3, d9
 8006906:	f7f9 fcc7 	bl	8000298 <__aeabi_dsub>
 800690a:	9d00      	ldr	r5, [sp, #0]
 800690c:	ec41 0b19 	vmov	d9, r0, r1
 8006910:	4649      	mov	r1, r9
 8006912:	4640      	mov	r0, r8
 8006914:	f7fa f928 	bl	8000b68 <__aeabi_d2iz>
 8006918:	4606      	mov	r6, r0
 800691a:	f7f9 fe0b 	bl	8000534 <__aeabi_i2d>
 800691e:	4602      	mov	r2, r0
 8006920:	460b      	mov	r3, r1
 8006922:	4640      	mov	r0, r8
 8006924:	4649      	mov	r1, r9
 8006926:	f7f9 fcb7 	bl	8000298 <__aeabi_dsub>
 800692a:	3630      	adds	r6, #48	; 0x30
 800692c:	f805 6b01 	strb.w	r6, [r5], #1
 8006930:	ec53 2b19 	vmov	r2, r3, d9
 8006934:	4680      	mov	r8, r0
 8006936:	4689      	mov	r9, r1
 8006938:	f7fa f8d8 	bl	8000aec <__aeabi_dcmplt>
 800693c:	2800      	cmp	r0, #0
 800693e:	d164      	bne.n	8006a0a <_dtoa_r+0x62a>
 8006940:	4642      	mov	r2, r8
 8006942:	464b      	mov	r3, r9
 8006944:	4937      	ldr	r1, [pc, #220]	; (8006a24 <_dtoa_r+0x644>)
 8006946:	2000      	movs	r0, #0
 8006948:	f7f9 fca6 	bl	8000298 <__aeabi_dsub>
 800694c:	ec53 2b19 	vmov	r2, r3, d9
 8006950:	f7fa f8cc 	bl	8000aec <__aeabi_dcmplt>
 8006954:	2800      	cmp	r0, #0
 8006956:	f040 80b6 	bne.w	8006ac6 <_dtoa_r+0x6e6>
 800695a:	9b02      	ldr	r3, [sp, #8]
 800695c:	429d      	cmp	r5, r3
 800695e:	f43f af7c 	beq.w	800685a <_dtoa_r+0x47a>
 8006962:	4b31      	ldr	r3, [pc, #196]	; (8006a28 <_dtoa_r+0x648>)
 8006964:	ec51 0b19 	vmov	r0, r1, d9
 8006968:	2200      	movs	r2, #0
 800696a:	f7f9 fe4d 	bl	8000608 <__aeabi_dmul>
 800696e:	4b2e      	ldr	r3, [pc, #184]	; (8006a28 <_dtoa_r+0x648>)
 8006970:	ec41 0b19 	vmov	d9, r0, r1
 8006974:	2200      	movs	r2, #0
 8006976:	4640      	mov	r0, r8
 8006978:	4649      	mov	r1, r9
 800697a:	f7f9 fe45 	bl	8000608 <__aeabi_dmul>
 800697e:	4680      	mov	r8, r0
 8006980:	4689      	mov	r9, r1
 8006982:	e7c5      	b.n	8006910 <_dtoa_r+0x530>
 8006984:	ec51 0b17 	vmov	r0, r1, d7
 8006988:	f7f9 fe3e 	bl	8000608 <__aeabi_dmul>
 800698c:	9b02      	ldr	r3, [sp, #8]
 800698e:	9d00      	ldr	r5, [sp, #0]
 8006990:	930f      	str	r3, [sp, #60]	; 0x3c
 8006992:	ec41 0b19 	vmov	d9, r0, r1
 8006996:	4649      	mov	r1, r9
 8006998:	4640      	mov	r0, r8
 800699a:	f7fa f8e5 	bl	8000b68 <__aeabi_d2iz>
 800699e:	4606      	mov	r6, r0
 80069a0:	f7f9 fdc8 	bl	8000534 <__aeabi_i2d>
 80069a4:	3630      	adds	r6, #48	; 0x30
 80069a6:	4602      	mov	r2, r0
 80069a8:	460b      	mov	r3, r1
 80069aa:	4640      	mov	r0, r8
 80069ac:	4649      	mov	r1, r9
 80069ae:	f7f9 fc73 	bl	8000298 <__aeabi_dsub>
 80069b2:	f805 6b01 	strb.w	r6, [r5], #1
 80069b6:	9b02      	ldr	r3, [sp, #8]
 80069b8:	429d      	cmp	r5, r3
 80069ba:	4680      	mov	r8, r0
 80069bc:	4689      	mov	r9, r1
 80069be:	f04f 0200 	mov.w	r2, #0
 80069c2:	d124      	bne.n	8006a0e <_dtoa_r+0x62e>
 80069c4:	4b1b      	ldr	r3, [pc, #108]	; (8006a34 <_dtoa_r+0x654>)
 80069c6:	ec51 0b19 	vmov	r0, r1, d9
 80069ca:	f7f9 fc67 	bl	800029c <__adddf3>
 80069ce:	4602      	mov	r2, r0
 80069d0:	460b      	mov	r3, r1
 80069d2:	4640      	mov	r0, r8
 80069d4:	4649      	mov	r1, r9
 80069d6:	f7fa f8a7 	bl	8000b28 <__aeabi_dcmpgt>
 80069da:	2800      	cmp	r0, #0
 80069dc:	d173      	bne.n	8006ac6 <_dtoa_r+0x6e6>
 80069de:	ec53 2b19 	vmov	r2, r3, d9
 80069e2:	4914      	ldr	r1, [pc, #80]	; (8006a34 <_dtoa_r+0x654>)
 80069e4:	2000      	movs	r0, #0
 80069e6:	f7f9 fc57 	bl	8000298 <__aeabi_dsub>
 80069ea:	4602      	mov	r2, r0
 80069ec:	460b      	mov	r3, r1
 80069ee:	4640      	mov	r0, r8
 80069f0:	4649      	mov	r1, r9
 80069f2:	f7fa f87b 	bl	8000aec <__aeabi_dcmplt>
 80069f6:	2800      	cmp	r0, #0
 80069f8:	f43f af2f 	beq.w	800685a <_dtoa_r+0x47a>
 80069fc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80069fe:	1e6b      	subs	r3, r5, #1
 8006a00:	930f      	str	r3, [sp, #60]	; 0x3c
 8006a02:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006a06:	2b30      	cmp	r3, #48	; 0x30
 8006a08:	d0f8      	beq.n	80069fc <_dtoa_r+0x61c>
 8006a0a:	46bb      	mov	fp, r7
 8006a0c:	e04a      	b.n	8006aa4 <_dtoa_r+0x6c4>
 8006a0e:	4b06      	ldr	r3, [pc, #24]	; (8006a28 <_dtoa_r+0x648>)
 8006a10:	f7f9 fdfa 	bl	8000608 <__aeabi_dmul>
 8006a14:	4680      	mov	r8, r0
 8006a16:	4689      	mov	r9, r1
 8006a18:	e7bd      	b.n	8006996 <_dtoa_r+0x5b6>
 8006a1a:	bf00      	nop
 8006a1c:	080086e0 	.word	0x080086e0
 8006a20:	080086b8 	.word	0x080086b8
 8006a24:	3ff00000 	.word	0x3ff00000
 8006a28:	40240000 	.word	0x40240000
 8006a2c:	401c0000 	.word	0x401c0000
 8006a30:	40140000 	.word	0x40140000
 8006a34:	3fe00000 	.word	0x3fe00000
 8006a38:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006a3c:	9d00      	ldr	r5, [sp, #0]
 8006a3e:	4642      	mov	r2, r8
 8006a40:	464b      	mov	r3, r9
 8006a42:	4630      	mov	r0, r6
 8006a44:	4639      	mov	r1, r7
 8006a46:	f7f9 ff09 	bl	800085c <__aeabi_ddiv>
 8006a4a:	f7fa f88d 	bl	8000b68 <__aeabi_d2iz>
 8006a4e:	9001      	str	r0, [sp, #4]
 8006a50:	f7f9 fd70 	bl	8000534 <__aeabi_i2d>
 8006a54:	4642      	mov	r2, r8
 8006a56:	464b      	mov	r3, r9
 8006a58:	f7f9 fdd6 	bl	8000608 <__aeabi_dmul>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	460b      	mov	r3, r1
 8006a60:	4630      	mov	r0, r6
 8006a62:	4639      	mov	r1, r7
 8006a64:	f7f9 fc18 	bl	8000298 <__aeabi_dsub>
 8006a68:	9e01      	ldr	r6, [sp, #4]
 8006a6a:	9f04      	ldr	r7, [sp, #16]
 8006a6c:	3630      	adds	r6, #48	; 0x30
 8006a6e:	f805 6b01 	strb.w	r6, [r5], #1
 8006a72:	9e00      	ldr	r6, [sp, #0]
 8006a74:	1bae      	subs	r6, r5, r6
 8006a76:	42b7      	cmp	r7, r6
 8006a78:	4602      	mov	r2, r0
 8006a7a:	460b      	mov	r3, r1
 8006a7c:	d134      	bne.n	8006ae8 <_dtoa_r+0x708>
 8006a7e:	f7f9 fc0d 	bl	800029c <__adddf3>
 8006a82:	4642      	mov	r2, r8
 8006a84:	464b      	mov	r3, r9
 8006a86:	4606      	mov	r6, r0
 8006a88:	460f      	mov	r7, r1
 8006a8a:	f7fa f84d 	bl	8000b28 <__aeabi_dcmpgt>
 8006a8e:	b9c8      	cbnz	r0, 8006ac4 <_dtoa_r+0x6e4>
 8006a90:	4642      	mov	r2, r8
 8006a92:	464b      	mov	r3, r9
 8006a94:	4630      	mov	r0, r6
 8006a96:	4639      	mov	r1, r7
 8006a98:	f7fa f81e 	bl	8000ad8 <__aeabi_dcmpeq>
 8006a9c:	b110      	cbz	r0, 8006aa4 <_dtoa_r+0x6c4>
 8006a9e:	9b01      	ldr	r3, [sp, #4]
 8006aa0:	07db      	lsls	r3, r3, #31
 8006aa2:	d40f      	bmi.n	8006ac4 <_dtoa_r+0x6e4>
 8006aa4:	4651      	mov	r1, sl
 8006aa6:	4620      	mov	r0, r4
 8006aa8:	f000 fbcc 	bl	8007244 <_Bfree>
 8006aac:	2300      	movs	r3, #0
 8006aae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006ab0:	702b      	strb	r3, [r5, #0]
 8006ab2:	f10b 0301 	add.w	r3, fp, #1
 8006ab6:	6013      	str	r3, [r2, #0]
 8006ab8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	f43f ace2 	beq.w	8006484 <_dtoa_r+0xa4>
 8006ac0:	601d      	str	r5, [r3, #0]
 8006ac2:	e4df      	b.n	8006484 <_dtoa_r+0xa4>
 8006ac4:	465f      	mov	r7, fp
 8006ac6:	462b      	mov	r3, r5
 8006ac8:	461d      	mov	r5, r3
 8006aca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006ace:	2a39      	cmp	r2, #57	; 0x39
 8006ad0:	d106      	bne.n	8006ae0 <_dtoa_r+0x700>
 8006ad2:	9a00      	ldr	r2, [sp, #0]
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	d1f7      	bne.n	8006ac8 <_dtoa_r+0x6e8>
 8006ad8:	9900      	ldr	r1, [sp, #0]
 8006ada:	2230      	movs	r2, #48	; 0x30
 8006adc:	3701      	adds	r7, #1
 8006ade:	700a      	strb	r2, [r1, #0]
 8006ae0:	781a      	ldrb	r2, [r3, #0]
 8006ae2:	3201      	adds	r2, #1
 8006ae4:	701a      	strb	r2, [r3, #0]
 8006ae6:	e790      	b.n	8006a0a <_dtoa_r+0x62a>
 8006ae8:	4ba3      	ldr	r3, [pc, #652]	; (8006d78 <_dtoa_r+0x998>)
 8006aea:	2200      	movs	r2, #0
 8006aec:	f7f9 fd8c 	bl	8000608 <__aeabi_dmul>
 8006af0:	2200      	movs	r2, #0
 8006af2:	2300      	movs	r3, #0
 8006af4:	4606      	mov	r6, r0
 8006af6:	460f      	mov	r7, r1
 8006af8:	f7f9 ffee 	bl	8000ad8 <__aeabi_dcmpeq>
 8006afc:	2800      	cmp	r0, #0
 8006afe:	d09e      	beq.n	8006a3e <_dtoa_r+0x65e>
 8006b00:	e7d0      	b.n	8006aa4 <_dtoa_r+0x6c4>
 8006b02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b04:	2a00      	cmp	r2, #0
 8006b06:	f000 80ca 	beq.w	8006c9e <_dtoa_r+0x8be>
 8006b0a:	9a07      	ldr	r2, [sp, #28]
 8006b0c:	2a01      	cmp	r2, #1
 8006b0e:	f300 80ad 	bgt.w	8006c6c <_dtoa_r+0x88c>
 8006b12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006b14:	2a00      	cmp	r2, #0
 8006b16:	f000 80a5 	beq.w	8006c64 <_dtoa_r+0x884>
 8006b1a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006b1e:	9e08      	ldr	r6, [sp, #32]
 8006b20:	9d05      	ldr	r5, [sp, #20]
 8006b22:	9a05      	ldr	r2, [sp, #20]
 8006b24:	441a      	add	r2, r3
 8006b26:	9205      	str	r2, [sp, #20]
 8006b28:	9a06      	ldr	r2, [sp, #24]
 8006b2a:	2101      	movs	r1, #1
 8006b2c:	441a      	add	r2, r3
 8006b2e:	4620      	mov	r0, r4
 8006b30:	9206      	str	r2, [sp, #24]
 8006b32:	f000 fc3d 	bl	80073b0 <__i2b>
 8006b36:	4607      	mov	r7, r0
 8006b38:	b165      	cbz	r5, 8006b54 <_dtoa_r+0x774>
 8006b3a:	9b06      	ldr	r3, [sp, #24]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	dd09      	ble.n	8006b54 <_dtoa_r+0x774>
 8006b40:	42ab      	cmp	r3, r5
 8006b42:	9a05      	ldr	r2, [sp, #20]
 8006b44:	bfa8      	it	ge
 8006b46:	462b      	movge	r3, r5
 8006b48:	1ad2      	subs	r2, r2, r3
 8006b4a:	9205      	str	r2, [sp, #20]
 8006b4c:	9a06      	ldr	r2, [sp, #24]
 8006b4e:	1aed      	subs	r5, r5, r3
 8006b50:	1ad3      	subs	r3, r2, r3
 8006b52:	9306      	str	r3, [sp, #24]
 8006b54:	9b08      	ldr	r3, [sp, #32]
 8006b56:	b1f3      	cbz	r3, 8006b96 <_dtoa_r+0x7b6>
 8006b58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	f000 80a3 	beq.w	8006ca6 <_dtoa_r+0x8c6>
 8006b60:	2e00      	cmp	r6, #0
 8006b62:	dd10      	ble.n	8006b86 <_dtoa_r+0x7a6>
 8006b64:	4639      	mov	r1, r7
 8006b66:	4632      	mov	r2, r6
 8006b68:	4620      	mov	r0, r4
 8006b6a:	f000 fce1 	bl	8007530 <__pow5mult>
 8006b6e:	4652      	mov	r2, sl
 8006b70:	4601      	mov	r1, r0
 8006b72:	4607      	mov	r7, r0
 8006b74:	4620      	mov	r0, r4
 8006b76:	f000 fc31 	bl	80073dc <__multiply>
 8006b7a:	4651      	mov	r1, sl
 8006b7c:	4680      	mov	r8, r0
 8006b7e:	4620      	mov	r0, r4
 8006b80:	f000 fb60 	bl	8007244 <_Bfree>
 8006b84:	46c2      	mov	sl, r8
 8006b86:	9b08      	ldr	r3, [sp, #32]
 8006b88:	1b9a      	subs	r2, r3, r6
 8006b8a:	d004      	beq.n	8006b96 <_dtoa_r+0x7b6>
 8006b8c:	4651      	mov	r1, sl
 8006b8e:	4620      	mov	r0, r4
 8006b90:	f000 fcce 	bl	8007530 <__pow5mult>
 8006b94:	4682      	mov	sl, r0
 8006b96:	2101      	movs	r1, #1
 8006b98:	4620      	mov	r0, r4
 8006b9a:	f000 fc09 	bl	80073b0 <__i2b>
 8006b9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	4606      	mov	r6, r0
 8006ba4:	f340 8081 	ble.w	8006caa <_dtoa_r+0x8ca>
 8006ba8:	461a      	mov	r2, r3
 8006baa:	4601      	mov	r1, r0
 8006bac:	4620      	mov	r0, r4
 8006bae:	f000 fcbf 	bl	8007530 <__pow5mult>
 8006bb2:	9b07      	ldr	r3, [sp, #28]
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	4606      	mov	r6, r0
 8006bb8:	dd7a      	ble.n	8006cb0 <_dtoa_r+0x8d0>
 8006bba:	f04f 0800 	mov.w	r8, #0
 8006bbe:	6933      	ldr	r3, [r6, #16]
 8006bc0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006bc4:	6918      	ldr	r0, [r3, #16]
 8006bc6:	f000 fba5 	bl	8007314 <__hi0bits>
 8006bca:	f1c0 0020 	rsb	r0, r0, #32
 8006bce:	9b06      	ldr	r3, [sp, #24]
 8006bd0:	4418      	add	r0, r3
 8006bd2:	f010 001f 	ands.w	r0, r0, #31
 8006bd6:	f000 8094 	beq.w	8006d02 <_dtoa_r+0x922>
 8006bda:	f1c0 0320 	rsb	r3, r0, #32
 8006bde:	2b04      	cmp	r3, #4
 8006be0:	f340 8085 	ble.w	8006cee <_dtoa_r+0x90e>
 8006be4:	9b05      	ldr	r3, [sp, #20]
 8006be6:	f1c0 001c 	rsb	r0, r0, #28
 8006bea:	4403      	add	r3, r0
 8006bec:	9305      	str	r3, [sp, #20]
 8006bee:	9b06      	ldr	r3, [sp, #24]
 8006bf0:	4403      	add	r3, r0
 8006bf2:	4405      	add	r5, r0
 8006bf4:	9306      	str	r3, [sp, #24]
 8006bf6:	9b05      	ldr	r3, [sp, #20]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	dd05      	ble.n	8006c08 <_dtoa_r+0x828>
 8006bfc:	4651      	mov	r1, sl
 8006bfe:	461a      	mov	r2, r3
 8006c00:	4620      	mov	r0, r4
 8006c02:	f000 fcef 	bl	80075e4 <__lshift>
 8006c06:	4682      	mov	sl, r0
 8006c08:	9b06      	ldr	r3, [sp, #24]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	dd05      	ble.n	8006c1a <_dtoa_r+0x83a>
 8006c0e:	4631      	mov	r1, r6
 8006c10:	461a      	mov	r2, r3
 8006c12:	4620      	mov	r0, r4
 8006c14:	f000 fce6 	bl	80075e4 <__lshift>
 8006c18:	4606      	mov	r6, r0
 8006c1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d072      	beq.n	8006d06 <_dtoa_r+0x926>
 8006c20:	4631      	mov	r1, r6
 8006c22:	4650      	mov	r0, sl
 8006c24:	f000 fd4a 	bl	80076bc <__mcmp>
 8006c28:	2800      	cmp	r0, #0
 8006c2a:	da6c      	bge.n	8006d06 <_dtoa_r+0x926>
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	4651      	mov	r1, sl
 8006c30:	220a      	movs	r2, #10
 8006c32:	4620      	mov	r0, r4
 8006c34:	f000 fb28 	bl	8007288 <__multadd>
 8006c38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c3a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006c3e:	4682      	mov	sl, r0
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	f000 81b0 	beq.w	8006fa6 <_dtoa_r+0xbc6>
 8006c46:	2300      	movs	r3, #0
 8006c48:	4639      	mov	r1, r7
 8006c4a:	220a      	movs	r2, #10
 8006c4c:	4620      	mov	r0, r4
 8006c4e:	f000 fb1b 	bl	8007288 <__multadd>
 8006c52:	9b01      	ldr	r3, [sp, #4]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	4607      	mov	r7, r0
 8006c58:	f300 8096 	bgt.w	8006d88 <_dtoa_r+0x9a8>
 8006c5c:	9b07      	ldr	r3, [sp, #28]
 8006c5e:	2b02      	cmp	r3, #2
 8006c60:	dc59      	bgt.n	8006d16 <_dtoa_r+0x936>
 8006c62:	e091      	b.n	8006d88 <_dtoa_r+0x9a8>
 8006c64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006c66:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006c6a:	e758      	b.n	8006b1e <_dtoa_r+0x73e>
 8006c6c:	9b04      	ldr	r3, [sp, #16]
 8006c6e:	1e5e      	subs	r6, r3, #1
 8006c70:	9b08      	ldr	r3, [sp, #32]
 8006c72:	42b3      	cmp	r3, r6
 8006c74:	bfbf      	itttt	lt
 8006c76:	9b08      	ldrlt	r3, [sp, #32]
 8006c78:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8006c7a:	9608      	strlt	r6, [sp, #32]
 8006c7c:	1af3      	sublt	r3, r6, r3
 8006c7e:	bfb4      	ite	lt
 8006c80:	18d2      	addlt	r2, r2, r3
 8006c82:	1b9e      	subge	r6, r3, r6
 8006c84:	9b04      	ldr	r3, [sp, #16]
 8006c86:	bfbc      	itt	lt
 8006c88:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8006c8a:	2600      	movlt	r6, #0
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	bfb7      	itett	lt
 8006c90:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8006c94:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006c98:	1a9d      	sublt	r5, r3, r2
 8006c9a:	2300      	movlt	r3, #0
 8006c9c:	e741      	b.n	8006b22 <_dtoa_r+0x742>
 8006c9e:	9e08      	ldr	r6, [sp, #32]
 8006ca0:	9d05      	ldr	r5, [sp, #20]
 8006ca2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006ca4:	e748      	b.n	8006b38 <_dtoa_r+0x758>
 8006ca6:	9a08      	ldr	r2, [sp, #32]
 8006ca8:	e770      	b.n	8006b8c <_dtoa_r+0x7ac>
 8006caa:	9b07      	ldr	r3, [sp, #28]
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	dc19      	bgt.n	8006ce4 <_dtoa_r+0x904>
 8006cb0:	9b02      	ldr	r3, [sp, #8]
 8006cb2:	b9bb      	cbnz	r3, 8006ce4 <_dtoa_r+0x904>
 8006cb4:	9b03      	ldr	r3, [sp, #12]
 8006cb6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006cba:	b99b      	cbnz	r3, 8006ce4 <_dtoa_r+0x904>
 8006cbc:	9b03      	ldr	r3, [sp, #12]
 8006cbe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006cc2:	0d1b      	lsrs	r3, r3, #20
 8006cc4:	051b      	lsls	r3, r3, #20
 8006cc6:	b183      	cbz	r3, 8006cea <_dtoa_r+0x90a>
 8006cc8:	9b05      	ldr	r3, [sp, #20]
 8006cca:	3301      	adds	r3, #1
 8006ccc:	9305      	str	r3, [sp, #20]
 8006cce:	9b06      	ldr	r3, [sp, #24]
 8006cd0:	3301      	adds	r3, #1
 8006cd2:	9306      	str	r3, [sp, #24]
 8006cd4:	f04f 0801 	mov.w	r8, #1
 8006cd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	f47f af6f 	bne.w	8006bbe <_dtoa_r+0x7de>
 8006ce0:	2001      	movs	r0, #1
 8006ce2:	e774      	b.n	8006bce <_dtoa_r+0x7ee>
 8006ce4:	f04f 0800 	mov.w	r8, #0
 8006ce8:	e7f6      	b.n	8006cd8 <_dtoa_r+0x8f8>
 8006cea:	4698      	mov	r8, r3
 8006cec:	e7f4      	b.n	8006cd8 <_dtoa_r+0x8f8>
 8006cee:	d082      	beq.n	8006bf6 <_dtoa_r+0x816>
 8006cf0:	9a05      	ldr	r2, [sp, #20]
 8006cf2:	331c      	adds	r3, #28
 8006cf4:	441a      	add	r2, r3
 8006cf6:	9205      	str	r2, [sp, #20]
 8006cf8:	9a06      	ldr	r2, [sp, #24]
 8006cfa:	441a      	add	r2, r3
 8006cfc:	441d      	add	r5, r3
 8006cfe:	9206      	str	r2, [sp, #24]
 8006d00:	e779      	b.n	8006bf6 <_dtoa_r+0x816>
 8006d02:	4603      	mov	r3, r0
 8006d04:	e7f4      	b.n	8006cf0 <_dtoa_r+0x910>
 8006d06:	9b04      	ldr	r3, [sp, #16]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	dc37      	bgt.n	8006d7c <_dtoa_r+0x99c>
 8006d0c:	9b07      	ldr	r3, [sp, #28]
 8006d0e:	2b02      	cmp	r3, #2
 8006d10:	dd34      	ble.n	8006d7c <_dtoa_r+0x99c>
 8006d12:	9b04      	ldr	r3, [sp, #16]
 8006d14:	9301      	str	r3, [sp, #4]
 8006d16:	9b01      	ldr	r3, [sp, #4]
 8006d18:	b963      	cbnz	r3, 8006d34 <_dtoa_r+0x954>
 8006d1a:	4631      	mov	r1, r6
 8006d1c:	2205      	movs	r2, #5
 8006d1e:	4620      	mov	r0, r4
 8006d20:	f000 fab2 	bl	8007288 <__multadd>
 8006d24:	4601      	mov	r1, r0
 8006d26:	4606      	mov	r6, r0
 8006d28:	4650      	mov	r0, sl
 8006d2a:	f000 fcc7 	bl	80076bc <__mcmp>
 8006d2e:	2800      	cmp	r0, #0
 8006d30:	f73f adbb 	bgt.w	80068aa <_dtoa_r+0x4ca>
 8006d34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d36:	9d00      	ldr	r5, [sp, #0]
 8006d38:	ea6f 0b03 	mvn.w	fp, r3
 8006d3c:	f04f 0800 	mov.w	r8, #0
 8006d40:	4631      	mov	r1, r6
 8006d42:	4620      	mov	r0, r4
 8006d44:	f000 fa7e 	bl	8007244 <_Bfree>
 8006d48:	2f00      	cmp	r7, #0
 8006d4a:	f43f aeab 	beq.w	8006aa4 <_dtoa_r+0x6c4>
 8006d4e:	f1b8 0f00 	cmp.w	r8, #0
 8006d52:	d005      	beq.n	8006d60 <_dtoa_r+0x980>
 8006d54:	45b8      	cmp	r8, r7
 8006d56:	d003      	beq.n	8006d60 <_dtoa_r+0x980>
 8006d58:	4641      	mov	r1, r8
 8006d5a:	4620      	mov	r0, r4
 8006d5c:	f000 fa72 	bl	8007244 <_Bfree>
 8006d60:	4639      	mov	r1, r7
 8006d62:	4620      	mov	r0, r4
 8006d64:	f000 fa6e 	bl	8007244 <_Bfree>
 8006d68:	e69c      	b.n	8006aa4 <_dtoa_r+0x6c4>
 8006d6a:	2600      	movs	r6, #0
 8006d6c:	4637      	mov	r7, r6
 8006d6e:	e7e1      	b.n	8006d34 <_dtoa_r+0x954>
 8006d70:	46bb      	mov	fp, r7
 8006d72:	4637      	mov	r7, r6
 8006d74:	e599      	b.n	80068aa <_dtoa_r+0x4ca>
 8006d76:	bf00      	nop
 8006d78:	40240000 	.word	0x40240000
 8006d7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	f000 80c8 	beq.w	8006f14 <_dtoa_r+0xb34>
 8006d84:	9b04      	ldr	r3, [sp, #16]
 8006d86:	9301      	str	r3, [sp, #4]
 8006d88:	2d00      	cmp	r5, #0
 8006d8a:	dd05      	ble.n	8006d98 <_dtoa_r+0x9b8>
 8006d8c:	4639      	mov	r1, r7
 8006d8e:	462a      	mov	r2, r5
 8006d90:	4620      	mov	r0, r4
 8006d92:	f000 fc27 	bl	80075e4 <__lshift>
 8006d96:	4607      	mov	r7, r0
 8006d98:	f1b8 0f00 	cmp.w	r8, #0
 8006d9c:	d05b      	beq.n	8006e56 <_dtoa_r+0xa76>
 8006d9e:	6879      	ldr	r1, [r7, #4]
 8006da0:	4620      	mov	r0, r4
 8006da2:	f000 fa0f 	bl	80071c4 <_Balloc>
 8006da6:	4605      	mov	r5, r0
 8006da8:	b928      	cbnz	r0, 8006db6 <_dtoa_r+0x9d6>
 8006daa:	4b83      	ldr	r3, [pc, #524]	; (8006fb8 <_dtoa_r+0xbd8>)
 8006dac:	4602      	mov	r2, r0
 8006dae:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006db2:	f7ff bb2e 	b.w	8006412 <_dtoa_r+0x32>
 8006db6:	693a      	ldr	r2, [r7, #16]
 8006db8:	3202      	adds	r2, #2
 8006dba:	0092      	lsls	r2, r2, #2
 8006dbc:	f107 010c 	add.w	r1, r7, #12
 8006dc0:	300c      	adds	r0, #12
 8006dc2:	f001 f801 	bl	8007dc8 <memcpy>
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	4629      	mov	r1, r5
 8006dca:	4620      	mov	r0, r4
 8006dcc:	f000 fc0a 	bl	80075e4 <__lshift>
 8006dd0:	9b00      	ldr	r3, [sp, #0]
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	9304      	str	r3, [sp, #16]
 8006dd6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006dda:	4413      	add	r3, r2
 8006ddc:	9308      	str	r3, [sp, #32]
 8006dde:	9b02      	ldr	r3, [sp, #8]
 8006de0:	f003 0301 	and.w	r3, r3, #1
 8006de4:	46b8      	mov	r8, r7
 8006de6:	9306      	str	r3, [sp, #24]
 8006de8:	4607      	mov	r7, r0
 8006dea:	9b04      	ldr	r3, [sp, #16]
 8006dec:	4631      	mov	r1, r6
 8006dee:	3b01      	subs	r3, #1
 8006df0:	4650      	mov	r0, sl
 8006df2:	9301      	str	r3, [sp, #4]
 8006df4:	f7ff fa6a 	bl	80062cc <quorem>
 8006df8:	4641      	mov	r1, r8
 8006dfa:	9002      	str	r0, [sp, #8]
 8006dfc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006e00:	4650      	mov	r0, sl
 8006e02:	f000 fc5b 	bl	80076bc <__mcmp>
 8006e06:	463a      	mov	r2, r7
 8006e08:	9005      	str	r0, [sp, #20]
 8006e0a:	4631      	mov	r1, r6
 8006e0c:	4620      	mov	r0, r4
 8006e0e:	f000 fc71 	bl	80076f4 <__mdiff>
 8006e12:	68c2      	ldr	r2, [r0, #12]
 8006e14:	4605      	mov	r5, r0
 8006e16:	bb02      	cbnz	r2, 8006e5a <_dtoa_r+0xa7a>
 8006e18:	4601      	mov	r1, r0
 8006e1a:	4650      	mov	r0, sl
 8006e1c:	f000 fc4e 	bl	80076bc <__mcmp>
 8006e20:	4602      	mov	r2, r0
 8006e22:	4629      	mov	r1, r5
 8006e24:	4620      	mov	r0, r4
 8006e26:	9209      	str	r2, [sp, #36]	; 0x24
 8006e28:	f000 fa0c 	bl	8007244 <_Bfree>
 8006e2c:	9b07      	ldr	r3, [sp, #28]
 8006e2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e30:	9d04      	ldr	r5, [sp, #16]
 8006e32:	ea43 0102 	orr.w	r1, r3, r2
 8006e36:	9b06      	ldr	r3, [sp, #24]
 8006e38:	4319      	orrs	r1, r3
 8006e3a:	d110      	bne.n	8006e5e <_dtoa_r+0xa7e>
 8006e3c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006e40:	d029      	beq.n	8006e96 <_dtoa_r+0xab6>
 8006e42:	9b05      	ldr	r3, [sp, #20]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	dd02      	ble.n	8006e4e <_dtoa_r+0xa6e>
 8006e48:	9b02      	ldr	r3, [sp, #8]
 8006e4a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006e4e:	9b01      	ldr	r3, [sp, #4]
 8006e50:	f883 9000 	strb.w	r9, [r3]
 8006e54:	e774      	b.n	8006d40 <_dtoa_r+0x960>
 8006e56:	4638      	mov	r0, r7
 8006e58:	e7ba      	b.n	8006dd0 <_dtoa_r+0x9f0>
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	e7e1      	b.n	8006e22 <_dtoa_r+0xa42>
 8006e5e:	9b05      	ldr	r3, [sp, #20]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	db04      	blt.n	8006e6e <_dtoa_r+0xa8e>
 8006e64:	9907      	ldr	r1, [sp, #28]
 8006e66:	430b      	orrs	r3, r1
 8006e68:	9906      	ldr	r1, [sp, #24]
 8006e6a:	430b      	orrs	r3, r1
 8006e6c:	d120      	bne.n	8006eb0 <_dtoa_r+0xad0>
 8006e6e:	2a00      	cmp	r2, #0
 8006e70:	dded      	ble.n	8006e4e <_dtoa_r+0xa6e>
 8006e72:	4651      	mov	r1, sl
 8006e74:	2201      	movs	r2, #1
 8006e76:	4620      	mov	r0, r4
 8006e78:	f000 fbb4 	bl	80075e4 <__lshift>
 8006e7c:	4631      	mov	r1, r6
 8006e7e:	4682      	mov	sl, r0
 8006e80:	f000 fc1c 	bl	80076bc <__mcmp>
 8006e84:	2800      	cmp	r0, #0
 8006e86:	dc03      	bgt.n	8006e90 <_dtoa_r+0xab0>
 8006e88:	d1e1      	bne.n	8006e4e <_dtoa_r+0xa6e>
 8006e8a:	f019 0f01 	tst.w	r9, #1
 8006e8e:	d0de      	beq.n	8006e4e <_dtoa_r+0xa6e>
 8006e90:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006e94:	d1d8      	bne.n	8006e48 <_dtoa_r+0xa68>
 8006e96:	9a01      	ldr	r2, [sp, #4]
 8006e98:	2339      	movs	r3, #57	; 0x39
 8006e9a:	7013      	strb	r3, [r2, #0]
 8006e9c:	462b      	mov	r3, r5
 8006e9e:	461d      	mov	r5, r3
 8006ea0:	3b01      	subs	r3, #1
 8006ea2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006ea6:	2a39      	cmp	r2, #57	; 0x39
 8006ea8:	d06c      	beq.n	8006f84 <_dtoa_r+0xba4>
 8006eaa:	3201      	adds	r2, #1
 8006eac:	701a      	strb	r2, [r3, #0]
 8006eae:	e747      	b.n	8006d40 <_dtoa_r+0x960>
 8006eb0:	2a00      	cmp	r2, #0
 8006eb2:	dd07      	ble.n	8006ec4 <_dtoa_r+0xae4>
 8006eb4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006eb8:	d0ed      	beq.n	8006e96 <_dtoa_r+0xab6>
 8006eba:	9a01      	ldr	r2, [sp, #4]
 8006ebc:	f109 0301 	add.w	r3, r9, #1
 8006ec0:	7013      	strb	r3, [r2, #0]
 8006ec2:	e73d      	b.n	8006d40 <_dtoa_r+0x960>
 8006ec4:	9b04      	ldr	r3, [sp, #16]
 8006ec6:	9a08      	ldr	r2, [sp, #32]
 8006ec8:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d043      	beq.n	8006f58 <_dtoa_r+0xb78>
 8006ed0:	4651      	mov	r1, sl
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	220a      	movs	r2, #10
 8006ed6:	4620      	mov	r0, r4
 8006ed8:	f000 f9d6 	bl	8007288 <__multadd>
 8006edc:	45b8      	cmp	r8, r7
 8006ede:	4682      	mov	sl, r0
 8006ee0:	f04f 0300 	mov.w	r3, #0
 8006ee4:	f04f 020a 	mov.w	r2, #10
 8006ee8:	4641      	mov	r1, r8
 8006eea:	4620      	mov	r0, r4
 8006eec:	d107      	bne.n	8006efe <_dtoa_r+0xb1e>
 8006eee:	f000 f9cb 	bl	8007288 <__multadd>
 8006ef2:	4680      	mov	r8, r0
 8006ef4:	4607      	mov	r7, r0
 8006ef6:	9b04      	ldr	r3, [sp, #16]
 8006ef8:	3301      	adds	r3, #1
 8006efa:	9304      	str	r3, [sp, #16]
 8006efc:	e775      	b.n	8006dea <_dtoa_r+0xa0a>
 8006efe:	f000 f9c3 	bl	8007288 <__multadd>
 8006f02:	4639      	mov	r1, r7
 8006f04:	4680      	mov	r8, r0
 8006f06:	2300      	movs	r3, #0
 8006f08:	220a      	movs	r2, #10
 8006f0a:	4620      	mov	r0, r4
 8006f0c:	f000 f9bc 	bl	8007288 <__multadd>
 8006f10:	4607      	mov	r7, r0
 8006f12:	e7f0      	b.n	8006ef6 <_dtoa_r+0xb16>
 8006f14:	9b04      	ldr	r3, [sp, #16]
 8006f16:	9301      	str	r3, [sp, #4]
 8006f18:	9d00      	ldr	r5, [sp, #0]
 8006f1a:	4631      	mov	r1, r6
 8006f1c:	4650      	mov	r0, sl
 8006f1e:	f7ff f9d5 	bl	80062cc <quorem>
 8006f22:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006f26:	9b00      	ldr	r3, [sp, #0]
 8006f28:	f805 9b01 	strb.w	r9, [r5], #1
 8006f2c:	1aea      	subs	r2, r5, r3
 8006f2e:	9b01      	ldr	r3, [sp, #4]
 8006f30:	4293      	cmp	r3, r2
 8006f32:	dd07      	ble.n	8006f44 <_dtoa_r+0xb64>
 8006f34:	4651      	mov	r1, sl
 8006f36:	2300      	movs	r3, #0
 8006f38:	220a      	movs	r2, #10
 8006f3a:	4620      	mov	r0, r4
 8006f3c:	f000 f9a4 	bl	8007288 <__multadd>
 8006f40:	4682      	mov	sl, r0
 8006f42:	e7ea      	b.n	8006f1a <_dtoa_r+0xb3a>
 8006f44:	9b01      	ldr	r3, [sp, #4]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	bfc8      	it	gt
 8006f4a:	461d      	movgt	r5, r3
 8006f4c:	9b00      	ldr	r3, [sp, #0]
 8006f4e:	bfd8      	it	le
 8006f50:	2501      	movle	r5, #1
 8006f52:	441d      	add	r5, r3
 8006f54:	f04f 0800 	mov.w	r8, #0
 8006f58:	4651      	mov	r1, sl
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	4620      	mov	r0, r4
 8006f5e:	f000 fb41 	bl	80075e4 <__lshift>
 8006f62:	4631      	mov	r1, r6
 8006f64:	4682      	mov	sl, r0
 8006f66:	f000 fba9 	bl	80076bc <__mcmp>
 8006f6a:	2800      	cmp	r0, #0
 8006f6c:	dc96      	bgt.n	8006e9c <_dtoa_r+0xabc>
 8006f6e:	d102      	bne.n	8006f76 <_dtoa_r+0xb96>
 8006f70:	f019 0f01 	tst.w	r9, #1
 8006f74:	d192      	bne.n	8006e9c <_dtoa_r+0xabc>
 8006f76:	462b      	mov	r3, r5
 8006f78:	461d      	mov	r5, r3
 8006f7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006f7e:	2a30      	cmp	r2, #48	; 0x30
 8006f80:	d0fa      	beq.n	8006f78 <_dtoa_r+0xb98>
 8006f82:	e6dd      	b.n	8006d40 <_dtoa_r+0x960>
 8006f84:	9a00      	ldr	r2, [sp, #0]
 8006f86:	429a      	cmp	r2, r3
 8006f88:	d189      	bne.n	8006e9e <_dtoa_r+0xabe>
 8006f8a:	f10b 0b01 	add.w	fp, fp, #1
 8006f8e:	2331      	movs	r3, #49	; 0x31
 8006f90:	e796      	b.n	8006ec0 <_dtoa_r+0xae0>
 8006f92:	4b0a      	ldr	r3, [pc, #40]	; (8006fbc <_dtoa_r+0xbdc>)
 8006f94:	f7ff ba99 	b.w	80064ca <_dtoa_r+0xea>
 8006f98:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	f47f aa6d 	bne.w	800647a <_dtoa_r+0x9a>
 8006fa0:	4b07      	ldr	r3, [pc, #28]	; (8006fc0 <_dtoa_r+0xbe0>)
 8006fa2:	f7ff ba92 	b.w	80064ca <_dtoa_r+0xea>
 8006fa6:	9b01      	ldr	r3, [sp, #4]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	dcb5      	bgt.n	8006f18 <_dtoa_r+0xb38>
 8006fac:	9b07      	ldr	r3, [sp, #28]
 8006fae:	2b02      	cmp	r3, #2
 8006fb0:	f73f aeb1 	bgt.w	8006d16 <_dtoa_r+0x936>
 8006fb4:	e7b0      	b.n	8006f18 <_dtoa_r+0xb38>
 8006fb6:	bf00      	nop
 8006fb8:	08008647 	.word	0x08008647
 8006fbc:	080085a7 	.word	0x080085a7
 8006fc0:	080085cb 	.word	0x080085cb

08006fc4 <_free_r>:
 8006fc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006fc6:	2900      	cmp	r1, #0
 8006fc8:	d044      	beq.n	8007054 <_free_r+0x90>
 8006fca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fce:	9001      	str	r0, [sp, #4]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	f1a1 0404 	sub.w	r4, r1, #4
 8006fd6:	bfb8      	it	lt
 8006fd8:	18e4      	addlt	r4, r4, r3
 8006fda:	f000 f8e7 	bl	80071ac <__malloc_lock>
 8006fde:	4a1e      	ldr	r2, [pc, #120]	; (8007058 <_free_r+0x94>)
 8006fe0:	9801      	ldr	r0, [sp, #4]
 8006fe2:	6813      	ldr	r3, [r2, #0]
 8006fe4:	b933      	cbnz	r3, 8006ff4 <_free_r+0x30>
 8006fe6:	6063      	str	r3, [r4, #4]
 8006fe8:	6014      	str	r4, [r2, #0]
 8006fea:	b003      	add	sp, #12
 8006fec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006ff0:	f000 b8e2 	b.w	80071b8 <__malloc_unlock>
 8006ff4:	42a3      	cmp	r3, r4
 8006ff6:	d908      	bls.n	800700a <_free_r+0x46>
 8006ff8:	6825      	ldr	r5, [r4, #0]
 8006ffa:	1961      	adds	r1, r4, r5
 8006ffc:	428b      	cmp	r3, r1
 8006ffe:	bf01      	itttt	eq
 8007000:	6819      	ldreq	r1, [r3, #0]
 8007002:	685b      	ldreq	r3, [r3, #4]
 8007004:	1949      	addeq	r1, r1, r5
 8007006:	6021      	streq	r1, [r4, #0]
 8007008:	e7ed      	b.n	8006fe6 <_free_r+0x22>
 800700a:	461a      	mov	r2, r3
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	b10b      	cbz	r3, 8007014 <_free_r+0x50>
 8007010:	42a3      	cmp	r3, r4
 8007012:	d9fa      	bls.n	800700a <_free_r+0x46>
 8007014:	6811      	ldr	r1, [r2, #0]
 8007016:	1855      	adds	r5, r2, r1
 8007018:	42a5      	cmp	r5, r4
 800701a:	d10b      	bne.n	8007034 <_free_r+0x70>
 800701c:	6824      	ldr	r4, [r4, #0]
 800701e:	4421      	add	r1, r4
 8007020:	1854      	adds	r4, r2, r1
 8007022:	42a3      	cmp	r3, r4
 8007024:	6011      	str	r1, [r2, #0]
 8007026:	d1e0      	bne.n	8006fea <_free_r+0x26>
 8007028:	681c      	ldr	r4, [r3, #0]
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	6053      	str	r3, [r2, #4]
 800702e:	440c      	add	r4, r1
 8007030:	6014      	str	r4, [r2, #0]
 8007032:	e7da      	b.n	8006fea <_free_r+0x26>
 8007034:	d902      	bls.n	800703c <_free_r+0x78>
 8007036:	230c      	movs	r3, #12
 8007038:	6003      	str	r3, [r0, #0]
 800703a:	e7d6      	b.n	8006fea <_free_r+0x26>
 800703c:	6825      	ldr	r5, [r4, #0]
 800703e:	1961      	adds	r1, r4, r5
 8007040:	428b      	cmp	r3, r1
 8007042:	bf04      	itt	eq
 8007044:	6819      	ldreq	r1, [r3, #0]
 8007046:	685b      	ldreq	r3, [r3, #4]
 8007048:	6063      	str	r3, [r4, #4]
 800704a:	bf04      	itt	eq
 800704c:	1949      	addeq	r1, r1, r5
 800704e:	6021      	streq	r1, [r4, #0]
 8007050:	6054      	str	r4, [r2, #4]
 8007052:	e7ca      	b.n	8006fea <_free_r+0x26>
 8007054:	b003      	add	sp, #12
 8007056:	bd30      	pop	{r4, r5, pc}
 8007058:	20000410 	.word	0x20000410

0800705c <malloc>:
 800705c:	4b02      	ldr	r3, [pc, #8]	; (8007068 <malloc+0xc>)
 800705e:	4601      	mov	r1, r0
 8007060:	6818      	ldr	r0, [r3, #0]
 8007062:	f000 b823 	b.w	80070ac <_malloc_r>
 8007066:	bf00      	nop
 8007068:	20000064 	.word	0x20000064

0800706c <sbrk_aligned>:
 800706c:	b570      	push	{r4, r5, r6, lr}
 800706e:	4e0e      	ldr	r6, [pc, #56]	; (80070a8 <sbrk_aligned+0x3c>)
 8007070:	460c      	mov	r4, r1
 8007072:	6831      	ldr	r1, [r6, #0]
 8007074:	4605      	mov	r5, r0
 8007076:	b911      	cbnz	r1, 800707e <sbrk_aligned+0x12>
 8007078:	f000 fe96 	bl	8007da8 <_sbrk_r>
 800707c:	6030      	str	r0, [r6, #0]
 800707e:	4621      	mov	r1, r4
 8007080:	4628      	mov	r0, r5
 8007082:	f000 fe91 	bl	8007da8 <_sbrk_r>
 8007086:	1c43      	adds	r3, r0, #1
 8007088:	d00a      	beq.n	80070a0 <sbrk_aligned+0x34>
 800708a:	1cc4      	adds	r4, r0, #3
 800708c:	f024 0403 	bic.w	r4, r4, #3
 8007090:	42a0      	cmp	r0, r4
 8007092:	d007      	beq.n	80070a4 <sbrk_aligned+0x38>
 8007094:	1a21      	subs	r1, r4, r0
 8007096:	4628      	mov	r0, r5
 8007098:	f000 fe86 	bl	8007da8 <_sbrk_r>
 800709c:	3001      	adds	r0, #1
 800709e:	d101      	bne.n	80070a4 <sbrk_aligned+0x38>
 80070a0:	f04f 34ff 	mov.w	r4, #4294967295
 80070a4:	4620      	mov	r0, r4
 80070a6:	bd70      	pop	{r4, r5, r6, pc}
 80070a8:	20000414 	.word	0x20000414

080070ac <_malloc_r>:
 80070ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070b0:	1ccd      	adds	r5, r1, #3
 80070b2:	f025 0503 	bic.w	r5, r5, #3
 80070b6:	3508      	adds	r5, #8
 80070b8:	2d0c      	cmp	r5, #12
 80070ba:	bf38      	it	cc
 80070bc:	250c      	movcc	r5, #12
 80070be:	2d00      	cmp	r5, #0
 80070c0:	4607      	mov	r7, r0
 80070c2:	db01      	blt.n	80070c8 <_malloc_r+0x1c>
 80070c4:	42a9      	cmp	r1, r5
 80070c6:	d905      	bls.n	80070d4 <_malloc_r+0x28>
 80070c8:	230c      	movs	r3, #12
 80070ca:	603b      	str	r3, [r7, #0]
 80070cc:	2600      	movs	r6, #0
 80070ce:	4630      	mov	r0, r6
 80070d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070d4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80071a8 <_malloc_r+0xfc>
 80070d8:	f000 f868 	bl	80071ac <__malloc_lock>
 80070dc:	f8d8 3000 	ldr.w	r3, [r8]
 80070e0:	461c      	mov	r4, r3
 80070e2:	bb5c      	cbnz	r4, 800713c <_malloc_r+0x90>
 80070e4:	4629      	mov	r1, r5
 80070e6:	4638      	mov	r0, r7
 80070e8:	f7ff ffc0 	bl	800706c <sbrk_aligned>
 80070ec:	1c43      	adds	r3, r0, #1
 80070ee:	4604      	mov	r4, r0
 80070f0:	d155      	bne.n	800719e <_malloc_r+0xf2>
 80070f2:	f8d8 4000 	ldr.w	r4, [r8]
 80070f6:	4626      	mov	r6, r4
 80070f8:	2e00      	cmp	r6, #0
 80070fa:	d145      	bne.n	8007188 <_malloc_r+0xdc>
 80070fc:	2c00      	cmp	r4, #0
 80070fe:	d048      	beq.n	8007192 <_malloc_r+0xe6>
 8007100:	6823      	ldr	r3, [r4, #0]
 8007102:	4631      	mov	r1, r6
 8007104:	4638      	mov	r0, r7
 8007106:	eb04 0903 	add.w	r9, r4, r3
 800710a:	f000 fe4d 	bl	8007da8 <_sbrk_r>
 800710e:	4581      	cmp	r9, r0
 8007110:	d13f      	bne.n	8007192 <_malloc_r+0xe6>
 8007112:	6821      	ldr	r1, [r4, #0]
 8007114:	1a6d      	subs	r5, r5, r1
 8007116:	4629      	mov	r1, r5
 8007118:	4638      	mov	r0, r7
 800711a:	f7ff ffa7 	bl	800706c <sbrk_aligned>
 800711e:	3001      	adds	r0, #1
 8007120:	d037      	beq.n	8007192 <_malloc_r+0xe6>
 8007122:	6823      	ldr	r3, [r4, #0]
 8007124:	442b      	add	r3, r5
 8007126:	6023      	str	r3, [r4, #0]
 8007128:	f8d8 3000 	ldr.w	r3, [r8]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d038      	beq.n	80071a2 <_malloc_r+0xf6>
 8007130:	685a      	ldr	r2, [r3, #4]
 8007132:	42a2      	cmp	r2, r4
 8007134:	d12b      	bne.n	800718e <_malloc_r+0xe2>
 8007136:	2200      	movs	r2, #0
 8007138:	605a      	str	r2, [r3, #4]
 800713a:	e00f      	b.n	800715c <_malloc_r+0xb0>
 800713c:	6822      	ldr	r2, [r4, #0]
 800713e:	1b52      	subs	r2, r2, r5
 8007140:	d41f      	bmi.n	8007182 <_malloc_r+0xd6>
 8007142:	2a0b      	cmp	r2, #11
 8007144:	d917      	bls.n	8007176 <_malloc_r+0xca>
 8007146:	1961      	adds	r1, r4, r5
 8007148:	42a3      	cmp	r3, r4
 800714a:	6025      	str	r5, [r4, #0]
 800714c:	bf18      	it	ne
 800714e:	6059      	strne	r1, [r3, #4]
 8007150:	6863      	ldr	r3, [r4, #4]
 8007152:	bf08      	it	eq
 8007154:	f8c8 1000 	streq.w	r1, [r8]
 8007158:	5162      	str	r2, [r4, r5]
 800715a:	604b      	str	r3, [r1, #4]
 800715c:	4638      	mov	r0, r7
 800715e:	f104 060b 	add.w	r6, r4, #11
 8007162:	f000 f829 	bl	80071b8 <__malloc_unlock>
 8007166:	f026 0607 	bic.w	r6, r6, #7
 800716a:	1d23      	adds	r3, r4, #4
 800716c:	1af2      	subs	r2, r6, r3
 800716e:	d0ae      	beq.n	80070ce <_malloc_r+0x22>
 8007170:	1b9b      	subs	r3, r3, r6
 8007172:	50a3      	str	r3, [r4, r2]
 8007174:	e7ab      	b.n	80070ce <_malloc_r+0x22>
 8007176:	42a3      	cmp	r3, r4
 8007178:	6862      	ldr	r2, [r4, #4]
 800717a:	d1dd      	bne.n	8007138 <_malloc_r+0x8c>
 800717c:	f8c8 2000 	str.w	r2, [r8]
 8007180:	e7ec      	b.n	800715c <_malloc_r+0xb0>
 8007182:	4623      	mov	r3, r4
 8007184:	6864      	ldr	r4, [r4, #4]
 8007186:	e7ac      	b.n	80070e2 <_malloc_r+0x36>
 8007188:	4634      	mov	r4, r6
 800718a:	6876      	ldr	r6, [r6, #4]
 800718c:	e7b4      	b.n	80070f8 <_malloc_r+0x4c>
 800718e:	4613      	mov	r3, r2
 8007190:	e7cc      	b.n	800712c <_malloc_r+0x80>
 8007192:	230c      	movs	r3, #12
 8007194:	603b      	str	r3, [r7, #0]
 8007196:	4638      	mov	r0, r7
 8007198:	f000 f80e 	bl	80071b8 <__malloc_unlock>
 800719c:	e797      	b.n	80070ce <_malloc_r+0x22>
 800719e:	6025      	str	r5, [r4, #0]
 80071a0:	e7dc      	b.n	800715c <_malloc_r+0xb0>
 80071a2:	605b      	str	r3, [r3, #4]
 80071a4:	deff      	udf	#255	; 0xff
 80071a6:	bf00      	nop
 80071a8:	20000410 	.word	0x20000410

080071ac <__malloc_lock>:
 80071ac:	4801      	ldr	r0, [pc, #4]	; (80071b4 <__malloc_lock+0x8>)
 80071ae:	f7ff b88b 	b.w	80062c8 <__retarget_lock_acquire_recursive>
 80071b2:	bf00      	nop
 80071b4:	2000040c 	.word	0x2000040c

080071b8 <__malloc_unlock>:
 80071b8:	4801      	ldr	r0, [pc, #4]	; (80071c0 <__malloc_unlock+0x8>)
 80071ba:	f7ff b886 	b.w	80062ca <__retarget_lock_release_recursive>
 80071be:	bf00      	nop
 80071c0:	2000040c 	.word	0x2000040c

080071c4 <_Balloc>:
 80071c4:	b570      	push	{r4, r5, r6, lr}
 80071c6:	69c6      	ldr	r6, [r0, #28]
 80071c8:	4604      	mov	r4, r0
 80071ca:	460d      	mov	r5, r1
 80071cc:	b976      	cbnz	r6, 80071ec <_Balloc+0x28>
 80071ce:	2010      	movs	r0, #16
 80071d0:	f7ff ff44 	bl	800705c <malloc>
 80071d4:	4602      	mov	r2, r0
 80071d6:	61e0      	str	r0, [r4, #28]
 80071d8:	b920      	cbnz	r0, 80071e4 <_Balloc+0x20>
 80071da:	4b18      	ldr	r3, [pc, #96]	; (800723c <_Balloc+0x78>)
 80071dc:	4818      	ldr	r0, [pc, #96]	; (8007240 <_Balloc+0x7c>)
 80071de:	216b      	movs	r1, #107	; 0x6b
 80071e0:	f000 fe00 	bl	8007de4 <__assert_func>
 80071e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80071e8:	6006      	str	r6, [r0, #0]
 80071ea:	60c6      	str	r6, [r0, #12]
 80071ec:	69e6      	ldr	r6, [r4, #28]
 80071ee:	68f3      	ldr	r3, [r6, #12]
 80071f0:	b183      	cbz	r3, 8007214 <_Balloc+0x50>
 80071f2:	69e3      	ldr	r3, [r4, #28]
 80071f4:	68db      	ldr	r3, [r3, #12]
 80071f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80071fa:	b9b8      	cbnz	r0, 800722c <_Balloc+0x68>
 80071fc:	2101      	movs	r1, #1
 80071fe:	fa01 f605 	lsl.w	r6, r1, r5
 8007202:	1d72      	adds	r2, r6, #5
 8007204:	0092      	lsls	r2, r2, #2
 8007206:	4620      	mov	r0, r4
 8007208:	f000 fe0a 	bl	8007e20 <_calloc_r>
 800720c:	b160      	cbz	r0, 8007228 <_Balloc+0x64>
 800720e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007212:	e00e      	b.n	8007232 <_Balloc+0x6e>
 8007214:	2221      	movs	r2, #33	; 0x21
 8007216:	2104      	movs	r1, #4
 8007218:	4620      	mov	r0, r4
 800721a:	f000 fe01 	bl	8007e20 <_calloc_r>
 800721e:	69e3      	ldr	r3, [r4, #28]
 8007220:	60f0      	str	r0, [r6, #12]
 8007222:	68db      	ldr	r3, [r3, #12]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d1e4      	bne.n	80071f2 <_Balloc+0x2e>
 8007228:	2000      	movs	r0, #0
 800722a:	bd70      	pop	{r4, r5, r6, pc}
 800722c:	6802      	ldr	r2, [r0, #0]
 800722e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007232:	2300      	movs	r3, #0
 8007234:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007238:	e7f7      	b.n	800722a <_Balloc+0x66>
 800723a:	bf00      	nop
 800723c:	080085d8 	.word	0x080085d8
 8007240:	08008658 	.word	0x08008658

08007244 <_Bfree>:
 8007244:	b570      	push	{r4, r5, r6, lr}
 8007246:	69c6      	ldr	r6, [r0, #28]
 8007248:	4605      	mov	r5, r0
 800724a:	460c      	mov	r4, r1
 800724c:	b976      	cbnz	r6, 800726c <_Bfree+0x28>
 800724e:	2010      	movs	r0, #16
 8007250:	f7ff ff04 	bl	800705c <malloc>
 8007254:	4602      	mov	r2, r0
 8007256:	61e8      	str	r0, [r5, #28]
 8007258:	b920      	cbnz	r0, 8007264 <_Bfree+0x20>
 800725a:	4b09      	ldr	r3, [pc, #36]	; (8007280 <_Bfree+0x3c>)
 800725c:	4809      	ldr	r0, [pc, #36]	; (8007284 <_Bfree+0x40>)
 800725e:	218f      	movs	r1, #143	; 0x8f
 8007260:	f000 fdc0 	bl	8007de4 <__assert_func>
 8007264:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007268:	6006      	str	r6, [r0, #0]
 800726a:	60c6      	str	r6, [r0, #12]
 800726c:	b13c      	cbz	r4, 800727e <_Bfree+0x3a>
 800726e:	69eb      	ldr	r3, [r5, #28]
 8007270:	6862      	ldr	r2, [r4, #4]
 8007272:	68db      	ldr	r3, [r3, #12]
 8007274:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007278:	6021      	str	r1, [r4, #0]
 800727a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800727e:	bd70      	pop	{r4, r5, r6, pc}
 8007280:	080085d8 	.word	0x080085d8
 8007284:	08008658 	.word	0x08008658

08007288 <__multadd>:
 8007288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800728c:	690d      	ldr	r5, [r1, #16]
 800728e:	4607      	mov	r7, r0
 8007290:	460c      	mov	r4, r1
 8007292:	461e      	mov	r6, r3
 8007294:	f101 0c14 	add.w	ip, r1, #20
 8007298:	2000      	movs	r0, #0
 800729a:	f8dc 3000 	ldr.w	r3, [ip]
 800729e:	b299      	uxth	r1, r3
 80072a0:	fb02 6101 	mla	r1, r2, r1, r6
 80072a4:	0c1e      	lsrs	r6, r3, #16
 80072a6:	0c0b      	lsrs	r3, r1, #16
 80072a8:	fb02 3306 	mla	r3, r2, r6, r3
 80072ac:	b289      	uxth	r1, r1
 80072ae:	3001      	adds	r0, #1
 80072b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80072b4:	4285      	cmp	r5, r0
 80072b6:	f84c 1b04 	str.w	r1, [ip], #4
 80072ba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80072be:	dcec      	bgt.n	800729a <__multadd+0x12>
 80072c0:	b30e      	cbz	r6, 8007306 <__multadd+0x7e>
 80072c2:	68a3      	ldr	r3, [r4, #8]
 80072c4:	42ab      	cmp	r3, r5
 80072c6:	dc19      	bgt.n	80072fc <__multadd+0x74>
 80072c8:	6861      	ldr	r1, [r4, #4]
 80072ca:	4638      	mov	r0, r7
 80072cc:	3101      	adds	r1, #1
 80072ce:	f7ff ff79 	bl	80071c4 <_Balloc>
 80072d2:	4680      	mov	r8, r0
 80072d4:	b928      	cbnz	r0, 80072e2 <__multadd+0x5a>
 80072d6:	4602      	mov	r2, r0
 80072d8:	4b0c      	ldr	r3, [pc, #48]	; (800730c <__multadd+0x84>)
 80072da:	480d      	ldr	r0, [pc, #52]	; (8007310 <__multadd+0x88>)
 80072dc:	21ba      	movs	r1, #186	; 0xba
 80072de:	f000 fd81 	bl	8007de4 <__assert_func>
 80072e2:	6922      	ldr	r2, [r4, #16]
 80072e4:	3202      	adds	r2, #2
 80072e6:	f104 010c 	add.w	r1, r4, #12
 80072ea:	0092      	lsls	r2, r2, #2
 80072ec:	300c      	adds	r0, #12
 80072ee:	f000 fd6b 	bl	8007dc8 <memcpy>
 80072f2:	4621      	mov	r1, r4
 80072f4:	4638      	mov	r0, r7
 80072f6:	f7ff ffa5 	bl	8007244 <_Bfree>
 80072fa:	4644      	mov	r4, r8
 80072fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007300:	3501      	adds	r5, #1
 8007302:	615e      	str	r6, [r3, #20]
 8007304:	6125      	str	r5, [r4, #16]
 8007306:	4620      	mov	r0, r4
 8007308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800730c:	08008647 	.word	0x08008647
 8007310:	08008658 	.word	0x08008658

08007314 <__hi0bits>:
 8007314:	0c03      	lsrs	r3, r0, #16
 8007316:	041b      	lsls	r3, r3, #16
 8007318:	b9d3      	cbnz	r3, 8007350 <__hi0bits+0x3c>
 800731a:	0400      	lsls	r0, r0, #16
 800731c:	2310      	movs	r3, #16
 800731e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007322:	bf04      	itt	eq
 8007324:	0200      	lsleq	r0, r0, #8
 8007326:	3308      	addeq	r3, #8
 8007328:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800732c:	bf04      	itt	eq
 800732e:	0100      	lsleq	r0, r0, #4
 8007330:	3304      	addeq	r3, #4
 8007332:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007336:	bf04      	itt	eq
 8007338:	0080      	lsleq	r0, r0, #2
 800733a:	3302      	addeq	r3, #2
 800733c:	2800      	cmp	r0, #0
 800733e:	db05      	blt.n	800734c <__hi0bits+0x38>
 8007340:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007344:	f103 0301 	add.w	r3, r3, #1
 8007348:	bf08      	it	eq
 800734a:	2320      	moveq	r3, #32
 800734c:	4618      	mov	r0, r3
 800734e:	4770      	bx	lr
 8007350:	2300      	movs	r3, #0
 8007352:	e7e4      	b.n	800731e <__hi0bits+0xa>

08007354 <__lo0bits>:
 8007354:	6803      	ldr	r3, [r0, #0]
 8007356:	f013 0207 	ands.w	r2, r3, #7
 800735a:	d00c      	beq.n	8007376 <__lo0bits+0x22>
 800735c:	07d9      	lsls	r1, r3, #31
 800735e:	d422      	bmi.n	80073a6 <__lo0bits+0x52>
 8007360:	079a      	lsls	r2, r3, #30
 8007362:	bf49      	itett	mi
 8007364:	085b      	lsrmi	r3, r3, #1
 8007366:	089b      	lsrpl	r3, r3, #2
 8007368:	6003      	strmi	r3, [r0, #0]
 800736a:	2201      	movmi	r2, #1
 800736c:	bf5c      	itt	pl
 800736e:	6003      	strpl	r3, [r0, #0]
 8007370:	2202      	movpl	r2, #2
 8007372:	4610      	mov	r0, r2
 8007374:	4770      	bx	lr
 8007376:	b299      	uxth	r1, r3
 8007378:	b909      	cbnz	r1, 800737e <__lo0bits+0x2a>
 800737a:	0c1b      	lsrs	r3, r3, #16
 800737c:	2210      	movs	r2, #16
 800737e:	b2d9      	uxtb	r1, r3
 8007380:	b909      	cbnz	r1, 8007386 <__lo0bits+0x32>
 8007382:	3208      	adds	r2, #8
 8007384:	0a1b      	lsrs	r3, r3, #8
 8007386:	0719      	lsls	r1, r3, #28
 8007388:	bf04      	itt	eq
 800738a:	091b      	lsreq	r3, r3, #4
 800738c:	3204      	addeq	r2, #4
 800738e:	0799      	lsls	r1, r3, #30
 8007390:	bf04      	itt	eq
 8007392:	089b      	lsreq	r3, r3, #2
 8007394:	3202      	addeq	r2, #2
 8007396:	07d9      	lsls	r1, r3, #31
 8007398:	d403      	bmi.n	80073a2 <__lo0bits+0x4e>
 800739a:	085b      	lsrs	r3, r3, #1
 800739c:	f102 0201 	add.w	r2, r2, #1
 80073a0:	d003      	beq.n	80073aa <__lo0bits+0x56>
 80073a2:	6003      	str	r3, [r0, #0]
 80073a4:	e7e5      	b.n	8007372 <__lo0bits+0x1e>
 80073a6:	2200      	movs	r2, #0
 80073a8:	e7e3      	b.n	8007372 <__lo0bits+0x1e>
 80073aa:	2220      	movs	r2, #32
 80073ac:	e7e1      	b.n	8007372 <__lo0bits+0x1e>
	...

080073b0 <__i2b>:
 80073b0:	b510      	push	{r4, lr}
 80073b2:	460c      	mov	r4, r1
 80073b4:	2101      	movs	r1, #1
 80073b6:	f7ff ff05 	bl	80071c4 <_Balloc>
 80073ba:	4602      	mov	r2, r0
 80073bc:	b928      	cbnz	r0, 80073ca <__i2b+0x1a>
 80073be:	4b05      	ldr	r3, [pc, #20]	; (80073d4 <__i2b+0x24>)
 80073c0:	4805      	ldr	r0, [pc, #20]	; (80073d8 <__i2b+0x28>)
 80073c2:	f240 1145 	movw	r1, #325	; 0x145
 80073c6:	f000 fd0d 	bl	8007de4 <__assert_func>
 80073ca:	2301      	movs	r3, #1
 80073cc:	6144      	str	r4, [r0, #20]
 80073ce:	6103      	str	r3, [r0, #16]
 80073d0:	bd10      	pop	{r4, pc}
 80073d2:	bf00      	nop
 80073d4:	08008647 	.word	0x08008647
 80073d8:	08008658 	.word	0x08008658

080073dc <__multiply>:
 80073dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073e0:	4691      	mov	r9, r2
 80073e2:	690a      	ldr	r2, [r1, #16]
 80073e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80073e8:	429a      	cmp	r2, r3
 80073ea:	bfb8      	it	lt
 80073ec:	460b      	movlt	r3, r1
 80073ee:	460c      	mov	r4, r1
 80073f0:	bfbc      	itt	lt
 80073f2:	464c      	movlt	r4, r9
 80073f4:	4699      	movlt	r9, r3
 80073f6:	6927      	ldr	r7, [r4, #16]
 80073f8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80073fc:	68a3      	ldr	r3, [r4, #8]
 80073fe:	6861      	ldr	r1, [r4, #4]
 8007400:	eb07 060a 	add.w	r6, r7, sl
 8007404:	42b3      	cmp	r3, r6
 8007406:	b085      	sub	sp, #20
 8007408:	bfb8      	it	lt
 800740a:	3101      	addlt	r1, #1
 800740c:	f7ff feda 	bl	80071c4 <_Balloc>
 8007410:	b930      	cbnz	r0, 8007420 <__multiply+0x44>
 8007412:	4602      	mov	r2, r0
 8007414:	4b44      	ldr	r3, [pc, #272]	; (8007528 <__multiply+0x14c>)
 8007416:	4845      	ldr	r0, [pc, #276]	; (800752c <__multiply+0x150>)
 8007418:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800741c:	f000 fce2 	bl	8007de4 <__assert_func>
 8007420:	f100 0514 	add.w	r5, r0, #20
 8007424:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007428:	462b      	mov	r3, r5
 800742a:	2200      	movs	r2, #0
 800742c:	4543      	cmp	r3, r8
 800742e:	d321      	bcc.n	8007474 <__multiply+0x98>
 8007430:	f104 0314 	add.w	r3, r4, #20
 8007434:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007438:	f109 0314 	add.w	r3, r9, #20
 800743c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007440:	9202      	str	r2, [sp, #8]
 8007442:	1b3a      	subs	r2, r7, r4
 8007444:	3a15      	subs	r2, #21
 8007446:	f022 0203 	bic.w	r2, r2, #3
 800744a:	3204      	adds	r2, #4
 800744c:	f104 0115 	add.w	r1, r4, #21
 8007450:	428f      	cmp	r7, r1
 8007452:	bf38      	it	cc
 8007454:	2204      	movcc	r2, #4
 8007456:	9201      	str	r2, [sp, #4]
 8007458:	9a02      	ldr	r2, [sp, #8]
 800745a:	9303      	str	r3, [sp, #12]
 800745c:	429a      	cmp	r2, r3
 800745e:	d80c      	bhi.n	800747a <__multiply+0x9e>
 8007460:	2e00      	cmp	r6, #0
 8007462:	dd03      	ble.n	800746c <__multiply+0x90>
 8007464:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007468:	2b00      	cmp	r3, #0
 800746a:	d05b      	beq.n	8007524 <__multiply+0x148>
 800746c:	6106      	str	r6, [r0, #16]
 800746e:	b005      	add	sp, #20
 8007470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007474:	f843 2b04 	str.w	r2, [r3], #4
 8007478:	e7d8      	b.n	800742c <__multiply+0x50>
 800747a:	f8b3 a000 	ldrh.w	sl, [r3]
 800747e:	f1ba 0f00 	cmp.w	sl, #0
 8007482:	d024      	beq.n	80074ce <__multiply+0xf2>
 8007484:	f104 0e14 	add.w	lr, r4, #20
 8007488:	46a9      	mov	r9, r5
 800748a:	f04f 0c00 	mov.w	ip, #0
 800748e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007492:	f8d9 1000 	ldr.w	r1, [r9]
 8007496:	fa1f fb82 	uxth.w	fp, r2
 800749a:	b289      	uxth	r1, r1
 800749c:	fb0a 110b 	mla	r1, sl, fp, r1
 80074a0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80074a4:	f8d9 2000 	ldr.w	r2, [r9]
 80074a8:	4461      	add	r1, ip
 80074aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80074ae:	fb0a c20b 	mla	r2, sl, fp, ip
 80074b2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80074b6:	b289      	uxth	r1, r1
 80074b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80074bc:	4577      	cmp	r7, lr
 80074be:	f849 1b04 	str.w	r1, [r9], #4
 80074c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80074c6:	d8e2      	bhi.n	800748e <__multiply+0xb2>
 80074c8:	9a01      	ldr	r2, [sp, #4]
 80074ca:	f845 c002 	str.w	ip, [r5, r2]
 80074ce:	9a03      	ldr	r2, [sp, #12]
 80074d0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80074d4:	3304      	adds	r3, #4
 80074d6:	f1b9 0f00 	cmp.w	r9, #0
 80074da:	d021      	beq.n	8007520 <__multiply+0x144>
 80074dc:	6829      	ldr	r1, [r5, #0]
 80074de:	f104 0c14 	add.w	ip, r4, #20
 80074e2:	46ae      	mov	lr, r5
 80074e4:	f04f 0a00 	mov.w	sl, #0
 80074e8:	f8bc b000 	ldrh.w	fp, [ip]
 80074ec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80074f0:	fb09 220b 	mla	r2, r9, fp, r2
 80074f4:	4452      	add	r2, sl
 80074f6:	b289      	uxth	r1, r1
 80074f8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80074fc:	f84e 1b04 	str.w	r1, [lr], #4
 8007500:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007504:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007508:	f8be 1000 	ldrh.w	r1, [lr]
 800750c:	fb09 110a 	mla	r1, r9, sl, r1
 8007510:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007514:	4567      	cmp	r7, ip
 8007516:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800751a:	d8e5      	bhi.n	80074e8 <__multiply+0x10c>
 800751c:	9a01      	ldr	r2, [sp, #4]
 800751e:	50a9      	str	r1, [r5, r2]
 8007520:	3504      	adds	r5, #4
 8007522:	e799      	b.n	8007458 <__multiply+0x7c>
 8007524:	3e01      	subs	r6, #1
 8007526:	e79b      	b.n	8007460 <__multiply+0x84>
 8007528:	08008647 	.word	0x08008647
 800752c:	08008658 	.word	0x08008658

08007530 <__pow5mult>:
 8007530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007534:	4615      	mov	r5, r2
 8007536:	f012 0203 	ands.w	r2, r2, #3
 800753a:	4606      	mov	r6, r0
 800753c:	460f      	mov	r7, r1
 800753e:	d007      	beq.n	8007550 <__pow5mult+0x20>
 8007540:	4c25      	ldr	r4, [pc, #148]	; (80075d8 <__pow5mult+0xa8>)
 8007542:	3a01      	subs	r2, #1
 8007544:	2300      	movs	r3, #0
 8007546:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800754a:	f7ff fe9d 	bl	8007288 <__multadd>
 800754e:	4607      	mov	r7, r0
 8007550:	10ad      	asrs	r5, r5, #2
 8007552:	d03d      	beq.n	80075d0 <__pow5mult+0xa0>
 8007554:	69f4      	ldr	r4, [r6, #28]
 8007556:	b97c      	cbnz	r4, 8007578 <__pow5mult+0x48>
 8007558:	2010      	movs	r0, #16
 800755a:	f7ff fd7f 	bl	800705c <malloc>
 800755e:	4602      	mov	r2, r0
 8007560:	61f0      	str	r0, [r6, #28]
 8007562:	b928      	cbnz	r0, 8007570 <__pow5mult+0x40>
 8007564:	4b1d      	ldr	r3, [pc, #116]	; (80075dc <__pow5mult+0xac>)
 8007566:	481e      	ldr	r0, [pc, #120]	; (80075e0 <__pow5mult+0xb0>)
 8007568:	f240 11b3 	movw	r1, #435	; 0x1b3
 800756c:	f000 fc3a 	bl	8007de4 <__assert_func>
 8007570:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007574:	6004      	str	r4, [r0, #0]
 8007576:	60c4      	str	r4, [r0, #12]
 8007578:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800757c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007580:	b94c      	cbnz	r4, 8007596 <__pow5mult+0x66>
 8007582:	f240 2171 	movw	r1, #625	; 0x271
 8007586:	4630      	mov	r0, r6
 8007588:	f7ff ff12 	bl	80073b0 <__i2b>
 800758c:	2300      	movs	r3, #0
 800758e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007592:	4604      	mov	r4, r0
 8007594:	6003      	str	r3, [r0, #0]
 8007596:	f04f 0900 	mov.w	r9, #0
 800759a:	07eb      	lsls	r3, r5, #31
 800759c:	d50a      	bpl.n	80075b4 <__pow5mult+0x84>
 800759e:	4639      	mov	r1, r7
 80075a0:	4622      	mov	r2, r4
 80075a2:	4630      	mov	r0, r6
 80075a4:	f7ff ff1a 	bl	80073dc <__multiply>
 80075a8:	4639      	mov	r1, r7
 80075aa:	4680      	mov	r8, r0
 80075ac:	4630      	mov	r0, r6
 80075ae:	f7ff fe49 	bl	8007244 <_Bfree>
 80075b2:	4647      	mov	r7, r8
 80075b4:	106d      	asrs	r5, r5, #1
 80075b6:	d00b      	beq.n	80075d0 <__pow5mult+0xa0>
 80075b8:	6820      	ldr	r0, [r4, #0]
 80075ba:	b938      	cbnz	r0, 80075cc <__pow5mult+0x9c>
 80075bc:	4622      	mov	r2, r4
 80075be:	4621      	mov	r1, r4
 80075c0:	4630      	mov	r0, r6
 80075c2:	f7ff ff0b 	bl	80073dc <__multiply>
 80075c6:	6020      	str	r0, [r4, #0]
 80075c8:	f8c0 9000 	str.w	r9, [r0]
 80075cc:	4604      	mov	r4, r0
 80075ce:	e7e4      	b.n	800759a <__pow5mult+0x6a>
 80075d0:	4638      	mov	r0, r7
 80075d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075d6:	bf00      	nop
 80075d8:	080087a8 	.word	0x080087a8
 80075dc:	080085d8 	.word	0x080085d8
 80075e0:	08008658 	.word	0x08008658

080075e4 <__lshift>:
 80075e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075e8:	460c      	mov	r4, r1
 80075ea:	6849      	ldr	r1, [r1, #4]
 80075ec:	6923      	ldr	r3, [r4, #16]
 80075ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80075f2:	68a3      	ldr	r3, [r4, #8]
 80075f4:	4607      	mov	r7, r0
 80075f6:	4691      	mov	r9, r2
 80075f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80075fc:	f108 0601 	add.w	r6, r8, #1
 8007600:	42b3      	cmp	r3, r6
 8007602:	db0b      	blt.n	800761c <__lshift+0x38>
 8007604:	4638      	mov	r0, r7
 8007606:	f7ff fddd 	bl	80071c4 <_Balloc>
 800760a:	4605      	mov	r5, r0
 800760c:	b948      	cbnz	r0, 8007622 <__lshift+0x3e>
 800760e:	4602      	mov	r2, r0
 8007610:	4b28      	ldr	r3, [pc, #160]	; (80076b4 <__lshift+0xd0>)
 8007612:	4829      	ldr	r0, [pc, #164]	; (80076b8 <__lshift+0xd4>)
 8007614:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007618:	f000 fbe4 	bl	8007de4 <__assert_func>
 800761c:	3101      	adds	r1, #1
 800761e:	005b      	lsls	r3, r3, #1
 8007620:	e7ee      	b.n	8007600 <__lshift+0x1c>
 8007622:	2300      	movs	r3, #0
 8007624:	f100 0114 	add.w	r1, r0, #20
 8007628:	f100 0210 	add.w	r2, r0, #16
 800762c:	4618      	mov	r0, r3
 800762e:	4553      	cmp	r3, sl
 8007630:	db33      	blt.n	800769a <__lshift+0xb6>
 8007632:	6920      	ldr	r0, [r4, #16]
 8007634:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007638:	f104 0314 	add.w	r3, r4, #20
 800763c:	f019 091f 	ands.w	r9, r9, #31
 8007640:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007644:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007648:	d02b      	beq.n	80076a2 <__lshift+0xbe>
 800764a:	f1c9 0e20 	rsb	lr, r9, #32
 800764e:	468a      	mov	sl, r1
 8007650:	2200      	movs	r2, #0
 8007652:	6818      	ldr	r0, [r3, #0]
 8007654:	fa00 f009 	lsl.w	r0, r0, r9
 8007658:	4310      	orrs	r0, r2
 800765a:	f84a 0b04 	str.w	r0, [sl], #4
 800765e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007662:	459c      	cmp	ip, r3
 8007664:	fa22 f20e 	lsr.w	r2, r2, lr
 8007668:	d8f3      	bhi.n	8007652 <__lshift+0x6e>
 800766a:	ebac 0304 	sub.w	r3, ip, r4
 800766e:	3b15      	subs	r3, #21
 8007670:	f023 0303 	bic.w	r3, r3, #3
 8007674:	3304      	adds	r3, #4
 8007676:	f104 0015 	add.w	r0, r4, #21
 800767a:	4584      	cmp	ip, r0
 800767c:	bf38      	it	cc
 800767e:	2304      	movcc	r3, #4
 8007680:	50ca      	str	r2, [r1, r3]
 8007682:	b10a      	cbz	r2, 8007688 <__lshift+0xa4>
 8007684:	f108 0602 	add.w	r6, r8, #2
 8007688:	3e01      	subs	r6, #1
 800768a:	4638      	mov	r0, r7
 800768c:	612e      	str	r6, [r5, #16]
 800768e:	4621      	mov	r1, r4
 8007690:	f7ff fdd8 	bl	8007244 <_Bfree>
 8007694:	4628      	mov	r0, r5
 8007696:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800769a:	f842 0f04 	str.w	r0, [r2, #4]!
 800769e:	3301      	adds	r3, #1
 80076a0:	e7c5      	b.n	800762e <__lshift+0x4a>
 80076a2:	3904      	subs	r1, #4
 80076a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80076a8:	f841 2f04 	str.w	r2, [r1, #4]!
 80076ac:	459c      	cmp	ip, r3
 80076ae:	d8f9      	bhi.n	80076a4 <__lshift+0xc0>
 80076b0:	e7ea      	b.n	8007688 <__lshift+0xa4>
 80076b2:	bf00      	nop
 80076b4:	08008647 	.word	0x08008647
 80076b8:	08008658 	.word	0x08008658

080076bc <__mcmp>:
 80076bc:	b530      	push	{r4, r5, lr}
 80076be:	6902      	ldr	r2, [r0, #16]
 80076c0:	690c      	ldr	r4, [r1, #16]
 80076c2:	1b12      	subs	r2, r2, r4
 80076c4:	d10e      	bne.n	80076e4 <__mcmp+0x28>
 80076c6:	f100 0314 	add.w	r3, r0, #20
 80076ca:	3114      	adds	r1, #20
 80076cc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80076d0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80076d4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80076d8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80076dc:	42a5      	cmp	r5, r4
 80076de:	d003      	beq.n	80076e8 <__mcmp+0x2c>
 80076e0:	d305      	bcc.n	80076ee <__mcmp+0x32>
 80076e2:	2201      	movs	r2, #1
 80076e4:	4610      	mov	r0, r2
 80076e6:	bd30      	pop	{r4, r5, pc}
 80076e8:	4283      	cmp	r3, r0
 80076ea:	d3f3      	bcc.n	80076d4 <__mcmp+0x18>
 80076ec:	e7fa      	b.n	80076e4 <__mcmp+0x28>
 80076ee:	f04f 32ff 	mov.w	r2, #4294967295
 80076f2:	e7f7      	b.n	80076e4 <__mcmp+0x28>

080076f4 <__mdiff>:
 80076f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076f8:	460c      	mov	r4, r1
 80076fa:	4606      	mov	r6, r0
 80076fc:	4611      	mov	r1, r2
 80076fe:	4620      	mov	r0, r4
 8007700:	4690      	mov	r8, r2
 8007702:	f7ff ffdb 	bl	80076bc <__mcmp>
 8007706:	1e05      	subs	r5, r0, #0
 8007708:	d110      	bne.n	800772c <__mdiff+0x38>
 800770a:	4629      	mov	r1, r5
 800770c:	4630      	mov	r0, r6
 800770e:	f7ff fd59 	bl	80071c4 <_Balloc>
 8007712:	b930      	cbnz	r0, 8007722 <__mdiff+0x2e>
 8007714:	4b3a      	ldr	r3, [pc, #232]	; (8007800 <__mdiff+0x10c>)
 8007716:	4602      	mov	r2, r0
 8007718:	f240 2137 	movw	r1, #567	; 0x237
 800771c:	4839      	ldr	r0, [pc, #228]	; (8007804 <__mdiff+0x110>)
 800771e:	f000 fb61 	bl	8007de4 <__assert_func>
 8007722:	2301      	movs	r3, #1
 8007724:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007728:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800772c:	bfa4      	itt	ge
 800772e:	4643      	movge	r3, r8
 8007730:	46a0      	movge	r8, r4
 8007732:	4630      	mov	r0, r6
 8007734:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007738:	bfa6      	itte	ge
 800773a:	461c      	movge	r4, r3
 800773c:	2500      	movge	r5, #0
 800773e:	2501      	movlt	r5, #1
 8007740:	f7ff fd40 	bl	80071c4 <_Balloc>
 8007744:	b920      	cbnz	r0, 8007750 <__mdiff+0x5c>
 8007746:	4b2e      	ldr	r3, [pc, #184]	; (8007800 <__mdiff+0x10c>)
 8007748:	4602      	mov	r2, r0
 800774a:	f240 2145 	movw	r1, #581	; 0x245
 800774e:	e7e5      	b.n	800771c <__mdiff+0x28>
 8007750:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007754:	6926      	ldr	r6, [r4, #16]
 8007756:	60c5      	str	r5, [r0, #12]
 8007758:	f104 0914 	add.w	r9, r4, #20
 800775c:	f108 0514 	add.w	r5, r8, #20
 8007760:	f100 0e14 	add.w	lr, r0, #20
 8007764:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007768:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800776c:	f108 0210 	add.w	r2, r8, #16
 8007770:	46f2      	mov	sl, lr
 8007772:	2100      	movs	r1, #0
 8007774:	f859 3b04 	ldr.w	r3, [r9], #4
 8007778:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800777c:	fa11 f88b 	uxtah	r8, r1, fp
 8007780:	b299      	uxth	r1, r3
 8007782:	0c1b      	lsrs	r3, r3, #16
 8007784:	eba8 0801 	sub.w	r8, r8, r1
 8007788:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800778c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007790:	fa1f f888 	uxth.w	r8, r8
 8007794:	1419      	asrs	r1, r3, #16
 8007796:	454e      	cmp	r6, r9
 8007798:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800779c:	f84a 3b04 	str.w	r3, [sl], #4
 80077a0:	d8e8      	bhi.n	8007774 <__mdiff+0x80>
 80077a2:	1b33      	subs	r3, r6, r4
 80077a4:	3b15      	subs	r3, #21
 80077a6:	f023 0303 	bic.w	r3, r3, #3
 80077aa:	3304      	adds	r3, #4
 80077ac:	3415      	adds	r4, #21
 80077ae:	42a6      	cmp	r6, r4
 80077b0:	bf38      	it	cc
 80077b2:	2304      	movcc	r3, #4
 80077b4:	441d      	add	r5, r3
 80077b6:	4473      	add	r3, lr
 80077b8:	469e      	mov	lr, r3
 80077ba:	462e      	mov	r6, r5
 80077bc:	4566      	cmp	r6, ip
 80077be:	d30e      	bcc.n	80077de <__mdiff+0xea>
 80077c0:	f10c 0203 	add.w	r2, ip, #3
 80077c4:	1b52      	subs	r2, r2, r5
 80077c6:	f022 0203 	bic.w	r2, r2, #3
 80077ca:	3d03      	subs	r5, #3
 80077cc:	45ac      	cmp	ip, r5
 80077ce:	bf38      	it	cc
 80077d0:	2200      	movcc	r2, #0
 80077d2:	4413      	add	r3, r2
 80077d4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80077d8:	b17a      	cbz	r2, 80077fa <__mdiff+0x106>
 80077da:	6107      	str	r7, [r0, #16]
 80077dc:	e7a4      	b.n	8007728 <__mdiff+0x34>
 80077de:	f856 8b04 	ldr.w	r8, [r6], #4
 80077e2:	fa11 f288 	uxtah	r2, r1, r8
 80077e6:	1414      	asrs	r4, r2, #16
 80077e8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80077ec:	b292      	uxth	r2, r2
 80077ee:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80077f2:	f84e 2b04 	str.w	r2, [lr], #4
 80077f6:	1421      	asrs	r1, r4, #16
 80077f8:	e7e0      	b.n	80077bc <__mdiff+0xc8>
 80077fa:	3f01      	subs	r7, #1
 80077fc:	e7ea      	b.n	80077d4 <__mdiff+0xe0>
 80077fe:	bf00      	nop
 8007800:	08008647 	.word	0x08008647
 8007804:	08008658 	.word	0x08008658

08007808 <__d2b>:
 8007808:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800780c:	460f      	mov	r7, r1
 800780e:	2101      	movs	r1, #1
 8007810:	ec59 8b10 	vmov	r8, r9, d0
 8007814:	4616      	mov	r6, r2
 8007816:	f7ff fcd5 	bl	80071c4 <_Balloc>
 800781a:	4604      	mov	r4, r0
 800781c:	b930      	cbnz	r0, 800782c <__d2b+0x24>
 800781e:	4602      	mov	r2, r0
 8007820:	4b24      	ldr	r3, [pc, #144]	; (80078b4 <__d2b+0xac>)
 8007822:	4825      	ldr	r0, [pc, #148]	; (80078b8 <__d2b+0xb0>)
 8007824:	f240 310f 	movw	r1, #783	; 0x30f
 8007828:	f000 fadc 	bl	8007de4 <__assert_func>
 800782c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007830:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007834:	bb2d      	cbnz	r5, 8007882 <__d2b+0x7a>
 8007836:	9301      	str	r3, [sp, #4]
 8007838:	f1b8 0300 	subs.w	r3, r8, #0
 800783c:	d026      	beq.n	800788c <__d2b+0x84>
 800783e:	4668      	mov	r0, sp
 8007840:	9300      	str	r3, [sp, #0]
 8007842:	f7ff fd87 	bl	8007354 <__lo0bits>
 8007846:	e9dd 1200 	ldrd	r1, r2, [sp]
 800784a:	b1e8      	cbz	r0, 8007888 <__d2b+0x80>
 800784c:	f1c0 0320 	rsb	r3, r0, #32
 8007850:	fa02 f303 	lsl.w	r3, r2, r3
 8007854:	430b      	orrs	r3, r1
 8007856:	40c2      	lsrs	r2, r0
 8007858:	6163      	str	r3, [r4, #20]
 800785a:	9201      	str	r2, [sp, #4]
 800785c:	9b01      	ldr	r3, [sp, #4]
 800785e:	61a3      	str	r3, [r4, #24]
 8007860:	2b00      	cmp	r3, #0
 8007862:	bf14      	ite	ne
 8007864:	2202      	movne	r2, #2
 8007866:	2201      	moveq	r2, #1
 8007868:	6122      	str	r2, [r4, #16]
 800786a:	b1bd      	cbz	r5, 800789c <__d2b+0x94>
 800786c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007870:	4405      	add	r5, r0
 8007872:	603d      	str	r5, [r7, #0]
 8007874:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007878:	6030      	str	r0, [r6, #0]
 800787a:	4620      	mov	r0, r4
 800787c:	b003      	add	sp, #12
 800787e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007882:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007886:	e7d6      	b.n	8007836 <__d2b+0x2e>
 8007888:	6161      	str	r1, [r4, #20]
 800788a:	e7e7      	b.n	800785c <__d2b+0x54>
 800788c:	a801      	add	r0, sp, #4
 800788e:	f7ff fd61 	bl	8007354 <__lo0bits>
 8007892:	9b01      	ldr	r3, [sp, #4]
 8007894:	6163      	str	r3, [r4, #20]
 8007896:	3020      	adds	r0, #32
 8007898:	2201      	movs	r2, #1
 800789a:	e7e5      	b.n	8007868 <__d2b+0x60>
 800789c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80078a0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80078a4:	6038      	str	r0, [r7, #0]
 80078a6:	6918      	ldr	r0, [r3, #16]
 80078a8:	f7ff fd34 	bl	8007314 <__hi0bits>
 80078ac:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80078b0:	e7e2      	b.n	8007878 <__d2b+0x70>
 80078b2:	bf00      	nop
 80078b4:	08008647 	.word	0x08008647
 80078b8:	08008658 	.word	0x08008658

080078bc <__sfputc_r>:
 80078bc:	6893      	ldr	r3, [r2, #8]
 80078be:	3b01      	subs	r3, #1
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	b410      	push	{r4}
 80078c4:	6093      	str	r3, [r2, #8]
 80078c6:	da08      	bge.n	80078da <__sfputc_r+0x1e>
 80078c8:	6994      	ldr	r4, [r2, #24]
 80078ca:	42a3      	cmp	r3, r4
 80078cc:	db01      	blt.n	80078d2 <__sfputc_r+0x16>
 80078ce:	290a      	cmp	r1, #10
 80078d0:	d103      	bne.n	80078da <__sfputc_r+0x1e>
 80078d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80078d6:	f7fe bbe6 	b.w	80060a6 <__swbuf_r>
 80078da:	6813      	ldr	r3, [r2, #0]
 80078dc:	1c58      	adds	r0, r3, #1
 80078de:	6010      	str	r0, [r2, #0]
 80078e0:	7019      	strb	r1, [r3, #0]
 80078e2:	4608      	mov	r0, r1
 80078e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80078e8:	4770      	bx	lr

080078ea <__sfputs_r>:
 80078ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ec:	4606      	mov	r6, r0
 80078ee:	460f      	mov	r7, r1
 80078f0:	4614      	mov	r4, r2
 80078f2:	18d5      	adds	r5, r2, r3
 80078f4:	42ac      	cmp	r4, r5
 80078f6:	d101      	bne.n	80078fc <__sfputs_r+0x12>
 80078f8:	2000      	movs	r0, #0
 80078fa:	e007      	b.n	800790c <__sfputs_r+0x22>
 80078fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007900:	463a      	mov	r2, r7
 8007902:	4630      	mov	r0, r6
 8007904:	f7ff ffda 	bl	80078bc <__sfputc_r>
 8007908:	1c43      	adds	r3, r0, #1
 800790a:	d1f3      	bne.n	80078f4 <__sfputs_r+0xa>
 800790c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007910 <_vfiprintf_r>:
 8007910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007914:	460d      	mov	r5, r1
 8007916:	b09d      	sub	sp, #116	; 0x74
 8007918:	4614      	mov	r4, r2
 800791a:	4698      	mov	r8, r3
 800791c:	4606      	mov	r6, r0
 800791e:	b118      	cbz	r0, 8007928 <_vfiprintf_r+0x18>
 8007920:	6a03      	ldr	r3, [r0, #32]
 8007922:	b90b      	cbnz	r3, 8007928 <_vfiprintf_r+0x18>
 8007924:	f7fe fad8 	bl	8005ed8 <__sinit>
 8007928:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800792a:	07d9      	lsls	r1, r3, #31
 800792c:	d405      	bmi.n	800793a <_vfiprintf_r+0x2a>
 800792e:	89ab      	ldrh	r3, [r5, #12]
 8007930:	059a      	lsls	r2, r3, #22
 8007932:	d402      	bmi.n	800793a <_vfiprintf_r+0x2a>
 8007934:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007936:	f7fe fcc7 	bl	80062c8 <__retarget_lock_acquire_recursive>
 800793a:	89ab      	ldrh	r3, [r5, #12]
 800793c:	071b      	lsls	r3, r3, #28
 800793e:	d501      	bpl.n	8007944 <_vfiprintf_r+0x34>
 8007940:	692b      	ldr	r3, [r5, #16]
 8007942:	b99b      	cbnz	r3, 800796c <_vfiprintf_r+0x5c>
 8007944:	4629      	mov	r1, r5
 8007946:	4630      	mov	r0, r6
 8007948:	f7fe fbea 	bl	8006120 <__swsetup_r>
 800794c:	b170      	cbz	r0, 800796c <_vfiprintf_r+0x5c>
 800794e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007950:	07dc      	lsls	r4, r3, #31
 8007952:	d504      	bpl.n	800795e <_vfiprintf_r+0x4e>
 8007954:	f04f 30ff 	mov.w	r0, #4294967295
 8007958:	b01d      	add	sp, #116	; 0x74
 800795a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800795e:	89ab      	ldrh	r3, [r5, #12]
 8007960:	0598      	lsls	r0, r3, #22
 8007962:	d4f7      	bmi.n	8007954 <_vfiprintf_r+0x44>
 8007964:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007966:	f7fe fcb0 	bl	80062ca <__retarget_lock_release_recursive>
 800796a:	e7f3      	b.n	8007954 <_vfiprintf_r+0x44>
 800796c:	2300      	movs	r3, #0
 800796e:	9309      	str	r3, [sp, #36]	; 0x24
 8007970:	2320      	movs	r3, #32
 8007972:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007976:	f8cd 800c 	str.w	r8, [sp, #12]
 800797a:	2330      	movs	r3, #48	; 0x30
 800797c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007b30 <_vfiprintf_r+0x220>
 8007980:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007984:	f04f 0901 	mov.w	r9, #1
 8007988:	4623      	mov	r3, r4
 800798a:	469a      	mov	sl, r3
 800798c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007990:	b10a      	cbz	r2, 8007996 <_vfiprintf_r+0x86>
 8007992:	2a25      	cmp	r2, #37	; 0x25
 8007994:	d1f9      	bne.n	800798a <_vfiprintf_r+0x7a>
 8007996:	ebba 0b04 	subs.w	fp, sl, r4
 800799a:	d00b      	beq.n	80079b4 <_vfiprintf_r+0xa4>
 800799c:	465b      	mov	r3, fp
 800799e:	4622      	mov	r2, r4
 80079a0:	4629      	mov	r1, r5
 80079a2:	4630      	mov	r0, r6
 80079a4:	f7ff ffa1 	bl	80078ea <__sfputs_r>
 80079a8:	3001      	adds	r0, #1
 80079aa:	f000 80a9 	beq.w	8007b00 <_vfiprintf_r+0x1f0>
 80079ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079b0:	445a      	add	r2, fp
 80079b2:	9209      	str	r2, [sp, #36]	; 0x24
 80079b4:	f89a 3000 	ldrb.w	r3, [sl]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	f000 80a1 	beq.w	8007b00 <_vfiprintf_r+0x1f0>
 80079be:	2300      	movs	r3, #0
 80079c0:	f04f 32ff 	mov.w	r2, #4294967295
 80079c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079c8:	f10a 0a01 	add.w	sl, sl, #1
 80079cc:	9304      	str	r3, [sp, #16]
 80079ce:	9307      	str	r3, [sp, #28]
 80079d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80079d4:	931a      	str	r3, [sp, #104]	; 0x68
 80079d6:	4654      	mov	r4, sl
 80079d8:	2205      	movs	r2, #5
 80079da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079de:	4854      	ldr	r0, [pc, #336]	; (8007b30 <_vfiprintf_r+0x220>)
 80079e0:	f7f8 fbfe 	bl	80001e0 <memchr>
 80079e4:	9a04      	ldr	r2, [sp, #16]
 80079e6:	b9d8      	cbnz	r0, 8007a20 <_vfiprintf_r+0x110>
 80079e8:	06d1      	lsls	r1, r2, #27
 80079ea:	bf44      	itt	mi
 80079ec:	2320      	movmi	r3, #32
 80079ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80079f2:	0713      	lsls	r3, r2, #28
 80079f4:	bf44      	itt	mi
 80079f6:	232b      	movmi	r3, #43	; 0x2b
 80079f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80079fc:	f89a 3000 	ldrb.w	r3, [sl]
 8007a00:	2b2a      	cmp	r3, #42	; 0x2a
 8007a02:	d015      	beq.n	8007a30 <_vfiprintf_r+0x120>
 8007a04:	9a07      	ldr	r2, [sp, #28]
 8007a06:	4654      	mov	r4, sl
 8007a08:	2000      	movs	r0, #0
 8007a0a:	f04f 0c0a 	mov.w	ip, #10
 8007a0e:	4621      	mov	r1, r4
 8007a10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a14:	3b30      	subs	r3, #48	; 0x30
 8007a16:	2b09      	cmp	r3, #9
 8007a18:	d94d      	bls.n	8007ab6 <_vfiprintf_r+0x1a6>
 8007a1a:	b1b0      	cbz	r0, 8007a4a <_vfiprintf_r+0x13a>
 8007a1c:	9207      	str	r2, [sp, #28]
 8007a1e:	e014      	b.n	8007a4a <_vfiprintf_r+0x13a>
 8007a20:	eba0 0308 	sub.w	r3, r0, r8
 8007a24:	fa09 f303 	lsl.w	r3, r9, r3
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	9304      	str	r3, [sp, #16]
 8007a2c:	46a2      	mov	sl, r4
 8007a2e:	e7d2      	b.n	80079d6 <_vfiprintf_r+0xc6>
 8007a30:	9b03      	ldr	r3, [sp, #12]
 8007a32:	1d19      	adds	r1, r3, #4
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	9103      	str	r1, [sp, #12]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	bfbb      	ittet	lt
 8007a3c:	425b      	neglt	r3, r3
 8007a3e:	f042 0202 	orrlt.w	r2, r2, #2
 8007a42:	9307      	strge	r3, [sp, #28]
 8007a44:	9307      	strlt	r3, [sp, #28]
 8007a46:	bfb8      	it	lt
 8007a48:	9204      	strlt	r2, [sp, #16]
 8007a4a:	7823      	ldrb	r3, [r4, #0]
 8007a4c:	2b2e      	cmp	r3, #46	; 0x2e
 8007a4e:	d10c      	bne.n	8007a6a <_vfiprintf_r+0x15a>
 8007a50:	7863      	ldrb	r3, [r4, #1]
 8007a52:	2b2a      	cmp	r3, #42	; 0x2a
 8007a54:	d134      	bne.n	8007ac0 <_vfiprintf_r+0x1b0>
 8007a56:	9b03      	ldr	r3, [sp, #12]
 8007a58:	1d1a      	adds	r2, r3, #4
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	9203      	str	r2, [sp, #12]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	bfb8      	it	lt
 8007a62:	f04f 33ff 	movlt.w	r3, #4294967295
 8007a66:	3402      	adds	r4, #2
 8007a68:	9305      	str	r3, [sp, #20]
 8007a6a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007b40 <_vfiprintf_r+0x230>
 8007a6e:	7821      	ldrb	r1, [r4, #0]
 8007a70:	2203      	movs	r2, #3
 8007a72:	4650      	mov	r0, sl
 8007a74:	f7f8 fbb4 	bl	80001e0 <memchr>
 8007a78:	b138      	cbz	r0, 8007a8a <_vfiprintf_r+0x17a>
 8007a7a:	9b04      	ldr	r3, [sp, #16]
 8007a7c:	eba0 000a 	sub.w	r0, r0, sl
 8007a80:	2240      	movs	r2, #64	; 0x40
 8007a82:	4082      	lsls	r2, r0
 8007a84:	4313      	orrs	r3, r2
 8007a86:	3401      	adds	r4, #1
 8007a88:	9304      	str	r3, [sp, #16]
 8007a8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a8e:	4829      	ldr	r0, [pc, #164]	; (8007b34 <_vfiprintf_r+0x224>)
 8007a90:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a94:	2206      	movs	r2, #6
 8007a96:	f7f8 fba3 	bl	80001e0 <memchr>
 8007a9a:	2800      	cmp	r0, #0
 8007a9c:	d03f      	beq.n	8007b1e <_vfiprintf_r+0x20e>
 8007a9e:	4b26      	ldr	r3, [pc, #152]	; (8007b38 <_vfiprintf_r+0x228>)
 8007aa0:	bb1b      	cbnz	r3, 8007aea <_vfiprintf_r+0x1da>
 8007aa2:	9b03      	ldr	r3, [sp, #12]
 8007aa4:	3307      	adds	r3, #7
 8007aa6:	f023 0307 	bic.w	r3, r3, #7
 8007aaa:	3308      	adds	r3, #8
 8007aac:	9303      	str	r3, [sp, #12]
 8007aae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ab0:	443b      	add	r3, r7
 8007ab2:	9309      	str	r3, [sp, #36]	; 0x24
 8007ab4:	e768      	b.n	8007988 <_vfiprintf_r+0x78>
 8007ab6:	fb0c 3202 	mla	r2, ip, r2, r3
 8007aba:	460c      	mov	r4, r1
 8007abc:	2001      	movs	r0, #1
 8007abe:	e7a6      	b.n	8007a0e <_vfiprintf_r+0xfe>
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	3401      	adds	r4, #1
 8007ac4:	9305      	str	r3, [sp, #20]
 8007ac6:	4619      	mov	r1, r3
 8007ac8:	f04f 0c0a 	mov.w	ip, #10
 8007acc:	4620      	mov	r0, r4
 8007ace:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ad2:	3a30      	subs	r2, #48	; 0x30
 8007ad4:	2a09      	cmp	r2, #9
 8007ad6:	d903      	bls.n	8007ae0 <_vfiprintf_r+0x1d0>
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d0c6      	beq.n	8007a6a <_vfiprintf_r+0x15a>
 8007adc:	9105      	str	r1, [sp, #20]
 8007ade:	e7c4      	b.n	8007a6a <_vfiprintf_r+0x15a>
 8007ae0:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ae4:	4604      	mov	r4, r0
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	e7f0      	b.n	8007acc <_vfiprintf_r+0x1bc>
 8007aea:	ab03      	add	r3, sp, #12
 8007aec:	9300      	str	r3, [sp, #0]
 8007aee:	462a      	mov	r2, r5
 8007af0:	4b12      	ldr	r3, [pc, #72]	; (8007b3c <_vfiprintf_r+0x22c>)
 8007af2:	a904      	add	r1, sp, #16
 8007af4:	4630      	mov	r0, r6
 8007af6:	f7fd fdaf 	bl	8005658 <_printf_float>
 8007afa:	4607      	mov	r7, r0
 8007afc:	1c78      	adds	r0, r7, #1
 8007afe:	d1d6      	bne.n	8007aae <_vfiprintf_r+0x19e>
 8007b00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b02:	07d9      	lsls	r1, r3, #31
 8007b04:	d405      	bmi.n	8007b12 <_vfiprintf_r+0x202>
 8007b06:	89ab      	ldrh	r3, [r5, #12]
 8007b08:	059a      	lsls	r2, r3, #22
 8007b0a:	d402      	bmi.n	8007b12 <_vfiprintf_r+0x202>
 8007b0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b0e:	f7fe fbdc 	bl	80062ca <__retarget_lock_release_recursive>
 8007b12:	89ab      	ldrh	r3, [r5, #12]
 8007b14:	065b      	lsls	r3, r3, #25
 8007b16:	f53f af1d 	bmi.w	8007954 <_vfiprintf_r+0x44>
 8007b1a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b1c:	e71c      	b.n	8007958 <_vfiprintf_r+0x48>
 8007b1e:	ab03      	add	r3, sp, #12
 8007b20:	9300      	str	r3, [sp, #0]
 8007b22:	462a      	mov	r2, r5
 8007b24:	4b05      	ldr	r3, [pc, #20]	; (8007b3c <_vfiprintf_r+0x22c>)
 8007b26:	a904      	add	r1, sp, #16
 8007b28:	4630      	mov	r0, r6
 8007b2a:	f7fe f839 	bl	8005ba0 <_printf_i>
 8007b2e:	e7e4      	b.n	8007afa <_vfiprintf_r+0x1ea>
 8007b30:	080087b4 	.word	0x080087b4
 8007b34:	080087be 	.word	0x080087be
 8007b38:	08005659 	.word	0x08005659
 8007b3c:	080078eb 	.word	0x080078eb
 8007b40:	080087ba 	.word	0x080087ba

08007b44 <__sflush_r>:
 8007b44:	898a      	ldrh	r2, [r1, #12]
 8007b46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b4a:	4605      	mov	r5, r0
 8007b4c:	0710      	lsls	r0, r2, #28
 8007b4e:	460c      	mov	r4, r1
 8007b50:	d458      	bmi.n	8007c04 <__sflush_r+0xc0>
 8007b52:	684b      	ldr	r3, [r1, #4]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	dc05      	bgt.n	8007b64 <__sflush_r+0x20>
 8007b58:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	dc02      	bgt.n	8007b64 <__sflush_r+0x20>
 8007b5e:	2000      	movs	r0, #0
 8007b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b66:	2e00      	cmp	r6, #0
 8007b68:	d0f9      	beq.n	8007b5e <__sflush_r+0x1a>
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007b70:	682f      	ldr	r7, [r5, #0]
 8007b72:	6a21      	ldr	r1, [r4, #32]
 8007b74:	602b      	str	r3, [r5, #0]
 8007b76:	d032      	beq.n	8007bde <__sflush_r+0x9a>
 8007b78:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007b7a:	89a3      	ldrh	r3, [r4, #12]
 8007b7c:	075a      	lsls	r2, r3, #29
 8007b7e:	d505      	bpl.n	8007b8c <__sflush_r+0x48>
 8007b80:	6863      	ldr	r3, [r4, #4]
 8007b82:	1ac0      	subs	r0, r0, r3
 8007b84:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007b86:	b10b      	cbz	r3, 8007b8c <__sflush_r+0x48>
 8007b88:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007b8a:	1ac0      	subs	r0, r0, r3
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	4602      	mov	r2, r0
 8007b90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b92:	6a21      	ldr	r1, [r4, #32]
 8007b94:	4628      	mov	r0, r5
 8007b96:	47b0      	blx	r6
 8007b98:	1c43      	adds	r3, r0, #1
 8007b9a:	89a3      	ldrh	r3, [r4, #12]
 8007b9c:	d106      	bne.n	8007bac <__sflush_r+0x68>
 8007b9e:	6829      	ldr	r1, [r5, #0]
 8007ba0:	291d      	cmp	r1, #29
 8007ba2:	d82b      	bhi.n	8007bfc <__sflush_r+0xb8>
 8007ba4:	4a29      	ldr	r2, [pc, #164]	; (8007c4c <__sflush_r+0x108>)
 8007ba6:	410a      	asrs	r2, r1
 8007ba8:	07d6      	lsls	r6, r2, #31
 8007baa:	d427      	bmi.n	8007bfc <__sflush_r+0xb8>
 8007bac:	2200      	movs	r2, #0
 8007bae:	6062      	str	r2, [r4, #4]
 8007bb0:	04d9      	lsls	r1, r3, #19
 8007bb2:	6922      	ldr	r2, [r4, #16]
 8007bb4:	6022      	str	r2, [r4, #0]
 8007bb6:	d504      	bpl.n	8007bc2 <__sflush_r+0x7e>
 8007bb8:	1c42      	adds	r2, r0, #1
 8007bba:	d101      	bne.n	8007bc0 <__sflush_r+0x7c>
 8007bbc:	682b      	ldr	r3, [r5, #0]
 8007bbe:	b903      	cbnz	r3, 8007bc2 <__sflush_r+0x7e>
 8007bc0:	6560      	str	r0, [r4, #84]	; 0x54
 8007bc2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007bc4:	602f      	str	r7, [r5, #0]
 8007bc6:	2900      	cmp	r1, #0
 8007bc8:	d0c9      	beq.n	8007b5e <__sflush_r+0x1a>
 8007bca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007bce:	4299      	cmp	r1, r3
 8007bd0:	d002      	beq.n	8007bd8 <__sflush_r+0x94>
 8007bd2:	4628      	mov	r0, r5
 8007bd4:	f7ff f9f6 	bl	8006fc4 <_free_r>
 8007bd8:	2000      	movs	r0, #0
 8007bda:	6360      	str	r0, [r4, #52]	; 0x34
 8007bdc:	e7c0      	b.n	8007b60 <__sflush_r+0x1c>
 8007bde:	2301      	movs	r3, #1
 8007be0:	4628      	mov	r0, r5
 8007be2:	47b0      	blx	r6
 8007be4:	1c41      	adds	r1, r0, #1
 8007be6:	d1c8      	bne.n	8007b7a <__sflush_r+0x36>
 8007be8:	682b      	ldr	r3, [r5, #0]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d0c5      	beq.n	8007b7a <__sflush_r+0x36>
 8007bee:	2b1d      	cmp	r3, #29
 8007bf0:	d001      	beq.n	8007bf6 <__sflush_r+0xb2>
 8007bf2:	2b16      	cmp	r3, #22
 8007bf4:	d101      	bne.n	8007bfa <__sflush_r+0xb6>
 8007bf6:	602f      	str	r7, [r5, #0]
 8007bf8:	e7b1      	b.n	8007b5e <__sflush_r+0x1a>
 8007bfa:	89a3      	ldrh	r3, [r4, #12]
 8007bfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c00:	81a3      	strh	r3, [r4, #12]
 8007c02:	e7ad      	b.n	8007b60 <__sflush_r+0x1c>
 8007c04:	690f      	ldr	r7, [r1, #16]
 8007c06:	2f00      	cmp	r7, #0
 8007c08:	d0a9      	beq.n	8007b5e <__sflush_r+0x1a>
 8007c0a:	0793      	lsls	r3, r2, #30
 8007c0c:	680e      	ldr	r6, [r1, #0]
 8007c0e:	bf08      	it	eq
 8007c10:	694b      	ldreq	r3, [r1, #20]
 8007c12:	600f      	str	r7, [r1, #0]
 8007c14:	bf18      	it	ne
 8007c16:	2300      	movne	r3, #0
 8007c18:	eba6 0807 	sub.w	r8, r6, r7
 8007c1c:	608b      	str	r3, [r1, #8]
 8007c1e:	f1b8 0f00 	cmp.w	r8, #0
 8007c22:	dd9c      	ble.n	8007b5e <__sflush_r+0x1a>
 8007c24:	6a21      	ldr	r1, [r4, #32]
 8007c26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007c28:	4643      	mov	r3, r8
 8007c2a:	463a      	mov	r2, r7
 8007c2c:	4628      	mov	r0, r5
 8007c2e:	47b0      	blx	r6
 8007c30:	2800      	cmp	r0, #0
 8007c32:	dc06      	bgt.n	8007c42 <__sflush_r+0xfe>
 8007c34:	89a3      	ldrh	r3, [r4, #12]
 8007c36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c3a:	81a3      	strh	r3, [r4, #12]
 8007c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c40:	e78e      	b.n	8007b60 <__sflush_r+0x1c>
 8007c42:	4407      	add	r7, r0
 8007c44:	eba8 0800 	sub.w	r8, r8, r0
 8007c48:	e7e9      	b.n	8007c1e <__sflush_r+0xda>
 8007c4a:	bf00      	nop
 8007c4c:	dfbffffe 	.word	0xdfbffffe

08007c50 <_fflush_r>:
 8007c50:	b538      	push	{r3, r4, r5, lr}
 8007c52:	690b      	ldr	r3, [r1, #16]
 8007c54:	4605      	mov	r5, r0
 8007c56:	460c      	mov	r4, r1
 8007c58:	b913      	cbnz	r3, 8007c60 <_fflush_r+0x10>
 8007c5a:	2500      	movs	r5, #0
 8007c5c:	4628      	mov	r0, r5
 8007c5e:	bd38      	pop	{r3, r4, r5, pc}
 8007c60:	b118      	cbz	r0, 8007c6a <_fflush_r+0x1a>
 8007c62:	6a03      	ldr	r3, [r0, #32]
 8007c64:	b90b      	cbnz	r3, 8007c6a <_fflush_r+0x1a>
 8007c66:	f7fe f937 	bl	8005ed8 <__sinit>
 8007c6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d0f3      	beq.n	8007c5a <_fflush_r+0xa>
 8007c72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007c74:	07d0      	lsls	r0, r2, #31
 8007c76:	d404      	bmi.n	8007c82 <_fflush_r+0x32>
 8007c78:	0599      	lsls	r1, r3, #22
 8007c7a:	d402      	bmi.n	8007c82 <_fflush_r+0x32>
 8007c7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c7e:	f7fe fb23 	bl	80062c8 <__retarget_lock_acquire_recursive>
 8007c82:	4628      	mov	r0, r5
 8007c84:	4621      	mov	r1, r4
 8007c86:	f7ff ff5d 	bl	8007b44 <__sflush_r>
 8007c8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c8c:	07da      	lsls	r2, r3, #31
 8007c8e:	4605      	mov	r5, r0
 8007c90:	d4e4      	bmi.n	8007c5c <_fflush_r+0xc>
 8007c92:	89a3      	ldrh	r3, [r4, #12]
 8007c94:	059b      	lsls	r3, r3, #22
 8007c96:	d4e1      	bmi.n	8007c5c <_fflush_r+0xc>
 8007c98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c9a:	f7fe fb16 	bl	80062ca <__retarget_lock_release_recursive>
 8007c9e:	e7dd      	b.n	8007c5c <_fflush_r+0xc>

08007ca0 <__swhatbuf_r>:
 8007ca0:	b570      	push	{r4, r5, r6, lr}
 8007ca2:	460c      	mov	r4, r1
 8007ca4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ca8:	2900      	cmp	r1, #0
 8007caa:	b096      	sub	sp, #88	; 0x58
 8007cac:	4615      	mov	r5, r2
 8007cae:	461e      	mov	r6, r3
 8007cb0:	da0d      	bge.n	8007cce <__swhatbuf_r+0x2e>
 8007cb2:	89a3      	ldrh	r3, [r4, #12]
 8007cb4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007cb8:	f04f 0100 	mov.w	r1, #0
 8007cbc:	bf0c      	ite	eq
 8007cbe:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007cc2:	2340      	movne	r3, #64	; 0x40
 8007cc4:	2000      	movs	r0, #0
 8007cc6:	6031      	str	r1, [r6, #0]
 8007cc8:	602b      	str	r3, [r5, #0]
 8007cca:	b016      	add	sp, #88	; 0x58
 8007ccc:	bd70      	pop	{r4, r5, r6, pc}
 8007cce:	466a      	mov	r2, sp
 8007cd0:	f000 f848 	bl	8007d64 <_fstat_r>
 8007cd4:	2800      	cmp	r0, #0
 8007cd6:	dbec      	blt.n	8007cb2 <__swhatbuf_r+0x12>
 8007cd8:	9901      	ldr	r1, [sp, #4]
 8007cda:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007cde:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007ce2:	4259      	negs	r1, r3
 8007ce4:	4159      	adcs	r1, r3
 8007ce6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007cea:	e7eb      	b.n	8007cc4 <__swhatbuf_r+0x24>

08007cec <__smakebuf_r>:
 8007cec:	898b      	ldrh	r3, [r1, #12]
 8007cee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007cf0:	079d      	lsls	r5, r3, #30
 8007cf2:	4606      	mov	r6, r0
 8007cf4:	460c      	mov	r4, r1
 8007cf6:	d507      	bpl.n	8007d08 <__smakebuf_r+0x1c>
 8007cf8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007cfc:	6023      	str	r3, [r4, #0]
 8007cfe:	6123      	str	r3, [r4, #16]
 8007d00:	2301      	movs	r3, #1
 8007d02:	6163      	str	r3, [r4, #20]
 8007d04:	b002      	add	sp, #8
 8007d06:	bd70      	pop	{r4, r5, r6, pc}
 8007d08:	ab01      	add	r3, sp, #4
 8007d0a:	466a      	mov	r2, sp
 8007d0c:	f7ff ffc8 	bl	8007ca0 <__swhatbuf_r>
 8007d10:	9900      	ldr	r1, [sp, #0]
 8007d12:	4605      	mov	r5, r0
 8007d14:	4630      	mov	r0, r6
 8007d16:	f7ff f9c9 	bl	80070ac <_malloc_r>
 8007d1a:	b948      	cbnz	r0, 8007d30 <__smakebuf_r+0x44>
 8007d1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d20:	059a      	lsls	r2, r3, #22
 8007d22:	d4ef      	bmi.n	8007d04 <__smakebuf_r+0x18>
 8007d24:	f023 0303 	bic.w	r3, r3, #3
 8007d28:	f043 0302 	orr.w	r3, r3, #2
 8007d2c:	81a3      	strh	r3, [r4, #12]
 8007d2e:	e7e3      	b.n	8007cf8 <__smakebuf_r+0xc>
 8007d30:	89a3      	ldrh	r3, [r4, #12]
 8007d32:	6020      	str	r0, [r4, #0]
 8007d34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d38:	81a3      	strh	r3, [r4, #12]
 8007d3a:	9b00      	ldr	r3, [sp, #0]
 8007d3c:	6163      	str	r3, [r4, #20]
 8007d3e:	9b01      	ldr	r3, [sp, #4]
 8007d40:	6120      	str	r0, [r4, #16]
 8007d42:	b15b      	cbz	r3, 8007d5c <__smakebuf_r+0x70>
 8007d44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d48:	4630      	mov	r0, r6
 8007d4a:	f000 f81d 	bl	8007d88 <_isatty_r>
 8007d4e:	b128      	cbz	r0, 8007d5c <__smakebuf_r+0x70>
 8007d50:	89a3      	ldrh	r3, [r4, #12]
 8007d52:	f023 0303 	bic.w	r3, r3, #3
 8007d56:	f043 0301 	orr.w	r3, r3, #1
 8007d5a:	81a3      	strh	r3, [r4, #12]
 8007d5c:	89a3      	ldrh	r3, [r4, #12]
 8007d5e:	431d      	orrs	r5, r3
 8007d60:	81a5      	strh	r5, [r4, #12]
 8007d62:	e7cf      	b.n	8007d04 <__smakebuf_r+0x18>

08007d64 <_fstat_r>:
 8007d64:	b538      	push	{r3, r4, r5, lr}
 8007d66:	4d07      	ldr	r5, [pc, #28]	; (8007d84 <_fstat_r+0x20>)
 8007d68:	2300      	movs	r3, #0
 8007d6a:	4604      	mov	r4, r0
 8007d6c:	4608      	mov	r0, r1
 8007d6e:	4611      	mov	r1, r2
 8007d70:	602b      	str	r3, [r5, #0]
 8007d72:	f7fa f95a 	bl	800202a <_fstat>
 8007d76:	1c43      	adds	r3, r0, #1
 8007d78:	d102      	bne.n	8007d80 <_fstat_r+0x1c>
 8007d7a:	682b      	ldr	r3, [r5, #0]
 8007d7c:	b103      	cbz	r3, 8007d80 <_fstat_r+0x1c>
 8007d7e:	6023      	str	r3, [r4, #0]
 8007d80:	bd38      	pop	{r3, r4, r5, pc}
 8007d82:	bf00      	nop
 8007d84:	20000408 	.word	0x20000408

08007d88 <_isatty_r>:
 8007d88:	b538      	push	{r3, r4, r5, lr}
 8007d8a:	4d06      	ldr	r5, [pc, #24]	; (8007da4 <_isatty_r+0x1c>)
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	4604      	mov	r4, r0
 8007d90:	4608      	mov	r0, r1
 8007d92:	602b      	str	r3, [r5, #0]
 8007d94:	f7fa f959 	bl	800204a <_isatty>
 8007d98:	1c43      	adds	r3, r0, #1
 8007d9a:	d102      	bne.n	8007da2 <_isatty_r+0x1a>
 8007d9c:	682b      	ldr	r3, [r5, #0]
 8007d9e:	b103      	cbz	r3, 8007da2 <_isatty_r+0x1a>
 8007da0:	6023      	str	r3, [r4, #0]
 8007da2:	bd38      	pop	{r3, r4, r5, pc}
 8007da4:	20000408 	.word	0x20000408

08007da8 <_sbrk_r>:
 8007da8:	b538      	push	{r3, r4, r5, lr}
 8007daa:	4d06      	ldr	r5, [pc, #24]	; (8007dc4 <_sbrk_r+0x1c>)
 8007dac:	2300      	movs	r3, #0
 8007dae:	4604      	mov	r4, r0
 8007db0:	4608      	mov	r0, r1
 8007db2:	602b      	str	r3, [r5, #0]
 8007db4:	f7fa f962 	bl	800207c <_sbrk>
 8007db8:	1c43      	adds	r3, r0, #1
 8007dba:	d102      	bne.n	8007dc2 <_sbrk_r+0x1a>
 8007dbc:	682b      	ldr	r3, [r5, #0]
 8007dbe:	b103      	cbz	r3, 8007dc2 <_sbrk_r+0x1a>
 8007dc0:	6023      	str	r3, [r4, #0]
 8007dc2:	bd38      	pop	{r3, r4, r5, pc}
 8007dc4:	20000408 	.word	0x20000408

08007dc8 <memcpy>:
 8007dc8:	440a      	add	r2, r1
 8007dca:	4291      	cmp	r1, r2
 8007dcc:	f100 33ff 	add.w	r3, r0, #4294967295
 8007dd0:	d100      	bne.n	8007dd4 <memcpy+0xc>
 8007dd2:	4770      	bx	lr
 8007dd4:	b510      	push	{r4, lr}
 8007dd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007dda:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007dde:	4291      	cmp	r1, r2
 8007de0:	d1f9      	bne.n	8007dd6 <memcpy+0xe>
 8007de2:	bd10      	pop	{r4, pc}

08007de4 <__assert_func>:
 8007de4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007de6:	4614      	mov	r4, r2
 8007de8:	461a      	mov	r2, r3
 8007dea:	4b09      	ldr	r3, [pc, #36]	; (8007e10 <__assert_func+0x2c>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4605      	mov	r5, r0
 8007df0:	68d8      	ldr	r0, [r3, #12]
 8007df2:	b14c      	cbz	r4, 8007e08 <__assert_func+0x24>
 8007df4:	4b07      	ldr	r3, [pc, #28]	; (8007e14 <__assert_func+0x30>)
 8007df6:	9100      	str	r1, [sp, #0]
 8007df8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007dfc:	4906      	ldr	r1, [pc, #24]	; (8007e18 <__assert_func+0x34>)
 8007dfe:	462b      	mov	r3, r5
 8007e00:	f000 f844 	bl	8007e8c <fiprintf>
 8007e04:	f000 f854 	bl	8007eb0 <abort>
 8007e08:	4b04      	ldr	r3, [pc, #16]	; (8007e1c <__assert_func+0x38>)
 8007e0a:	461c      	mov	r4, r3
 8007e0c:	e7f3      	b.n	8007df6 <__assert_func+0x12>
 8007e0e:	bf00      	nop
 8007e10:	20000064 	.word	0x20000064
 8007e14:	080087cf 	.word	0x080087cf
 8007e18:	080087dc 	.word	0x080087dc
 8007e1c:	0800880a 	.word	0x0800880a

08007e20 <_calloc_r>:
 8007e20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007e22:	fba1 2402 	umull	r2, r4, r1, r2
 8007e26:	b94c      	cbnz	r4, 8007e3c <_calloc_r+0x1c>
 8007e28:	4611      	mov	r1, r2
 8007e2a:	9201      	str	r2, [sp, #4]
 8007e2c:	f7ff f93e 	bl	80070ac <_malloc_r>
 8007e30:	9a01      	ldr	r2, [sp, #4]
 8007e32:	4605      	mov	r5, r0
 8007e34:	b930      	cbnz	r0, 8007e44 <_calloc_r+0x24>
 8007e36:	4628      	mov	r0, r5
 8007e38:	b003      	add	sp, #12
 8007e3a:	bd30      	pop	{r4, r5, pc}
 8007e3c:	220c      	movs	r2, #12
 8007e3e:	6002      	str	r2, [r0, #0]
 8007e40:	2500      	movs	r5, #0
 8007e42:	e7f8      	b.n	8007e36 <_calloc_r+0x16>
 8007e44:	4621      	mov	r1, r4
 8007e46:	f7fe f9c3 	bl	80061d0 <memset>
 8007e4a:	e7f4      	b.n	8007e36 <_calloc_r+0x16>

08007e4c <__ascii_mbtowc>:
 8007e4c:	b082      	sub	sp, #8
 8007e4e:	b901      	cbnz	r1, 8007e52 <__ascii_mbtowc+0x6>
 8007e50:	a901      	add	r1, sp, #4
 8007e52:	b142      	cbz	r2, 8007e66 <__ascii_mbtowc+0x1a>
 8007e54:	b14b      	cbz	r3, 8007e6a <__ascii_mbtowc+0x1e>
 8007e56:	7813      	ldrb	r3, [r2, #0]
 8007e58:	600b      	str	r3, [r1, #0]
 8007e5a:	7812      	ldrb	r2, [r2, #0]
 8007e5c:	1e10      	subs	r0, r2, #0
 8007e5e:	bf18      	it	ne
 8007e60:	2001      	movne	r0, #1
 8007e62:	b002      	add	sp, #8
 8007e64:	4770      	bx	lr
 8007e66:	4610      	mov	r0, r2
 8007e68:	e7fb      	b.n	8007e62 <__ascii_mbtowc+0x16>
 8007e6a:	f06f 0001 	mvn.w	r0, #1
 8007e6e:	e7f8      	b.n	8007e62 <__ascii_mbtowc+0x16>

08007e70 <__ascii_wctomb>:
 8007e70:	b149      	cbz	r1, 8007e86 <__ascii_wctomb+0x16>
 8007e72:	2aff      	cmp	r2, #255	; 0xff
 8007e74:	bf85      	ittet	hi
 8007e76:	238a      	movhi	r3, #138	; 0x8a
 8007e78:	6003      	strhi	r3, [r0, #0]
 8007e7a:	700a      	strbls	r2, [r1, #0]
 8007e7c:	f04f 30ff 	movhi.w	r0, #4294967295
 8007e80:	bf98      	it	ls
 8007e82:	2001      	movls	r0, #1
 8007e84:	4770      	bx	lr
 8007e86:	4608      	mov	r0, r1
 8007e88:	4770      	bx	lr
	...

08007e8c <fiprintf>:
 8007e8c:	b40e      	push	{r1, r2, r3}
 8007e8e:	b503      	push	{r0, r1, lr}
 8007e90:	4601      	mov	r1, r0
 8007e92:	ab03      	add	r3, sp, #12
 8007e94:	4805      	ldr	r0, [pc, #20]	; (8007eac <fiprintf+0x20>)
 8007e96:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e9a:	6800      	ldr	r0, [r0, #0]
 8007e9c:	9301      	str	r3, [sp, #4]
 8007e9e:	f7ff fd37 	bl	8007910 <_vfiprintf_r>
 8007ea2:	b002      	add	sp, #8
 8007ea4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ea8:	b003      	add	sp, #12
 8007eaa:	4770      	bx	lr
 8007eac:	20000064 	.word	0x20000064

08007eb0 <abort>:
 8007eb0:	b508      	push	{r3, lr}
 8007eb2:	2006      	movs	r0, #6
 8007eb4:	f000 f82c 	bl	8007f10 <raise>
 8007eb8:	2001      	movs	r0, #1
 8007eba:	f7fa f883 	bl	8001fc4 <_exit>

08007ebe <_raise_r>:
 8007ebe:	291f      	cmp	r1, #31
 8007ec0:	b538      	push	{r3, r4, r5, lr}
 8007ec2:	4604      	mov	r4, r0
 8007ec4:	460d      	mov	r5, r1
 8007ec6:	d904      	bls.n	8007ed2 <_raise_r+0x14>
 8007ec8:	2316      	movs	r3, #22
 8007eca:	6003      	str	r3, [r0, #0]
 8007ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8007ed0:	bd38      	pop	{r3, r4, r5, pc}
 8007ed2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007ed4:	b112      	cbz	r2, 8007edc <_raise_r+0x1e>
 8007ed6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007eda:	b94b      	cbnz	r3, 8007ef0 <_raise_r+0x32>
 8007edc:	4620      	mov	r0, r4
 8007ede:	f000 f831 	bl	8007f44 <_getpid_r>
 8007ee2:	462a      	mov	r2, r5
 8007ee4:	4601      	mov	r1, r0
 8007ee6:	4620      	mov	r0, r4
 8007ee8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007eec:	f000 b818 	b.w	8007f20 <_kill_r>
 8007ef0:	2b01      	cmp	r3, #1
 8007ef2:	d00a      	beq.n	8007f0a <_raise_r+0x4c>
 8007ef4:	1c59      	adds	r1, r3, #1
 8007ef6:	d103      	bne.n	8007f00 <_raise_r+0x42>
 8007ef8:	2316      	movs	r3, #22
 8007efa:	6003      	str	r3, [r0, #0]
 8007efc:	2001      	movs	r0, #1
 8007efe:	e7e7      	b.n	8007ed0 <_raise_r+0x12>
 8007f00:	2400      	movs	r4, #0
 8007f02:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007f06:	4628      	mov	r0, r5
 8007f08:	4798      	blx	r3
 8007f0a:	2000      	movs	r0, #0
 8007f0c:	e7e0      	b.n	8007ed0 <_raise_r+0x12>
	...

08007f10 <raise>:
 8007f10:	4b02      	ldr	r3, [pc, #8]	; (8007f1c <raise+0xc>)
 8007f12:	4601      	mov	r1, r0
 8007f14:	6818      	ldr	r0, [r3, #0]
 8007f16:	f7ff bfd2 	b.w	8007ebe <_raise_r>
 8007f1a:	bf00      	nop
 8007f1c:	20000064 	.word	0x20000064

08007f20 <_kill_r>:
 8007f20:	b538      	push	{r3, r4, r5, lr}
 8007f22:	4d07      	ldr	r5, [pc, #28]	; (8007f40 <_kill_r+0x20>)
 8007f24:	2300      	movs	r3, #0
 8007f26:	4604      	mov	r4, r0
 8007f28:	4608      	mov	r0, r1
 8007f2a:	4611      	mov	r1, r2
 8007f2c:	602b      	str	r3, [r5, #0]
 8007f2e:	f7fa f839 	bl	8001fa4 <_kill>
 8007f32:	1c43      	adds	r3, r0, #1
 8007f34:	d102      	bne.n	8007f3c <_kill_r+0x1c>
 8007f36:	682b      	ldr	r3, [r5, #0]
 8007f38:	b103      	cbz	r3, 8007f3c <_kill_r+0x1c>
 8007f3a:	6023      	str	r3, [r4, #0]
 8007f3c:	bd38      	pop	{r3, r4, r5, pc}
 8007f3e:	bf00      	nop
 8007f40:	20000408 	.word	0x20000408

08007f44 <_getpid_r>:
 8007f44:	f7fa b826 	b.w	8001f94 <_getpid>

08007f48 <sqrt>:
 8007f48:	b538      	push	{r3, r4, r5, lr}
 8007f4a:	ed2d 8b02 	vpush	{d8}
 8007f4e:	ec55 4b10 	vmov	r4, r5, d0
 8007f52:	f000 f9cf 	bl	80082f4 <__ieee754_sqrt>
 8007f56:	4622      	mov	r2, r4
 8007f58:	462b      	mov	r3, r5
 8007f5a:	4620      	mov	r0, r4
 8007f5c:	4629      	mov	r1, r5
 8007f5e:	eeb0 8a40 	vmov.f32	s16, s0
 8007f62:	eef0 8a60 	vmov.f32	s17, s1
 8007f66:	f7f8 fde9 	bl	8000b3c <__aeabi_dcmpun>
 8007f6a:	b990      	cbnz	r0, 8007f92 <sqrt+0x4a>
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	2300      	movs	r3, #0
 8007f70:	4620      	mov	r0, r4
 8007f72:	4629      	mov	r1, r5
 8007f74:	f7f8 fdba 	bl	8000aec <__aeabi_dcmplt>
 8007f78:	b158      	cbz	r0, 8007f92 <sqrt+0x4a>
 8007f7a:	f7fe f97b 	bl	8006274 <__errno>
 8007f7e:	2321      	movs	r3, #33	; 0x21
 8007f80:	6003      	str	r3, [r0, #0]
 8007f82:	2200      	movs	r2, #0
 8007f84:	2300      	movs	r3, #0
 8007f86:	4610      	mov	r0, r2
 8007f88:	4619      	mov	r1, r3
 8007f8a:	f7f8 fc67 	bl	800085c <__aeabi_ddiv>
 8007f8e:	ec41 0b18 	vmov	d8, r0, r1
 8007f92:	eeb0 0a48 	vmov.f32	s0, s16
 8007f96:	eef0 0a68 	vmov.f32	s1, s17
 8007f9a:	ecbd 8b02 	vpop	{d8}
 8007f9e:	bd38      	pop	{r3, r4, r5, pc}

08007fa0 <atan>:
 8007fa0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fa4:	ec55 4b10 	vmov	r4, r5, d0
 8007fa8:	4bc3      	ldr	r3, [pc, #780]	; (80082b8 <atan+0x318>)
 8007faa:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007fae:	429e      	cmp	r6, r3
 8007fb0:	46ab      	mov	fp, r5
 8007fb2:	dd18      	ble.n	8007fe6 <atan+0x46>
 8007fb4:	4bc1      	ldr	r3, [pc, #772]	; (80082bc <atan+0x31c>)
 8007fb6:	429e      	cmp	r6, r3
 8007fb8:	dc01      	bgt.n	8007fbe <atan+0x1e>
 8007fba:	d109      	bne.n	8007fd0 <atan+0x30>
 8007fbc:	b144      	cbz	r4, 8007fd0 <atan+0x30>
 8007fbe:	4622      	mov	r2, r4
 8007fc0:	462b      	mov	r3, r5
 8007fc2:	4620      	mov	r0, r4
 8007fc4:	4629      	mov	r1, r5
 8007fc6:	f7f8 f969 	bl	800029c <__adddf3>
 8007fca:	4604      	mov	r4, r0
 8007fcc:	460d      	mov	r5, r1
 8007fce:	e006      	b.n	8007fde <atan+0x3e>
 8007fd0:	f1bb 0f00 	cmp.w	fp, #0
 8007fd4:	f300 8131 	bgt.w	800823a <atan+0x29a>
 8007fd8:	a59b      	add	r5, pc, #620	; (adr r5, 8008248 <atan+0x2a8>)
 8007fda:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007fde:	ec45 4b10 	vmov	d0, r4, r5
 8007fe2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fe6:	4bb6      	ldr	r3, [pc, #728]	; (80082c0 <atan+0x320>)
 8007fe8:	429e      	cmp	r6, r3
 8007fea:	dc14      	bgt.n	8008016 <atan+0x76>
 8007fec:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8007ff0:	429e      	cmp	r6, r3
 8007ff2:	dc0d      	bgt.n	8008010 <atan+0x70>
 8007ff4:	a396      	add	r3, pc, #600	; (adr r3, 8008250 <atan+0x2b0>)
 8007ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ffa:	ee10 0a10 	vmov	r0, s0
 8007ffe:	4629      	mov	r1, r5
 8008000:	f7f8 f94c 	bl	800029c <__adddf3>
 8008004:	4baf      	ldr	r3, [pc, #700]	; (80082c4 <atan+0x324>)
 8008006:	2200      	movs	r2, #0
 8008008:	f7f8 fd8e 	bl	8000b28 <__aeabi_dcmpgt>
 800800c:	2800      	cmp	r0, #0
 800800e:	d1e6      	bne.n	8007fde <atan+0x3e>
 8008010:	f04f 3aff 	mov.w	sl, #4294967295
 8008014:	e02b      	b.n	800806e <atan+0xce>
 8008016:	f000 f963 	bl	80082e0 <fabs>
 800801a:	4bab      	ldr	r3, [pc, #684]	; (80082c8 <atan+0x328>)
 800801c:	429e      	cmp	r6, r3
 800801e:	ec55 4b10 	vmov	r4, r5, d0
 8008022:	f300 80bf 	bgt.w	80081a4 <atan+0x204>
 8008026:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800802a:	429e      	cmp	r6, r3
 800802c:	f300 80a0 	bgt.w	8008170 <atan+0x1d0>
 8008030:	ee10 2a10 	vmov	r2, s0
 8008034:	ee10 0a10 	vmov	r0, s0
 8008038:	462b      	mov	r3, r5
 800803a:	4629      	mov	r1, r5
 800803c:	f7f8 f92e 	bl	800029c <__adddf3>
 8008040:	4ba0      	ldr	r3, [pc, #640]	; (80082c4 <atan+0x324>)
 8008042:	2200      	movs	r2, #0
 8008044:	f7f8 f928 	bl	8000298 <__aeabi_dsub>
 8008048:	2200      	movs	r2, #0
 800804a:	4606      	mov	r6, r0
 800804c:	460f      	mov	r7, r1
 800804e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008052:	4620      	mov	r0, r4
 8008054:	4629      	mov	r1, r5
 8008056:	f7f8 f921 	bl	800029c <__adddf3>
 800805a:	4602      	mov	r2, r0
 800805c:	460b      	mov	r3, r1
 800805e:	4630      	mov	r0, r6
 8008060:	4639      	mov	r1, r7
 8008062:	f7f8 fbfb 	bl	800085c <__aeabi_ddiv>
 8008066:	f04f 0a00 	mov.w	sl, #0
 800806a:	4604      	mov	r4, r0
 800806c:	460d      	mov	r5, r1
 800806e:	4622      	mov	r2, r4
 8008070:	462b      	mov	r3, r5
 8008072:	4620      	mov	r0, r4
 8008074:	4629      	mov	r1, r5
 8008076:	f7f8 fac7 	bl	8000608 <__aeabi_dmul>
 800807a:	4602      	mov	r2, r0
 800807c:	460b      	mov	r3, r1
 800807e:	4680      	mov	r8, r0
 8008080:	4689      	mov	r9, r1
 8008082:	f7f8 fac1 	bl	8000608 <__aeabi_dmul>
 8008086:	a374      	add	r3, pc, #464	; (adr r3, 8008258 <atan+0x2b8>)
 8008088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800808c:	4606      	mov	r6, r0
 800808e:	460f      	mov	r7, r1
 8008090:	f7f8 faba 	bl	8000608 <__aeabi_dmul>
 8008094:	a372      	add	r3, pc, #456	; (adr r3, 8008260 <atan+0x2c0>)
 8008096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800809a:	f7f8 f8ff 	bl	800029c <__adddf3>
 800809e:	4632      	mov	r2, r6
 80080a0:	463b      	mov	r3, r7
 80080a2:	f7f8 fab1 	bl	8000608 <__aeabi_dmul>
 80080a6:	a370      	add	r3, pc, #448	; (adr r3, 8008268 <atan+0x2c8>)
 80080a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ac:	f7f8 f8f6 	bl	800029c <__adddf3>
 80080b0:	4632      	mov	r2, r6
 80080b2:	463b      	mov	r3, r7
 80080b4:	f7f8 faa8 	bl	8000608 <__aeabi_dmul>
 80080b8:	a36d      	add	r3, pc, #436	; (adr r3, 8008270 <atan+0x2d0>)
 80080ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080be:	f7f8 f8ed 	bl	800029c <__adddf3>
 80080c2:	4632      	mov	r2, r6
 80080c4:	463b      	mov	r3, r7
 80080c6:	f7f8 fa9f 	bl	8000608 <__aeabi_dmul>
 80080ca:	a36b      	add	r3, pc, #428	; (adr r3, 8008278 <atan+0x2d8>)
 80080cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080d0:	f7f8 f8e4 	bl	800029c <__adddf3>
 80080d4:	4632      	mov	r2, r6
 80080d6:	463b      	mov	r3, r7
 80080d8:	f7f8 fa96 	bl	8000608 <__aeabi_dmul>
 80080dc:	a368      	add	r3, pc, #416	; (adr r3, 8008280 <atan+0x2e0>)
 80080de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e2:	f7f8 f8db 	bl	800029c <__adddf3>
 80080e6:	4642      	mov	r2, r8
 80080e8:	464b      	mov	r3, r9
 80080ea:	f7f8 fa8d 	bl	8000608 <__aeabi_dmul>
 80080ee:	a366      	add	r3, pc, #408	; (adr r3, 8008288 <atan+0x2e8>)
 80080f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080f4:	4680      	mov	r8, r0
 80080f6:	4689      	mov	r9, r1
 80080f8:	4630      	mov	r0, r6
 80080fa:	4639      	mov	r1, r7
 80080fc:	f7f8 fa84 	bl	8000608 <__aeabi_dmul>
 8008100:	a363      	add	r3, pc, #396	; (adr r3, 8008290 <atan+0x2f0>)
 8008102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008106:	f7f8 f8c7 	bl	8000298 <__aeabi_dsub>
 800810a:	4632      	mov	r2, r6
 800810c:	463b      	mov	r3, r7
 800810e:	f7f8 fa7b 	bl	8000608 <__aeabi_dmul>
 8008112:	a361      	add	r3, pc, #388	; (adr r3, 8008298 <atan+0x2f8>)
 8008114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008118:	f7f8 f8be 	bl	8000298 <__aeabi_dsub>
 800811c:	4632      	mov	r2, r6
 800811e:	463b      	mov	r3, r7
 8008120:	f7f8 fa72 	bl	8000608 <__aeabi_dmul>
 8008124:	a35e      	add	r3, pc, #376	; (adr r3, 80082a0 <atan+0x300>)
 8008126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800812a:	f7f8 f8b5 	bl	8000298 <__aeabi_dsub>
 800812e:	4632      	mov	r2, r6
 8008130:	463b      	mov	r3, r7
 8008132:	f7f8 fa69 	bl	8000608 <__aeabi_dmul>
 8008136:	a35c      	add	r3, pc, #368	; (adr r3, 80082a8 <atan+0x308>)
 8008138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800813c:	f7f8 f8ac 	bl	8000298 <__aeabi_dsub>
 8008140:	4632      	mov	r2, r6
 8008142:	463b      	mov	r3, r7
 8008144:	f7f8 fa60 	bl	8000608 <__aeabi_dmul>
 8008148:	4602      	mov	r2, r0
 800814a:	460b      	mov	r3, r1
 800814c:	4640      	mov	r0, r8
 800814e:	4649      	mov	r1, r9
 8008150:	f7f8 f8a4 	bl	800029c <__adddf3>
 8008154:	4622      	mov	r2, r4
 8008156:	462b      	mov	r3, r5
 8008158:	f7f8 fa56 	bl	8000608 <__aeabi_dmul>
 800815c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8008160:	4602      	mov	r2, r0
 8008162:	460b      	mov	r3, r1
 8008164:	d14b      	bne.n	80081fe <atan+0x25e>
 8008166:	4620      	mov	r0, r4
 8008168:	4629      	mov	r1, r5
 800816a:	f7f8 f895 	bl	8000298 <__aeabi_dsub>
 800816e:	e72c      	b.n	8007fca <atan+0x2a>
 8008170:	ee10 0a10 	vmov	r0, s0
 8008174:	4b53      	ldr	r3, [pc, #332]	; (80082c4 <atan+0x324>)
 8008176:	2200      	movs	r2, #0
 8008178:	4629      	mov	r1, r5
 800817a:	f7f8 f88d 	bl	8000298 <__aeabi_dsub>
 800817e:	4b51      	ldr	r3, [pc, #324]	; (80082c4 <atan+0x324>)
 8008180:	4606      	mov	r6, r0
 8008182:	460f      	mov	r7, r1
 8008184:	2200      	movs	r2, #0
 8008186:	4620      	mov	r0, r4
 8008188:	4629      	mov	r1, r5
 800818a:	f7f8 f887 	bl	800029c <__adddf3>
 800818e:	4602      	mov	r2, r0
 8008190:	460b      	mov	r3, r1
 8008192:	4630      	mov	r0, r6
 8008194:	4639      	mov	r1, r7
 8008196:	f7f8 fb61 	bl	800085c <__aeabi_ddiv>
 800819a:	f04f 0a01 	mov.w	sl, #1
 800819e:	4604      	mov	r4, r0
 80081a0:	460d      	mov	r5, r1
 80081a2:	e764      	b.n	800806e <atan+0xce>
 80081a4:	4b49      	ldr	r3, [pc, #292]	; (80082cc <atan+0x32c>)
 80081a6:	429e      	cmp	r6, r3
 80081a8:	da1d      	bge.n	80081e6 <atan+0x246>
 80081aa:	ee10 0a10 	vmov	r0, s0
 80081ae:	4b48      	ldr	r3, [pc, #288]	; (80082d0 <atan+0x330>)
 80081b0:	2200      	movs	r2, #0
 80081b2:	4629      	mov	r1, r5
 80081b4:	f7f8 f870 	bl	8000298 <__aeabi_dsub>
 80081b8:	4b45      	ldr	r3, [pc, #276]	; (80082d0 <atan+0x330>)
 80081ba:	4606      	mov	r6, r0
 80081bc:	460f      	mov	r7, r1
 80081be:	2200      	movs	r2, #0
 80081c0:	4620      	mov	r0, r4
 80081c2:	4629      	mov	r1, r5
 80081c4:	f7f8 fa20 	bl	8000608 <__aeabi_dmul>
 80081c8:	4b3e      	ldr	r3, [pc, #248]	; (80082c4 <atan+0x324>)
 80081ca:	2200      	movs	r2, #0
 80081cc:	f7f8 f866 	bl	800029c <__adddf3>
 80081d0:	4602      	mov	r2, r0
 80081d2:	460b      	mov	r3, r1
 80081d4:	4630      	mov	r0, r6
 80081d6:	4639      	mov	r1, r7
 80081d8:	f7f8 fb40 	bl	800085c <__aeabi_ddiv>
 80081dc:	f04f 0a02 	mov.w	sl, #2
 80081e0:	4604      	mov	r4, r0
 80081e2:	460d      	mov	r5, r1
 80081e4:	e743      	b.n	800806e <atan+0xce>
 80081e6:	462b      	mov	r3, r5
 80081e8:	ee10 2a10 	vmov	r2, s0
 80081ec:	4939      	ldr	r1, [pc, #228]	; (80082d4 <atan+0x334>)
 80081ee:	2000      	movs	r0, #0
 80081f0:	f7f8 fb34 	bl	800085c <__aeabi_ddiv>
 80081f4:	f04f 0a03 	mov.w	sl, #3
 80081f8:	4604      	mov	r4, r0
 80081fa:	460d      	mov	r5, r1
 80081fc:	e737      	b.n	800806e <atan+0xce>
 80081fe:	4b36      	ldr	r3, [pc, #216]	; (80082d8 <atan+0x338>)
 8008200:	4e36      	ldr	r6, [pc, #216]	; (80082dc <atan+0x33c>)
 8008202:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800820a:	f7f8 f845 	bl	8000298 <__aeabi_dsub>
 800820e:	4622      	mov	r2, r4
 8008210:	462b      	mov	r3, r5
 8008212:	f7f8 f841 	bl	8000298 <__aeabi_dsub>
 8008216:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800821a:	4602      	mov	r2, r0
 800821c:	460b      	mov	r3, r1
 800821e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8008222:	f7f8 f839 	bl	8000298 <__aeabi_dsub>
 8008226:	f1bb 0f00 	cmp.w	fp, #0
 800822a:	4604      	mov	r4, r0
 800822c:	460d      	mov	r5, r1
 800822e:	f6bf aed6 	bge.w	8007fde <atan+0x3e>
 8008232:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008236:	461d      	mov	r5, r3
 8008238:	e6d1      	b.n	8007fde <atan+0x3e>
 800823a:	a51d      	add	r5, pc, #116	; (adr r5, 80082b0 <atan+0x310>)
 800823c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008240:	e6cd      	b.n	8007fde <atan+0x3e>
 8008242:	bf00      	nop
 8008244:	f3af 8000 	nop.w
 8008248:	54442d18 	.word	0x54442d18
 800824c:	bff921fb 	.word	0xbff921fb
 8008250:	8800759c 	.word	0x8800759c
 8008254:	7e37e43c 	.word	0x7e37e43c
 8008258:	e322da11 	.word	0xe322da11
 800825c:	3f90ad3a 	.word	0x3f90ad3a
 8008260:	24760deb 	.word	0x24760deb
 8008264:	3fa97b4b 	.word	0x3fa97b4b
 8008268:	a0d03d51 	.word	0xa0d03d51
 800826c:	3fb10d66 	.word	0x3fb10d66
 8008270:	c54c206e 	.word	0xc54c206e
 8008274:	3fb745cd 	.word	0x3fb745cd
 8008278:	920083ff 	.word	0x920083ff
 800827c:	3fc24924 	.word	0x3fc24924
 8008280:	5555550d 	.word	0x5555550d
 8008284:	3fd55555 	.word	0x3fd55555
 8008288:	2c6a6c2f 	.word	0x2c6a6c2f
 800828c:	bfa2b444 	.word	0xbfa2b444
 8008290:	52defd9a 	.word	0x52defd9a
 8008294:	3fadde2d 	.word	0x3fadde2d
 8008298:	af749a6d 	.word	0xaf749a6d
 800829c:	3fb3b0f2 	.word	0x3fb3b0f2
 80082a0:	fe231671 	.word	0xfe231671
 80082a4:	3fbc71c6 	.word	0x3fbc71c6
 80082a8:	9998ebc4 	.word	0x9998ebc4
 80082ac:	3fc99999 	.word	0x3fc99999
 80082b0:	54442d18 	.word	0x54442d18
 80082b4:	3ff921fb 	.word	0x3ff921fb
 80082b8:	440fffff 	.word	0x440fffff
 80082bc:	7ff00000 	.word	0x7ff00000
 80082c0:	3fdbffff 	.word	0x3fdbffff
 80082c4:	3ff00000 	.word	0x3ff00000
 80082c8:	3ff2ffff 	.word	0x3ff2ffff
 80082cc:	40038000 	.word	0x40038000
 80082d0:	3ff80000 	.word	0x3ff80000
 80082d4:	bff00000 	.word	0xbff00000
 80082d8:	08008930 	.word	0x08008930
 80082dc:	08008910 	.word	0x08008910

080082e0 <fabs>:
 80082e0:	ec51 0b10 	vmov	r0, r1, d0
 80082e4:	ee10 2a10 	vmov	r2, s0
 80082e8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80082ec:	ec43 2b10 	vmov	d0, r2, r3
 80082f0:	4770      	bx	lr
	...

080082f4 <__ieee754_sqrt>:
 80082f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082f8:	ec55 4b10 	vmov	r4, r5, d0
 80082fc:	4e67      	ldr	r6, [pc, #412]	; (800849c <__ieee754_sqrt+0x1a8>)
 80082fe:	43ae      	bics	r6, r5
 8008300:	ee10 0a10 	vmov	r0, s0
 8008304:	ee10 2a10 	vmov	r2, s0
 8008308:	4629      	mov	r1, r5
 800830a:	462b      	mov	r3, r5
 800830c:	d10d      	bne.n	800832a <__ieee754_sqrt+0x36>
 800830e:	f7f8 f97b 	bl	8000608 <__aeabi_dmul>
 8008312:	4602      	mov	r2, r0
 8008314:	460b      	mov	r3, r1
 8008316:	4620      	mov	r0, r4
 8008318:	4629      	mov	r1, r5
 800831a:	f7f7 ffbf 	bl	800029c <__adddf3>
 800831e:	4604      	mov	r4, r0
 8008320:	460d      	mov	r5, r1
 8008322:	ec45 4b10 	vmov	d0, r4, r5
 8008326:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800832a:	2d00      	cmp	r5, #0
 800832c:	dc0b      	bgt.n	8008346 <__ieee754_sqrt+0x52>
 800832e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008332:	4326      	orrs	r6, r4
 8008334:	d0f5      	beq.n	8008322 <__ieee754_sqrt+0x2e>
 8008336:	b135      	cbz	r5, 8008346 <__ieee754_sqrt+0x52>
 8008338:	f7f7 ffae 	bl	8000298 <__aeabi_dsub>
 800833c:	4602      	mov	r2, r0
 800833e:	460b      	mov	r3, r1
 8008340:	f7f8 fa8c 	bl	800085c <__aeabi_ddiv>
 8008344:	e7eb      	b.n	800831e <__ieee754_sqrt+0x2a>
 8008346:	1509      	asrs	r1, r1, #20
 8008348:	f000 808d 	beq.w	8008466 <__ieee754_sqrt+0x172>
 800834c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008350:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8008354:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008358:	07c9      	lsls	r1, r1, #31
 800835a:	bf5c      	itt	pl
 800835c:	005b      	lslpl	r3, r3, #1
 800835e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8008362:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008366:	bf58      	it	pl
 8008368:	0052      	lslpl	r2, r2, #1
 800836a:	2500      	movs	r5, #0
 800836c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8008370:	1076      	asrs	r6, r6, #1
 8008372:	0052      	lsls	r2, r2, #1
 8008374:	f04f 0e16 	mov.w	lr, #22
 8008378:	46ac      	mov	ip, r5
 800837a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800837e:	eb0c 0001 	add.w	r0, ip, r1
 8008382:	4298      	cmp	r0, r3
 8008384:	bfde      	ittt	le
 8008386:	1a1b      	suble	r3, r3, r0
 8008388:	eb00 0c01 	addle.w	ip, r0, r1
 800838c:	186d      	addle	r5, r5, r1
 800838e:	005b      	lsls	r3, r3, #1
 8008390:	f1be 0e01 	subs.w	lr, lr, #1
 8008394:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8008398:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800839c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80083a0:	d1ed      	bne.n	800837e <__ieee754_sqrt+0x8a>
 80083a2:	4674      	mov	r4, lr
 80083a4:	2720      	movs	r7, #32
 80083a6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80083aa:	4563      	cmp	r3, ip
 80083ac:	eb01 000e 	add.w	r0, r1, lr
 80083b0:	dc02      	bgt.n	80083b8 <__ieee754_sqrt+0xc4>
 80083b2:	d113      	bne.n	80083dc <__ieee754_sqrt+0xe8>
 80083b4:	4290      	cmp	r0, r2
 80083b6:	d811      	bhi.n	80083dc <__ieee754_sqrt+0xe8>
 80083b8:	2800      	cmp	r0, #0
 80083ba:	eb00 0e01 	add.w	lr, r0, r1
 80083be:	da57      	bge.n	8008470 <__ieee754_sqrt+0x17c>
 80083c0:	f1be 0f00 	cmp.w	lr, #0
 80083c4:	db54      	blt.n	8008470 <__ieee754_sqrt+0x17c>
 80083c6:	f10c 0801 	add.w	r8, ip, #1
 80083ca:	eba3 030c 	sub.w	r3, r3, ip
 80083ce:	4290      	cmp	r0, r2
 80083d0:	bf88      	it	hi
 80083d2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80083d6:	1a12      	subs	r2, r2, r0
 80083d8:	440c      	add	r4, r1
 80083da:	46c4      	mov	ip, r8
 80083dc:	005b      	lsls	r3, r3, #1
 80083de:	3f01      	subs	r7, #1
 80083e0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80083e4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80083e8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80083ec:	d1dd      	bne.n	80083aa <__ieee754_sqrt+0xb6>
 80083ee:	4313      	orrs	r3, r2
 80083f0:	d01b      	beq.n	800842a <__ieee754_sqrt+0x136>
 80083f2:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 80084a0 <__ieee754_sqrt+0x1ac>
 80083f6:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 80084a4 <__ieee754_sqrt+0x1b0>
 80083fa:	e9da 0100 	ldrd	r0, r1, [sl]
 80083fe:	e9db 2300 	ldrd	r2, r3, [fp]
 8008402:	f7f7 ff49 	bl	8000298 <__aeabi_dsub>
 8008406:	e9da 8900 	ldrd	r8, r9, [sl]
 800840a:	4602      	mov	r2, r0
 800840c:	460b      	mov	r3, r1
 800840e:	4640      	mov	r0, r8
 8008410:	4649      	mov	r1, r9
 8008412:	f7f8 fb75 	bl	8000b00 <__aeabi_dcmple>
 8008416:	b140      	cbz	r0, 800842a <__ieee754_sqrt+0x136>
 8008418:	f1b4 3fff 	cmp.w	r4, #4294967295
 800841c:	e9da 0100 	ldrd	r0, r1, [sl]
 8008420:	e9db 2300 	ldrd	r2, r3, [fp]
 8008424:	d126      	bne.n	8008474 <__ieee754_sqrt+0x180>
 8008426:	3501      	adds	r5, #1
 8008428:	463c      	mov	r4, r7
 800842a:	106a      	asrs	r2, r5, #1
 800842c:	0863      	lsrs	r3, r4, #1
 800842e:	07e9      	lsls	r1, r5, #31
 8008430:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8008434:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8008438:	bf48      	it	mi
 800843a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800843e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8008442:	461c      	mov	r4, r3
 8008444:	e76d      	b.n	8008322 <__ieee754_sqrt+0x2e>
 8008446:	0ad3      	lsrs	r3, r2, #11
 8008448:	3815      	subs	r0, #21
 800844a:	0552      	lsls	r2, r2, #21
 800844c:	2b00      	cmp	r3, #0
 800844e:	d0fa      	beq.n	8008446 <__ieee754_sqrt+0x152>
 8008450:	02dc      	lsls	r4, r3, #11
 8008452:	d50a      	bpl.n	800846a <__ieee754_sqrt+0x176>
 8008454:	f1c1 0420 	rsb	r4, r1, #32
 8008458:	fa22 f404 	lsr.w	r4, r2, r4
 800845c:	1e4d      	subs	r5, r1, #1
 800845e:	408a      	lsls	r2, r1
 8008460:	4323      	orrs	r3, r4
 8008462:	1b41      	subs	r1, r0, r5
 8008464:	e772      	b.n	800834c <__ieee754_sqrt+0x58>
 8008466:	4608      	mov	r0, r1
 8008468:	e7f0      	b.n	800844c <__ieee754_sqrt+0x158>
 800846a:	005b      	lsls	r3, r3, #1
 800846c:	3101      	adds	r1, #1
 800846e:	e7ef      	b.n	8008450 <__ieee754_sqrt+0x15c>
 8008470:	46e0      	mov	r8, ip
 8008472:	e7aa      	b.n	80083ca <__ieee754_sqrt+0xd6>
 8008474:	f7f7 ff12 	bl	800029c <__adddf3>
 8008478:	e9da 8900 	ldrd	r8, r9, [sl]
 800847c:	4602      	mov	r2, r0
 800847e:	460b      	mov	r3, r1
 8008480:	4640      	mov	r0, r8
 8008482:	4649      	mov	r1, r9
 8008484:	f7f8 fb32 	bl	8000aec <__aeabi_dcmplt>
 8008488:	b120      	cbz	r0, 8008494 <__ieee754_sqrt+0x1a0>
 800848a:	1ca0      	adds	r0, r4, #2
 800848c:	bf08      	it	eq
 800848e:	3501      	addeq	r5, #1
 8008490:	3402      	adds	r4, #2
 8008492:	e7ca      	b.n	800842a <__ieee754_sqrt+0x136>
 8008494:	3401      	adds	r4, #1
 8008496:	f024 0401 	bic.w	r4, r4, #1
 800849a:	e7c6      	b.n	800842a <__ieee754_sqrt+0x136>
 800849c:	7ff00000 	.word	0x7ff00000
 80084a0:	200001d8 	.word	0x200001d8
 80084a4:	200001e0 	.word	0x200001e0

080084a8 <_init>:
 80084a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084aa:	bf00      	nop
 80084ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084ae:	bc08      	pop	{r3}
 80084b0:	469e      	mov	lr, r3
 80084b2:	4770      	bx	lr

080084b4 <_fini>:
 80084b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084b6:	bf00      	nop
 80084b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084ba:	bc08      	pop	{r3}
 80084bc:	469e      	mov	lr, r3
 80084be:	4770      	bx	lr
